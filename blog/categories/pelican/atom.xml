<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pelican | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/pelican/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-10-21T21:42:59+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Set a Pelican Based Blog on Ubuntu]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/01/26/set-a-pelican-based-blog-on-ubuntu/"/>
    <updated>2014-01-26T16:39:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/01/26/set-a-pelican-based-blog-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Install python-virtualenv:</p>

<pre><code>    sudo apt-get install python-virtualenv
</code></pre>

<p>Install the virtualenv Wrapper:</p>

<pre><code>    sudo apt-get install virtualenvwrapper
</code></pre>

<p>Now create the directory for holding the virtual environment:</p>

<pre><code>    mkdir ~/pyv
</code></pre>

<p>Edit the virtualenv resource file:</p>

<pre><code>    export WORKON_HOME="/home/Trusty/pyv"
    export PROJECT_HOME="/home/Trusty/pyv"
    #source /usr/bin/virtualenvwrapper.sh
</code></pre>

<p>Here we meet the problem, it says cannot find the /usr/bin/virtualenvwrapper.sh, I got the answer from the stackoverflow:</p>

<pre><code>    From /usr/share/doc/virtualenvwrapper/README.Debian:

    In contrast to the information in
    /usr/share/doc/virtualenvwrapper/en/html/index.html this package installs
    virtualenvwrapper.sh as /etc/bash_completion.d/virtualenvwrapper.

    Virtualenvwrapper is enabled if you install the package bash-completion and
    enable bash completion support in /etc/bash.bashrc or your ~/.bashrc.

    If you only want to use virtualenvwrapper you may just add

     source /etc/bash_completion.d/virtualenvwrapper

    to your ~/.bashrc.
</code></pre>

<p>So the right command should be:</p>

<pre><code>    $ cat /home/Trusty/.virtualenvrc 
    export WORKON_HOME="/home/Trusty/pyv"
    export PROJECT_HOME="/home/Trusty/pyv"
    source /etc/bash_completion.d/virtualenvwrapper
</code></pre>

<p>Now add this find into .bashrc and source~/.bashrc again:</p>

<pre><code>    $ tail -1 ~/.bashrc 
    source /home/Trusty/.virtualenvrc
    $ source ~/.bashrc  
</code></pre>

<p>Good!!! Now you can continue with the following steps, just as we noticed in previous articles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Qzone(2)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/01/24/update-qzone-2/"/>
    <updated>2014-01-24T16:17:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/01/24/update-qzone-2</id>
    <content type="html"><![CDATA[<p>Install pinyin for we want to use it for generate the title:</p>

<pre><code>    $ pip install pinyin
</code></pre>

<p>Write a new post:</p>

<pre><code>    $ python config_blog.py 迁移博客成功
    content/posts/2014/01/2014_01_24_qianyibokechenggong.md
</code></pre>

<p>Chinese codec:</p>

<pre><code>    cat ~/.bashrc
    export LANG="zh_CN.UTF-8"              Or "en_US.UTF-8"
    export LC_ALL="zh_CN.UTF-8"          Or "en_US.UTF-8"
</code></pre>

<p>Write the blog:</p>

<pre><code>    vim content/posts/2014/01/2014_01_24_qianyibokechenggong.md
</code></pre>

<p>Install BeautifulSoup</p>

<pre><code>    pip install BeautifulSoup
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a New User for Updating Qzone]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/01/23/create-a-new-user-for-updating-qzone/"/>
    <updated>2014-01-23T19:41:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/01/23/create-a-new-user-for-updating-qzone</id>
    <content type="html"><![CDATA[<h3>Backgroud</h3>

<p>Because github only allow one user to login(trusted key), the error message is listed as &ldquo;Error: Key already in use&rdquo;, I have to try another method for updating the qzone.   <br/>
First I have created a new user on github, and created the corresponding repositories, now I have to create the user on my own machine, named &ldquo;qzone&rdquo; for only updating the repository.</p>

<h3>Create the user</h3>

<p>Use following command for create a new user:</p>

<pre><code>    useradd -m -g root -G wheel -s /bin/bash qzone
    passwd qzone
</code></pre>

<p>Then as another oridinary user, run &ldquo;su qzone&rdquo; then we can switch to the new user&rsquo;s shell.</p>

<h3>Configure the user</h3>

<p>Configure the git tools:</p>

<pre><code>    [qzone@XXXyyy ~]$ git config --global user.name "qzone"
    [qzone@XXXyyy ~]$ git config --global user.email "XXXYYY@qq.com"
</code></pre>

<p>Add python virtualenv running environment:</p>

<pre><code>    mkdir ~/pyv
    [qzone@XXXyyy ~]$ cat ~/.virtualenvrc 
    export WORKON_HOME="/home/qzone/pyv"
    export PROJECT_HOME="/home/qzone/pyv"
    source /usr/bin/virtualenvwrapper.sh    
</code></pre>

<p>Add following lines for automatically run virtualenv setup</p>

<pre><code>    $ tail ~/.bashrc
    source /home/qzone/.virtualenvrc
</code></pre>

<p>Now we can create the virtualenv for running python.</p>

<pre><code>    [qzone@XXXyyy ~]$ mkvirtualenv --python=/usr/bin/python2.7 v27
    $ cdvirtualenv
</code></pre>

<p>Now we are in the python 2.7 environment. But notice you have to set http_proxy/https_proxy, etc for you are working under the proxy.  <br/>
Install the pelican:</p>

<pre><code>    $ pip install pelican
</code></pre>

<p>Add configuration for git proxy:</p>

<pre><code>    export GIT_PROXY_COMMAND=/bin/myproxy
</code></pre>

<p>Add workon directory in .bashrc:</p>

<pre><code>    export WORKON_HOME=~/pyv
</code></pre>

<p>Next time, workon v27 then we can switch to python2.7 shell.  <br/>
Make the directory of code, which will store all of the code.</p>

<pre><code>    $ mkdir -p ~/code/XXXYYY
</code></pre>

<p>Now clone the existing repository into the local directory:</p>

<pre><code>    git clone https://github.com/XXXYYY/XXXYYY.github.io
</code></pre>

<p>Install ghp-import for swiftly deploy your website</p>

<pre><code>    pip install ghp-import
</code></pre>

<p>Now setting:</p>

<pre><code>    pelican content -o output -s pelicanconf.py
    ghp-import output
    git push git@github.com:XXXYYY/XXXYYY.github.io.git gh-pages:master
</code></pre>

<p>Now you will failed, because you don&rsquo;t have the correct access rights. So we need to set the ssh access right:</p>

<pre><code>    ssh-keygen -t rsa
    cat ~/.ssh/id_rsa.pub
</code></pre>

<p>Then in github&rsquo;s accounting management page, add this content.  <br/>
Push all of the modifications to the remote repository:</p>

<pre><code>    git push -f git@github.com:XXXYYY/XXXYYY.github.io.git gh-pages:master
</code></pre>

<p>Install markdown for analyse the markdown based blog:</p>

<pre><code>    pip install markdown
</code></pre>

<p>Now you can do the following:</p>

<pre><code>    make html
    make github
    git push -f git@github.com:XXXYYY/XXXYYY.github.io.git gh-pages:master
</code></pre>

<p>Now install new themes:</p>

<pre><code>    cat pelicanconf.py
    # Use theme for our own
    THEME = "./pelican-themes/waterspill-en"
</code></pre>

<p>OK, now you can enjoy the blog finally.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Pelican for Blogging(1)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/01/20/using-pelican-for-blogging-1/"/>
    <updated>2014-01-20T09:52:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/01/20/using-pelican-for-blogging-1</id>
    <content type="html"><![CDATA[<h3>Getting Start</h3>

<p>Install pelican via pip:
    pip install pelican
Getting started Manual: <a href="http://docs.getpelican.com/en/3.1.1/getting_started.html">http://docs.getpelican.com/en/3.1.1/getting_started.html</a>,  and the command is listed as following:</p>

<pre><code>    # Make sure your pelican is the newest
    $ pip install --upgrade pelican
    $ mkdir ~/code/yoursitename
    $ cd ~/code/yoursitename
    $ pelican-quickstart
</code></pre>

<p>The &ldquo;pelican-quickstart&rdquo; will ask you some questions, after answer all of the questions, you will have a start-up point for the website.</p>

<p>If your content is OK, run</p>

<pre><code>    $ make html &amp;&amp; make serve
</code></pre>

<p>will generate the html files and preview it on the server.</p>

<h3>Change the Theme</h3>

<p>Copy the offical themes into your own directory:</p>

<pre><code>    $ git clone --recursive https://github.com/getpelican/pelican-themes ~/pelican-themes
</code></pre>

<p>Set the default theme in your pelicanconf.py:</p>

<pre><code class="py pelicanconf.py">    # Use theme for our own 
    # THEME = "/home/Trusty/pelican-themes/mnmlist"
    # THEME = "/home/Trusty/pelican-themes/storm"
    THEME = "/home/Trusty/pelican-themes/html5-dopetrope"
</code></pre>

<p>Regenerate the site:</p>

<pre><code>    $ make html &amp;&amp; make serve
</code></pre>

<p>Notice the pelican is pretty slow for rendering all of the content. For some themes, it may take up to several minutes for generating the whole site!</p>
]]></content>
  </entry>
  
</feed>
