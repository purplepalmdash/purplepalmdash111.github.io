<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Driver | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/driver/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-10-14T16:11:10+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Python Interact With RaspberryPI GPIO]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/10/12/how-python-interact-with-raspberrypi-gpio/"/>
    <updated>2013-10-12T10:06:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/10/12/how-python-interact-with-raspberrypi-gpio</id>
    <content type="html"><![CDATA[<p>Yesterday I use RaspberryPI to control the LED using its GPIO port.  with Python code we can directly &ldquo;talk&rdquo; to RaspberryPI, and set LED on and off. But what is the principle in it?  How to realize our own library(for example, python/perl/lua based library?), here I will dive into the python library code and find what&rsquo;s really inside the python code.</p>

<h3>Prepare the environment</h3>

<p>Install the RPi.GPIO via pip, $ pip install RPi,GPIO .  <br/>
After installed the GPIO library, we can insert help(&lsquo;modules&rsquo;) in python shell/prompt window to view all of the installed modules, we could found RPi in the list of the packages.</p>

<p>We can found the corresponding packages under the installation directory of python, so first you have to find the location of your python executable file, use &ldquo;which python&rdquo; to find the destination of the python.<br/>
For example, my RPi installed location is under: /home/Trusty/.virtualenvs/venv2/lib/python2.7/site-packages, not in the standard directory, because the python runs in the virtual environment.</p>

<h3>How to control the GPIO in UserSpace.</h3>

<p>Controlling GPIO in shell :</p>

<pre><code>    root@rasp:~# echo 18 &gt; /sys/class/gpio/export 
    root@rasp:~# ls /sys/class/gpio/
    export  gpio18  gpiochip0  unexport
    root@rasp:~# echo "out" &gt; /sys/class/gpio/gpio18/direction 
    root@rasp:~# echo 1 &gt; /sys/class/gpio/gpio18/value 
    root@rasp:~# 
    root@rasp:~# echo 23 &gt; /sys/class/gpio/export 
    root@rasp:~# ls /sys/class/gpio/
    export  gpio18  gpio23  gpiochip0  unexport
    root@rasp:~# echo "out" &gt;/sys/class/gpio/gpio23/direction 
    root@rasp:~# echo 1&gt;/sys/class/gpio/gpio23/value 
    -bash: echo: write error: Invalid argument
    root@rasp:~# echo 1 &gt; /sys/class/gpio/gpio23/value 
    root@rasp:~# echo 0 &gt; /sys/class/gpio/gpio23/value 
    root@rasp:~# echo 0 &gt; /sys/class/gpio/gpio18/value 
</code></pre>

<p>So we can see, the standard procedure is: write exported gpio number to export file&ndash;> write direction to gpioXX&rsquo;s direction&ndash;> write value to the gpioxx&rsquo;s value. The python script wrapped the upper procedures, so we directly call them in python written scripts.</p>
]]></content>
  </entry>
  
</feed>
