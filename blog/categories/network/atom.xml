<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Network | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-03-15T20:17:04+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[把玩TL-SG108E]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/12/ba-wan-tl-sg108e/"/>
    <updated>2015-12-12T11:02:34+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/12/ba-wan-tl-sg108e</id>
    <content type="html"><![CDATA[<p>前段时间黑色星期五在美国亚马逊败了个TP-LINK TL-SG108E, 直邮到手人民币200不到.
本意是拿来以后在家里跑虚拟机时,虚拟机可以在不同的VLAN里作用,譬如单独的存储/管
理网络等.</p>

<h3>配置</h3>

<p>更改IP地址, 随意指定原有局域网内的某IP地址给交换机即可. 随后所有的节点均可添加
在交换机上.</p>

<h3>VLAN</h3>

<p>VLAN可以实现的功能, 位于不同交换机上的机器可以位于同一局域网内.</p>

<p><img src="/images/2015_12_12_14_25_15_724x626.jpg" alt="/images/2015_12_12_14_25_15_724x626.jpg" /></p>

<p>默认在交换机上打开的VLAN是基于端口的VLAN(Port Based VLAN), 我们这里配置的是
802.1Q VLAN, 打开以后,基于端口的VLAN将自动被禁止.</p>

<p><img src="/images/2015_12_12_15_16_33_541x300.jpg" alt="/images/2015_12_12_15_16_33_541x300.jpg" /></p>

<p>默认的配置页面如下:</p>

<p><img src="/images/2015_12_12_15_17_52_927x570.jpg" alt="/images/2015_12_12_15_17_52_927x570.jpg" /></p>

<p>Tag 与 Untagged方式的差别:</p>

<p>端口接收数据时：  <br/>
  如果端口是tagged方式，当数据包本身不包含VLAN的话，输入的数据包就加上该缺省
vlan；如果数据包本身已经包含了VLAN，那么就不再添加。  <br/>
  如果是untagged方式，输入的数据包全部都要加上该缺省vlan。不管输入的数据包是否
已经有VLAN标记。</p>

<p>端口发送数据时：  <br/>
  如果端口是tagged方式，如果端口缺省VLAN等于发送的数据包所含的VLAN，那么就会将
VLAN标记从发送的数据包中去掉；如果不相等，则数据包将带着VLAN发送出去，实现VLAN
的透传。   <br/>
  如果是untagged方式，则不管端口缺省VLAN为多少，是否等于要输出的数据包的VLAN，
都会将VLAN ID从数据包中去掉。</p>

<p>配置了vlan 22和33, 分别在7口和8口上.</p>

<h3>OVS 后的VLAN TAG</h3>

<p>在7口上接入一台Ubuntu服务器,配置为open-vswitch桥接, 虚拟机通过以下配置, 制定
VLAN ID为22.</p>

<pre><code># virsh edit Gentoo
    &lt;interface type='bridge'&gt;
      &lt;mac address='52:54:00:fd:03:e9'/&gt;
      &lt;source bridge='ovsbr0'/&gt;
      &lt;vlan trunk='yes'&gt;
        &lt;tag id='22' nativeMode='untagged'/&gt;
      &lt;/vlan&gt;
      &lt;virtualport type='openvswitch'&gt;
        &lt;parameters interfaceid='fb3e7f34-6fcd-41dc-8fed-c3ffe0d54b18'/&gt;
      &lt;/virtualport&gt;
      &lt;model type='virtio'/&gt;
      &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/&gt;
    &lt;/interface&gt;
# virsh start Gentoo
</code></pre>

<p>这样启动后的虚拟机<code>Gentoo</code>就处于VLAN ID 22隔离的网络里. 手动配置其IP地址为
<code>10.48.58.2</code>.</p>

<h3>物理机上的VLAN</h3>

<p>这里附带了Ubuntu On Jogger的过程, Joggler XUbuntu下载地址在:  <br/>
<a href="http://jwills.co.uk/projects/joggler-xubuntu/download/">http://jwills.co.uk/projects/joggler-xubuntu/download/</a></p>

<p>操作指令在:  <br/>
<a href="http://jwills.co.uk/projects/joggler-xubuntu/instructions/">http://jwills.co.uk/projects/joggler-xubuntu/instructions/</a></p>

<p>默认用户名/密码都是joggler.</p>

<p>我们需要在joggler上配置一个vlan, 和另一台机器上vlan后的虚拟机通信.</p>

<pre><code>$ sudo apt-get install -y vlan
$ sudo modprobe 8021q
$ sudo vconfig add eth0 22
$ sudo ifconfig eth0.22 10.47.58.3/24 up
$ sudo su -c 'echo "8021q"&gt;&gt;/etc/modules'
$ cat /etc/module
8021q
$ sudo vim /etc/network/interface
....
auto eth0
iface eth0 inet dhcp

auto eth0.22
iface eth0.22 inet static
    address 10.47.58.3
    netmask 255.255.255.0
    vlan-raw-device eth0
</code></pre>

<p>这样,重启以后, eth0.22会启动, 就可以通过VLAN 22 ping <code>10.47.58.2</code>了.</p>

<h3>换口</h3>

<p>把joggler从7口换到6口, 可以看到eth0还是可以通的,但是eth0.22则无法通信. 这是因
为我们只在7口和8口上添加了VLAN 22标记的缘故.换回7口,一切正常.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Tunnel for Acrossing Something]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/05/08/use-tunnel-for-acrossing-something/"/>
    <updated>2014-05-08T07:53:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/05/08/use-tunnel-for-acrossing-something</id>
    <content type="html"><![CDATA[<h3>Network Envorinment Introduction</h3>

<p>The network envoriment in daily working envoriment is very bad, thus I have to think for a solution, which could improve my network speed. <br/>
Following picture describes the network topology of the daily working.  <br/>
<img src="/images/CompanyNetwork1.jpg" alt="/images/CompanyNetwork1.jpg" /></p>

<p>From the picture we can see, several users shared a very narrow path, and this path have to go through chinese firewall, this firewall is ghastly, because it will filter some sensitive website which is not welcomed by CN gov.</p>

<h3>Our VPN Introduction</h3>

<p>There are very wide VPN(Virtual Private Network) between CN and US, the US networking don&rsquo;t have to pass through the firewall.   <br/>
Another big surprise is created by the time difference, when chinese are working, lots of american people are out of office.  <br/>
<img src="/images/CompanyNetwork2.jpg" alt="/images/CompanyNetwork2.jpg" /></p>

<p>Surely we can make full use of our whole company&rsquo;s network condition.</p>

<h3>Solution 1: SSH Forwarding</h3>

<p>First we will find a server which could forward ssh, just like in the picture. <br/>
<img src="/images/CompanyNetwork3.jpg" alt="/images/CompanyNetwork3.jpg" /></p>

<p>Then we can use following command for setup a ssh tunnel, which could forwarding our network flow to us proxy:</p>

<pre><code>$ ssh -C  -L YourMachine:Port:USProxy:USProxy_Port YouAccount@ForwardingServer
</code></pre>

<p>Then in your browser or your application, use <a href="http://YourMachine:Port">http://YourMachine:Port</a> as a proxy.</p>

<h3>Solution 2: TCP Tunnel Forwarding</h3>

<p>Not every server can open ssh forwarding for you. For example, in following server, tcp forwarding is forbidden:</p>

<pre><code>$ cat /etc/ssh/sshd_config
# Port forwarding
AllowTcpForwarding no
</code></pre>

<p>Thus we have to setup our own tcp tunnel manually.</p>

<h4>Netcat Way</h4>

<p>Use following way you can use netcat for creating a very simple tunnel, which could forwarding all of your flow to US proxy, these operation have to be done on server:</p>

<pre><code>$ mkdir /tmp/fifo
$ nc -lvvp -k 2323 0&lt;/tmp/fifo | nc -k USproxy USProxy_Port 1&gt;fifo
</code></pre>

<p>Then set the local proxy to <a href="http://server_ip:2323,">http://server_ip:2323,</a> then you can reached the proxy.</p>

<h4>Tunnel Way</h4>

<p>Netcat way is OK, but the netcat version is very old on US Server, it can&rsquo;t support &lsquo;-k&rsquo; option, for &lsquo;-k&rsquo; option is only supported by openbsd-netcat, and because the server is too old(It&rsquo;s Sun OS 5.10, or solaris? ), so we have to find other ways.   <br/>
Luckily I find a small tool, which could fit for our requirement.</p>

<pre><code>$ wget http://www.cri.ensmp.fr/~coelho/tunnel.c
$ gcc -o tunnel tunnel.c -lsocket
</code></pre>

<p>This compiling will complain &lsquo;herror&rsquo; is not supported, thus we have to comment them, or change them from &lsquo;herror&rsquo; to &lsquo;printf&rsquo;, anyway, the error happens seldomly.  <br/>
Use following command for setting up a tunnel in server:</p>

<pre><code>$ ./tunnel -Lr server_ip:1080 proxy:80
</code></pre>

<p>Then in your own PC, set proxy to <a href="http://server_ip:1080,">http://server_ip:1080,</a> you can reach the internet through your own tunnel, which will guide your traffic from VPN to US, then to Internet.</p>

<h3>Make Tunnel Invisible</h3>

<p>Normally system administrator won&rsquo;t like tunnel on server, maybe they will scan the server and find out the port occupation. So we have to do some modification to tunnel.c. <br/>
First, change the name of the executable file:</p>

<pre><code>$ mv tunnel.c autrace.c
$ gcc -o autrace autrace.c -lsocket
</code></pre>

<p>So now, you can run your tunnel program via &lsquo;./autrace -Lr localhost:1080 proxy:80&rsquo;.</p>

<p>But this is not so safe, administrator will also find the port, then they will track this port, and find your tricks, so we have to hidden the port words. <br/>
In autrace.c, do following changes in corresponding lines:</p>

<pre><code>//  Around line 128, change the ip/port into your own. 

/* default connexion. */
#define LHOST "138.138.138.138" /* this really means 127.0.0.1, thus no network! */
#define LPORT "4444"
/* DHOST: &lt;same as chosen LHOST&gt; */
//#define DPORT "23"        /* telnet port */
#define DHOST "139.139.139.139"
#define DPORT "8888"

// Around line 1023, this is actually a bug.  
 dhosts = getenv("DHOST"); 1023
</code></pre>

<p>Now you can run command like:</p>

<pre><code>$ ./autracce -s
</code></pre>

<h3>Make Tunnel Only Serve for you</h3>

<p>We have to forbidden other user use our tunnel, because <a href="http://server_ip:port">http://server_ip:port</a> is open to all of the person in VPN.  <br/>
We add following ACL rule in the autrace.c:</p>

<pre><code>// in main(), around line 935
  /* Initialize the parameter for ACL(Access Control List) */
  struct sockaddr_in sa;
  inet_pton(AF_INET, "Your_IP_Address", &amp;(sa.sin_addr));
  allow_address = ntohl(sa.sin_addr.s_addr);

// in main(), around line 1187
      /* In here, we will do filter, filter specified ip address */
      /* Compare the allowed ip address with the incomming's ip address */
      if( allow_address != (ntohl(client_addr.sin_addr.s_addr)))
      {
        fprintf(stderr, "Sorry, you are not welcomed!\n");
        /* No more receive/send any data */
        shutdown(client_socket, 2);
      }
</code></pre>

<p>The code will check the incoming client&rsquo;s ip address, and comparing it to our pre-defined ip address(Your_IP_Address), if they are not equal, our server will directly close the socket, so the client will receive refuse information.</p>

<p>Now you have a very safe and reliable path will will let you reach the internet via wide VPN and swift US network, enjoy it.</p>
]]></content>
  </entry>
  
</feed>
