<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Network | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-07-10T21:14:23+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Tunnel for Acrossing Something]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/05/08/use-tunnel-for-acrossing-something/"/>
    <updated>2014-05-08T07:53:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/05/08/use-tunnel-for-acrossing-something</id>
    <content type="html"><![CDATA[<h3>Network Envorinment Introduction</h3>

<p>The network envoriment in daily working envoriment is very bad, thus I have to think for a solution, which could improve my network speed. <br/>
Following picture describes the network topology of the daily working.  <br/>
<img src="/images/CompanyNetwork1.jpg" alt="/images/CompanyNetwork1.jpg" /></p>

<p>From the picture we can see, several users shared a very narrow path, and this path have to go through chinese firewall, this firewall is ghastly, because it will filter some sensitive website which is not welcomed by CN gov.</p>

<h3>Our VPN Introduction</h3>

<p>There are very wide VPN(Virtual Private Network) between CN and US, the US networking don&rsquo;t have to pass through the firewall.   <br/>
Another big surprise is created by the time difference, when chinese are working, lots of american people are out of office.  <br/>
<img src="/images/CompanyNetwork2.jpg" alt="/images/CompanyNetwork2.jpg" /></p>

<p>Surely we can make full use of our whole company&rsquo;s network condition.</p>

<h3>Solution 1: SSH Forwarding</h3>

<p>First we will find a server which could forward ssh, just like in the picture. <br/>
<img src="/images/CompanyNetwork3.jpg" alt="/images/CompanyNetwork3.jpg" /></p>

<p>Then we can use following command for setup a ssh tunnel, which could forwarding our network flow to us proxy:</p>

<pre><code>$ ssh -C  -L YourMachine:Port:USProxy:USProxy_Port YouAccount@ForwardingServer
</code></pre>

<p>Then in your browser or your application, use <a href="http://YourMachine:Port">http://YourMachine:Port</a> as a proxy.</p>

<h3>Solution 2: TCP Tunnel Forwarding</h3>

<p>Not every server can open ssh forwarding for you. For example, in following server, tcp forwarding is forbidden:</p>

<pre><code>$ cat /etc/ssh/sshd_config
# Port forwarding
AllowTcpForwarding no
</code></pre>

<p>Thus we have to setup our own tcp tunnel manually.</p>

<h4>Netcat Way</h4>

<p>Use following way you can use netcat for creating a very simple tunnel, which could forwarding all of your flow to US proxy, these operation have to be done on server:</p>

<pre><code>$ mkdir /tmp/fifo
$ nc -lvvp -k 2323 0&lt;/tmp/fifo | nc -k USproxy USProxy_Port 1&gt;fifo
</code></pre>

<p>Then set the local proxy to <a href="http://server_ip:2323,">http://server_ip:2323,</a> then you can reached the proxy.</p>

<h4>Tunnel Way</h4>

<p>Netcat way is OK, but the netcat version is very old on US Server, it can&rsquo;t support &lsquo;-k&rsquo; option, for &lsquo;-k&rsquo; option is only supported by openbsd-netcat, and because the server is too old(It&rsquo;s Sun OS 5.10, or solaris? ), so we have to find other ways.   <br/>
Luckily I find a small tool, which could fit for our requirement.</p>

<pre><code>$ wget http://www.cri.ensmp.fr/~coelho/tunnel.c
$ gcc -o tunnel tunnel.c -lsocket
</code></pre>

<p>This compiling will complain &lsquo;herror&rsquo; is not supported, thus we have to comment them, or change them from &lsquo;herror&rsquo; to &lsquo;printf&rsquo;, anyway, the error happens seldomly.  <br/>
Use following command for setting up a tunnel in server:</p>

<pre><code>$ ./tunnel -Lr server_ip:1080 proxy:80
</code></pre>

<p>Then in your own PC, set proxy to <a href="http://server_ip:1080,">http://server_ip:1080,</a> you can reach the internet through your own tunnel, which will guide your traffic from VPN to US, then to Internet.</p>

<h3>Make Tunnel Invisible</h3>

<p>Normally system administrator won&rsquo;t like tunnel on server, maybe they will scan the server and find out the port occupation. So we have to do some modification to tunnel.c. <br/>
First, change the name of the executable file:</p>

<pre><code>$ mv tunnel.c autrace.c
$ gcc -o autrace autrace.c -lsocket
</code></pre>

<p>So now, you can run your tunnel program via &lsquo;./autrace -Lr localhost:1080 proxy:80&rsquo;.</p>

<p>But this is not so safe, administrator will also find the port, then they will track this port, and find your tricks, so we have to hidden the port words. <br/>
In autrace.c, do following changes in corresponding lines:</p>

<pre><code>//  Around line 128, change the ip/port into your own. 

/* default connexion. */
#define LHOST "138.138.138.138" /* this really means 127.0.0.1, thus no network! */
#define LPORT "4444"
/* DHOST: &lt;same as chosen LHOST&gt; */
//#define DPORT "23"        /* telnet port */
#define DHOST "139.139.139.139"
#define DPORT "8888"

// Around line 1023, this is actually a bug.  
 dhosts = getenv("DHOST"); 1023
</code></pre>

<p>Now you can run command like:</p>

<pre><code>$ ./autracce -s
</code></pre>

<h3>Make Tunnel Only Serve for you</h3>

<p>We have to forbidden other user use our tunnel, because <a href="http://server_ip:port">http://server_ip:port</a> is open to all of the person in VPN.  <br/>
We add following ACL rule in the autrace.c:</p>

<pre><code>// in main(), around line 935
  /* Initialize the parameter for ACL(Access Control List) */
  struct sockaddr_in sa;
  inet_pton(AF_INET, "Your_IP_Address", &amp;(sa.sin_addr));
  allow_address = ntohl(sa.sin_addr.s_addr);

// in main(), around line 1187
      /* In here, we will do filter, filter specified ip address */
      /* Compare the allowed ip address with the incomming's ip address */
      if( allow_address != (ntohl(client_addr.sin_addr.s_addr)))
      {
        fprintf(stderr, "Sorry, you are not welcomed!\n");
        /* No more receive/send any data */
        shutdown(client_socket, 2);
      }
</code></pre>

<p>The code will check the incoming client&rsquo;s ip address, and comparing it to our pre-defined ip address(Your_IP_Address), if they are not equal, our server will directly close the socket, so the client will receive refuse information.</p>

<p>Now you have a very safe and reliable path will will let you reach the internet via wide VPN and swift US network, enjoy it.</p>
]]></content>
  </entry>
  
</feed>
