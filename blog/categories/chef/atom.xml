<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chef | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-06-03T20:22:00+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef Setup]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/26/chef-setup/"/>
    <updated>2015-05-26T16:17:14+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/26/chef-setup</id>
    <content type="html"><![CDATA[<p>For automatically deploying OpenStack, I use Chef for deployment, following records the steps for setting up the whole environment.</p>

<h3>Machine Preparation</h3>

<p>Chef Server: 2-Core, 3G Memory, IP address: xxx.xxx.10.211, Ubuntu14.04.  <br/>
Chef Workstation: 4-Core, 8G Memory, a physical machine, IP address: xxx.xxx.0.119, Ubuntu14.04.</p>

<h3>Install Server</h3>

<p>Install the chef-server package, which downloaded from chef.io website, after installation, simply reconfigure it, this finishes the installation and configuration.</p>

<pre><code>$ sudo dpkg -i chef-server-core_12.0.8-1_amd64.deb
$ sudo chef-server-ctl reconfigure
</code></pre>

<p>Configure the permit file, also create the user and organization for the chef:</p>

<pre><code># sudo chef-server-ctl user-crate YourName FirstName LastName Email PassWord --filename YourPermitFileName
$ sudo chef-server-ctl user-create youname YYYXXX Man xxxxxxx@163.com YOURPASSWORD --filename ~/youname.pem
# sudo chef-server-ctl org-create YourOrgName Your Company Name  --association_user YourUser --filename  YourOrgnizationPermitFile
$ sudo chef-server-ctl org-create youname YYYXXX Software, Inc. --association_user youname --filename ~/youname_org.pem
</code></pre>

<p>Install opscode-manager and reconfigure it via following commands:</p>

<pre><code>$ sudo dpkg -i opscode-manage_1.13.0-1_amd64.deb 
$ sudo opscode-manage-ctl reconfigure
</code></pre>

<p>Now visit the webiste to see the Chef Server UI.</p>

<p><a href="https://YourURL">https://YourURL</a></p>

<p><img src="/images/2015_05_26_16_44_58_610x297.jpg" alt="/images/2015_05_26_16_44_58_610x297.jpg" /></p>

<h3>Chef Workstation</h3>

<p>I use the physical machine for Chef Workstation.</p>

<p>Install it via:</p>

<pre><code>$ sudo dpkg -i chef_12.3.0-1_amd64.deb
</code></pre>

<p>Fetch back the chef repository from github, configure it and add the ignore directory:</p>

<pre><code>$ git clone https://github.com/opscode/chef-repo.git
$ cd chef-repo 
$ mkdir .chef
$ echo ".chef"&gt;&gt;~/chef-repo/.gitignore
$ git add .
$ git commit -m "Exclude the ./.chef directory from version control"
[master 64515ff] Exclude the ./.chef directory from version control
 1 file changed, 1 insertion(+)
</code></pre>

<p>Install the chefdk, and verify the chef, you should see all of the components OK, then you could continue for next step:</p>

<pre><code>$ sudo dpkg -i chefdk_0.6.0-1_amd64.deb 
$ chef verify
</code></pre>

<p>Transfer all of the pem file from the ChefServer to ChefWorkstation, and put them under the folder of ~/chef-repo/.chef:</p>

<pre><code>$ scp xxx@xxxxx:/home/xxx/*.pem xxxx@ChefWorkstation:/home/xxxx/chef-repo/.chef
</code></pre>

<p>Add following item under the Workstation&rsquo;s configuration:</p>

<pre><code>$ sudo vim /etc/hosts
XXX.xxx.xxx.xxx  ChefServer
</code></pre>

<p>Now configure the knife.rb and let your authentification be verified.</p>

<pre><code>$ vim ~/chef-repo/.chef/knife.rb
current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
node_name                "xxxxxxxxx"
client_key               "#{current_dir}/xxxxxxxxx.pem"
validation_client_name   "xxxxxxxxx_org"
validation_key           "#{current_dir}/xxxxxxxxx_org.pem"
chef_server_url          "https://ChefServer/organizations/xxxxxxxxx"
syntax_check_cache_path  "#{ENV['HOME']}/.chef/syntaxcache"
cookbook_path            ["#{current_dir}/../cookbooks"]
$ knife ssl fetch
WARNING: Certificates from ChefServer will be fetched and placed in your trusted_cert
directory (/home/dash/chef-repo/.chef/trusted_certs).

Knife has no means to verify these are the correct certificates. You should
verify the authenticity of these certificates after downloading.

Adding certificate for ChefServer in /home/xxxx/chef-repo/.chef/trusted_certs/ChefServer.crt
$ knife ssl check
Connecting to host ChefServer:443
Successfully verified certificates from `ChefServer'
</code></pre>

<p>Check how many clients has been added into the ChefServer, currently only one,</p>

<pre><code>$ knife client list
xxxxxx-validator
</code></pre>

<h3>Added Nodes</h3>

<p>In Client1, Install the</p>

<pre><code>$ sudo dpkg -i chef_12.3.0-1_amd64.deb 
</code></pre>

<p>Add the pem files to every nodes:</p>

<pre><code># knife bootstrap Client1 -x xxxxxx -P XXXXXXXXXXXXX --sudo
</code></pre>

<p>If above steps fail, you should manually specify the ssl verification.</p>

<pre><code># scp Server/xxx.pem /home/xxxxx
# cp /home/xxxx/xxx.pem /etc/chef/validation.pem
# sudo chef-client -l debug -S https://ChefServer/organizations/xxxxx -K /etc/chef/validation.pem
##### OR
#  sudo chef-client -l debug -S https://ChefServer/organizations/xxxxx  -K /home/xxxx/xxxxx.pem
</code></pre>

<p>Bootstrap again:</p>

<pre><code># knife bootstrap Client1  -N ChefClient1 -x xxxxx -P xxxxxx --sudo --use-sudo-password
</code></pre>

<p>After bootstrap success, list all of the client:</p>

<pre><code>root@ChefWorkstation:~/chef-repo# knife client list
ChefClient1                                                                                                                                
xxxx-validator 
</code></pre>

<h3>Using Cook</h3>

<p>Create the Cookbook named <code>nginx</code>:</p>

<pre><code>root@ChefWorkstation:~# cd chef-repo/
root@ChefWorkstation:~/chef-repo# ls
chefignore  cookbooks  data_bags  environments  LICENSE  README.md  roles
root@ChefWorkstation:~/chef-repo# knife cookbook create nginx
oot@ChefWorkstation:~/chef-repo/cookbooks/nginx# ls
attributes  CHANGELOG.md  definitions  files  libraries  metadata.rb  providers  README.md  recipes  resources  templates
</code></pre>

<p>Edit the cookbook:</p>

<p>Enable the installation:</p>

<pre><code># vim recipes/default.rb
package 'nginx' do
  action :install
end
</code></pre>

<p>Enable check the status:</p>

<pre><code>service 'nginx' do
  action [ :enable, :start ]
end
</code></pre>

<p>Change the index.html file:</p>

<pre><code>cookbook_file "/usr/share/nginx/html/index.html" do
  source "index.html"
  mode "0644"
end
</code></pre>

<p>Prepare the default index.html file:</p>

<pre><code>$ cd ~/chef-repo/cookbooks/nginx/files/default
$ vim index.html
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Hello there&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;This is a test&lt;/h1&gt;
    &lt;p&gt;Please work!&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Since the nginx need apt-get to achive the latest status, add another package named apt:</p>

<pre><code>knife cookbook create apt
</code></pre>

<p>Edit the default rb file:</p>

<pre><code>vim ~/chef-repo/cookbooks/apt/recipes/default.rb
execute "apt-get update" do
  command "apt-get update"
end
</code></pre>

<p>Change the default rb file of the nginx:</p>

<pre><code>+++ include_recipe "apt"

package 'nginx' do
  action :install
end
</code></pre>

<p>Also add it to the metadata.rb file:</p>

<pre><code>$ vim ~/chef-repo/cookbooks/nginx/metadata.rb

long_description IO.read(File.join(File.dirname(__FILE__), 'README.md'))
version          '0.1.0'

+++  depends "apt"
</code></pre>

<p>Add Cookbook to your nodes:</p>

<pre><code>knife cookbook upload apt
knife cookbook upload nginx
</code></pre>

<p>Or</p>

<pre><code>knife cookbook upload -a
</code></pre>

<p>Edit the specified node:</p>

<pre><code>knife node edit name_of_node

{
  "name": "client1",
  "chef_environment": "_default",
  "normal": {
    "tags": [

    ]
  },
  "run_list": [

+++ "recipe[name_of_recipe1]", 
+++ "recipe[name_of_recipe2]" 

  ]
}
</code></pre>

<p>In every want-to-deploy nodes, run:</p>

<pre><code>$ sudo chef-client
</code></pre>

<h3>Use  Market</h3>

<p>Download and use the knife</p>

<pre><code>$ knife cookbook site download learn_chef_apache2
$ tar xzvf learn_chef_apache2-0.2.1.tar.gz -C cookbooks/
$ knife cookbook  upload -a 
</code></pre>

<p>Besure to edit the node&rsquo;s recipes.</p>

<p>Two tips:</p>

<p>Remove the cookbook from the server&rsquo;s list:</p>

<pre><code># knife cookbook delete learn_chef_apache2 0.2.1
</code></pre>

<p>Directly remove the recipe from the node:</p>

<pre><code># knife node run_list remove ChefClient1 recipe[nginx]
# knife node run_list remove ChefClient1 recipe[eclipse]
</code></pre>
]]></content>
  </entry>
  
</feed>
