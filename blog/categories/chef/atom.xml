<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chef | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-05-28T23:36:23+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Quick Setup for Chef Server/Client/Workstation]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/08/a-quick-setup-for-chef-server-slash-client-slash-workstation/"/>
    <updated>2015-06-08T20:39:17+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/08/a-quick-setup-for-chef-server-slash-client-slash-workstation</id>
    <content type="html"><![CDATA[<h3>Machine Preparation</h3>

<p>QuickServer: 172.16.0.11, QuickClient: 172.16.0.12</p>

<p>QuickServer Machine:</p>

<pre><code>xxx@QuickServer:~$ cat /etc/hostname
QuickServer
xxx@QuickServer:~$ cat /etc/hosts
127.0.0.1       localhost
127.0.1.1       QuickServer
172.16.0.11     QuickServer
172.16.0.12     QuickClient

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
xxx@QuickServer:~$ cat /etc/network/interfaces
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
address 172.16.0.11
netmask 255.255.255.0
gateway 172.16.0.1
dns-nameservers 114.114.114.114
</code></pre>

<p>QuickClient Machine:</p>

<pre><code>xxx@QuickClient:~$ cat /etc/hosts
127.0.0.1       localhost
127.0.1.1       QuickClient
172.16.0.12     QuickClient
172.16.0.11     QuickServer


# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
xxx@QuickClient:~$ cat /etc/hostname 
QuickClient
xxx@QuickClient:~$ cat /etc/network/interfaces
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
address 172.16.0.12
netmask 255.255.255.0
gateway 172.16.0.1
dns-nameservers 114.114.114.114
</code></pre>

<h3>QuickServer Installation</h3>

<p>You should have following packges in this server/management node:</p>

<pre><code>$ ls
chefdk_0.6.0-1_amd64.deb  chef-server-core_12.0.8-1_amd64.deb  opscode-manage_1.13.0-1_amd64.deb
</code></pre>

<p>Install and configuration:</p>

<pre><code>$ sudo dpkg -i chef-server-core_12.0.8-1_amd64.deb
$ sudo chef-server-ctl reconfigure
</code></pre>

<p>Now configure the chefserver via following command:</p>

<pre><code>$ sudo chef-server-ctl user-create twocloud cloud Yang twocloud@gmail.com engine --filename ~/twocloud.pem
$ sudo chef-server-ctl org-create twocloud OneCloud Software, Inc. --association_user twocloud --filename ~/twocloud_org.pem
$ ls ~/*.pem
/home/xxxx/twocloud_org.pem  /home/xxxx/twocloud.pem
</code></pre>

<p>Install opscode:</p>

<pre><code>$ sudo dpkg -i opscode-manage_1.13.0-1_amd64.deb
$ sudo opscode-manage-ctl reconfigure
</code></pre>

<p>Also install the chefdk via:</p>

<pre><code>$ sudo dpkg -i chefdk_0.6.0-1_amd64.deb
</code></pre>

<p>Install the git and configure the chef-repo:</p>

<pre><code>$ sudo apt-get install git
$ git config --global user.name "purplepalm"
$ git config --global user.email "purplepalm@gmail.com"
$ git clone https://github.com/opscode/chef-repo.git
$ mkdir .chef
$ cd .chef/
$ scp xxxx@127.0.0.1:/home/xxxx/*.pem ./
</code></pre>

<p>Now under the .chef directory, create the knife.rb for letting knife using:</p>

<pre><code>$ cat ~/chef-repo/.chef/knife.rb
current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
node_name                "twocloud"
client_key               "#{current_dir}/twocloud.pem"
validation_client_name   "twocloud"
validation_key           "#{current_dir}/twocloud_org.pem"
chef_server_url          "https://QuickServer/organizations/twocloud"
syntax_check_cache_path  "#{ENV['HOME']}/.chef/syntaxcache"
cookbook_path            ["#{current_dir}/../cookbooks"]
</code></pre>

<p>Verify ssl via:</p>

<pre><code>$ knife ssl fetch
WARNING: Certificates from QuickServer will be fetched and placed in your trusted_cert
directory (/home/xxxx/chef-repo/.chef/trusted_certs).

Knife has no means to verify these are the correct certificates. You should
verify the authenticity of these certificates after downloading.

Adding certificate for QuickServer in /home/xxxx/chef-repo/.chef/trusted_certs/QuickServer.crt

$ knife ssl check
Connecting to host QuickServer:443
Successfully verified certificates from `QuickServer'
$ knife client list
twocloud-validator
</code></pre>

<p>Next, configure the QuickClient and add it to the Chef.</p>

<h3>QuickClient</h3>

<p>Install the client deb file via:</p>

<pre><code>$ ls
chef_12.3.0-1_amd64.deb
$ sudo dpkg -i chef_12.3.0-1_amd64.deb 
</code></pre>

<p>Now,On !!! QuickServer !!! , bootstrap the QuickClient via:</p>

<pre><code>$ cd ~/chef-repo/
$ knife bootstrap 172.16.0.12 -x xxxx -P xxxxxxxx --sudo
Doing old-style registration with the validation key at /home/xxxx/chef-repo/.chef/twocloud_org.pem...
Delete your validation key in order to use your user credentials instead

Connecting to 172.16.0.12
172.16.0.12 Starting first Chef Client run...
172.16.0.12 Starting Chef Client, version 12.3.0
172.16.0.12 Creating a new client identity for QuickClient using the validator key.
172.16.0.12 
172.16.0.12 ================================================================================
172.16.0.12 Chef encountered an error attempting to create the client "QuickClient"
172.16.0.12 ================================================================================
</code></pre>

<p>Yes, you will meet an error, Now go back to !!! QuickClient !!! and solve it.</p>

<p>First retrieve the pem file under your own home directory:</p>

<pre><code>$ scp xxxx@172.16.0.11:/home/xxxx/*.pem ./
Password: 
twocloud_org.pem                                                                                             100% 1674     1.6KB/s   00:00 
twocloud.pem                                                                                                 100% 1674     1.6KB/s   00:00
</code></pre>

<p>Then fetch back the ssl via:</p>

<pre><code>$ sudo knife ssl fetch --config /etc/chef/client.rb
WARNING: Certificates from QuickServer will be fetched and placed in your trusted_cert
directory (/etc/chef/trusted_certs).

Knife has no means to verify these are the correct certificates. You should
verify the authenticity of these certificates after downloading.

Adding certificate for QuickServer in /etc/chef/trusted_certs/QuickServer.crt
</code></pre>

<p>Now manually use the <code>/home/xxxx/twocloud.pem</code> for ssl checking.</p>

<pre><code>$ sudo chef-client -l debug -S https://QuickServer/organizations/twocloud -K /home/xxxx/twocloud.pem 2&gt;&amp;1
</code></pre>

<p>Your terminal may encounter Garbled codes, simply quit it, and go back to !!! QuickServer !!!, Bootstrap again via:</p>

<pre><code>$ knife bootstrap 172.16.0.12 -x xxxx -P xxxxxxxx --sudo
Doing old-style registration with the validation key at /home/xxxx/chef-repo/.chef/twocloud_org.pem...
Delete your validation key in order to use your user credentials instead

Connecting to 172.16.0.12
172.16.0.12 Starting first Chef Client run...
172.16.0.12 Starting Chef Client, version 12.3.0
172.16.0.12 resolving cookbooks for run list: []
172.16.0.12 Synchronizing Cookbooks:
172.16.0.12 Compiling Cookbooks...
172.16.0.12 [2015-06-08T09:12:09-04:00] WARN: Node QuickClient has an empty run list.
172.16.0.12 Converging 0 resources
172.16.0.12 
172.16.0.12 Running handlers:
172.16.0.12 Running handlers complete
172.16.0.12 Chef Client finished, 0/0 resources updated in 1.179038534 seconds
</code></pre>

<p>Now you could list all of the client under your workstation directory:</p>

<pre><code>$ knife client list
QuickClient
twocloud-validator
</code></pre>

<p>QuickClient is the node we just added.</p>

<p>Here provides a good start-point for following operations, next step you could do more magics on newly added nodes, also you could add more nodes for deployment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Setup]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/26/chef-setup/"/>
    <updated>2015-05-26T16:17:14+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/26/chef-setup</id>
    <content type="html"><![CDATA[<p>For automatically deploying OpenStack, I use Chef for deployment, following records the steps for setting up the whole environment.</p>

<h3>Machine Preparation</h3>

<p>Chef Server: 2-Core, 3G Memory, IP address: xxx.xxx.10.211, Ubuntu14.04.  <br/>
Chef Workstation: 4-Core, 8G Memory, a physical machine, IP address: xxx.xxx.0.119, Ubuntu14.04.</p>

<h3>Install Server</h3>

<p>Install the chef-server package, which downloaded from chef.io website, after installation, simply reconfigure it, this finishes the installation and configuration.</p>

<pre><code>$ sudo dpkg -i chef-server-core_12.0.8-1_amd64.deb
$ sudo chef-server-ctl reconfigure
</code></pre>

<p>Configure the permit file, also create the user and organization for the chef:</p>

<pre><code># sudo chef-server-ctl user-crate YourName FirstName LastName Email PassWord --filename YourPermitFileName
$ sudo chef-server-ctl user-create youname YYYXXX Man xxxxxxx@163.com YOURPASSWORD --filename ~/youname.pem
# sudo chef-server-ctl org-create YourOrgName Your Company Name  --association_user YourUser --filename  YourOrgnizationPermitFile
$ sudo chef-server-ctl org-create youname YYYXXX Software, Inc. --association_user youname --filename ~/youname_org.pem
</code></pre>

<p>Install opscode-manager and reconfigure it via following commands:</p>

<pre><code>$ sudo dpkg -i opscode-manage_1.13.0-1_amd64.deb 
$ sudo opscode-manage-ctl reconfigure
</code></pre>

<p>Now visit the webiste to see the Chef Server UI.</p>

<p><a href="https://YourURL">https://YourURL</a></p>

<p><img src="/images/2015_05_26_16_44_58_610x297.jpg" alt="/images/2015_05_26_16_44_58_610x297.jpg" /></p>

<h3>Chef Workstation</h3>

<p>I use the physical machine for Chef Workstation.</p>

<p>Install it via:</p>

<pre><code>$ sudo dpkg -i chef_12.3.0-1_amd64.deb
</code></pre>

<p>Fetch back the chef repository from github, configure it and add the ignore directory:</p>

<pre><code>$ git clone https://github.com/opscode/chef-repo.git
$ cd chef-repo 
$ mkdir .chef
$ echo ".chef"&gt;&gt;~/chef-repo/.gitignore
$ git add .
$ git commit -m "Exclude the ./.chef directory from version control"
[master 64515ff] Exclude the ./.chef directory from version control
 1 file changed, 1 insertion(+)
</code></pre>

<p>Install the chefdk, and verify the chef, you should see all of the components OK, then you could continue for next step:</p>

<pre><code>$ sudo dpkg -i chefdk_0.6.0-1_amd64.deb 
$ chef verify
</code></pre>

<p>Transfer all of the pem file from the ChefServer to ChefWorkstation, and put them under the folder of ~/chef-repo/.chef:</p>

<pre><code>$ scp xxx@xxxxx:/home/xxx/*.pem xxxx@ChefWorkstation:/home/xxxx/chef-repo/.chef
</code></pre>

<p>Add following item under the Workstation&rsquo;s configuration:</p>

<pre><code>$ sudo vim /etc/hosts
XXX.xxx.xxx.xxx  ChefServer
</code></pre>

<p>Now configure the knife.rb and let your authentification be verified.</p>

<pre><code>$ vim ~/chef-repo/.chef/knife.rb
current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
node_name                "xxxxxxxxx"
client_key               "#{current_dir}/xxxxxxxxx.pem"
validation_client_name   "xxxxxxxxx_org"
validation_key           "#{current_dir}/xxxxxxxxx_org.pem"
chef_server_url          "https://ChefServer/organizations/xxxxxxxxx"
syntax_check_cache_path  "#{ENV['HOME']}/.chef/syntaxcache"
cookbook_path            ["#{current_dir}/../cookbooks"]
$ knife ssl fetch
WARNING: Certificates from ChefServer will be fetched and placed in your trusted_cert
directory (/home/dash/chef-repo/.chef/trusted_certs).

Knife has no means to verify these are the correct certificates. You should
verify the authenticity of these certificates after downloading.

Adding certificate for ChefServer in /home/xxxx/chef-repo/.chef/trusted_certs/ChefServer.crt
$ knife ssl check
Connecting to host ChefServer:443
Successfully verified certificates from `ChefServer'
</code></pre>

<p>Check how many clients has been added into the ChefServer, currently only one,</p>

<pre><code>$ knife client list
xxxxxx-validator
</code></pre>

<h3>Added Nodes</h3>

<p>In Client1, Install the</p>

<pre><code>$ sudo dpkg -i chef_12.3.0-1_amd64.deb 
</code></pre>

<p>Add the pem files to every nodes:</p>

<pre><code># knife bootstrap Client1 -x xxxxxx -P XXXXXXXXXXXXX --sudo
</code></pre>

<p>If above steps fail, you should manually specify the ssl verification.</p>

<pre><code># scp Server/xxx.pem /home/xxxxx
# cp /home/xxxx/xxx.pem /etc/chef/validation.pem
# sudo chef-client -l debug -S https://ChefServer/organizations/xxxxx -K /etc/chef/validation.pem
##### OR
#  sudo chef-client -l debug -S https://ChefServer/organizations/xxxxx  -K /home/xxxx/xxxxx.pem
</code></pre>

<p>Bootstrap again:</p>

<pre><code># knife bootstrap Client1  -N ChefClient1 -x xxxxx -P xxxxxx --sudo --use-sudo-password
</code></pre>

<p>After bootstrap success, list all of the client:</p>

<pre><code>root@ChefWorkstation:~/chef-repo# knife client list
ChefClient1                                                                                                                                
xxxx-validator 
</code></pre>

<h3>Using Cookbook</h3>

<p>Create the Cookbook named <code>nginx</code>:</p>

<pre><code>root@ChefWorkstation:~# cd chef-repo/
root@ChefWorkstation:~/chef-repo# ls
chefignore  cookbooks  data_bags  environments  LICENSE  README.md  roles
root@ChefWorkstation:~/chef-repo# knife cookbook create nginx
oot@ChefWorkstation:~/chef-repo/cookbooks/nginx# ls
attributes  CHANGELOG.md  definitions  files  libraries  metadata.rb  providers  README.md  recipes  resources  templates
</code></pre>

<p>Edit the cookbook:</p>

<p>Enable the installation:</p>

<pre><code># vim recipes/default.rb
package 'nginx' do
  action :install
end
</code></pre>

<p>Enable check the status:</p>

<pre><code>service 'nginx' do
  action [ :enable, :start ]
end
</code></pre>

<p>Change the index.html file:</p>

<pre><code>cookbook_file "/usr/share/nginx/html/index.html" do
  source "index.html"
  mode "0644"
end
</code></pre>

<p>Prepare the default index.html file:</p>

<pre><code>$ cd ~/chef-repo/cookbooks/nginx/files/default
$ vim index.html
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Hello there&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;This is a test&lt;/h1&gt;
    &lt;p&gt;Please work!&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Since the nginx need apt-get to achive the latest status, add another package named apt:</p>

<pre><code>knife cookbook create apt
</code></pre>

<p>Edit the default rb file:</p>

<pre><code>vim ~/chef-repo/cookbooks/apt/recipes/default.rb
execute "apt-get update" do
  command "apt-get update"
end
</code></pre>

<p>Change the default rb file of the nginx:</p>

<pre><code>+++ include_recipe "apt"

package 'nginx' do
  action :install
end
</code></pre>

<p>Also add it to the metadata.rb file:</p>

<pre><code>$ vim ~/chef-repo/cookbooks/nginx/metadata.rb

long_description IO.read(File.join(File.dirname(__FILE__), 'README.md'))
version          '0.1.0'

+++  depends "apt"
</code></pre>

<p>Add Cookbook to your nodes:</p>

<pre><code>knife cookbook upload apt
knife cookbook upload nginx
</code></pre>

<p>Or</p>

<pre><code>knife cookbook upload -a
</code></pre>

<p>Edit the specified node:</p>

<pre><code>knife node edit name_of_node

{
  "name": "client1",
  "chef_environment": "_default",
  "normal": {
    "tags": [

    ]
  },
  "run_list": [

+++ "recipe[name_of_recipe1]", 
+++ "recipe[name_of_recipe2]" 

  ]
}
</code></pre>

<p>In every want-to-deploy nodes, run:</p>

<pre><code>$ sudo chef-client
</code></pre>

<h3>Use  Market</h3>

<p>Download and use the knife</p>

<pre><code>$ knife cookbook site download learn_chef_apache2
$ tar xzvf learn_chef_apache2-0.2.1.tar.gz -C cookbooks/
$ knife cookbook  upload -a 
</code></pre>

<p>Besure to edit the node&rsquo;s recipes.</p>

<p>Two tips:</p>

<p>Remove the cookbook from the server&rsquo;s list:</p>

<pre><code># knife cookbook delete learn_chef_apache2 0.2.1
</code></pre>

<p>Directly remove the recipe from the node:</p>

<pre><code># knife node run_list remove ChefClient1 recipe[nginx]
# knife node run_list remove ChefClient1 recipe[eclipse]
</code></pre>
]]></content>
  </entry>
  
</feed>
