<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ssh | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/ssh/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-12-07T19:55:47+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remote SSH and VNC Forwarding]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/03/30/remote-ssh-and-vnc-forwarding/"/>
    <updated>2014-03-30T15:05:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/03/30/remote-ssh-and-vnc-forwarding</id>
    <content type="html"><![CDATA[<p>因为有中转服务器的存在，我们需要建立ssh端口转发，以便一步到位通过中转服务器登录到远程主机。<br /></p>

<h3>ssh转发</h3>

<p>建立ssh转发：<br /></p>

<pre><code>    ssh -L 2121:192.168.1xx.xxx.xxx 1xx.xxx.xxx.xxx -l Tomcat
</code></pre>

<p>建立以后则可以：<br /></p>

<pre><code>    ssh root@localhost -p 2121
</code></pre>

<p>Autossh without entering password:<br /></p>

<pre><code>    cat id_rsa.pub | ssh Tomcat@1xx.xxx.xx.xxx 'cat &gt;&gt;.ssh/authorized_keys'
    # After login on to 170, run:
    chmod 600 ~/.ssh/authorized_keys
</code></pre>

<h3>VNC设置</h3>

<p>配置VNC自动启动:<br /></p>

<pre><code>    vim /etc/init.d/vncserver
    # 添加：
    VNCSERVERS="1:rohc"
    VNCSERVERARGS[1]="-geometry 1280x1024"
    $ chkconfig vncserver on
</code></pre>

<p>设置VNC转发：<br /></p>

<pre><code>    ssh -L 2333:192.168.1xx.xxx:5901 1xx.xxx.xxx.xxx -l Tomcat
</code></pre>

<p>之后就可以通过:<br /></p>

<pre><code>    vncviewer localhost:5901来访问VNC了。  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ssh Socket Proxy Under Windows]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/12/20/using-ssh-socket-proxy-under-windows/"/>
    <updated>2013-12-20T15:20:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/12/20/using-ssh-socket-proxy-under-windows</id>
    <content type="html"><![CDATA[<p>1. Download Putty, it&rsquo;s a green software, click it and then you got its configuration window.  <br/>
2. Configure the ssh Tunnel via following</p>

<p><img src="/images/putty1.jpg" alt="putty1.jpg" /></p>

<p>3. Disable the Command line interface.</p>

<p><img src="/images/putty15.jpg" alt="putty1.jpg" /></p>

<p>4. Now using the configuration you can logon to remote server.</p>

<p><img src="/images/putty2.jpg" alt="putty1.jpg" /></p>

<p>5. Now you can use socket proxy via &ldquo;127.0.0.1&rdquo;,  port is 1395.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Reverse SSH for Across Something(2)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/11/19/use-reverse-ssh-for-across-something-2/"/>
    <updated>2013-11-19T14:03:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/11/19/use-reverse-ssh-for-across-something-2</id>
    <content type="html"><![CDATA[<h3>ssh command</h3>

<p>Take following command for detailed example of using ssh:</p>

<pre><code>    alias mydaili='ssh -qTfnN -D '
    -q Quite Mode
    -T Disable pseudo-tty allocation
    -f background the ssh
    -n redirect the stdin from /dev/null
    -N Don't execute a remote command
    -D Bind address
</code></pre>

<h3>Using rsh</h3>

<p>rsh could be used for executing the command remotely, thus in my family&rsquo;s debian machine I could write following script:</p>

<pre><code class="bash remoteON.sh">    cat /bin/remoteON 
    #!/bin/sh
    rsh -l root localhost -p 4381  ssh -qTfnN -L 1XX.XXX.XXX.XXX:9004:1XX.XXX.XXX.XXX:8000 USERNAME@remoteserver.com &amp;
    chmod 777 /bin/remoteON
</code></pre>

<p>For killing the remote machines&rsquo;s running ssh tunnel process, write another script:</p>

<pre><code class="bash remoteOFF.sh">    !#/bin/sh
    #Fetch the ssh id
    sshid=`rsh -l root localhost -p 4381 ps | grep "ssh -qTfnN" | awk '{print $1}'`
    #Kill the selected process
    rsh -l root localhost -p 4381 kill $sshid
    $ chmod 777 /bin/remoteOFF
</code></pre>

<h3>Write the local script</h3>

<p>Local Scripts is for calling the remoteON and remoteOFF.   <br/>
Script for starting the proxy</p>

<pre><code class="bash startproxy.sh">#!/bin/sh
#Start the openWRT Tunnel
rsh -l root 10.0.0.111 /bin/remoteON &amp;
#Sleep 3 seconds
sleep 3
#Start the Debian Tunnel
rsh -l root 10.0.0.111 ssh -qTfnN -L 10.0.0.111:9001:1XX.XXX.XXX.XXX:9004 root@localhost -p 4381 &amp;
</code></pre>

<p>Script for stopping the proxy</p>

<pre><code class="bash stopproxy.sh">#!/bin/sh
# Stop the openWRT Tunnel:
rsh -l root 10.0.0.111 /bin/remoteOFF &amp;
# Sleep 3 seconds
sleep 3
# Stop the Debian Tunnel
sshid=`rsh -l root 10.0.0.111 ps -ef | grep "ssh -qTfnN" | awk '{print $2}'`
rsh -l root 10.0.0.111 kill $sshid &amp;
</code></pre>

<h3>How to use it?</h3>

<p>If you want to use proxy, simply ./startproxy.sh.   <br/>
After using the proxy, you can ./stopproxy.sh for totally release the connection and release the resources.</p>
]]></content>
  </entry>
  
</feed>
