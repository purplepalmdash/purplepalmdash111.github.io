<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-06-01T14:41:50+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Translator in ArchLinux+Awesome(2)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/10/22/my-translator-in-archlinux-plus-awesome-2/"/>
    <updated>2013-10-22T17:23:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/10/22/my-translator-in-archlinux-plus-awesome-2</id>
    <content type="html"><![CDATA[<h3>Prefix</h3>

<p>3 days ago I wrote a simple translator on my ArchLinux which could pop-up a notification window when I query a word. But when I use it at company it failed. Becaus the firewall has banned the communication to Google&rsquo;s API. Thus I have to write another version of translator, which could get the result from the local database.</p>

<h3>Preparation</h3>

<p>python-stardict is a great library for querying word from stardict&rsquo;s dictionary, you can get it via:</p>

<pre><code>    $ git clone https://github.com/pysuxing/python-stardict.git
</code></pre>

<p>Also you have to download stardict&rsquo;s dictionary from <a href="" title="http://abloz.com/huzheng/stardict-dic/&quot; &quot;http://abloz.com/huzheng/stardict-dic/">http://abloz.com/huzheng/stardict-dic/</a>, you can choose whatever you like dictionary, then uncompress it into your python-stardict located directory.</p>

<h3>Coding</h3>

<p>Open stardict.py with your favorite editor, adding a function at the end of the file. The code snippet is listed as following:
{% codeblock stardict.py -stardict.py %}
def my_read_dict_info():
    &ldquo;&rdquo;&ldquo;
    &rdquo;&ldquo;&rdquo;
    my_ifo_file = &ldquo;/home/Trusty/code/python/python-stardict/stardict-langdao-ec-gb-2.4.2/langdao-ec-gb.ifo&rdquo;
    my_idx_file = &ldquo;/home/Trusty/code/python/python-stardict/stardict-langdao-ec-gb-2.4.2/langdao-ec-gb.idx&rdquo;
    my_dict_file = &ldquo;/home/Trusty/code/python/python-stardict/stardict-langdao-ec-gb-2.4.2/langdao-ec-gb.dict.dz&rdquo;
    #########Uncomment them for other dictionaries ######
    #my_dict_file = &ldquo;stardict-dictd_www.dict.org_gcide-2.4.2/dictd_www.dict.org_gcide.dict.dz&rdquo;
    #my_idx_file = &ldquo;stardict-dictd_www.dict.org_gcide-2.4.2/dictd_www.dict.org_gcide.idx&rdquo;
    #my_ifo_file = &ldquo;stardict-dictd_www.dict.org_gcide-2.4.2/dictd_www.dict.org_gcide.ifo&rdquo;
    #my_ifo_file = &ldquo;stardict-longman-2.4.2/longman.ifo&rdquo;
    #my_idx_file = &ldquo;stardict-longman-2.4.2/longman.idx&rdquo;
    #my_dict_file = &ldquo;stardict-longman-2.4.2/longman.dict.dz&rdquo;
    my_ifo_reader = IfoFileReader(my_ifo_file)
    my_idx_reader = IdxFileReader(my_idx_file)
    my_dict_reader = DictFileReader(my_dict_file, my_ifo_reader, my_idx_reader, True)
    cmdargs = str(sys.argv) ## args
    result = my_dict_reader.get_dict_by_word(str(sys.argv[1]))  ## Using args[1] for querying
    print result[0].values()[0]     ## output result in terminal
    result_str = &ldquo;\&lsquo;<span color=\"green\" size=\"14000\">&rdquo;+result[0].values()[0]+&ldquo;</span>\&rsquo;&rdquo;    ## Build the command line for notify-send
    #print result_str
    call([&ldquo;notify-send&rdquo;, str(sys.argv[1]), result_str])     ## Call notify-send to print on screen, last for 5 seconds
    #call([&ldquo;echo&rdquo;, commandstr])
    #output = subprocess.check_output([&ldquo;echo&rdquo;, commandstr])
    #p1 = subprocess.Popen([&lsquo;echo&rsquo;,&lsquo;-e&rsquo;, commandstr], stdout=subprocess.PIPE)
    #p1 = subprocess.Popen([&lsquo;printf&rsquo;, commandstr], stdout=subprocess.PIPE)
    #p2 = subprocess.Popen([&lsquo;awesome-client&rsquo;, &lsquo;-&rsquo;], stdin=p1.stdout, stdout=subprocess.PIPE)
    #p1.stdout.close()
    #output = p2.communicate()[0]
    #print &ldquo;*****&rdquo;
    #print output</p>

<h1>read_ifo_file(&ldquo;stardict-cedict-gb-2.4.2/cedict-gb.ifo&rdquo;)</h1>

<h1>read_idx_file(&ldquo;stardict-cedict-gb-2.4.2/cedict-gb.idx&rdquo;)</h1>

<h1>read_dict_info()</h1>

<p>my_read_dict_info()
{% endcodeblock %}</p>

<p>Clean code:
{% codeblock stardict_clean.py -stardict_clean.py %}
def my_read_dict_info():
    &ldquo;&rdquo;&ldquo;
    &rdquo;&ldquo;&rdquo;
    my_ifo_file = &ldquo;/home/Trusty/code/python/python-stardict/stardict-langdao-ec-gb-2.4.2/langdao-ec-gb.ifo&rdquo;
    my_idx_file = &ldquo;/home/Trusty/code/python/python-stardict/stardict-langdao-ec-gb-2.4.2/langdao-ec-gb.idx&rdquo;
    my_dict_file = &ldquo;/home/Trusty/code/python/python-stardict/stardict-langdao-ec-gb-2.4.2/langdao-ec-gb.dict.dz&rdquo;
    my_ifo_reader = IfoFileReader(my_ifo_file)
    my_idx_reader = IdxFileReader(my_idx_file)
    my_dict_reader = DictFileReader(my_dict_file, my_ifo_reader, my_idx_reader, True)
    cmdargs = str(sys.argv) ## args
    result = my_dict_reader.get_dict_by_word(str(sys.argv[1]))  ## Using args[1] for querying
    print result[0].values()[0]     ## output result in terminal
    result_str = &ldquo;\&lsquo;<span color=\"green\" size=\"14000\">&rdquo;+result[0].values()[0]+&ldquo;</span>\&rsquo;&rdquo;    ## Build the command line for notify-send
    call([&ldquo;notify-send&rdquo;, str(sys.argv[1]), result_str])     ## Call notify-send to print on screen, last for 5 seconds</p>

<p>my_read_dict_info()
{% endcodeblock %}</p>

<h3>Configuration</h3>

<p>You can add an alias into your ~/.bashrc</p>

<pre><code>    alias mydict='python2 /home/Trusty/code/python/python-stardict/stardict.py'
</code></pre>

<p>Or you can add an executable file named /bin/mydic which contains:
{% codeblock mydic.sh -mydic.sh %}</p>

<h1>!/bin/bash</h1>

<p>python2 /home/Trusty/code/python/python-stardict/stardict.py $@
{% endcodeblock %}</p>

<h3>Result</h3>

<p>See the following images for result:</p>

<p><img src="/images/translator2_0.jpg" title="translator0" alt="Alt text" /><br/>
<img src="/images/translator2_1.jpg" title="translator1" alt="Alt text" /></p>

<p>The query result will vanished in 5 seconds.</p>

<h3>TBD</h3>

<ul>
<li>How to automatically record every query?</li>
<li>How to replace the python-stardict with my own library(Written in C, much more fast?)?</li>
<li>How to automatically judge english/chinese, or other languages?</li>
<li>Considering Error Handling.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Translator in ArchLinux+Awesome]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/10/19/my-translator-in-archlinux-plus-awesome/"/>
    <updated>2013-10-19T11:23:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/10/19/my-translator-in-archlinux-plus-awesome</id>
    <content type="html"><![CDATA[<h3>BackGround</h3>

<p>My requirement is quite simple:  I read many english content based website everyday, this means I always encounter many unkown words. My solution is use a translatio software or directly refer them in <a href="http://translate.google.com" title="translate.google.com">translate.google.com</a>. But all of these ways were time-consuming process: you have to switch to other software, or you have to open new tabs in your web brower. So do we have a more sufficient way for doing these steps? I used a whole morning of my saturday and finished this procedure.</p>

<h3>Preparation</h3>

<p>You have to install google translator for CLI in ArchLinux&rsquo;s yaourt, you can choose git version or standard version , I choose git version:</p>

<pre><code>    $ yaourt -S google-translate-cli-git
</code></pre>

<p>After the installation, you can refer to <a href="http://www.soimort.org/google-translate-cli/" title="http://www.soimort.org/google-translate-cli/">http://www.soimort.org/google-translate-cli/</a> for more detailed usage for this tool. For example:</p>

<pre><code>    [Trusty@DashArch ~]$ trs {=zh} "Hello, world"
    你好，世界
</code></pre>

<h3>Using Notification under awesome</h3>

<p>Yes we can use &ldquo;notify-send&rdquo; to directly display something on the screen, but notify-send is not convinient for us to control its behavior,</p>

<pre><code>    notify-send $title $result --icon=dialog-information
</code></pre>

<p>So we will use awesome&rsquo;s own notification module, name naughty. But first we have to add a new globle variable in rc.lua which under your own configuration directory, mine is under:
{% codeblock rc.lua -rc.lua %}
[Trusty@DashArch ~]$ cat /home/Trusty/.config/awesome/rc.lua | more
&ndash; Standard awesome library
&ndash; Notification library
local naughty = require(&ldquo;naughty&rdquo;)
naughty1 = require(&ldquo;naughty&rdquo;)
{% endcodeblock %}
If we directly using rc.lua&rsquo;s local variable &ldquo;naughty&rdquo;,  awesome will complaint it cannot find the variable thus cannot display notification.<br/>
The method for displaying notification via naughty is as:
    echo &lsquo;naughty1.notify({title = &ldquo;testing&rdquo;, text = &ldquo;naughty&rdquo;})&rsquo; | awesome-client -
Notice naughty1 is the newly added variable in our configuration file.</p>

<h3>Our own bash script</h3>

<p>{% codeblock mytran.sh -mytrans.sh %}</p>

<h1>!/bin/bash</h1>

<h1>check parameters</h1>

<p>EXPECTED_ARGS=1
if [ $# -lt $EXPECTED_ARGS ]
then
    echo &ldquo;Usage: <code>basename $0</code> Your_Tranlate_Word&rdquo;
    notify-send &ldquo;null&rdquo; &ldquo;null&rdquo; &ndash;icon=dialog-information
    exit -1
fi
title=$@
declare -a result1
result1=<code>trs {=zh} "$@"</code>
result=&ldquo;&rdquo;
for var in ${result1[@]};do
    result=$result' &lsquo;$var
done
echo &ldquo;naughty1.notify({title = \&rdquo;$title\&ldquo;, text = \&rdquo;$result\&ldquo;, timeout = 5, height = 100, font = \"Verdana 20\&rdquo;, bg = \&ldquo;BB68D9\&rdquo;, timeout=5})&ldquo; | awesome-client -
{% endcodeblock %}</p>

<h3>Result</h3>

<p>The script is called via:<br/>
when you are browsing the webpage, if you encounter the words, simply press mod4+r, it will call the &lsquo;run&rsquo; window, input mytrans.sh &ldquo;Your words&rdquo; then you will get the notification window at the top right of your monitor. This window will last for 5 seconds, then vanished.  the image is like following:<br/>
<img src="/images/notify.jpg" title="notify picture" alt="/images/notify.jpg" /></p>

<p>Finally we can enjoy the non-blocking thinking reading now.</p>
]]></content>
  </entry>
  
</feed>
