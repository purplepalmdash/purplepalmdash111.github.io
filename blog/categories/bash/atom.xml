<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-02-01T20:35:26+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Translator in ArchLinux+Awesome(2)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/10/22/my-translator-in-archlinux-plus-awesome-2/"/>
    <updated>2013-10-22T17:23:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/10/22/my-translator-in-archlinux-plus-awesome-2</id>
    <content type="html"><![CDATA[<h3>Prefix</h3>

<p>3 days ago I wrote a simple translator on my ArchLinux which could pop-up a notification window when I query a word. But when I use it at company it failed. Becaus the firewall has banned the communication to Google&rsquo;s API. Thus I have to write another version of translator, which could get the result from the local database.</p>

<h3>Preparation</h3>

<p>python-stardict is a great library for querying word from stardict&rsquo;s dictionary, you can get it via:</p>

<pre><code>    $ git clone https://github.com/pysuxing/python-stardict.git
</code></pre>

<p>Also you have to download stardict&rsquo;s dictionary from <a href="" title="http://abloz.com/huzheng/stardict-dic/&quot; &quot;http://abloz.com/huzheng/stardict-dic/">http://abloz.com/huzheng/stardict-dic/</a>, you can choose whatever you like dictionary, then uncompress it into your python-stardict located directory.</p>

<h3>Coding</h3>

<p>Open stardict.py with your favorite editor, adding a function at the end of the file. The code snippet is listed as following:
<figure class='code'><figcaption><span>stardict.py -stardict.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">my_read_dict_info</span><span class="p">():</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">my_ifo_file</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">Trusty</span><span class="o">/</span><span class="n">code</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">stardict</span><span class="o">/</span><span class="n">stardict</span><span class="o">-</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">-</span><span class="mf">2.4</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">.</span><span class="n">ifo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">my_idx_file</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">Trusty</span><span class="o">/</span><span class="n">code</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">stardict</span><span class="o">/</span><span class="n">stardict</span><span class="o">-</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">-</span><span class="mf">2.4</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">.</span><span class="n">idx</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">my_dict_file</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">Trusty</span><span class="o">/</span><span class="n">code</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">stardict</span><span class="o">/</span><span class="n">stardict</span><span class="o">-</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">-</span><span class="mf">2.4</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">.</span><span class="n">dict</span><span class="o">.</span><span class="n">dz</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="c">#########Uncomment them for other dictionaries ######</span>
</span><span class='line'>    <span class="c">#my_dict_file = &amp;ldquo;stardict-dictd_www.dict.org_gcide-2.4.2/dictd_www.dict.org_gcide.dict.dz&amp;rdquo;</span>
</span><span class='line'>    <span class="c">#my_idx_file = &amp;ldquo;stardict-dictd_www.dict.org_gcide-2.4.2/dictd_www.dict.org_gcide.idx&amp;rdquo;</span>
</span><span class='line'>    <span class="c">#my_ifo_file = &amp;ldquo;stardict-dictd_www.dict.org_gcide-2.4.2/dictd_www.dict.org_gcide.ifo&amp;rdquo;</span>
</span><span class='line'>    <span class="c">#my_ifo_file = &amp;ldquo;stardict-longman-2.4.2/longman.ifo&amp;rdquo;</span>
</span><span class='line'>    <span class="c">#my_idx_file = &amp;ldquo;stardict-longman-2.4.2/longman.idx&amp;rdquo;</span>
</span><span class='line'>    <span class="c">#my_dict_file = &amp;ldquo;stardict-longman-2.4.2/longman.dict.dz&amp;rdquo;</span>
</span><span class='line'>    <span class="n">my_ifo_reader</span> <span class="o">=</span> <span class="n">IfoFileReader</span><span class="p">(</span><span class="n">my_ifo_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">my_idx_reader</span> <span class="o">=</span> <span class="n">IdxFileReader</span><span class="p">(</span><span class="n">my_idx_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">my_dict_reader</span> <span class="o">=</span> <span class="n">DictFileReader</span><span class="p">(</span><span class="n">my_dict_file</span><span class="p">,</span> <span class="n">my_ifo_reader</span><span class="p">,</span> <span class="n">my_idx_reader</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cmdargs</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="c">## args</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">my_dict_reader</span><span class="o">.</span><span class="n">get_dict_by_word</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>  <span class="c">## Using args[1] for querying</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>     <span class="c">## output result in terminal</span>
</span><span class='line'>    <span class="n">result_str</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>\<span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">span</span> <span class="n">color</span><span class="o">=</span>\<span class="s">&quot;green</span><span class="se">\&quot;</span><span class="s"> size=</span><span class="se">\&quot;</span><span class="s">14000</span><span class="se">\&quot;</span><span class="s">&gt;&amp;rdquo;+result[0].values()[0]+&amp;ldquo;&lt;/span&gt;\&amp;rsquo;&amp;rdquo;    ## Build the command line for notify-send</span>
</span><span class='line'>    <span class="c">#print result_str</span>
</span><span class='line'>    <span class="n">call</span><span class="p">([</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">notify</span><span class="o">-</span><span class="n">send</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">str</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">result_str</span><span class="p">])</span>     <span class="c">## Call notify-send to print on screen, last for 5 seconds</span>
</span><span class='line'>    <span class="c">#call([&amp;ldquo;echo&amp;rdquo;, commandstr])</span>
</span><span class='line'>    <span class="c">#output = subprocess.check_output([&amp;ldquo;echo&amp;rdquo;, commandstr])</span>
</span><span class='line'>    <span class="c">#p1 = subprocess.Popen([&amp;lsquo;echo&amp;rsquo;,&amp;lsquo;-e&amp;rsquo;, commandstr], stdout=subprocess.PIPE)</span>
</span><span class='line'>    <span class="c">#p1 = subprocess.Popen([&amp;lsquo;printf&amp;rsquo;, commandstr], stdout=subprocess.PIPE)</span>
</span><span class='line'>    <span class="c">#p2 = subprocess.Popen([&amp;lsquo;awesome-client&amp;rsquo;, &amp;lsquo;-&amp;rsquo;], stdin=p1.stdout, stdout=subprocess.PIPE)</span>
</span><span class='line'>    <span class="c">#p1.stdout.close()</span>
</span><span class='line'>    <span class="c">#output = p2.communicate()[0]</span>
</span><span class='line'>    <span class="c">#print &amp;ldquo;*****&amp;rdquo;</span>
</span><span class='line'>    <span class="c">#print output&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">read_ifo_file</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">stardict</span><span class="o">-</span><span class="n">cedict</span><span class="o">-</span><span class="n">gb</span><span class="o">-</span><span class="mf">2.4</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">cedict</span><span class="o">-</span><span class="n">gb</span><span class="o">.</span><span class="n">ifo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">read_idx_file</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">stardict</span><span class="o">-</span><span class="n">cedict</span><span class="o">-</span><span class="n">gb</span><span class="o">-</span><span class="mf">2.4</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">cedict</span><span class="o">-</span><span class="n">gb</span><span class="o">.</span><span class="n">idx</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">read_dict_info</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">my_read_dict_info</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Clean code:
<figure class='code'><figcaption><span>stardict_clean.py -stardict_clean.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">my_read_dict_info</span><span class="p">():</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">my_ifo_file</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">Trusty</span><span class="o">/</span><span class="n">code</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">stardict</span><span class="o">/</span><span class="n">stardict</span><span class="o">-</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">-</span><span class="mf">2.4</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">.</span><span class="n">ifo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">my_idx_file</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">Trusty</span><span class="o">/</span><span class="n">code</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">stardict</span><span class="o">/</span><span class="n">stardict</span><span class="o">-</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">-</span><span class="mf">2.4</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">.</span><span class="n">idx</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">my_dict_file</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">Trusty</span><span class="o">/</span><span class="n">code</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">stardict</span><span class="o">/</span><span class="n">stardict</span><span class="o">-</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">-</span><span class="mf">2.4</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">langdao</span><span class="o">-</span><span class="n">ec</span><span class="o">-</span><span class="n">gb</span><span class="o">.</span><span class="n">dict</span><span class="o">.</span><span class="n">dz</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">my_ifo_reader</span> <span class="o">=</span> <span class="n">IfoFileReader</span><span class="p">(</span><span class="n">my_ifo_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">my_idx_reader</span> <span class="o">=</span> <span class="n">IdxFileReader</span><span class="p">(</span><span class="n">my_idx_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">my_dict_reader</span> <span class="o">=</span> <span class="n">DictFileReader</span><span class="p">(</span><span class="n">my_dict_file</span><span class="p">,</span> <span class="n">my_ifo_reader</span><span class="p">,</span> <span class="n">my_idx_reader</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cmdargs</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="c">## args</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">my_dict_reader</span><span class="o">.</span><span class="n">get_dict_by_word</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>  <span class="c">## Using args[1] for querying</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>     <span class="c">## output result in terminal</span>
</span><span class='line'>    <span class="n">result_str</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>\<span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">span</span> <span class="n">color</span><span class="o">=</span>\<span class="s">&quot;green</span><span class="se">\&quot;</span><span class="s"> size=</span><span class="se">\&quot;</span><span class="s">14000</span><span class="se">\&quot;</span><span class="s">&gt;&amp;rdquo;+result[0].values()[0]+&amp;ldquo;&lt;/span&gt;\&amp;rsquo;&amp;rdquo;    ## Build the command line for notify-send</span>
</span><span class='line'>    <span class="n">call</span><span class="p">([</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">notify</span><span class="o">-</span><span class="n">send</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">str</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">result_str</span><span class="p">])</span>     <span class="c">## Call notify-send to print on screen, last for 5 seconds&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">my_read_dict_info</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Configuration</h3>

<p>You can add an alias into your ~/.bashrc</p>

<pre><code>    alias mydict='python2 /home/Trusty/code/python/python-stardict/stardict.py'
</code></pre>

<p>Or you can add an executable file named /bin/mydic which contains:
<figure class='code'><figcaption><span>mydic.sh -mydic.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;python2 /home/Trusty/code/python/python-stardict/stardict.py <span class="nv">$@</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Result</h3>

<p>See the following images for result:</p>

<p><img src="/images/translator2_0.jpg" title="translator0" alt="Alt text" /><br/>
<img src="/images/translator2_1.jpg" title="translator1" alt="Alt text" /></p>

<p>The query result will vanished in 5 seconds.</p>

<h3>TBD</h3>

<ul>
<li>How to automatically record every query?</li>
<li>How to replace the python-stardict with my own library(Written in C, much more fast?)?</li>
<li>How to automatically judge english/chinese, or other languages?</li>
<li>Considering Error Handling.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Translator in ArchLinux+Awesome]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/10/19/my-translator-in-archlinux-plus-awesome/"/>
    <updated>2013-10-19T11:23:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/10/19/my-translator-in-archlinux-plus-awesome</id>
    <content type="html"><![CDATA[<h3>BackGround</h3>

<p>My requirement is quite simple:  I read many english content based website everyday, this means I always encounter many unkown words. My solution is use a translatio software or directly refer them in <a href="http://translate.google.com" title="translate.google.com">translate.google.com</a>. But all of these ways were time-consuming process: you have to switch to other software, or you have to open new tabs in your web brower. So do we have a more sufficient way for doing these steps? I used a whole morning of my saturday and finished this procedure.</p>

<h3>Preparation</h3>

<p>You have to install google translator for CLI in ArchLinux&rsquo;s yaourt, you can choose git version or standard version , I choose git version:</p>

<pre><code>    $ yaourt -S google-translate-cli-git
</code></pre>

<p>After the installation, you can refer to <a href="http://www.soimort.org/google-translate-cli/" title="http://www.soimort.org/google-translate-cli/">http://www.soimort.org/google-translate-cli/</a> for more detailed usage for this tool. For example:</p>

<pre><code>    [Trusty@DashArch ~]$ trs {=zh} "Hello, world"
    你好，世界
</code></pre>

<h3>Using Notification under awesome</h3>

<p>Yes we can use &ldquo;notify-send&rdquo; to directly display something on the screen, but notify-send is not convinient for us to control its behavior,</p>

<pre><code>    notify-send $title $result --icon=dialog-information
</code></pre>

<p>So we will use awesome&rsquo;s own notification module, name naughty. But first we have to add a new globle variable in rc.lua which under your own configuration directory, mine is under:
<figure class='code'><figcaption><span>rc.lua -rc.lua </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="p">[</span><span class="n">Trusty</span><span class="err">@</span><span class="n">DashArch</span> <span class="err">~</span><span class="p">]</span><span class="err">$</span> <span class="n">cat</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">Trusty</span><span class="o">/</span><span class="p">.</span><span class="n">config</span><span class="o">/</span><span class="n">awesome</span><span class="o">/</span><span class="n">rc</span><span class="p">.</span><span class="n">lua</span> <span class="err">|</span> <span class="n">more</span>
</span><span class='line'><span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="n">Standard</span> <span class="n">awesome</span> <span class="n">library</span>
</span><span class='line'><span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="n">Notification</span> <span class="n">library</span>
</span><span class='line'><span class="kd">local</span> <span class="n">naughty</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">naughty</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">naughty1</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">naughty</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure>
If we directly using rc.lua&rsquo;s local variable &ldquo;naughty&rdquo;,  awesome will complaint it cannot find the variable thus cannot display notification.<br/>
The method for displaying notification via naughty is as:
    echo &lsquo;naughty1.notify({title = &ldquo;testing&rdquo;, text = &ldquo;naughty&rdquo;})&rsquo; | awesome-client -
Notice naughty1 is the newly added variable in our configuration file.</p>

<h3>Our own bash script</h3>

<p><figure class='code'><figcaption><span>mytran.sh -mytrans.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;check parameters&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;EXPECTED_ARGS<span class="o">=</span>1
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span>-lt <span class="nv">$EXPECTED_ARGS</span> <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>Usage: &lt;code&gt;basename <span class="nv">$0</span>&lt;/code&gt; Your_Tranlate_Word<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    notify-send <span class="p">&amp;</span>ldquo<span class="p">;</span>null<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>null<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ndash<span class="p">;</span><span class="nv">icon</span><span class="o">=</span>dialog-information
</span><span class='line'>    <span class="nb">exit</span> -1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">title</span><span class="o">=</span><span class="nv">$@</span>
</span><span class='line'><span class="nb">declare</span> -a result1
</span><span class='line'><span class="nv">result1</span><span class="o">=</span>&lt;code&gt;trs <span class="o">{=</span>zh<span class="o">}</span> <span class="s2">&quot;$@&quot;</span>&lt;/code&gt;
</span><span class='line'><span class="nv">result</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="k">for</span> var in <span class="k">${</span><span class="nv">result1</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span><span class="k">do</span>
</span><span class='line'>    <span class="nv">result</span><span class="o">=</span><span class="nv">$result</span><span class="err">&#39;</span> <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="nv">$var</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>naughty1.notify<span class="o">({</span><span class="nv">title</span> <span class="o">=</span> <span class="se">\&amp;</span>rdquo<span class="p">;</span><span class="nv">$title</span><span class="se">\&amp;</span>ldquo<span class="p">;</span>, <span class="nv">text</span> <span class="o">=</span> <span class="se">\&amp;</span>rdquo<span class="p">;</span><span class="nv">$result</span><span class="se">\&amp;</span>ldquo<span class="p">;</span>, <span class="nv">timeout</span> <span class="o">=</span> 5, <span class="nv">height</span> <span class="o">=</span> 100, <span class="nv">font</span> <span class="o">=</span> <span class="se">\&quot;</span>Verdana 20<span class="se">\&amp;</span>rdquo<span class="p">;</span>, <span class="nb">bg</span> <span class="o">=</span> <span class="se">\&amp;</span>ldquo<span class="p">;</span>BB68D9<span class="se">\&amp;</span>rdquo<span class="p">;</span>, <span class="nv">timeout</span><span class="o">=</span>5<span class="o">})</span><span class="p">&amp;</span>ldquo<span class="p">;</span> <span class="p">|</span> awesome-client -
</span></code></pre></td></tr></table></div></figure></p>

<h3>Result</h3>

<p>The script is called via:<br/>
when you are browsing the webpage, if you encounter the words, simply press mod4+r, it will call the &lsquo;run&rsquo; window, input mytrans.sh &ldquo;Your words&rdquo; then you will get the notification window at the top right of your monitor. This window will last for 5 seconds, then vanished.  the image is like following:<br/>
<img src="/images/notify.jpg" title="notify picture" alt="/images/notify.jpg" /></p>

<p>Finally we can enjoy the non-blocking thinking reading now.</p>
]]></content>
  </entry>
  
</feed>
