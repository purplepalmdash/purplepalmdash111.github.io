<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: I2c | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/i2c/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-08-13T10:10:26+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[I2C Between raspberryPI and Arduino]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/12/29/i2c-between-raspberrypi-and-arduino/"/>
    <updated>2013-12-29T19:32:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/12/29/i2c-between-raspberrypi-and-arduino</id>
    <content type="html"><![CDATA[<h3>连线</h3>

<p>Arduino I2C 连线:  <br/>
<img src="/images/arduino-i2c-pins.jpg" alt="arduino.jpg" />  <br/>
RaspberryPI I2C 连线:  <br/>
<img src="/images/raspberry-pi-i2c-pins.jpg" alt="rasp.jpg" />  <br/>
连线图：</p>

<pre><code>    RPI               Arduino (Uno/Duemillanove)
    --------------------------------------------
    GPIO 0 (SDA) &lt;--&gt; Pin 4 (SDA)
    GPIO 1 (SCL) &lt;--&gt; Pin 5 (SCL)
    Ground       &lt;--&gt; Ground
</code></pre>

<p><img src="/images/RaspberryPI-I2c-Arduino.png" alt="rasp-arduino.jpg" /></p>

<h3>Arduino端代码</h3>

<pre><code class="c i2c.ino">#include &lt;Wire.h&gt;

#define SLAVE_ADDRESS 0x04
int number = 0;
int state = 0;

void setup() {
    pinMode(13, OUTPUT);
    Serial.begin(9600);         // start serial for output
    // initialize i2c as slave
    Wire.begin(SLAVE_ADDRESS);

    // define callbacks for i2c communication
    Wire.onReceive(receiveData);
    Wire.onRequest(sendData);

    Serial.println("Ready!");
}

void loop() {
    delay(100);
}

// callback for received data
void receiveData(int byteCount){

    while(Wire.available()) {
        number = Wire.read();
        Serial.print("data received: ");
        Serial.println(number);

        if (number == 1){

            if (state == 0){
                digitalWrite(13, HIGH); // set the LED on
                state = 1;
            }
            else{
                digitalWrite(13, LOW); // set the LED off
                state = 0;
            }
         }
     }
}

// callback for sending data
void sendData(){
    Wire.write(number);
}
</code></pre>

<h3>RaspberryPI端准备</h3>

<p>在/etc/modules中增加一行:</p>

<pre><code>    i2c-dev
</code></pre>

<p>注释掉黑名单：</p>

<pre><code>    $ cat /etc/modprobe.d/raspi-blacklist.conf
    # blacklist spi and i2c by default (many users don't need them)
    # blacklist spi-bcm2708
    #blacklist i2c-bcm2708
</code></pre>

<p>安装i2c工具：</p>

<pre><code>    apt-get install i2c-tools
</code></pre>

<p>安装python库：</p>

<pre><code>    apt-get install python-smbus
</code></pre>

<p>探测i2c设备</p>

<pre><code>    i2cdetect -y 0
</code></pre>

<p>如果不是root用户，例如，如果是pi用户，则需要将当前用户增加到i2c组中:</p>

<pre><code>    $ sudo adduser pi i2c
</code></pre>

<h3>RaspberryPI端代码</h3>

<pre><code class="py i2c.py">import smbus
import time
# for RPI version 1, use "bus = smbus.SMBus(0)"
bus = smbus.SMBus(0)

# This is the address we setup in the Arduino Program
address = 0x04

def writeNumber(value):
    bus.write_byte(address, value)
    # bus.write_byte_data(address, 0, value)
    return -1

def readNumber():
    number = bus.read_byte(address)
    # number = bus.read_byte_data(address, 1)
    return number

while True:
    var = input("Enter 1 - 9: ")
    if not var:
        continue

    writeNumber(var)
    print "RPI: Hi Arduino, I sent you ", var
    # sleep one second
    time.sleep(1)

    number = readNumber()
    print "Arduino: Hey RPI, I received a digit ", number
    print
</code></pre>

<p>运行代码时要注意，0～255的数字输入进去，会在arduino i2c slave端收到对应的数据，并原封不动的被返回。超过255的数值将溢出。</p>
]]></content>
  </entry>
  
</feed>
