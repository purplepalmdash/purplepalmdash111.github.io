<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nodejs | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-05-20T11:17:16+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Porting Weather APP Into Node.js(3)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/07/12/porting-weather-app-into-node-dot-js-3/"/>
    <updated>2014-07-12T16:19:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/07/12/porting-weather-app-into-node-dot-js-3</id>
    <content type="html"><![CDATA[<h3>Get the timstamp of the record</h3>

<p>ObjectID could automatically store the insert timestamp, see following command:</p>

<pre><code>&gt; db.usercollection.find().pretty()
........
........
&gt; ObjectId("53be4e7eb5ca215e38c5f651").getTimestamp()
ISODate("2014-07-10T08:27:42Z")
&gt; ObjectId("53be4e7cb5ca215e38c5f650").getTimestamp()
ISODate("2014-07-10T08:27:40Z")
</code></pre>

<h3>Time Format</h3>

<p>Run following commands to get the timestamp since 1970:</p>

<pre><code>&gt; day=new Date()
Sat Jul 12 2014 21:15:10 GMT+0800 (CST)
&gt; day
Sat Jul 12 2014 21:15:10 GMT+0800 (CST)
&gt; day.getTime()
1405170910049
</code></pre>

<p>The date which we fetched should be multiply 1000.  <br/>
And write a for loop for getting out the real date:</p>

<pre><code>      // helper function
      function getDate(d) {
          return new Date(d);
      }
      console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
      // Refers to 1405170910049
      // WhatWeGet 1405170047
      // Should multiply 1000, Print out all of the timestamp
      for ( kk = 1; kk &lt; 24; kk++)
      {
         console.log(getDate(date_data[kk]*1000));
      }
</code></pre>

<p>Print the type of the variable:</p>

<pre><code>console.log(typeof (#{weatherlist[3].Temperature}));
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Porting Weather APP Into Node.js(2)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/07/09/porting-weather-app-into-node-dot-js-2/"/>
    <updated>2014-07-09T10:34:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/07/09/porting-weather-app-into-node-dot-js-2</id>
    <content type="html"><![CDATA[<p>Add packages dependencies:</p>

<pre><code>  "dependencies": {
    "express": "^4.5.1",
    "logfmt": "^1.1.2",
    "static-favicon": "~1.0.0",
    "morgan": "~1.0.0",
    "cookie-parser": "~1.0.1",
    "body-parser": "~1.0.0",
    "debug": "~0.7.4",
    "jade": "~1.3.0", 
    "mongodb": "*",
    "monk": "*"
  },
</code></pre>

<p>Then <code>npm install</code> to install the dependencies.</p>

<p>Install the package and save the version in package.json:</p>

<pre><code>npm install forecast --save
npm install cron --save
npm install http --save
npm install cheerio --save
</code></pre>

<p>Merge the TestNanjing.js and web.js file, let the fetch to be a function, or to be module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Porting Weather APP Into Node.js]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/07/07/porting-weather-app-into-node-dot-js/"/>
    <updated>2014-07-07T18:36:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/07/07/porting-weather-app-into-node-dot-js</id>
    <content type="html"><![CDATA[<h3>Website Design</h3>

<p>Use express for generating the whole website.</p>

<pre><code>$ pwd 
/home/Trusty/code/nodejs/weather
[Trusty@~/code/nodejs/weather]$ express weather
</code></pre>

<p>The express framework will be generated.</p>

<p>Add following dependencies into the weather/package.json:</p>

<pre><code>    "jade": "~1.3.0", 
    "mongodb": "*",
    "monk": "*"
</code></pre>

<p>Install packages:</p>

<pre><code>$ cd weather
$ npm install
</code></pre>

<p><code>mkdir data</code>, this command will create a directory named <code>data</code> which is used for holding our mongodb.  <br/>
Now visit <a href="http://localhost:3000/">http://localhost:3000/</a> you will see the demo html website.</p>

<p>This website should have the inteface for operating the database(MongoDB), so I will add some sub-pages for handling the request for insert and query the database.</p>

<h4>Insert Records Into MongoDB</h4>

<p>Design database in MongoDB:</p>

<pre><code>$ mongo
$ show dbs
admin       (empty)
local       0.078GB
my-website  0.078GB
mydb        0.078GB
nodetest1   0.078GB
test        (empty)
$ use weathertest
</code></pre>

<p>The DataSet should be designed as following:</p>

<pre><code>{
    "_id" : 1234,
    "AQI" : "70",
    "Level" : "良", 
    "FirstPollution" : "臭氧1小时", 
    "PM2_5" : "51", 
    "PM10" : "70", 
    "CO" : "0.148", 
    "NO2" : "31", 
    "O3_1hour" : "168", 
    "O3_8hour" : "68", 
    "S02" : "13" 
}
</code></pre>

<p>So the insert sentense should be like following:</p>

<pre><code>db.usercollection.insert({ "AQI" : "70", "Level" : "良", "FirstPollution" : "臭氧1小时", "PM2_5" : "51", "PM10" : "70", "CO" : "0.148", "NO2" : "31", "O3_1hour" : "168", "O3_8hour" : "68", "SO2" :"13"})
</code></pre>

<p>Verify the insert result via:</p>

<pre><code>&gt; db.usercollection.find().pretty()
{
    "_id" : ObjectId("53ba7e137346b7523d951084"),
    "AQI" : "70",
    "Level" : "良",
    "FirstPollution" : "臭氧1小时",
    "PM2_5" : "51",
    "PM10" : "70",
    "CO" : "0.148",
    "NO2" : "31",
    "O3_1hour" : "168",
    "O3_8hour" : "68",
    "SO2" : "13"
}
</code></pre>

<p>Should add more informations into the database, for example the temperature/humidity, which could also be fetched via npm package.  <br/>
First delete the inserted item via following command:</p>

<pre><code>&gt; db.usercollection.remove({"_id" : ObjectId("53ba7e137346b7523d951084")});
WriteResult({ "nRemoved" : 1 })
&gt; db.usercollection.find().pretty()
</code></pre>

<p>Then insert a new organized records and verify the insertion :</p>

<pre><code>db.usercollection.insert({ "Temperature" : "21.9", "DewPoint" : "19.93", "Humidity" : "0.89", "Pressure" : "1004.85", "Ozeone" : "289.03",  "AQI" : "70", "Level" : "良", "FirstPollution" : "臭氧1小时", "PM2_5" : "51", "PM10" : "70", "CO" : "0.148", "NO2" : "31", "O3_1hour" : "168", "O3_8hour" : "68", "SO2" :"13", "CurrentTime": "ISODate()"})
&gt; db.usercollection.find().pretty()
{
    "_id" : ObjectId("53ba82f97346b7523d951085"),
    "Temperature" : "21.9",
    "DewPoint" : "19.93",
    "Humidity" : "0.89",
    "Pressure" : "1004.85",
    "Ozeone" : "289.03",
    "AQI" : "70",
    "Level" : "良",
    "FirstPollution" : "臭氧1小时",
    "PM2_5" : "51",
    "PM10" : "70",
    "CO" : "0.148",
    "NO2" : "31",
    "O3_1hour" : "168",
    "O3_8hour" : "68",
    "SO2" : "13"
}
</code></pre>

<p>We will insert many many records into the database, how to distinguish them? By Timestamp!!!</p>

<p>In MongoDB we have the built-in Function Date():</p>

<pre><code>&gt; Date()
Mon Jul 07 2014 19:29:36 GMT+0800 (CST)
</code></pre>

<p>Each inserted Dataset&rsquo;s timestamp could be fetched out via following command:</p>

<pre><code>&gt; ObjectId("53ba876d7346b7523d951088").getTimestamp()
ISODate("2014-07-07T11:41:33Z")
</code></pre>

<p>Next step is using node.js api for processing the dataset.</p>

<h4>Display The Inserted Records</h4>

<p>We want to display the result like following:</p>

<p>```</p>

<ul>
    <li>Temperature: 21.9, DewPoint: 19.93, Humidity: 0.89, Pressure: 1004.85, Ozeone: 289.03, AQI: 70, Level: 良, FirstPollution: 臭氧1小时, PM2.5: 51, PM10: 70, CO: 0.148, NO2: 31, O3一小时： 168, O3八小时： 68, So2: 13。 </li>
    <li>Temperature: 21.9, DewPoint: 19.93, Humidity: 0.89, Pressure: 1004.85, Ozeone: 289.03, AQI: 70, Level: 良, FirstPollution: 臭氧1小时, PM2.5: 51, PM10: 70, CO: 0.148, NO2: 31, O3一小时： 168, O3八小时： 68, So2: 13。 </li>
    <li>Temperature: 21.9, DewPoint: 19.93, Humidity: 0.89, Pressure: 1004.85, Ozeone: 289.03, AQI: 70, Level: 良, FirstPollution: 臭氧1小时, PM2.5: 51, PM10: 70, CO: 0.148, NO2: 31, O3一小时： 168, O3八小时： 68, So2: 13。 </li>
</ul>


<pre><code>Change the router/index.js, add following lines:    
</code></pre>

<p>/<em> GET weatherlist page. </em>/
router.get(&lsquo;/weatherlist&rsquo;, function(req, res) {
    var db = req.db;
    var collection = db.get(&lsquo;usercollection&rsquo;);
    collection.find({},{},function(e,docs){
        res.render(&lsquo;weatherlist&rsquo;, {
            &ldquo;weatherlist&rdquo; : docs
        });
    });
});</p>

<pre><code>Add the new file named `weatherlist.jade` under views/ folder:    
</code></pre>

<p>block content
    h1.
        Weather List
    ul
        each weather, i in weatherlist
            li
                首要污染物: #{weather.FirstPollution}, <br />级别: #{weather.Level},<br />AQI: #{weather.AQI},<br />PM2.5: #{weather.PM2_5},<br />PM10: #{weather.PM10}, <br />一氧化碳: #{weather.CO}, <br />二氧化氮: #{weather.NO2}, <br />臭氧一小时浓度: #{weather.O3_1hour}, <br />臭氧八小时浓度: #{weather.O3_8hour}, <br />二氧化硫: #{weather.SO2}, <br />温度: #{weather.Temperature}, <br />露点: #{weather.DewPoint}, <br />湿度: #{weather.Humidity}, <br />气压: #{weather.Pressure}, <br />Ozeone: #{weather.Ozeone}</p>

<pre><code>Now visit [http://localhost:3000/weatherlist](http://localhost:3000/weatherlist) we could see the record has been listed on the page.    

#### Insert Records In Nodejs
We should use a crontab task for inserting the record once we fetched the data.    
The fetching process could be seperated from the web frame, or we could put the script into the directory, and let cron run it, it's OK.   

Following is a sample code for inserting record into mongoDB:    
</code></pre>

<p>/<em>
* This example uses the node MongoDB module to connect to the local
* mongodb database on this virtual machine
*
* More here: <a href="http://mongodb.github.io/node-mongodb-native/markdown-docs/insert.html">http://mongodb.github.io/node-mongodb-native/markdown-docs/insert.html</a>
</em>/</p>

<p>//require node modules (see package.json)
var MongoClient = require(&lsquo;mongodb&rsquo;).MongoClient
    , format = require(&lsquo;util&rsquo;).format;</p>

<p>//connect away
MongoClient.connect(&lsquo;mongodb://127.0.0.1:27017/test&rsquo;, function(err, db) {
  if (err) throw err;
  console.log(&ldquo;Connected to Database&rdquo;);</p>

<p>  //simple json record
    var document = {name:&ldquo;David1&rdquo;, title:&ldquo;About MongoDB1&rdquo;};</p>

<pre><code>//insert record
db.collection('test').insert(document, function(err, records) {
    if (err) throw err;
    console.log("Record added as "+records[0]._id);
    //After insertion, close it.
    db.close();
    return;
});
</code></pre>

<p>});</p>

<pre><code>Once fetched, insert into the weathertest Database.    

#### Display How Many Items
It should fetch the latest 24 items from the database, thus we should modify the code for fetching out 24 items.   

Edit routes/index.js:    
</code></pre>

<p>/<em> GET weatherlist page. </em>/
router.get(&lsquo;/weatherlist&rsquo;, function(req, res) {
    var db = req.db;
    var collection = db.get(&lsquo;usercollection&rsquo;);</p>

<pre><code>collection.find({},{limit:24},function(e,docs){
    res.render('weatherlist', {
        "weatherlist" : docs
    });
});
</code></pre>

<p>});</p>

<pre><code>
#### Deploy it on heroku
Via following commands we could setup a brand new APP on heroku:    
</code></pre>

<p>$ heroku login
$ cat web.js
// web.js
var express = require(&ldquo;express&rdquo;);
var logfmt = require(&ldquo;logfmt&rdquo;);
var app = express();</p>

<p>app.use(logfmt.requestLogger());</p>

<p>app.get(&lsquo;/&rsquo;, function(req, res) {
  res.send(&lsquo;Hello World!&rsquo;);
});</p>

<p>var port = Number(process.env.PORT || 5000);
app.listen(port, function() {
  console.log(&ldquo;Listening on &rdquo; + port);
});
$ npm init
$ npm install express logfmt &ndash;save
$ cat package.json
  &ldquo;engines&rdquo;: {
    &ldquo;node&rdquo;: &ldquo;0.10.x&rdquo;
  }
$ cat Procfile
web: node web.js
$ foreman start
$ chromium <a href="http://localhost:5000">http://localhost:5000</a>
$ git init
$ git add .
$ git commit -m &ldquo;init&rdquo;
$ git remote add heroku git@heroku.com:node-weather-app.git
$ git push heroku master</p>

<pre><code>Now visit [http://node-weather-app.herokuapp.com](http://node-weather-app.herokuapp.com) you can see "Hello World!".     

When adding MongoDB add-ons, it says failed with following information:    
</code></pre>

<p>$ heroku addons:add mongolab
Adding mongolab on node-weather-app&hellip; failed
 !    Please verify your account to install this add-on plan
 !    For more information, see <a href="https://devcenter.heroku.com/categories/billing">https://devcenter.heroku.com/categories/billing</a>
 !    Verify now at <a href="https://heroku.com/verify">https://heroku.com/verify</a></p>

<pre><code>Apply the free account at[https://www.mongosoup.de/](https://www.mongosoup.de/), then login and create a new database plan, Next time if you want to view your database, simply open your browser and go to [https://controlpanel.mongosoup.de/](https://controlpanel.mongosoup.de/).     
Click the Databases, and select the database, then `show password`, it will shows you with the Database info, something like: 
</code></pre>

<p>Connection string:  mongodb://############:###########@dbs004.mongosoup.de/cc_KNoBTXxNbHhS</p>

<p>```</p>

<p>It seems the account failed, so I create a new account using another email, xxxxxxxxxx.  <br/>
This time the app&rsquo;s name is named nodeweatherapp
git@heroku.com:nodeweatherapp.git   <br/>
And this time we will use root account for uploading.</p>

<pre><code>    Git URL: git@heroku.com:nodeweather.gi
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database in Node.js]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/06/18/database-in-node-dot-js/"/>
    <updated>2014-06-18T19:43:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/06/18/database-in-node-dot-js</id>
    <content type="html"><![CDATA[<h3>MongoDB</h3>

<p>Install MongoDB via:</p>

<pre><code>$ sudo pacman -S mongodb
$ sudo systemctl start mongodb
$ sudo systemctl enable mongodb
$ mongodb
</code></pre>

<p>Later I will cover this topic.</p>

<h3>MySQL</h3>

<h4>Installation of MySQL</h4>

<p>The implementation chosen by Arch Linux is called MariaDB, install it via:</p>

<pre><code>$ sudo pacman -S mariadb 
</code></pre>

<p>Configuration steps:</p>

<pre><code>$ sudo systemctl start mysqld.service
[Trusty@~]$ sudo mysql_secure_installation
/usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found

NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

In order to log into MariaDB to secure it, we'll need the current
password for the root user.  If you've just installed MariaDB, and
you haven't set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none): 
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

Set root password? [Y/n] Y
New password: 
Re-enter new password: 
Password updated successfully!
Reloading privilege tables..
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

Remove anonymous users? [Y/n] Y
 ... Success!

Normally, root should only be allowed to connect from 'localhost'.  This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y/n] Y
 ... Success!

By default, MariaDB comes with a database named 'test' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y/n] Y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y/n] Y
 ... Success!

Cleaning up...

All done!  If you've completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!
</code></pre>

<p>Now you can login the mariadb via:</p>

<pre><code>$ mysql -u root -p
MariaDB [(none)]&gt; SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.00 sec)
</code></pre>

<h4>Node.js of MariaDB</h4>

<h3>Redis</h3>

<p>Running result:</p>

<pre><code>127.0.0.1:6379&gt; SET my.key test
OK
127.0.0.1:6379&gt; KEYS my.key
1) "my.key"
127.0.0.1:6379&gt; VALUES my.key
(error) ERR unknown command 'VALUES'
127.0.0.1:6379&gt; GET my.key
"test"
127.0.0.1:6379&gt; keys *
 1) "user:jeff@amazon.com:followers"
 2) "user:jeff@amazon.com:follows"
 3) "user:bill@microsoft.com:followers"
 4) "mykey"
 5) "rq:job:b9b76e04-8bb7-4652-83e9-4453de981554"
 6) "rq:queue:default"
 7) "user:mark@facebook.com:data"
 8) "_kombu.binding.celeryev"
 9) "user:fred@fedex.com:data"
10) "user:jeff@amazon.com:data"
11) "rq:queues"
12) "user:bill@microsoft.com:follows"
13) "_kombu.binding.celery"
14) "my.key"
15) "user:bill@microsoft.com:data"
127.0.0.1:6379&gt; KEYS my.key
1) "my.key"
127.0.0.1:6379&gt; SET online.users 0
OK
127.0.0.1:6379&gt; onlien.users
(error) ERR unknown command 'onlien.users'
127.0.0.1:6379&gt; online.users
(error) ERR unknown command 'online.users'
127.0.0.1:6379&gt; KEYS online.users
1) "online.users"
127.0.0.1:6379&gt; GET online.users
"0"
127.0.0.1:6379&gt; INCR online.users
(integer) 1
127.0.0.1:6379&gt; INCR onlien.users
(integer) 1
127.0.0.1:6379&gt; INCR online.users
(integer) 2
127.0.0.1:6379&gt; HSET profile.1 name Guillermo
(integer) 1
127.0.0.1:6379&gt; HGETALL profile.1
1) "name"
2) "Guillermo"
127.0.0.1:6379&gt; HSET profile.1 last Rauch
(integer) 1
127.0.0.1:6379&gt; HGETALL profile.1
1) "name"
2) "Guillermo"
3) "last"
4) "Rauch"
127.0.0.1:6379&gt; HSET profile.1 programmer 1
(integer) 1
127.0.0.1:6379&gt; HGETALL profile.1
1) "name"
2) "Guillermo"
3) "last"
4) "Rauch"
5) "programmer"
6) "1"
127.0.0.1:6379&gt; HDEL profile.1 programmer
(integer) 1
127.0.0.1:6379&gt; HGETALL profile.1
1) "name"
2) "Guillermo"
3) "last"
4) "Rauch"
127.0.0.1:6379&gt; RPSH profile.1.jobs "job 1"
(error) ERR unknown command 'RPSH'
127.0.0.1:6379&gt; RPUSH profile.1.jobs "job 1"
(integer) 1
127.0.0.1:6379&gt; HGET profile.1
(error) ERR wrong number of arguments for 'hget' command
127.0.0.1:6379&gt; HGETALL profile.1
1) "name"
2) "Guillermo"
3) "last"
4) "Rauch"
127.0.0.1:6379&gt; LRANGE profile.1.jobs 0 -1
1) "job 1"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; RPUSH profile.1.jobs "job 2"
(integer) 2
127.0.0.1:6379&gt; LRANGE profile.1.jobs 0 -1
1) "job 1"
2) "job 2"
127.0.0.1:6379&gt; RPUSH profile.1.jobs "job 3"
(integer) 3
127.0.0.1:6379&gt; LRANGE profile.1.jobs 0 -1
1) "job 1"
2) "job 2"
3) "job 3"
</code></pre>

<p>DataSet in Redis:</p>

<pre><code>127.0.0.1:6379&gt; SADD myset "a member"
(integer) 1
127.0.0.1:6379&gt; SMEMBERS myset
1) "a member"
127.0.0.1:6379&gt; SADD myset "a second member"
(integer) 1
127.0.0.1:6379&gt; SMEMEBERS myset
(error) ERR unknown command 'SMEMEBERS'
127.0.0.1:6379&gt; SMEMBERS myset
1) "a second member"
2) "a member"
127.0.0.1:6379&gt; SREM myset "a second member"
(integer) 1
127.0.0.1:6379&gt; SMEMBERS myset
1) "a member"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Quick Start]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/05/14/node-dot-js-quick-start/"/>
    <updated>2014-05-14T19:53:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/05/14/node-dot-js-quick-start</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Via following command</p>

<pre><code>$ yaourt -S nodejs
</code></pre>

<h3>Quick Start</h3>

<pre><code>$ node
&gt; console.log("Hello!")
Hello!
undefined
</code></pre>

<p>Hit twice &ldquo;Ctrl+c&rdquo; you will get out of the terminal.   <br/>
A simple example is like:</p>

<pre><code class="js server.js">var http = require("http");

http.createServer(function(request, response) {
      response.writeHead(200, {"Content-Type": "text/plain"});
        response.write("Hello World");
          response.end();
}).listen(8888);
$ node server.js

$ curl http://localhost:8888
Hello World%
</code></pre>
]]></content>
  </entry>
  
</feed>
