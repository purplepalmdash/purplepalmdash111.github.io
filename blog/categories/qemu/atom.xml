<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Qemu | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/qemu/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-08-25T18:26:47+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Qemu Based RaspberryPI Development Environment]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/03/18/building-qemu-based-raspberrypi-development-environment/"/>
    <updated>2014-03-18T16:00:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/03/18/building-qemu-based-raspberrypi-development-environment</id>
    <content type="html"><![CDATA[<p>First download the latest image from <a href="http://www.raspberrypi.org/downloads">http://www.raspberrypi.org/downloads</a>, mine is Wheezy. <br />
And we also have to download the qemu-compatible kernel from following address:<br /></p>

<pre><code>    $ wget http://xecdesign.com/downloads/linux-qemu/kernel-qemu
</code></pre>

<p>Change the img file according to <a href="http://localhost/blog/2013/09/04/qemu-for-raspberrypi/">http://localhost/blog/2013/09/04/qemu-for-raspberrypi/</a>, follow this tutorial, you have to change the img file size and its content, but we have to do some modifications. <br />
The run-qemu file is changed to following: <br /></p>

<pre><code>    #!/bin/bash
    USERID=$(whoami)

    # Get name of newly created TAP device; see https://bbs.archlinux.org/viewtopic.php?pid=1285079#p1285079
    precreationg=$(/usr/bin/ip tuntap list | /usr/bin/cut -d: -f1 | /usr/bin/sort)
    sudo /usr/bin/ip tuntap add user $USERID mode tap
    postcreation=$(/usr/bin/ip tuntap list | /usr/bin/cut -d: -f1 | /usr/bin/sort)
    IFACE=$(comm -13 &lt;(echo "$precreationg") &lt;(echo "$postcreation"))

    # This line creates a random mac address. The downside is the dhcp server will assign a different ip each time
    printf -v macaddr "52:54:%02x:%02x:%02x:%02x" $(( $RANDOM &amp; 0xff)) $(( $RANDOM &amp; 0xff )) $(( $RANDOM &amp; 0xff)) $(( $RANDOM &amp; 0xff ))
    # Instead, uncomment and edit this line to set an static mac address. The benefit is that the dhcp server will assign the same ip.
    # macaddr='52:54:be:36:42:a9'
        macaddr = '52:54:79:3c:80:c0'

    qemu-system-arm -net nic,macaddr=$macaddr -net tap,ifname="$IFACE" -append "root=/dev/sda2 panic=1 rootfstype=ext4 rw" $*

    sudo ip link set dev $IFACE down &amp;&gt; /dev/null
    sudo ip tuntap del $IFACE mode tap &amp;&gt; /dev/null
</code></pre>

<p>In router, we add the static address for mac corresponding to 10.0.0.168, you can alter it according to your habit. <br /></p>

<p>Now we want to disable the X at every startup and use vnc instead. <br />
And we can overlocking the raspberryPI to 1000MHZ, this will greatly improve the performance.<br /></p>

<p>Enable the vncserver:<br /></p>

<pre><code>    $ apt-get install tightvncserver vim 
</code></pre>

<p>Now startup the vncserver and use vncviewer to view the desktop:<br /></p>

<p><img src="/images/Screenshot-QEMU.png" alt="/images/Screenshot-QEMU.png" /></p>

<p>No, the correct method is listed as: <br /></p>

<pre><code class="sh startvnc">    cat /eroot@raspberrypi:~# cat /etc/init.d/startvnc 
    #!/bin/sh -e
    ### BEGIN INIT INFO
    # Provides:          vncserver
    # Required-Start:    networking
    # Default-Start:     3 4 5
    # Default-Stop:      0 6
    ### END INIT INFO

    PATH="$PATH:/usr/X11R6/bin/"

    # The Username:Group that will run VNC
    export USER="pi"
    #${RUNAS}

    # The display that VNC will use
    DISPLAY="1"

    # Color depth (between 8 and 32)
    DEPTH="16"

    # The Desktop geometry to use.
    #GEOMETRY="&lt;WIDTH&gt;x&lt;HEIGHT&gt;"
    #GEOMETRY="800x600"
    #GEOMETRY="1024x768"
    GEOMETRY="1280x1024"

    # The name that the VNC Desktop will have.
    NAME="my-vnc-server"

    OPTIONS="-name ${NAME} -depth ${DEPTH} -geometry ${GEOMETRY} :${DISPLAY}"

    . /lib/lsb/init-functions

    case "$1" in
    start)
    log_action_begin_msg "Starting vncserver for user '${USER}' on   localhost:${DISPLAY}"
    su ${USER} -c "/usr/bin/vncserver ${OPTIONS}"
    ;;

    stop)
    log_action_begin_msg "Stoping vncserver for user '${USER}' on localhost:${DISPLAY}"
    su ${USER} -c "/usr/bin/vncserver -kill :${DISPLAY}"
    ;;

    restart)
    $0 stop
    $0 start
    ;;
    esac

    exit 0
</code></pre>

<p>And now we can add this script into /etc/rc.local as:<br /></p>

<pre><code>    # Start the vncserver here:
    /etc/init.d/startvnc start
</code></pre>

<p>So everytime we startup the qemu based raspberryPI, we can easily attached to its geometry, and we can easily adapt the resolution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KALI Linux in Qemu]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/12/12/kali-linux-in-qemu/"/>
    <updated>2013-12-12T17:32:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/12/12/kali-linux-in-qemu</id>
    <content type="html"><![CDATA[<p>Download the iso from kali website<a href="http://www.kali.org/downloads/">http://www.kali.org/downloads/</a>:</p>

<pre><code>    $ wget http://cdimage.kali.org/kali-images/kali-1.0.5/kali-linux-1.0.5-i386.iso
</code></pre>

<p>Create qemu img file:</p>

<pre><code>    $ qemu-img create -f qcow2 kali.qcow2 30G
    Formatting 'kali.qcow2', fmt=qcow2 size=32212254720 encryption=off cluster_size=65536 lazy_refcounts=off 
Run installation. Here we use the run-qemu script which has been generated before under the same directory:
    [Trusty@DashArch kali]$ ./run-qemu -hda ./kali.qcow2 -boot d -cdrom /media/nfs/iso/kali-linux-1.0.5-i386.iso  -m 1024 -enable-kvm -usb
</code></pre>

<p>Choose &ldquo;Graphic Install&rdquo; because currently we are not familiar with this brand new distribution.   <br/>
Command for startup the sytem is:</p>

<pre><code>    [Trusty@DashArch kali]$ ./run-qemu -hda ./kali.qcow2 -boot d -cdrom /media/nfs/iso/kali-linux-1.0.5-i386.iso  -m 1024 -enable-kvm -usb
</code></pre>

<p>After installation finished, run &ldquo;sudo apt-get update&rdquo; and &ldquo;sudo apt-get upgrade&rdquo; to update your system to the newest version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Spice for Qemu Virtual Machine]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/12/06/enable-spice-for-qemu-virtual-machine/"/>
    <updated>2013-12-06T13:59:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/12/06/enable-spice-for-qemu-virtual-machine</id>
    <content type="html"><![CDATA[<h3>Package Installation</h3>

<p>Install virt-viewer for browsing the virtual machine desktop. For default spicec is not OK.</p>

<pre><code>    $ pacman -S gtk-vnc
    $ yaourt -S spice-gtk3
    $ yaourt -S virt-viewer
</code></pre>

<p>Install virt-manager</p>

<pre><code>    [root@DashArch Trusty]# pacman -S virt-manager 
    [root@DashArch Trusty]# systemctl start libvirtd.service
    [root@DashArch Trusty]# systemctl enable  libvirtd.service
    ln -s '/usr/lib/systemd/system/libvirtd.service' '/etc/systemd/system/multi-user.target.wants/libvirtd.service'
    [root@DashArch Trusty]# ps -ef | grep libvirt
    root      8852     1  5 15:23 ?        00:00:00 /usr/bin/libvirtd -p /var/run/libvirtd.pid
</code></pre>

<h3>启动支持spice Server的qemu</h3>

<p>-vga qxl -spice port=5988,disable-ticketing将使能spice</p>

<pre><code>    ./run-qemu -boot d  -m 1024 -enable-kvm -drive file=./fpgawindows.qcow2,if=ide -drive file=./fake.qcow2,if=virtio -cdrom ./virtio-win-0.1-74.iso -usb -vga qxl -spice port=5988,disable-ticketing -localtime
</code></pre>

<p>在本地或者远程访问spice server:</p>

<pre><code>    $ spice -h 127.0.0.1 -p 5988
</code></pre>

<p>但是ArchLinux上的X Server会出现问题，具体解决方案未明了。然而在Ubuntu上则是可以顺利访问的。</p>

<h3>启动支持VNC的Qemu</h3>

<pre><code>    ./run-qemu -boot d  -m 1024 -enable-kvm -drive file=./fpgawindows.qcow2,if=ide -drive file=./fake.qcow2,if=virtio -cdrom ./virtio-win-0.1-74.iso -usb -vga std -nographic  -localtime -vnc :33
启动后vncviewer :33则可连接到qemu的窗口
</code></pre>

<h3>启动Qemu，以std方式</h3>

<p>全新启动：</p>

<pre><code>    ./run-qemu -boot d  -m 1024 -enable-kvm -drive file=./fpgawindows.qcow2,if=ide -drive file=./fake.qcow2,if=virtio -cdrom ./virtio-win-0.1-74.iso -usb -vga std  -localtime `
</code></pre>

<p>保存状态： ctl+alt+2</p>

<pre><code>    $ savevm booted
</code></pre>

<p>启动到上一次保存的状态：</p>

<pre><code>    $  ./run-qemu -boot d  -m 1024 -enable-kvm -drive file=./fpgawindows.qcow2,if=ide -drive file=./fake.qcow2,if=virtio -cdrom ./virtio-win-0.1-74.iso -usb -vga std  -localtime --loadvm booted
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Qemu Virtio Driver Under Windows]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/12/06/install-qemu-virtio-driver-under-windows/"/>
    <updated>2013-12-06T10:50:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/12/06/install-qemu-virtio-driver-under-windows</id>
    <content type="html"><![CDATA[<p>Download the iso file from the redhat repository:  <br/>
<a href="http://alt.fedoraproject.org/pub/alt/virtio-win/latest/images/images/images/bin/src/">http://alt.fedoraproject.org/pub/alt/virtio-win/latest/images/images/images/bin/src/</a>  <br/>
Start the qemu with the following command :    <br/>
<code>
    ./run-qemu -hda fpgawindows.qcow2 -m 1024 -cdrom ./virtio-win-0.1-74.iso -drive file=./fake.qcow2,if=ide
</code>
In run-qemu, the actual command is:   <br/>
<code>
    qemu-system-i386 -net nic,model=virtio,macaddr=$macaddr -net tap,ifname="$IFACE" $*
</code>
Then, follow the following images to operate:</p>

<p><img src="/images/qemu1.jpg" alt="qemu1.jpg" /></p>

<p><img src="/images/qemu2.jpg" alt="qemu2.jpg" /></p>

<p><img src="/images/qemu3.jpg" alt="qemu3.jpg" /></p>

<p><img src="/images/qemu4.jpg" alt="qemu4.jpg" /></p>

<p><img src="/images/qemu5.jpg" alt="qemu5.jpg" /></p>
]]></content>
  </entry>
  
</feed>
