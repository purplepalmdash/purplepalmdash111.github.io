<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Beaglebone | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/beaglebone/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-08-24T22:42:56+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving Weather App to BBB]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/03/18/moving-weather-app-to-bbb/"/>
    <updated>2014-03-18T13:56:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/03/18/moving-weather-app-to-bbb</id>
    <content type="html"><![CDATA[<p>Following is the steps for moving the weather app to BBB(BeagleBone Black)<br /></p>

<h3>Apache Configuration</h3>

<p>Create the site definition file under /etc/apache2/sites-available: <br /></p>

<pre><code>    $ cp default nanjing
</code></pre>

<p>Edit the nanjing file with the following content:</p>

<pre><code>    $ cat nanjing
    &lt;VirtualHost *:7778&gt;
        ServerAdmin webmaster@localhost
            ServerName nanjing
            ServerAlias nanjing.weather

        DocumentRoot /srv/www1
        &lt;Directory /&gt;
            Options FollowSymLinks
            AllowOverride None
        &lt;/Directory&gt;
        &lt;Directory /srv/www1/&gt;
            Options Indexes FollowSymLinks MultiViews
            AllowOverride None
            Order allow,deny
            Allow from all
        &lt;/Directory&gt;

        ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
        &lt;Directory "/usr/lib/cgi-bin"&gt;
            AllowOverride None
            Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
            Order allow,deny
            Allow from all
        &lt;/Directory&gt;

        ErrorLog ${APACHE_LOG_DIR}/error.log

        # Possible values include: debug, info, notice, warn, error, crit,
        # alert, emerg.
        LogLevel warn

        CustomLog ${APACHE_LOG_DIR}/access.log combined
    &lt;/VirtualHost&gt;
</code></pre>

<p>Then we have to edit the /etc/apache2/ports.conf file, to add the newly-added site definition file. <br /></p>

<pre><code>    $ cat ports.conf
    NameVirtualHost *:7777
    Listen 7777
    NameVirtualHost *:7778
    Listen 7778
    NameVirtualHost *:7779
    Listen 7779
    NameVirtualHost *:7780
    Listen 7780
</code></pre>

<p>Now you already could visit the site of <a href="http://Your_Ip_Address:7777">http://Your_Ip_Address:7777</a> for the nanjing weather infos. <br /></p>

<h3>Script Moving</h3>

<p>Be sure following modules has been installed:&lt; br /></p>

<pre><code>    $ pip install django pywapi pinyin
    $ pip install BeautifulSoup
</code></pre>

<p>Add the crontab tasks:<br /></p>

<pre><code>    0 */1 * * * python /root/code/genhtml.py
    15 */1 * * * python /root/code/genhtml_bj.py
    30 */1 * * * python /root/code/genhtml_changsha.py
</code></pre>

<p>Now the script will be run every hour at 0/15/30 minutes, enjoy it. <br />
Notice the timezone should be correctly configured:<br /></p>

<pre><code>    $  dpkg-reconfigure tzdata
    # Choose Asia/Shanghai
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Wordpress on BeagleBone Black]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/03/13/setting-up-wordpress-on-beaglebone-black/"/>
    <updated>2014-03-13T14:50:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/03/13/setting-up-wordpress-on-beaglebone-black</id>
    <content type="html"><![CDATA[<p>Since BeagleBone Black&rsquo;s hardware configuration is enough for running LAMP, I decide to run wordpress on it. <br /></p>

<h3>Environment</h3>

<p>Hardware Configuration:<br />
CPU: Generic AM33XX (Flattened Device Tree)<br />
MEM: MemTotal:         507428 kB<br />
Disk: 1.8'&lsquo; USB Disk, 30 GB<br />
I also add 512MB swapfile for swapping partition. <br /></p>

<p>Software Configuration:<br />
Kernel: Linux arm 3.8.13-bone30 #1 SMP Mon Nov 18 14:53:22 CST 2013 armv7l GNU/Linux<br />
OS:  Debian GNU/Linux 7 \n \l<br /></p>

<h3>LAMP Configuration</h3>

<h4>Install Apache<br /></h4>

<pre><code>    $ apt-get install apache2
</code></pre>

<p>After installation, simply open the browser and visit the <a href="http://YourIPAddress,">http://YourIPAddress,</a> if you can find &ldquo;It works!&rdquo;, then this says the apache server is running now. <br /></p>

<h4>Install MySQL<br /></h4>

<p>MySQL is a powerful database management system which is used for organizing and retrieving data.<br /></p>

<pre><code>    $ apt-get install mysql-server libapache2-mod-auth-mysql php5-mysql
</code></pre>

<p>You should be asked to provide the MySQL &ldquo;root&rdquo; user password.<br />
Activate MySQL via following command:<br /></p>

<pre><code>    $ mysql_install_db
    Change the root password? [Y/n] n 
    Remove anonymous users? [Y/n] Y
    Disallow root login remotely? [Y/n] Y
    Remove test database and access to it? [Y/n] Y
    Reload privilege tables now? [Y/n] Y
</code></pre>

<p>Now the MySQL is OK, you have to install PHP<br /></p>

<h4>Install PHP<br /></h4>

<p>Install following packages:<br /></p>

<pre><code>    $ apt-get install php5 libapache2-mod-php5 php5-mcrypt
</code></pre>

<p>Edit the directory index file:<br /></p>

<pre><code>    # cat /etc/apache2/mods-enabled/dir.conf
    &lt;IfModule mod_dir.c&gt;
              DirectoryIndex index.php index.html index.cgi index.pl index.php index.xhtml index.htm
    &lt;/IfModule&gt;
Install modules for using the searched result:&lt;br /&gt;
    apt-cache search php5-
Testing PHP on your own apache search:&lt;br /&gt;
    root@arm:/home# cat /var/www/info.php
    &lt;?php
    phpinfo();
    ?&gt;
</code></pre>

<p>Restart apache server and view the result:<br /></p>

<pre><code>    # /etc/init.d/apache2 restart
</code></pre>

<p>View the <a href="http://YourIpAddress/info.php">http://YourIpAddress/info.php</a> you can see the php printed out messages. <br /></p>

<h3>Wordpress Setup</h3>

<p>Download the latest Wordpress via:<br /></p>

<pre><code>    # wget http://wordpress.org/latest.tar.gz
</code></pre>

<p>Install the ntp server, or you may meet some time and date problem:<br /></p>

<pre><code>    # apt-get install ntp
</code></pre>

<p>Ok, the time is really an issue, gonna be discussed later. <br />
Simply set the time via &ldquo; date -s &rdquo;$timestring"&ldquo; is enough.<br /></p>

<p>Now uncompress the wordpress. <br /></p>

<p>Create the Wordpress Database and User:<br /></p>

<pre><code>    # mysql -u root -p
    mysql&gt; CREATE DATABASE wordpress;
    Query OK, 1 row affected (0.01 sec)
    mysql&gt; CREATE USER wordpressuser@localhost;
    Query OK, 0 rows affected (0.00 sec)
    mysql&gt; SET PASSWORD FOR wordpressuser@localhost= PASSWORD("xxxxxxxx");
    Query OK, 0 rows affected (0.00 sec)
    mysql&gt; GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost IDENTIFIED BY 'password';
    Query OK, 0 rows affected (0.00 sec)
    mysql&gt; FLUSH PRIVILEGES;
    Query OK, 0 rows affected (0.00 sec)
    mysql&gt; exit
    Bye
</code></pre>

<p>Setup the WordPress Configuration:<br /></p>

<pre><code>    cp ~/wordpress/wp-config-sample.php ~/wordpress/wp-config.php
</code></pre>

<p>Edit the configuration file:<br /></p>

<pre><code>    cat ~/wordpress/wp-config.php
    // ** MySQL settings - You can get this info from your web host ** //
    /** The name of the database for WordPress */
    define('DB_NAME', 'wordpress');

    /** MySQL database username */
    define('DB_USER', 'wordpressuser');

    /** MySQL database password */
    define('DB_PASSWORD', 'password');
</code></pre>

<p>Install rsync:<br /></p>

<pre><code>    # apt-get install rsync
</code></pre>

<p>Use rsync for sync to the website&rsquo;s root directory:<br /></p>

<pre><code>    # rsync -avP ~/wordpress/ /var/www/
</code></pre>

<p>Change to the website&rsquo;s root directory and change the ownership to the apache user:<br /></p>

<pre><code>    root@arm:/etc# cd /var/www/
    root@arm:/var/www# chown www-data:www-data /var/www -R 
    root@arm:/# chmod g+w /var/www -R 
</code></pre>

<p>To know the username of apache:</p>

<pre><code>    lsof -i 
    Notice the :http part.
</code></pre>

<p>Install php5-gd , which is the required php module to run wordpress.</p>

<pre><code>    apt-get install php5-gd
</code></pre>

<p>Now access the page of  /wp-admin/install.php  is OK. or you can access the <a href="http://YourIPAddress">http://YourIPAddress</a> is ready for install the wordpress on your BeagleBone Black.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate BeagleBone Black]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/03/12/migrate-beaglebone-black/"/>
    <updated>2014-03-12T19:40:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/03/12/migrate-beaglebone-black</id>
    <content type="html"><![CDATA[<p>Since I want to run wordpress at home, while my RaspberryPI got only 256M RAM, it will be hard to run such a heavy application, I use BeagleBone Black to run it, BeagleBone Black has 512M RAM, which will be enough for run wordpress and etc. <br /></p>

<h3>Setting up NFS Server</h3>

<p>First I have to setup a nfs server in my LAN, I set it on my RaspberryPI, since I got only 1 USB hub which serves RaspberryPI, a 500GB harddisk has been attached to the USB hub, which is quite enough for serving nfs servers. <br />
My RaspberryPI runs archlinux, then I follow the ArchLinux&rsquo;s Wiki setting up the nfs server<br /></p>

<pre><code>    pacman -S nfs-utils
    # cat /etc/exports
    /media/debianroot 10.0.0.1/24(rw,sync,no_subtree_check,no_root_squash) 10.0.0.11(rw,sync,no_subtree_check,no_root_squash)
    ### Check the result
    root@alarmpi ~]# exportfs -arv
    exporting 10.0.0.11:/media/debianroot
    exporting 10.0.0.1/24:/media/debianroot
    exporting 10.0.0.11:/media/debianroot to kernel
    exportfs: 10.0.0.11:/media/debianroot: Function not implemented
    ### Change the domainname to "localhost"
    vim /etc/idmapd.conf 
    ### Testing the services
    systemctl start rpc-idmapd.service
    systemctl start rpc-mountd.service
    ### Enable the Services at startup
    systemctl enable rpc-mountd.service
    systemctl enable rpc-idmapd.service
</code></pre>

<p>Want testing the nfs, simply use following command: <br /></p>

<pre><code>    mount -t nfs 10.0.0.230:/media/debianroot /mnt1
</code></pre>

<p>If you can see the mnt1 directory has the same content as in nfs server, you can use nfs now. <br /></p>

<h3>Change the BeagleBone Startup file</h3>

<p>In SD card, change uEnv.txt</p>

<pre><code>    [root@DashArch mnt]# cat uEnv.txt
    kernel_file=zImage
    initrd_file=uInitrd
    serverip=10.0.0.230
    ipaddr=10.0.0.122
    rootpath=/media/debianroot
    console=ttyO0,115200n8
</code></pre>

<h3>Replace Pogoplug</h3>

<p>To replace Pogoplug at home, I have to do the following issues:<br />
1. Use No-ip on BeagleBone, replacing the Pogoplug&rsquo;s No-ip.<br />
2. Run Apache or nginx instead of Pogoplug&rsquo;s service.</p>

<p>Use No ip: <br />
Install no-ip on RaspberryPI:<br /></p>

<pre><code>    pacman -S noip
</code></pre>

<p>Configure noip on RaspberryPI:<br /></p>

<pre><code>    noip2 -C -Y
    [root@alarmpi ~]# systemctl start noip2
    [root@alarmpi ~]# systemctl enable noip2
    ln -s '/usr/lib/systemd/system/noip2.service' '/etc/systemd/system/multi-user.target.wants/noip2.service'
    [root@alarmpi ~]# ps -ef | grep noip
    nobody     411     1  0 00:40 ?        00:00:00 /usr/bin/noip2 -c /etc/no-ip2.conf
</code></pre>

<p>Now we need to replace Pogoplug&rsquo;s service to RaspberryPI:<br />
First we change the direct port 22 from pogoplug to RasspberryPI on Router. <br /></p>

<p><img src="/images/redirect.jpg" alt="/images/redirect.jpg" /></p>

<p>Now your no-ip pointed machine changed from Pogoplug into RaspberryPI. <br /></p>

<h3>Remote update</h3>

<p>Simply replacing the ssh related via setting up the different id_rsa:<br /></p>

<pre><code>    cat .ssh/id_rsa.pub | ssh root@xxx.xx.xx.com 'cat &gt;&gt; .ssh/authorized_keys
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian on NFS]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/12/11/debian-on-nfs/"/>
    <updated>2013-12-11T17:25:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/12/11/debian-on-nfs</id>
    <content type="html"><![CDATA[<p>Install some packages:</p>

<pre><code>    $ apt-get install usbutils alsa-base
</code></pre>

<p>Use lsusb to view the installed usb equipments:</p>

<pre><code>    Bus 001 Device 006: ID 0e5c:6441 Bitland Information Technology Co., Ltd C-Media Sound Device
</code></pre>

<p>Install modules to the filesystem, since our newly-installed filesytem doesn&rsquo;t contains the necessary modules:</p>

<pre><code>    $ pwd
    /media/x/bbBlack/38/linux-dev/deploy
</code></pre>

<p>Copy the firmware tar package and modules tar package to the nfs root directory</p>

<pre><code>    $ tar xzvf 3.8.13-bone30-modules.tar.gz  -C ./
    $ tar xzvf ./3.8.13-bone30-firmware.tar.gz -C  ./lib/firmware/
</code></pre>

<p>Reboot and Use aplay to view the installed sound card:</p>

<pre><code>    root@arm:/# aplay -l
    **** List of PLAYBACK Hardware Devices ****
    card 0: Black [TI BeagleBone Black], device 0: HDMI nxp-hdmi-hifi-0 []
      Subdevices: 1/1
      Subdevice #0: subdevice #0
    card 1: U0xe5c0x6441 [USB Device 0xe5c:0x6441], device 0: USB Audio [USB Audio]
      Subdevices: 0/1
      Subdevice #0: subdevice #0
</code></pre>

<p>Edit a new asound.conf, which will enable the system to use the usb audio as the default sound card:</p>

<pre><code>    root@arm:/# cat /etc/asound.conf
    pcm.!default { 
    type hw 
    card 1
    #device 0 
    }
    ctl.!default { 
    type hw 
    card  1
    #device 0 
    }
</code></pre>

<p>Now you can use the mplayer to enjoy the sound from the console.      <br/>
If you want to grant the right to the ordinary user, Just use acl:</p>

<pre><code>     setfacl -m u:debian:rw /dev/snd/*
</code></pre>

<p>Now the user &ldquo;debian&rdquo; could also listen the music from the console.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BeagleBone Boot From NFS]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/12/10/beaglebone-boot-from-nfs/"/>
    <updated>2013-12-10T09:10:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/12/10/beaglebone-boot-from-nfs</id>
    <content type="html"><![CDATA[<h3>Building Preparation</h3>

<p>Create a new directory for stroing all of the items related to beaglebone.</p>

<pre><code>    cd /media/nfs/
    mkdir beaglebone
    cd beaglebone/
</code></pre>

<p>Download the cross-compiler from linaro toolchain binary website. And add it to the environment variables.</p>

<pre><code>    wget -c https://launchpad.net/linaro-toolchain-binaries/trunk/2013.10/+download/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz
    tar xJf gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz
    export CC=`pwd`/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux/bin/arm-linux-gnueabihf-
    # Test the cross-compiler
    ${CC}gcc --version
</code></pre>

<p>Checkout the U-boot:</p>

<pre><code>    git clone git://git.denx.de/u-boot.git
    cd u-boot/
    git checkout v2013.10 -b tmp
</code></pre>

<p>Patching U-boot:</p>

<pre><code>    wget https://raw.github.com/eewiki/u-boot-patches/master/v2013.10/0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch
    patch -p1 &lt; 0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch
</code></pre>

<p>Configure and compile the U-boot:</p>

<pre><code>    make ARCH=arm CROSS_COMPILE=${CC} distclean
    make ARCH=arm CROSS_COMPILE=${CC} am335x_evm_config
    make ARCH=arm CROSS_COMPILE=${CC}
</code></pre>

<p>Checkout the kernel:</p>

<pre><code>    git clone git://github.com/RobertCNelson/linux-dev.git
    cd linux-dev
    git checkout origin/am33x-v3.12 -b tmp
</code></pre>

<p>Now we got our kernel and U-boot available. The next step is to build a filesystem:</p>

<pre><code>    wget -c https://rcn-ee.net/deb/minfs/raring/ubuntu-13.04-minimal-armhf-2013-08-25.tar.xz
</code></pre>

<p>Prepare the mmc card.</p>

<pre><code>    export DISK=/dev/mmcblk0
    [Trusty@XXXyyy beaglebone]$ sudo dd if=/dev/zero of=${DISK} bs=1M count=16
    16+0 records in
    16+0 records out
    16777216 bytes (17 MB) copied, 4.84877 s, 3.5 MB/s 
</code></pre>

<p>Use sfdisk for creating the partition layout.</p>

<pre><code>    sudo sfdisk --in-order --Linux --unit M ${DISK} &lt;&lt;-__EOF__
    1,48,0xE,*
    ,,,-
    __EOF__
</code></pre>

<p>Format Partitions:</p>

<pre><code>    sudo mkfs.vfat -F 16 ${DISK}p1 -n boot
    sudo mkfs.ext4 ${DISK}p2 -L rootfs
</code></pre>

<p>Install Bootloader to the 1st partition of mmc card.</p>

<pre><code>    [Trusty@XXXyyy beaglebone]$ sudo mkdir -p /media/boot/
    [Trusty@XXXyyy beaglebone]$ sudo mkdir -p /media/rootfs/
    [Trusty@XXXyyy beaglebone]$ sudo mount ${DISK}p1 /media/boot/
    [Trusty@XXXyyy beaglebone]$ sudo mount ${DISK}p2 /media/rootfs/
    [Trusty@XXXyyy beaglebone]$ sudo cp -v ./u-boot/MLO /media/boot/
    ‘./u-boot/MLO’ -&gt; ‘/media/boot/MLO’
    [Trusty@XXXyyy beaglebone]$ sudo cp -v ./u-boot/u-boot.img /media/boot/
    ‘./u-boot/u-boot.img’ -&gt; ‘/media/boot/u-boot.img’

    [Trusty@XXXyyy linux-dev]$ vim uEnv.txt
    [Trusty@XXXyyy linux-dev]$ sudo cp -v ./uEnv.txt /media/boot/
    ‘./uEnv.txt’ -&gt; ‘/media/boot/uEnv.txt’
</code></pre>

<p>Copy Kernel:</p>

<pre><code>    [Trusty@XXXyyy beaglebone]$ sudo cp -v ./linux-dev/deploy/3.12.4-bone9.zImage /media/boot/zImage
    ‘./linux-dev/deploy/3.12.4-bone9.zImage’ -&gt; ‘/media/boot/zImage’
</code></pre>

<p>Copy Root File System:</p>

<pre><code>    sudo tar xfvp ./ubuntu-13.04-minimal-armhf-2013-08-25/armhf-rootfs-ubuntu-raring.tar -C /media/rootfs/
Installation of kernel and configuration of the filesystem.
    sudo cp -v ./linux-dev/deploy/3.12.4-bone9.zImage /media/boot/zImage
    sudo mkdir -p /media/boot/dtbs/
    sudo tar xfov ./linux-dev/deploy/3.12.4-bone9-dtbs.tar.gz -C /media/boot/dtbs/
    sudo tar xfv ./linux-dev/deploy/3.12.4-bone9-firmware.tar.gz  -C /media/rootfs/lib/firmware/
    sudo tar xfv ./linux-dev/deploy/3.12.4-bone9-modules.tar.gz -C /media/rootfs/
    sudo vim /media/rootfs/etc/fstab
    sudo vim /media/rootfs/etc/network/interfaces 
    sudo vim /media/rootfs/etc/udev/rules.d/70-persistent-net.rules
    sudo vim /media/rootfs/etc/inittab
    sudo vim /media/rootfs/etc/init/serial.conf
    sudo umount /media/rootfs/
    sudo umount /media/boot/
</code></pre>
]]></content>
  </entry>
  
</feed>
