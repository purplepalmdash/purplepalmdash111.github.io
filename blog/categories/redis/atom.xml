<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Redis | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/redis/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-03-01T20:59:15+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Redis for Inter-Communication]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/03/21/use-redis-for-inter-communication/"/>
    <updated>2014-03-21T15:55:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/03/21/use-redis-for-inter-communication</id>
    <content type="html"><![CDATA[<h3>Play With Redis</h3>

<p>On ArchLinux, we install redis via:<br /></p>

<pre><code>    $ sudo pacman -S redis
</code></pre>

<p>Enalbe and start the redis.service:<br /></p>

<pre><code>    $ sudo systemctl enable redis.service
    $ sudo systemctl start redis.service
    $ ps -ef | grep redis
    redis     7609     1  0 16:03 ?        00:00:00 /usr/bin/redis-server 127.0.0.1:6379
</code></pre>

<p>Play with redis:<br /></p>

<pre><code>    [Trusty@DashArch queue]$ redis-cli 
    127.0.0.1:6379&gt; set name leezk
    OK
    127.0.0.1:6379&gt; get name
    "leezk"
    127.0.0.1:6379&gt; del name
    (integer) 1
    127.0.0.1:6379&gt; exists name
    (integer) 0
    127.0.0.1:6379&gt; exit
</code></pre>

<h3>RQ: Simple Job Queue For Python</h3>

<p>Install redis and rq:<br /></p>

<pre><code>    $ sudo pip2 install redis
    $ sudo pip2 install rq
</code></pre>

<p>Install requests for debugging(Not related with RQ and Redis):<br /></p>

<pre><code>    $ sudo pip2 install requests
</code></pre>

<p>Use following file for RedisQueue:<br /></p>

<pre><code class="py RedisQueue.py">import redis

class RedisQueue(object):
    """Simple Queue with Redis Backend"""
    def __init__(self, name, namespace='queue', **redis_kwargs):
        """The default connection parameters are: host='localhost', port=6379, db=0"""
        self.__db= redis.Redis(**redis_kwargs)
        self.key = '%s:%s' %(namespace, name)

    def qsize(self):
        """Return the approximate size of the queue."""
        return self.__db.llen(self.key)

    def empty(self):
        """Return True if the queue is empty, False otherwise."""
        return self.qsize() == 0

    def put(self, item):
        """Put item into the queue."""
        self.__db.rpush(self.key, item)

    def get(self, block=True, timeout=None):
        """Remove and return an item from the queue. 

        If optional args block is true and timeout is None (the default), block
        if necessary until an item is available."""
        if block:
            item = self.__db.blpop(self.key, timeout=timeout)
        else:
            item = self.__db.lpop(self.key)

        if item:
            item = item[1]
        return item

    def get_nowait(self):
        """Equivalent to get(False)."""
        return self.get(False)
</code></pre>

<p>Testing the RedisQueue with following:<br />
Put something into the RedisQueue:<br /></p>

<pre><code>    &gt;&gt;&gt; from RedisQueue import RedisQueue
    &gt;&gt;&gt; q = RedisQueue('test')
    &gt;&gt;&gt; q.put('hello World!')
</code></pre>

<p>Fetch something from the RedisQueue:<br /></p>

<pre><code>    &gt;&gt;&gt; from RedisQueue import RedisQueue
    &gt;&gt;&gt; q = RedisQueue('test')
    &gt;&gt;&gt; q.get()
    'hello World!'
</code></pre>

<h3>Rewrite Dictionary Program</h3>
]]></content>
  </entry>
  
</feed>
