<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Embedded | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/embedded/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-11-13T20:32:00+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FRDM-KL02Z Tips(1)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/05/frdm-kl02z-tips-1/"/>
    <updated>2015-11-05T09:53:38+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/05/frdm-kl02z-tips-1</id>
    <content type="html"><![CDATA[<p>Reference Material: <br/>
<a href="http://www.freescale.com/zh-Hans/products/arm-processors/kinetis-cortex-m/l-series/freedom-development-platform-for-the-kinetis-kl02-family:FRDM-KL02Z?tab=In-Depth_Tab">http://www.freescale.com/zh-Hans/products/arm-processors/kinetis-cortex-m/l-series/freedom-development-platform-for-the-kinetis-kl02-family:FRDM-KL02Z?tab=In-Depth_Tab</a></p>

<h3>Minicom</h3>

<p>115200/data-bit: 8/ no parity/stop bit 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modification SWAP on RPI Installation]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/30/modification-on-rpi-installation/"/>
    <updated>2015-04-30T21:49:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/30/modification-on-rpi-installation</id>
    <content type="html"><![CDATA[<p>First disable the swap partition, for it will save your sd card:  <br/>
Know where is your swap file:</p>

<pre><code>$ cat /proc/swap*
</code></pre>

<p>Disable it via change the S to K under <code>/etc/rcx.d</code>, and reboot the services:</p>

<pre><code>$ sudo mv S02dphys-swapfile K02dphys-swapfile
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Bluetooth Playing]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/03/08/enable-bluetooth-playing/"/>
    <updated>2015-03-08T21:36:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/03/08/enable-bluetooth-playing</id>
    <content type="html"><![CDATA[<p>First scan the bluetooth adapter via <code>lsusb</code>:</p>

<pre><code>$ lsusb
Bus 005 Device 002: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)
</code></pre>

<p>Install packages and configure bluetooth:</p>

<pre><code>$ sudo apt-get install bluetooth
$ sudo apt-get install bluez-utils
$ sudo apt-get install blueman
</code></pre>

<p>Then setup the bluetooth headset in blueman&rsquo;s graphical interface.  <br/>
The more detailed steps are available at:  <br/>
<a href="http://kkkttt.github.io/blog/2013/12/19/bluetooth-headset-on-archlinux/">http://kkkttt.github.io/blog/2013/12/19/bluetooth-headset-on-archlinux/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade OpenWRT on MW151RM3G]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/11/24/upgrade-openwrt-on-mw151rm3g/"/>
    <updated>2014-11-24T13:54:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/11/24/upgrade-openwrt-on-mw151rm3g</id>
    <content type="html"><![CDATA[<h3>Prepare</h3>

<p>First go to <a href="http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/">http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/</a>, find the &ldquo;wr703n&rdquo;, download the 2 files.</p>

<pre><code>$ ls -l openwrt*
-rw-r----- 1 Trusty root 3932160 Nov 24 13:50 openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin
-rw-r----- 1 Trusty root 3342340 Nov 24 13:50 openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin
</code></pre>

<p>sysupgrade.bin is for upgrading.</p>

<h3>Upgrade</h3>

<p>System-> Backup/Flash Firmware.   <br/>
Flash New firmware image, choose File. Select the sysupgrade.bin, Upgrade.</p>

<p>Tehn you have to wait for the changes to be applied, around half a miniutes, then everything will be OK.</p>

<h3>Use Flash Disk For Booting</h3>

<p>Cause the inner storage is only 4M-BYTE, we have to enlarge it via adding the external flash disk .</p>

<pre><code>$ opkg update
$ opkg install block-mount kmod-usb-storage fdisk
</code></pre>

<p>Comparing to Attitude Adjustment, the kmod-fs-ext4 couldn&rsquo;t be installed, thus we have to formt the flash disk into ext3 format.</p>

<p>Cause we won&rsquo;t installed the kmod-fs-ext4, so the external system couldn&rsquo;t be used, this time just flash back the Attitude Adjustment.</p>

<h3>Rootfs on External Storage</h3>

<p>Copy the filesystem into the external disk:</p>

<pre><code>root@OpenWrt:/mnt/sda2# tar -C /overlay -cvf - . | tar -C /mnt/sda2 -xf -
root@OpenWrt:/mnt/sda2# ls
etc         lib         lost+found  mnt         sbin        usr
</code></pre>

<p>Configure the /etc/config/fstab:</p>

<pre><code>config mount
        option target   /overlay
        option device   /dev/sda2
        option fstype   ext3
        option options  rw,sync
        option enabled  1
        option enabled_fsck 0
</code></pre>

<p>Reboot and you got 8G rootfs enabled router.</p>

<h3>Wireless-> Wired.</h3>

<p>First set the wireless port to client mode:   <br/>
<img src="/images/wireless_client.jpg" alt="/images/wireless_client.jpg" /></p>

<p>Then set the wired port to static address:  <br/>
<img src="/images/wired_config.jpg" alt="/images/wired_config.jpg" /></p>

<p>Now reset  your router and connect the ethernet port with a line, the equipments who only have ethernet could use router&rsquo;s wireless signal for accessing the network.  <br/>
Later when I study in the library, this router could easily transfer the signal from wireless to wired and let surfacePro work properly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EBC Exercises on BBB - PWM]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/11/16/ebc-exercises-on-bbb-pwm/"/>
    <updated>2014-11-16T16:44:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/11/16/ebc-exercises-on-bbb-pwm</id>
    <content type="html"><![CDATA[<h3>PWM</h3>

<p>Simply enable the <code>P9_21</code> to PWM, then connect to the LED. The LED connection could refer to <code>EBC Exercises on BBB - Control LED</code></p>

<pre><code>SLOTS=/sys/devices/bone_capemgr.*/slots
echo am33xx_pwm &gt; $SLOTS
echo bone_pwm_P9_21 &gt; $SLOTS
cd /sys/devices/ocp.3/pwm_test_P9_21.15/
echo 1000000000 &gt; period
echo  250000000 &gt; duty
echo 1 &gt; run
</code></pre>

<p>From now you could see the LED begin to flash. In fact using this pwm we could control servo motor:  <br/>
<a href="http://www.linux.com/learn/tutorials/776799-servo-control-from-the-beaglebone-black/">http://www.linux.com/learn/tutorials/776799-servo-control-from-the-beaglebone-black/</a></p>
]]></content>
  </entry>
  
</feed>
