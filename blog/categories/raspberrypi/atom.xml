<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Raspberrypi | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/raspberrypi/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-05-18T19:34:41+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Download Android Source Code on RaspberryPI]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/05/04/download-android-source-code-on-raspberrypi/"/>
    <updated>2014-05-04T09:49:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/05/04/download-android-source-code-on-raspberrypi</id>
    <content type="html"><![CDATA[<p>Just a try. I don&rsquo;t think I will use raspberryPI for developing, but using it for downloading code is a good idea.</p>

<h3>Go Back Home</h3>

<p>My raspberryPI is behind the router, so I have to use a ssh tunnel to reach raspberryPI.  <br/>
Setting up tunnel:</p>

<pre><code>$ ssh -L 2230:10.0.0.230:22 Tomcat.xxx.xx.xxx -l root
</code></pre>

<p>Login on local port:</p>

<pre><code>$ ssh root@localhost -p 2230
</code></pre>

<p>Now we have a terminal which could reach raspberry PI.</p>

<h3>Package Preparation</h3>

<p>Since the OS on my raspberryPI is ArchLinux, I have to install following packages:</p>

<pre><code>$ pacman -S w3m tmux lynx
</code></pre>

<h3>Account Setting</h3>

<p>Use w3m for accessing <a href="https://android.googlesource.com/new-password">https://android.googlesource.com/new-password</a></p>

<p>But, remember, I have a BBB which also runs at home, so I can also use it.</p>

<pre><code>$ apt-get install elinks
</code></pre>

<p>Use elinks for making connection to <a href="https://android.googlesource.com/new-password,">https://android.googlesource.com/new-password,</a> remember the username, and the machine and login name, just copy them into your ~/.netrc, and make sure you have the right priviledge for the file ~/.netrc.</p>

<h3>Repo sync</h3>

<p>This will take for a long~long time, depending on your bandwidth:</p>

<pre><code>repo init -u https://android.googlesource.com/a/platform/manifest -b master
</code></pre>

<p>then we use the following file for sync the repo:</p>

<pre><code class="sh autodown.sh">#!/bin/bash

while [ 1 ]
do
    repo sync -j8
    if [ "$?" = "0" ] ; then
        echo "rsync completed normally"
        exit
    else
        echo "Rsync failure. Backing off and retrying..."
        sleep 1
    fi
done
</code></pre>

<p>Now call tmux for holding the sync procedure:</p>

<pre><code>$ tmux new -s Android
$ /bin/bash ./autodown.sh 2&gt;&amp;1 | tee autodown.log
$ ctrl+b d
</code></pre>

<p>The sync process now is held in tmux session. Let it go, next time when you want to see the procedure, just ssh to the board use:</p>

<pre><code>tmux a -t Android
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re-compile Kernel for Supporting 512M Memory for RaspberryPI in Qemu]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/03/20/re-compile-kernel-for-supporting-512m-memory-for-raspberrypi-in-qemu/"/>
    <updated>2014-03-20T09:43:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/03/20/re-compile-kernel-for-supporting-512m-memory-for-raspberrypi-in-qemu</id>
    <content type="html"><![CDATA[<h3>Cross Compiler Prepration</h3>

<p>Get the cross-compiler from github:<br /></p>

<pre><code>    [Trusty@XXXyyy tools]$ pwd
    /media/y/raspberryPI/tools
    [Trusty@XXXyyy tools]$ git clone git://github.com/raspberrypi/tools.git
</code></pre>

<p>Add the cross-compiler to system path:<br /></p>

<pre><code>    export PATH="/media/y/raspberryPI/tools/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin:$PATH"
</code></pre>

<p>Now input &ldquo;arm-linux-g&rdquo; + tab you will see the cross-compiler is ready.<br /></p>

<h3>Prepare the kernel</h3>

<p>Get the kernel source from github:<br /></p>

<pre><code>    git clone git://github.com/raspberrypi/linux.git
</code></pre>

<p>Now we need to get the patches for supporting the raspberryPI, Torlus has done the patches which could also be downloaded from github:<br /></p>

<p>Now we need to configure the kernel:<br /></p>

<pre><code>    cd linux
    make ARCH=arm versatile_defconfig
</code></pre>

<p>NO, I MADE A MISTAKE, IT SHOULDN&rsquo;T COMPILE KERNEL, SHOULD COMPILE QEMU!!!</p>

<h3>Compile qemu</h3>

<p>Get the modified qemu branch from github:<br /></p>

<pre><code>    git clone git://github.com/Torlus/qemu.git
</code></pre>

<p>Switch to &lsquo;rpi&rsquo; branch:<br /></p>

<pre><code>    git fetch origin
    git branch -v -a # List the available branches.
    git checkout -b raspberry origin/rpi    # Checkout the origin/rpi to local raspberry
    git fetch
    git checkout raspberry
</code></pre>

<p>Begin to configure qemu, notice we have to use python2 for configuring the qemu:<br /></p>

<pre><code>    workon venv2
    ./configure --help
    ./configure --target-list="arm-softmmu arm-linux-user" --enable-sdl 
</code></pre>

<p>Now begin to make the qemu, use -j8 for speeding up, adjust the number according to your own machine:<br /></p>

<pre><code>    make -j8
</code></pre>

<p>Now under the following directory you will get the qemu-system-arm:<br /></p>

<pre><code>    $ pwd
    /media/y/raspberryPI/qemu/arm-softmmu
</code></pre>

<p>Get the kernel.img from the SD image. <br /></p>

<h3>Use the compiled qemu for running</h3>

<p>We have to change the scripts for running the qemu:<br /></p>

<pre><code>    /media/y/raspberryPI/qemu/arm-softmmu/qemu-system-arm -net nic,macaddr=$macaddr -net user -kernel kernel.img -cpu arm1176 -m 512 -M raspi -no-reboot -serial stdio -append "rw earlyprintk loglevel=8 panic=120 keep_bootcon rootwait dma.dmachans=0x7f35 bcm2708_fb.fbwidth=1024 bcm2708_fb.fbheight=768 bcm2708.boardrev=0xf bcm2708.serial=0xcad0eedf smsc95xx.macaddr=B8:27:EB:D0:EE:DF sdhci-bcm2708.emmc_clock_freq=100000000 vc_mem.mem_base=0x1c000000 vc_mem.mem_size=0x20000000  dwc_otg.lpm_enable=0 kgdboc=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait" -sd 2014-01-07-wheezy-raspbian.img  -device usb-kbd -device usb-mouse -usbdevice net 
</code></pre>

<p>Now we can run the raspberryPI in QEMU with 512MB memory, but, the network is still unavailable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Weather APP on RaspberryPI]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/03/17/deploy-weather-app-on-raspberrypi/"/>
    <updated>2014-03-17T20:10:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/03/17/deploy-weather-app-on-raspberrypi</id>
    <content type="html"><![CDATA[<p>Since I enabled the RaspberryPI and disabled the PogoPlug, I have to move the Weather App on RaspberryPI. <br />
The main difference lies on the python version, on PogoPlug the default python version is python2.7, while on RaspberryPI it&rsquo;s python3.3, thus I have to use the virtualenvironment of Python. <br /></p>

<h3>Setup the virtualenv</h3>

<p>Following is the steps for setting up the virtual environment for python2.7 on ArchLinux:<br /></p>

<pre><code>    $ mkdir ~/pyves
    $ cat &gt;~/.virtualenvrc &lt;&lt;EOF
    export WORKON_HOME="$HOME/pyves"
    export PROJECT_HOME="$HOME/pyves"
    source /usr/bin/virtualenvwrapper.sh
    EOF
    $ source  ~/.virtualenvrc
    $ cat &gt;&gt;~/.bashrc &lt;&lt;EOF
    source $HOME/.virtualenvrc
    EOF
    $ mkvirtualenv --python=/usr/bin/python2.7 v27
    $ workon v27
    $ pip install pywapi django sqlite3
</code></pre>

<h3>Deployment Python Script</h3>

<p>Copy the script to some directory, mine is under /root/code/weather.<br />
If we want cron to call the virtual environment, we have to create a script and in the script to call the python script.<br /></p>

<pre><code class="sh NJ.sh">    #!/bin/bash
    # Export everything.
    source /root/.bashrc
    # Change to the virtual environment
    workon v27
    # Call python
    python /root/code/weather/genhtml.py
</code></pre>

<p>Now we add this script to crontab, at every whole point, each hour it will run once. <br /></p>

<pre><code>    crontab -e
    0 */1 * * * /root/code/weather/NJ.sh
    15 */1 * * * /root/code/weather/BJ.sh
    30 */1 * * * /root/code/weather/CS.sh
</code></pre>

<p>Now at every 0/15/30, our cron job will be run, and retrieve the data generate the flot image for displaying.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use RaspberryPI as a File Server]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/12/30/use-raspberrypi-as-a-file-server/"/>
    <updated>2013-12-30T16:05:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/12/30/use-raspberrypi-as-a-file-server</id>
    <content type="html"><![CDATA[<h3>Preparation</h3>

<p>Mount the partition automatically, add following lines into the /etc/fstab:</p>

<pre><code>    /dev/sda3   /media/ntfs     ntfs-3g    permissions,locale=en_US.utf8      0   2
</code></pre>

<p>I decide to use samba to share the files, so I have to install samba</p>

<pre><code>    apt-get install samba
</code></pre>

<p>The samba server will start automatically, but we have to configure it to adapte to our situation.   <br/>
Add the configuration to the samba config file:</p>

<pre><code>    /etc/samba/smb.conf
    [raspshare]
       comment = raspberry PI Share
       path = /media/ntfs
       valid users = Trusty
       public = no
       writable = yes
       printable = no
       create mask = 0765
</code></pre>

<p>Restart the samba server</p>

<pre><code>    /etc/init.d/samba restart
</code></pre>

<p>For using smbpasswd, you have to install samba-common-bin:</p>

<pre><code>    apt-get install samba-common-bin
</code></pre>

<p>Add some users to the samba sharing:</p>

<pre><code>    smbpasswd -a xxx
</code></pre>

<h3>Mount the shared partition in client</h3>

<p>List all of the available samba shared items:</p>

<pre><code>    $ smbclient -L 10.0.0.230 -U%
</code></pre>

<p>Then we can mount it, I add following command into the .bashrc, so everytime I enter &lsquo;mountraspsamba&rsquo; is ok</p>

<pre><code>    alias mountraspsamba='sudo mount -t cifs //10.0.0.230/raspshare/ -o user=xxxx,password=XXXX,workgroup=WORKGROUP /media/raspsamba'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I2C Between raspberryPI and Arduino]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/12/29/i2c-between-raspberrypi-and-arduino/"/>
    <updated>2013-12-29T19:32:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/12/29/i2c-between-raspberrypi-and-arduino</id>
    <content type="html"><![CDATA[<h3>连线</h3>

<p>Arduino I2C 连线:  <br/>
<img src="/images/arduino-i2c-pins.jpg" alt="arduino.jpg" />  <br/>
RaspberryPI I2C 连线:  <br/>
<img src="/images/raspberry-pi-i2c-pins.jpg" alt="rasp.jpg" />  <br/>
连线图：</p>

<pre><code>    RPI               Arduino (Uno/Duemillanove)
    --------------------------------------------
    GPIO 0 (SDA) &lt;--&gt; Pin 4 (SDA)
    GPIO 1 (SCL) &lt;--&gt; Pin 5 (SCL)
    Ground       &lt;--&gt; Ground
</code></pre>

<p><img src="/images/RaspberryPI-I2c-Arduino.png" alt="rasp-arduino.jpg" /></p>

<h3>Arduino端代码</h3>

<pre><code class="c i2c.ino">#include &lt;Wire.h&gt;

#define SLAVE_ADDRESS 0x04
int number = 0;
int state = 0;

void setup() {
    pinMode(13, OUTPUT);
    Serial.begin(9600);         // start serial for output
    // initialize i2c as slave
    Wire.begin(SLAVE_ADDRESS);

    // define callbacks for i2c communication
    Wire.onReceive(receiveData);
    Wire.onRequest(sendData);

    Serial.println("Ready!");
}

void loop() {
    delay(100);
}

// callback for received data
void receiveData(int byteCount){

    while(Wire.available()) {
        number = Wire.read();
        Serial.print("data received: ");
        Serial.println(number);

        if (number == 1){

            if (state == 0){
                digitalWrite(13, HIGH); // set the LED on
                state = 1;
            }
            else{
                digitalWrite(13, LOW); // set the LED off
                state = 0;
            }
         }
     }
}

// callback for sending data
void sendData(){
    Wire.write(number);
}
</code></pre>

<h3>RaspberryPI端准备</h3>

<p>在/etc/modules中增加一行:</p>

<pre><code>    i2c-dev
</code></pre>

<p>注释掉黑名单：</p>

<pre><code>    $ cat /etc/modprobe.d/raspi-blacklist.conf
    # blacklist spi and i2c by default (many users don't need them)
    # blacklist spi-bcm2708
    #blacklist i2c-bcm2708
</code></pre>

<p>安装i2c工具：</p>

<pre><code>    apt-get install i2c-tools
</code></pre>

<p>安装python库：</p>

<pre><code>    apt-get install python-smbus
</code></pre>

<p>探测i2c设备</p>

<pre><code>    i2cdetect -y 0
</code></pre>

<p>如果不是root用户，例如，如果是pi用户，则需要将当前用户增加到i2c组中:</p>

<pre><code>    $ sudo adduser pi i2c
</code></pre>

<h3>RaspberryPI端代码</h3>

<pre><code class="py i2c.py">import smbus
import time
# for RPI version 1, use "bus = smbus.SMBus(0)"
bus = smbus.SMBus(0)

# This is the address we setup in the Arduino Program
address = 0x04

def writeNumber(value):
    bus.write_byte(address, value)
    # bus.write_byte_data(address, 0, value)
    return -1

def readNumber():
    number = bus.read_byte(address)
    # number = bus.read_byte_data(address, 1)
    return number

while True:
    var = input("Enter 1 - 9: ")
    if not var:
        continue

    writeNumber(var)
    print "RPI: Hi Arduino, I sent you ", var
    # sleep one second
    time.sleep(1)

    number = readNumber()
    print "Arduino: Hey RPI, I received a digit ", number
    print
</code></pre>

<p>运行代码时要注意，0～255的数字输入进去，会在arduino i2c slave端收到对应的数据，并原封不动的被返回。超过255的数值将溢出。</p>
]]></content>
  </entry>
  
</feed>
