<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-08-18T19:29:29+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Verified to Github]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/10/14/verified-to-github/"/>
    <updated>2014-10-14T19:59:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/10/14/verified-to-github</id>
    <content type="html"><![CDATA[<h3>General Method</h3>

<p>When you were denied by github, use following method for get through:  <br/>
Generate the key-gen</p>

<pre><code>ssh-keygen
</code></pre>

<p>Then Creat the following files:</p>

<pre><code># cat /home/Trusty/.ssh/config
Host github.com
User xxx@xxx.com
Hostname ssh.github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa
Port 443
</code></pre>

<p>Now use following command for setting the connection:</p>

<pre><code>ssh -T git@github.com
</code></pre>

<h3>Under firewall</h3>

<p>First add the ~/.ssh/id_rsa.pub to the github&rsquo;s &ldquo;SSH keys&rdquo;.   <br/>
If your machine runs under the firewall, you have to do things like following:</p>

<pre><code>ssh -L 2121:github.com:22 root@1xxx.xxx.xxx.158
</code></pre>

<p>Then in another terminal, run:</p>

<pre><code>ssh -T git@localhost -p 2121
Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Reading Digest for Git]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/04/22/my-reading-digest-for-git/"/>
    <updated>2014-04-22T16:12:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/04/22/my-reading-digest-for-git</id>
    <content type="html"><![CDATA[<h3>View Git LOG</h3>

<p>git log for view your activities:</p>

<pre><code class="sh run.sh">$ git log --pretty=oneline
1f7ec5eaa8f37c2770dae3b984c55a1531fcc9e7 Added a comment
582495ae59ca91bca156a3372a72f88f6261698b Added a default value
323e28d99a07d404c04f27eb6e415d4b8ab1d615 Using ARGV
94164160adf8faa3119b409fcfcd13d0a0eb8020 First Commit
</code></pre>

<p>git log controlling items:</p>

<pre><code class="sh run.sh">$ git log --pretty=oneline --max-count=2
$ git log --pretty=oneline --since='5 minutes ago'
$ git log --pretty=oneline --until='5 minutes ago'
$ git log --pretty=oneline --author=&lt;your name&gt;
$ git log --pretty=oneline --all
</code></pre>

<p>try man git-log for more details.   <br/>
For searching last 7 days' modification:  <br/>
    $ git log &ndash;all &ndash;pretty=format:&lsquo;%h %cd %s (%an)&rsquo; &ndash;since=&lsquo;7 days ago&rsquo;
Final command:</p>

<pre><code class="sh run.sh">    $ git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short'
    $ git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
    * 1f7ec5e 2013-04-13 | Added a comment (HEAD, master) [Jim Weirich]
    * 582495a 2013-04-13 | Added a default value [Jim Weirich]
    * 323e28d 2013-04-13 | Using ARGV [Jim Weirich]
    * 9416416 2013-04-13 | First Commit [Jim Weirich]
</code></pre>

<p>Explanation:</p>

<pre><code class="sh run.sh">    --pretty="..." 定义输出的格式
    %h 是提交 hash 的缩写
    %d 是提交的装饰（如分支头或标签）
    %ad 是创作日期
    %s 是注释
    %an 是作者姓名
    --graph 使用 ASCII 图形布局显示提交树
    --date=short 保留日期格式更好且更短
</code></pre>

<p>Other tools:  gitx (Mac) 和 gitk (任意平台) 在浏览日志历史时十分有用。</p>

<h3>Add Git TAG</h3>

<p>Add tag for the specified release: &ldquo;git tag v1-data&rdquo;, &ldquo;git tag&rdquo; to view all of the tags.   <br/>
Revert the change via;</p>

<pre><code>    git revert HEAD
</code></pre>

<p>这将带你到编辑器中。你可以编辑默认的提交信息，或直接 离开它。保存并关闭文件。Or Using the following with no editing:</p>

<pre><code>    $ git revert HEAD --no-edit
</code></pre>

<p>Using tag for reverting the changes:</p>

<pre><code>    $ git tag oops
    $ git reset --hard v1
    $ git tag -d oops
</code></pre>

<p>More than one modification but commit once:</p>

<pre><code>    $ git add hello.rb
    $ git commit --amend -m "Add an author/email comment"
</code></pre>

<p>Change the directory structure:</p>

<pre><code>    git mv hello.rb lib
    git commit -m "Moved hello.rb to lib"
</code></pre>

<p>View the directory tree:</p>

<pre><code>    git cat-file -p 4ee1119fb7519dc8298fe5d8e9329f52566afaed
</code></pre>

<h3>Merge</h3>

<p>Merge the branch with master:</p>

<pre><code>    git merge master
</code></pre>

<p>when conflicts happens, you will manually merge it.</p>

<p>Revert to specified version:</p>

<pre><code>    git reset --hard &lt;hash&gt;
</code></pre>

<p>Clone the remote repository to local, using git clone:</p>

<pre><code>    $ git clone hello cloned_hello
    $ git branch -a
    * master
      remotes/origin/HEAD -&gt; origin/master
      remotes/origin/greet
      remotes/origin/master
</code></pre>

<p>git fetch 命令的结果将从远程仓库取得新的提交，但它不会将这些提交合并到本地分支中。If we wnat to sync, then try following:</p>

<pre><code class="sh run.sh">    [Trusty@~/code/git_learn/git_tutorial/cloned_hello]$ git merge origin/master
    Updating 5de15b7..105a3d0
    Fast-forward
     README | 1 +
     1 file changed, 1 insertion(+)
    [Trusty@~/code/git_learn/git_tutorial/cloned_hello]$ cat README 
    This is the Hello World example from the git tutorial.
    (Changed in original)
</code></pre>

<p>Clone the directory structure, mainly for backup:</p>

<pre><code>    $ git clone --bare hello hello.git
    Cloning into bare repository hello.git...
    done.
    $ ls hello.git
    HEAD
    config
    description
    hooks
    info
    objects
    packed-refs
    refs
</code></pre>

<p>If we want to push changes to the remote, just git push.  <br/>
迅速跳过克隆仓库，且让我们拉下刚才推送到共享仓库的更改。</p>

<pre><code>    $ cd ../cloned_hello
    $ git remote add shared ../hello.git
    $ git branch --track shared master
    $ git pull shared master
    $ cat README
</code></pre>

<h3>On Daemon</h3>

<h4>启动 Git 服务器</h4>

<pre><code>    # (From the work directory)
    $ git daemon --verbose --export-all --base-path=.
</code></pre>

<p>现在，在分开的终端窗口中，转到你的工作目录。</p>

<pre><code>    # (From the work directory)
    $ git clone git://localhost/hello.git network_hello
    $ cd network_hello
    $ ls
</code></pre>

<p>你应当看到 hello 项目的拷贝。</p>

<h4>推送到 Git daemon</h4>

<p>如果你想要推送到 Git daemon 仓库，添加 &ndash;enable=receive-pack 到 git daemon 命令。小心，因为此服务器没有授权，任何人 都能推送到你的仓库。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Management of My Repository]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/01/26/git-management-of-my-repository/"/>
    <updated>2014-01-26T10:22:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/01/26/git-management-of-my-repository</id>
    <content type="html"><![CDATA[<p>For create a new branch in the current repository:</p>

<pre><code>    git branch &lt;name_of_your_new_branch&gt;
</code></pre>

<p>Then you can push the branch on github</p>

<pre><code>    git push origin &lt;name_of_your_new_branch&gt;
</code></pre>

<p>If you want to switch to your new branch:</p>

<pre><code>    git checkout &lt;name_of_your_new_branch&gt;
</code></pre>

<p>See all of the branches via:</p>

<pre><code>    git branch
</code></pre>

<p>Also you can add multiply remote url via:</p>

<pre><code>    git remote add &lt;name_of_your_remote&gt; &lt;url&gt;
</code></pre>

<p>Push all of your changes</p>

<pre><code>    git push origin &lt;name_of_your_remote&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
