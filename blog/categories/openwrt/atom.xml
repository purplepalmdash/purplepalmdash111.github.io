<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Openwrt | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/openwrt/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-03-23T22:47:30+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Recover My OpenWRT Configuration]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/12/12/recover-my-openwrt-configuration/"/>
    <updated>2014-12-12T10:00:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/12/12/recover-my-openwrt-configuration</id>
    <content type="html"><![CDATA[<h3>Background</h3>

<p>I tried to use <code>192.168.1</code> network for debugging, but after I change back from <code>10.0.0.</code> to <code>192.168.1.</code> the router got no interface for luci and http. So following is the steps for recovering from the fail router.</p>

<h3>Solution</h3>

<p>First I tried to recover the luci and uhttpd, but after a while I think maybe I could swith to a newer version.  <br/>
The newest version currently is &ldquo; &lsquo;Barrier Breaker&rsquo; &rdquo;, its version number is 14.07.  <br/>
My router is Mercury 4530R, which have the following configuration:</p>

<pre><code>CPU Ram Flash   Network USB Serial  JTag    
Atheros 128MiB  8MiB    4LAN + 2WIFI    Yes Yes ?    
</code></pre>

<p>LUCI upgrade failed:  <br/>
<img src="/images/flasherror.jpg" alt="/images/flasherror.jpg" /></p>

<p>The reason:  <br/>
<img src="/images/flasherrorreason.jpg" alt="/images/flasherrorreason.jpg" /></p>

<p>Because in early 2012 Autumn, the official supporting for 4530R is not release, so we modified the machineID, to let 4530R to use TP-Link&rsquo;s patched images, this will display our system as for 4310, but not for 4530R.</p>

<h4>Sysupgrade in CLI</h4>

<p>First check the free memory:</p>

<pre><code>root@OpenWrt:~# free
             total         used         free       shared      buffers
Mem:        126788        26636       100152            0         1780
-/+ buffers:              24856       101932
Swap:            0            0            0
</code></pre>

<p>Download the sysupgrade file:</p>

<pre><code># cd /tmp
# wget http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/openwrt-ar71xx-generic-mw4530r-v1-squashfs-sysupgrade.bin
# ls -l openwrt-ar71xx-generic-mw4530r-v1-squashfs-sysupgrade.bin 
-rw-r--r--    1 root     root       3342340 Jun 22 17:28 openwrt-ar71xx-generic-mw4530r-v1-squashfs-sysupgrade.bin
</code></pre>

<p>Problem when checking:</p>

<pre><code># sysupgrade -v openwrt-ar71xx-generic-mw4530r-v1-squashfs-sysupgrade.bin 
Invalid image, hardware ID mismatch, hw:43100001 image:45300001.
Image check 'platform_check_image' failed.
</code></pre>

<p>Ignore the Image check:</p>

<pre><code>root@OpenWrt:/tmp# sysupgrade -F openwrt-ar71xx-generic-mw4530r-v1-squashfs-sysupgrade.bin 
Invalid image, hardware ID mismatch, hw:43100001 image:45300001.
Image check 'platform_check_image' failed but --force given - will update anyway!
Saving config files...
Sending TERM to remaining processes ... uhttpd dnsmasq smbd nmbd ntpd hotplug2 syslogd klogd hotplug2 ubusd netifd 
Sending KILL to remaining processes ... uhttpd 
Switching to ramdisk...
Performing system upgrade...
Unlocking firmware ...

Writing from &lt;stdin&gt; to firmware ...     
Appending jffs2 data from /tmp/sysupgrade.tgz to firmware...TRX header not found
Error fixing up TRX header

Upgrade completed
Rebooting system...
</code></pre>

<p>After a while, your router is flashed to the new system.</p>

<h4>More Happily Play with FlashDisk</h4>

<p>Cause 8M Flash is not enough for playing lots of things, I plug-in a 2G FlashDisk into the usb port as the external disk.</p>

<pre><code>$ ssh root@192.168.1.1
root@OpenWrt:~# export http_proxy=http://1xx.xx.xxx.xxx:2xxxx
root@OpenWrt:~# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                    4.6M    292.0K      4.3M   6% /
/dev/root                 2.3M      2.3M         0 100% /rom
tmpfs                    61.7M    588.0K     61.1M   1% /tmp
/dev/mtdblock3            4.6M    292.0K      4.3M   6% /overlay
overlayfs:/overlay        4.6M    292.0K      4.3M   6% /
tmpfs                   512.0K         0    512.0K   0% /dev
root@OpenWrt:~# opkg update
......
root@OpenWrt:~# opkg install block-mount kmod-usb-storage fdisk kmod-fs-ext4 kmod-usb-storage-extras kmod-scsi-generic
......
root@OpenWrt:~# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                    4.6M    836.0K      3.8M  18% /
</code></pre>

<p>Now format the flash-disk and plug it into the usb port. Reboot the router and now via <code>fdisk -l</code> you will see the plugged-in flashdisk:</p>

<pre><code>Device    Boot Start       End  Blocks  Id System
/dev/sda1       2048   3948543 1973248  83 Linux
</code></pre>

<h4>Transfer Filesystem to External Disk</h4>

<p>The steps is listed as: <br/>
pivot overlay:</p>

<pre><code>root@OpenWrt:~# mkdir /mnt/sda1
root@OpenWrt:~# mount /dev/sda1 /mnt/sda1/
root@OpenWrt:~# tar -C /overlay -cvf - . | tar -C /mnt/sda1 -xf -
root@OpenWrt:~# ls /mnt/sda1/
etc         lib         lost+found  mnt         sbin        usr
</code></pre>

<p>pivot root:</p>

<pre><code>mkdir -p /tmp/cproot
mount --bind / /tmp/cproot
tar -C /tmp/cproot -cvf - . | tar -C /mnt/sda1 -xf -
umount /tmp/cproot
</code></pre>

<p>Configuration file:</p>

<pre><code>$ block detect
config 'mount'
        option  target  '/mnt/sda1'
        option  uuid    'f6857dac-a12a-49c9-b567-f05a61100bd7'
        option  enabled '0'

$ cat /etc/config/fstab
config global
        option anon_swap '0'
        option anon_mount '0'
        option auto_swap '1'
        option auto_mount '1'
        option delay_root '5'
        option check_fs '0'

config mount
        option target '/overlay'
        option  uuid    'f6857dac-a12a-49c9-b567-f05a61100bd7'
        option enabled '1'
        option fstype 'ext4'
</code></pre>

<p>Now reboot the router and you got a 2G based storage router:</p>

<pre><code>root@OpenWrt:~# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                    1.8G     12.6M      1.7G   1% /
</code></pre>

<p>You could play happily in this router.  <br/>
<img src="/images/4530Rrouter.jpg" alt="/images/4530Rrouter.jpg" /></p>

<h3>Further Optimization</h3>

<p>Includes:  <br/>
1. Fixed ip address configurations.   <br/>
2. Port forwarding. Router-> Port Forwarding.  <br/>
3. SSH Server Replacement, from dropbear to opensshd.</p>

<pre><code># opkg update
# opkg install openssh-server
# uci set dropbear.@dropbear[0].Port=2222
# uci commit dropbear
# /etc/init.d/dropbear restart
# /etc/init.d/sshd enable
# /etc/init.d/sshd start
# /etc/init.d/dropbear disable
# /etc/init.d/dropbear stop
# ssh-keygen
# opkg install openssh-client
</code></pre>

<p>4. Time sync.    <br/>
With the previous installed sshd, you could add yourself to remote server&rsquo;s trusted users. then add files of <code>time.sh</code> for syncing time. <br/>
Refers to local link <code>/blog/2014/02/11/write-local-ntp-sync-server/</code>  <br/>
5. Sharing the mouse between Yosemite and ArchLinux, change the configuration files.</p>

<p>Finally we got all of these done:</p>

<pre><code>root@OpenWrt:~/.ssh# uptime
 12:45:31 up 6 min,  load average: 0.22, 0.14, 0.06
root@OpenWrt:~/.ssh# date
Fri Dec 12 12:45:33 CST 2014
root@OpenWrt:~/.ssh# uname -a
Linux OpenWrt 3.10.49 #3 Wed Oct 1 14:00:51 CEST 2014 mips GNU/Linux
</code></pre>

<p>Enable ssh WAN access:</p>

<pre><code>uci add firewall rule
uci set firewall.@rule[-1].src=wan
uci set firewall.@rule[-1].target=ACCEPT
uci set firewall.@rule[-1].proto=tcp
uci set firewall.@rule[-1].dest_port=22
uci commit firewall
/etc/init.d/firewall restart
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NTP in LAN Based on OPENWRT]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/12/12/ntp-in-lan-based-on-openwrt/"/>
    <updated>2013-12-12T14:13:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/12/12/ntp-in-lan-based-on-openwrt</id>
    <content type="html"><![CDATA[<h3>Package Installation</h3>

<p>Disable the system default ntp server and install ntpd, this ntpd is the real ntpd package, not busybox-ntpd</p>

<pre><code>    opkg update
    opkg install ntpd
    /etc/init.d/sysntpd disable
    /etc/init.d/ntpd enable
    /etc/init.d/ntpd start
    netstat -l | grep ntp
</code></pre>

<p>The client installation, on debian:</p>

<pre><code>    apt-get install ntp
</code></pre>

<h3>Server Configuration</h3>

<p>Comment all of the possible reference server, use local time source.</p>

<pre><code>    root@OpenWrt:~# cat /etc/ntp.conf 
    # use a random selection of 4 public stratum 2 servers
    # see http://twiki.ntp.org/bin/view/Servers/NTPPoolServers

    restrict default nomodify notrap noquery
    #restrict default noquery

    #restrict 127.0.0.1
    restrict 10.0.0.0 mask 255.255.255.0 nomodify notrap

    server 127.127.1.0  # LOCAL CLOCK
    fudge 127.127.1.0 stratum 0

    driftfile  /var/lib/ntp/ntp.drift
</code></pre>

<p>Then restart the service. Your ntp server is available.</p>

<h3>Client Configuration</h3>

<p>Enable saned to enable ntp client on beaglebone:</p>

<pre><code>    # error message
    [....] Starting NTP server: ntpdsaned disabled; edit /etc/default/saned
    vim /etc/default/saned 
    # Set to yes to start saned
    RUN=yes
</code></pre>

<p>Then we have to enable the ntp client&rsquo;s configuration:   <br/>
For Client manually synchornize</p>

<pre><code>    root@arm:~# ntpdate 10.0.0.1
     1 Jan 05:18:55 ntpdate[2243]: the NTP socket is in use, exiting
    root@arm:~# ps -ef | grep ntp
    ntp       1805     1  0 04:30 ?        00:00:00 /usr/sbin/ntpd -p /var/run/ntpd.pid -g -u 107:112
    root      2245  2127  0 05:19 pts/0    00:00:00 grep ntp
    root@arm:~# kill 1805
    root@arm:~# date
    Sat Jan  1 05:19:05 UTC 2000
    root@arm:~# ntpdate 10.0.0.1
    12 Dec 07:38:44 ntpdate[2247]: step time server 10.0.0.1 offset 440129967.397166 sec
    root@arm:~# date
    Thu Dec 12 07:38:46 UTC 2013
</code></pre>

<p>The client configuration for ntp, remove all of the possible server, use LAN server:</p>

<pre><code>    server 10.0.0.1
</code></pre>

<p>tzselect will set the timezone of the equipment. The result is:</p>

<pre><code>    TZ='Asia/Shanghai'; export TZ
</code></pre>

<p>Add it into the ~/.profile, then your time will be adjusted to Shanghai Time.</p>

<h3>Update time via http</h3>

<p>Since I located in UMT+8, I will use following commands for sync the time</p>

<pre><code>    date $(wget -O - "http://www.timeapi.org/utc/in+eight+hours" 2&gt;/dev/null | sed s/[-T:+]/\ /g | awk '{print $2,$3,$4,$5,".",$6}' | tr -d " " )
</code></pre>

<p>Then add it to crontab</p>

<pre><code class="sh time.sh">    root@OpenWrt:~# cat /bin/time.sh 
    #!/bin/sh
    #echo $http_proxy
    #echo $https_proxy
    date $(wget -O - "http://www.timeapi.org/utc/in+eight+hours" 2&gt;/dev/null | sed s/[-T:+]/\ /g | awk '{print $2,$3,$4,$5,".",$6}' | tr -d " " )
</code></pre>

<p>The crontab -e should like following:</p>

<pre><code>    * */3 * * * /bin/time.sh
</code></pre>

<p>This means every 3 hours the script will be called for synchronizing the time.   <br/>
Now we can enjoy the precise time from the internet and make it availale for the service on LAN.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Reverse SSH for Across Something]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/11/18/use-reverse-ssh-for-across-something/"/>
    <updated>2013-11-18T19:01:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/11/18/use-reverse-ssh-for-across-something</id>
    <content type="html"><![CDATA[<h3>Enable No Password for Login</h3>

<p>Generate the public/private rsa key pair.</p>

<pre><code>    root@OpenWrt:~# ssh-keygen -t rsa
    root@OpenWrt:~# ls ~/.ssh
    authorized_keys  id_rsa           id_rsa.pub       known_hosts
Upload the id_rsa.pub to the Home's PC.
    # cat .ssh/id_rsa.pub | ssh USER@HOME_PC 'cat &gt;&gt; .ssh/authorized_keys'
Check If you can login without entering the password:
    $ ssh USER@HOME_PC
</code></pre>

<h3>OpenWRT Modification</h3>

<p>Since the default ssh client is dropbear on OpenWRT, thus the key length is 1024, we have to using the 2048 for most of the cases. so we have to remove dropbear, and install openssh-client for linking to our home PC.  <br/>
Change the /etc/init.d/dropbear&rsquo;s listenning port from 22 to 2222 or other ports, this doesn&rsquo;t matter, for later we will totally remove the dropbear.   <br/>
Now remove the dropbear</p>

<pre><code>    $ opkg remove dropbear
</code></pre>

<p>Install the packages of openssh:</p>

<pre><code>    $ opkg install openssh-client openssh-sftp-client sshtunnel openssh-keygen
    $ opkg install openssh-client-utils
</code></pre>

<p>Now using &ldquo; ssh-keygen -t rsa&rdquo;  we will  get the following:</p>

<pre><code>    +--[ RSA 2048]----+
</code></pre>

<p>But previous we got is:</p>

<pre><code>    +--[ DSA 1024]----+
</code></pre>

<p>That&rsquo;s why we can&rsquo;t use dropbear for login to HOME PC.</p>

<h3>autossh Configuration</h3>

<p>Install autossh on your own OpenWRT</p>

<pre><code>    $ opkg install autossh
</code></pre>

<p>Edit the configuration file:</p>

<pre><code>    root@OpenWrt:~# cat /etc/config/autossh 
    config autossh
        option ssh  '-N -T -R 4381:localhost:22 root@goewugouog.gowugoeug.com '
        option gatetime '0'
        option monitorport  '20000'
        option poll '600'
</code></pre>

<p>Start the server immediately, later it will be started automatically:</p>

<pre><code>    $ /etc/init.d/autossh start
</code></pre>

<h3>Jump to the Open World!!!</h3>

<p>Jump to the American Server on OpenWRT:</p>

<pre><code>    $ ssh -L 13@.XXX.XXX.XXX:9004:13g.XXX.XXX.XXX:8000 fXXXXXX@remote.american.com
</code></pre>

<p>From Home machine Jump to the OpenWRT in company:</p>

<pre><code>    $ ssh -L 10.0.0.111:9001:13@.XXX.XXX.XXX:9004 root@localhost -p 4381
</code></pre>

<p>Now the connection has been setup between your family network to company network, finally to the US network.</p>

<p>Enjoy Jumping!!!</p>

<h3>How to make it automatically?</h3>

<p>Maybe I can write the script to make it automatically executed.   Via python or via expect? Maybe try python.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Music on OpenWRT]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/11/13/play-music-on-openwrt/"/>
    <updated>2013-11-13T13:53:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/11/13/play-music-on-openwrt</id>
    <content type="html"><![CDATA[<p>1. Install usbutils, this will enable you to use lsusb to detect your usb equipments.</p>

<pre><code>    $ opkg install usbutils
</code></pre>

<p>2. Use lsusb to detect your usb audio card.</p>

<pre><code>    # root@OpenWrt:~# lsusb
    Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
    Bus 001 Device 002: ID 1a40:0101 TERMINUS TECHNOLOGY INC. USB-2.0 4-Port HUB
    Bus 001 Device 003: ID 0781:557c SanDisk Corp. 
    Bus 001 Device 004: ID 0424:2507 Standard Microsystems Corp. 
    Bus 001 Device 005: ID 0e5c:6441 Bitland Information Technology Co., Ltd C-Media Sound Device
    Bus 001 Device 006: ID 0e5c:6119 Bitland Information Technology Co., Ltd remote receive and control device
</code></pre>

<p>Now we will see the C-Media Sound Device has been detected in our own openwrt equipment.
3. Install usb audio kernel support modules:</p>

<pre><code>    $ opkg install kmod-usb-audio
</code></pre>

<p>4. Install madplay for playing audio files:</p>

<pre><code>    $ opkg install madplay
</code></pre>

<p>5. For configuring the sound, install alsa-utils.</p>

<pre><code>    $ opkg install alsa-utils
</code></pre>

<p>6. Install madplayer for playing mp3</p>

<pre><code>    $ opkg install madplayer
</code></pre>

<p>When Playing mp3, the cpu usage is only around 20%, and we can satisfy the volumn using alsamixer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Mini_snmpd on OpenWRT]]></title>
    <link href="http://purplepalmdash.github.io/blog/2013/10/24/run-mini-snmpd-on-openwrt/"/>
    <updated>2013-10-24T10:49:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2013/10/24/run-mini-snmpd-on-openwrt</id>
    <content type="html"><![CDATA[<h3>OpenWRT Configuration</h3>

<p>Install mini_snmpd:</p>

<pre><code>    $ opkg update
    $ opkg install mini-snmpd
</code></pre>

<p>Configure mini_snmpd: mainly changes: option enabled 1, then change the option contact and location. But infact we can only fetch list interfaces in cacti:</p>

<pre><code>    root@OpenWrt:~# cat /etc/config/mini_snmpd 
    config mini_snmpd
        option enabled 1
        option ipv6 0
        option community 'public'
        option contact 'gwoguowug@gmail.com'
        option location 'Asia/China/Nanjing'

        # enable basic disk usage statistics on specified mountpoint
        list disks '/jffs'
        list disks '/tmp'

        # enable basic network statistics on specified interface
        # 4 interfaces maximum, as named in /etc/config/network
        list interfaces 'loopback'
        list interfaces 'lan'
        list interfaces 'wan'
</code></pre>

<p>Restart the mini_snmpd:</p>

<pre><code>    $ /etc/init.d/mini_snmpd restart
</code></pre>

<h3>Cacti Configuration</h3>

<p>Add a new device named OpenWRT, the configuration may like following:</p>

<pre><code>    Change the Host Template to Generic SNMP-enabled Host
    Downed Device Detection - Ping
    Ping Method - ICMP Ping
</code></pre>

<p>Then you can add your own data sources, graph templates, new graph, new graph Trees, then display them. the picture may looks like as following:</p>

<p><img src="/images/Openwrt_cacti.jpg" title="OpenWRT cacti" alt="Alt text" /></p>
]]></content>
  </entry>
  
</feed>
