<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-10-14T07:18:10+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips on Cloud-Init and CloudStack]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/13/tips-on-cloud-init-and-cloudstack/"/>
    <updated>2015-10-13T16:22:16+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/13/tips-on-cloud-init-and-cloudstack</id>
    <content type="html"><![CDATA[<h3>CloudStack VR VM</h3>

<p>For accessing the VR VM and view the user-data and meta-data, like following, on the
instance ssh, you could get the user-data and meta-data:</p>

<pre><code>[root@testfuck ~]# curl http://10.1.1.1/latest/user-data
[root@testfuck ~]# curl http://10.1.1.1/latest/meta-data
service-offering
availability-zone
local-ipv4
local-hostname
public-ipv4
public-hostname
instance-id
vm-id
public-keys
cloud-identifier
# curl http://10.1.1.1/latest/meta-data/vm-id
c6e1165e-f19a-4c77-9d96-dfd48f8ce944
</code></pre>

<p>user-data could not be fetched directly, you could only manage it via cloud-monkey when
deploying the VMs.</p>

<h3>user-data Simple Example</h3>

<p>Before user-data injected:</p>

<pre><code>Login Using password:   

root@r-9-VM:~# ssh root@10.1.1.162
root@10.1.1.162's password: 

[root@testfuck etc]# date +%Z
BST
[root@testfuck etc]# cat /etc/sysconfig/clock 
ZONE="Europe/London"
</code></pre>

<p>But We want to change! First let VR VM could directly login to the instance, second, we
change the timezone into Asia/Chongqing.</p>

<p>Generate the user-data:</p>

<pre><code>$ cat hello_world.sh
#!/bin/bash
echo "hello world!" &gt;&gt; /root/test
$ cat my-user-data
#cloud-config
growpart:
  mode: auto
chpasswd: { expire: False }
ssh_pwauth: True

ssh_authorized_keys:
 - ssh-rsa xxxxxxxxxxxxxxxxxxxxxxxx

timezone: Asia/Chongqing
$ $ write-mime-multipart --output=combined-userdata.txt \ 
hello_world.sh:text/x-shellscript my-user-data
$ ls -l -h combined-userdata.txt 
-rw-rw-r-- 1 dash dash 1.1K Oct 13 17:14 combined-userdata.txt
$ cat combined-userdata.txt | base64
</code></pre>

<p>Deploy via:</p>

<pre><code>cloudmonkey deploy virtualmachine
serviceofferingid=683f31f8-a939-468e-b4de-4512a8ccff8e
templateid=13fb2961-533e-4a7d-80f9-21d860269aad
zoneid=78509dc3-c828-429c-8154-9fffbc09384c
networkids=7c6e7e6b-6aa2-4f95-a835-8d18bf930061 name=testuserdata
userdata='Q29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7IGJvdW5kYXJ5PSI9PT09PT09PT09PT09PT0xOTk5MDU5OTcyMjA5ODg1MjY2PT0iCk1JTUUtVmVyc2lvbjogMS4wCgotLT09PT09PT09PT09PT09PTE5OTkwNTk5NzIyMDk4ODUyNjY9PQpDb250ZW50LVR5cGU6IHRleHQveC1zaGVsbHNjcmlwdDsgY2hhcnNldD0idXMtYXNjaWkiCk1JTUUtVmVyc2lvbjogMS4wCkNvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmc6IDdiaXQKQ29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudDsgZmlsZW5hbWU9ImhlbGxvX3dvcmxkLnNoIgoKIyEvYmluL2Jhc2gKZWNobyAiaGVsbG8gd29ybGQhIiA+PiAvcm9vdC90ZXN0CgotLT09PT09PT09PT09PT09PTE5OTkwNTk5NzIyMDk4ODUyNjY9PQpDb250ZW50LVR5cGU6IHRleHQvY2xvdWQtY29uZmlnOyBjaGFyc2V0PSJ1cy1hc2NpaSIKTUlNRS1WZXJzaW9uOiAxLjAKQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZzogN2JpdApDb250ZW50LURpc3Bvc2l0aW9uOiBhdHRhY2htZW50OyBmaWxlbmFtZT0ibXktdXNlci1kYXRhIgoKI2Nsb3VkLWNvbmZpZwpncm93cGFydDoKICBtb2RlOiBhdXRvCmNocGFzc3dkOiB7IGV4cGlyZTogRmFsc2UgfQpzc2hfcHdhdXRoOiBUcnVlCgpzc2hfYXV0aG9yaXplZF9rZXlzOgogLSBzc2gtcnNhIEFBQUFCM056YUMxeWMyRUFBQUFEQVFBQkFBQUJBUUNzMFA4aFNCM05qN2tmd2lRT01PQ0Z2RXVqd3JLZjVuUFdmdzdzbmplVzd3TnhCYi9pTHhqbGxIK0tJdjdpS0dRaGI5WGtpZ3dXelhjdktSRk9OQTF0UU5CUHBsUE9RQXhHYUpoYzcxYlhZTVRabWsxcmZ5L0U4bUZIQmJ3U0trdm04Z3oxaFVqQWFITHdiZ21iaUE3eUNDUkVXbVR1SWpudm1FZnJXYU92WERRZFFPb2RkSzFhZThKM3BnRUNtQ21mRldrQmR3Y1JaN05jTUxBSkVkYTNpYWtJbWdaR2NqTWNCc1hjUUNOcjN1RGlKbERvc1V6Mjg4L3grTnZteTlzcHZnc2x4RXVUV0VQWFRGY1l5eVBrUHdkTnlpQm5TaWFoZTExcUdUZkk0Z2IyWllEb3JDZU5Ca1QxdkVaY0psL1JqT3NKRUFXT04rbno3Nm16MmdhZCByb290QHItOS1WTSAKCnRpbWV6b25lOiBBc2lhL0Nob25ncWluZwoKLS09PT09PT09PT09PT09PT0xOTk5MDU5OTcyMjA5ODg1MjY2PT0tLQo='
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud-Init Grow Partition]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/13/cloud-init-grow-partition/"/>
    <updated>2015-10-13T14:37:57+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/13/cloud-init-grow-partition</id>
    <content type="html"><![CDATA[<h3>Resize QCOW2</h3>

<p>Resize qcow2 file via:</p>

<pre><code>$ qemu-img info my_vm.img
image: my_vm.img
file format: qcow2
virtual size: 2.2G (2361393152 bytes)
disk size: 904M
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: false
$ qemu-img resize my_vm.img +100G
Image resized.
$ qemu-img info my_vm.img
image: my_vm.img
file format: qcow2
virtual size: 102G (109735575552 bytes)
disk size: 904M
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: false
</code></pre>

<h3>Enlarge Partition</h3>

<p>Modify the meta-data, and enable the partition grow options in user-data:</p>

<pre><code>$ vim my-user-data
#cloud-config
+ growpart:
+   mode: auto
password: xxxxxxxx
chpasswd: { expire: False }
ssh_pwauth: True

ssh_authorized_keys:
 - ssh-rsa xxxxxxxxxxx
timezone: Asia/Chongqing

$ cat my-meta-data 
instance-id: d59656d7-b365-4940-ae95-9168c32c68b7
$ echo "instance-id: $(uuidgen || echo i-abcdefg)" &gt; my-meta-data
$ cat my-meta-data 
instance-id: 5cad0dc4-facb-4079-b045-fbbc05caaf4a
</code></pre>

<p>Regenerate the image:</p>

<pre><code>$ rm -f my-seed.img
$ cloud-localds my-seed.img my-user-data my-meta-data
</code></pre>

<p>Restart the vm then you could get the disk resized.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on OZ]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/12/tips-on-oz/"/>
    <updated>2015-10-12T12:27:04+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/12/tips-on-oz</id>
    <content type="html"><![CDATA[<h3>Reference</h3>

<p>The reference URL is located at: <br/>
<a href="http://www.chenshake.com/oz-making-centos-mirror/">http://www.chenshake.com/oz-making-centos-mirror/</a></p>

<h3>Installation</h3>

<p>On CentOS 7, install oz via:</p>

<pre><code># yum install -y oz
# rpm -qa | grep oz-
oz-0.14.0-1.el7.noarch
</code></pre>

<h3>Configuration</h3>

<p>The configuration file for oz should be configured as:</p>

<pre><code># vim /etc/oz/oz.cfg 
[paths]
output_dir = /var/lib/libvirt/images
data_dir = /var/lib/oz
screenshot_dir = /var/lib/oz/screenshots
# sshprivkey = /etc/oz/id_rsa-icicle-gen

[libvirt]
uri = qemu:///system
#image_type = raw
image_type = qcow2
# type = kvm
bridge_name = virbr0
cpus = 1
memory = 1024
</code></pre>

<p>The configuration file for the oz should have one tdl file and one kickstart file:</p>

<pre><code># cat centos66.tdl 
&lt;template&gt;
   &lt;name&gt;centos_66_x86_64&lt;/name&gt;
   &lt;description&gt;CentOS 6.6 x86_64 template&lt;/description&gt;
   &lt;os&gt;
      &lt;name&gt;CentOS-6&lt;/name&gt;
      &lt;version&gt;6&lt;/version&gt;
      &lt;arch&gt;x86_64&lt;/arch&gt;
      &lt;install type='url'&gt;
         &lt;url&gt;http://192.168.0.79/ks_mirror/CentOS-6.6-x86_64&lt;/url&gt;
      &lt;/install&gt;
   &lt;/os&gt;
&lt;/template&gt;
</code></pre>

<p>Be sure the kickstart file should have the same url installtion location:</p>

<pre><code># cat centos6-oz.cfg 
text
skipx
install
url --url http://192.168.0.79/ks_mirror/CentOS-6.6-x86_64
repo --name=updates --baseurl=http://192.168.0.79/ks_mirror/CentOS-6.6-x86_64
lang en_US.UTF-8
</code></pre>

<h3>Build Image</h3>

<p>Build your own images via:</p>

<pre><code># oz-install -p -u -d1 -a centos6-oz.cfg centos66.tdl
</code></pre>

<p>Get the images via:</p>

<pre><code>[root@pc134 images]# pwd
/var/lib/libvirt/images
[root@pc134 images]# ls -l -h centos_66_x86_64.qcow2
-rw-rw-rw- 1 root root 1015M Oct 12 14:48 centos_66_x86_64.qcow2
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Cloud-Init]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/12/tips-on-cloud-init/"/>
    <updated>2015-10-12T10:50:53+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/12/tips-on-cloud-init</id>
    <content type="html"><![CDATA[<h3>参考</h3>

<p>主要参考了  <br/>
<a href="http://huang-wei.github.io/programming/2013/12/23/run-cloud-init-in-local-kvm.html">http://huang-wei.github.io/programming/2013/12/23/run-cloud-init-in-local-kvm.html</a></p>

<p>这里主要记录的是操作步骤。</p>

<h3>介绍</h3>

<p>红帽介绍:   <br/>
 Cloud-Init 是一个用来自动配置虚拟机的初始设置（如主机名，网卡和密钥）的工具。它可以在
使用模板部署虚拟机时使用，从而达到避免网络冲突的目的。   <br/>
在使用这个工具前，cloud-init 软件包必须在虚拟机上被安装。安装后，Cloud-Init 服务会在系
统启动时搜索如何配置系统的信息。您可以使用只运行一次窗口来提供只需要配置一次的设置信息
；或在 新建虚拟机、编辑虚拟机和编辑模板窗口中输入虚拟机每次启动都需要的配置信息。</p>

<h3>cloud-init安装</h3>

<p>Ubuntu 14.04上可以通过以下命令来安装cloud-init:</p>

<pre><code>$ apt-cache search cloud-utils
cloud-utils - metapackage for installation of upstream cloud-utils source
$ sudo apt-get install cloud-utils
</code></pre>

<h3>镜像准备</h3>

<p>在<a href="http://cloud-images.ubuntu.com/releases/">http://cloud-images.ubuntu.com/releases/</a>
可以找到Ubuntu制作的ubuntu cloud image, image分版本, 这里使用14.04的image。</p>

<pre><code>$ wget http://cloud-images.ubuntu.com/releases/14.04.3/
release-20151008/ubuntu-14.04-server-cloudimg-amd64-disk1.img
</code></pre>

<p>取回来后的镜像可以直接使用，但解压开后读取速度会更快:</p>

<pre><code>$ qemu-img convert -O qcow2 ubuntu-14.04-server-cloudimg-amd64-disk1.img my_vm.img
</code></pre>

<p>对比两个镜像大小可以看到:</p>

<pre><code>$ qemu-img info ubuntu-14.04-server-cloudimg-amd64-disk1.img 
image: ubuntu-14.04-server-cloudimg-amd64-disk1.img
file format: qcow2
virtual size: 2.2G (2361393152 bytes)
disk size: 246M
cluster_size: 65536
Format specific information:
    compat: 0.10
$ qemu-img info my_vm.img 
image: my_vm.img
file format: qcow2
virtual size: 2.2G (2361393152 bytes)
disk size: 903M
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: false
</code></pre>

<h3>配置脚本内容</h3>

<p>my-user-data内容:</p>

<pre><code>$ cat my-user-data
#cloud-config
password: xxxxxx
chpasswd: { expire: False }
ssh_pwauth: True

ssh_authorized_keys:
 - ssh-rsa xxxxxx

timezone: Asia/Chongqing
</code></pre>

<p>通过my-user-data生成img文件:</p>

<pre><code>$ cloud-localds my-seed.img my-user-data
</code></pre>

<p>由之前的my_vm.img和my-seed.img文件启动虚拟机:</p>

<pre><code>$ qemu-system-x86_64 -net nic -net user,hostfwd=tcp::2222-:22 -hda my_vm.img -hdb my-seed.img -m 512
</code></pre>

<p>通过qemu的窗口或者ssh登录系统: <code>ssh -p 2222 ubuntu@localhost</code>.</p>

<h3>引入meta-data</h3>

<p>meta-data的内容与虚拟机的实例相关，只用来做初始化，虚拟机实例运行完一次以后就不需要修改
。但如果要引入更新，则重建一下instance-id即可。</p>

<p>更新my-meta-data文件内容:</p>

<pre><code>$ echo "instance-id: $(uuidgen || echo i-abcdefg)" &gt; my-meta-data
</code></pre>

<p>由my-meta-data和my-user-data生成my-seed.img文件:</p>

<pre><code>$ cloud-localds my-seed.img my-user-data my-meta-data
</code></pre>

<p>启动虚拟机:</p>

<pre><code>$ qemu-system-x86_64 -net nic -net user,hostfwd=tcp::2222-:22 -hda my_vm.img -hdb my-seed.img -m 512
$ kvm -net nic -net user,hostfwd=tcp::2222-:22 -hda my_vm.img -hdb my-seed.img -m 512
</code></pre>

<h3>其他初始化行为</h3>

<p>需要初始化的脚本:</p>

<pre><code>$ cat hello_world.sh 
#!/bin/bash
echo "hello world!" &gt;&gt; /home/ubuntu/test
</code></pre>

<p>将初始化脚本和cloud config data合并:</p>

<pre><code>$ write-mime-multipart
--output=combined-userdata.txt hello_world.sh:text/x-shellscript my-user-data
</code></pre>

<p>由生成的combined-userdata.txt生成my-seed.img:</p>

<pre><code>$ echo "instance-id: $(uuidgen || echo i-abcdefg)" &gt; my-meta-data
$ cloud-localds my-seed.img combined-userdata.txt my-meta-data
</code></pre>

<p>重启后即可得到更新后的系统镜像.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kickstarting Ubuntu in SpaceWalk]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/20/kickstarting-ubuntu-in-spacewalk/"/>
    <updated>2015-08-20T11:58:14+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/20/kickstarting-ubuntu-in-spacewalk</id>
    <content type="html"><![CDATA[<h3>Preparation</h3>

<p>You have to use apt-mirror for getting the packages to local repository, so that you
could directly install the system via http method. The configuration file for
apt-mirror is listed as following:</p>

<pre><code>$ cat /etc/apt/mirror.list
set base_path /mnt/myrepo
set nthreads     20
set _tilde 0
#################Trusty Repository Starts ########################
deb-amd64 http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse main/debian-installer restricted/debian-installer multiverse/debian-installer universe/debian-installer
deb-amd64 http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse main/debian-installer restricted/debian-installer universe/debian-installer
deb-amd64 http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse main/debian-installer restricted/debian-installer universe/debian-installer
deb-amd64 http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-amd64 http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse

deb-i386 http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse main/debian-installer restricted/debian-installer multiverse/debian-installer universe/debian-installer
deb-i386 http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse main/debian-installer restricted/debian-installer universe/debian-installer
deb-i386 http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse main/debian-installer restricted/debian-installer universe/debian-installer
deb-i386 http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-i386 http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse

deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
#################Trusty Repository ends ########################

#################Precise Repository starts ########################
deb-amd64 http://mirrors.aliyun.com/ubuntu precise main main/debian-installer restricted restricted/debian-installer universe multiverse multiverse/debian-installer universe/debian-installer
deb-amd64 http://mirrors.aliyun.com/ubuntu precise-security main restricted universe multiverse main/debian-installer restricted/debian-installer universe/debian-installer
deb-amd64 http://mirrors.aliyun.com/ubuntu precise-updates main restricted universe multiverse main/debian-installer restricted/debian-installer universe/debian-installer
deb-amd64 http://mirrors.aliyun.com/ubuntu precise-proposed main restricted universe multiverse
deb-amd64 http://mirrors.aliyun.com/ubuntu precise-backports main restricted universe multiverse

deb-i386 http://mirrors.aliyun.com/ubuntu precise main main/debian-installer restricted restricted/debian-installer universe multiverse multiverse/debian-installer universe/debian-installer
deb-i386 http://mirrors.aliyun.com/ubuntu precise-security main restricted universe multiverse main/debian-installer restricted/debian-installer universe/debian-installer
deb-i386 http://mirrors.aliyun.com/ubuntu precise-updates main restricted universe multiverse main/debian-installer restricted/debian-installer universe/debian-installer
deb-i386 http://mirrors.aliyun.com/ubuntu precise-proposed main restricted universe multiverse
deb-i386 http://mirrors.aliyun.com/ubuntu precise-backports main restricted universe multiverse

deb-src http://mirrors.aliyun.com/ubuntu precise-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu precise-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu precise-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu precise-backports main restricted universe multiverse
#################Precise Repository ends ########################
</code></pre>

<p>Sync your local repository via <code>apt-mirror</code>, the sync procedure could takes many days,
depends on your bandwidth.</p>

<h3>Make Your Own KickStart File</h3>

<p>You have to install <code>system-config-kickstart</code> for generating the kickstart file. But
the official program conflicts with hwdata, we manually downgrade it and install
specified version, then sytem-config-kickstart could be installed.</p>

<pre><code># apt-get remove hwda
# wget ftp://mirror.ovh.net/mirrors/ftp.debian.org/debian/pool/main/h/hwdata/hwdata_0.234-1_all.deb
# dpkg -i hwdata_0.267-1_all.deb
# sudo apt-get install system-config-kickstart
</code></pre>

<p>Run it and its effects is like following:</p>

<p><img src="/images/2015_08_20_12_07_59_637x562.jpg" alt="/images/2015_08_20_12_07_59_637x562.jpg" /></p>

<p>Select the installation method via:</p>

<p><img src="/images/2015_08_20_12_09_02_541x361.jpg" alt="/images/2015_08_20_12_09_02_541x361.jpg" /></p>

<p>Save your kickstart file, and save it into some webserver&rsquo;s directory, since PXE always
have the network connection, we could put it the reachable webserver.</p>

<h3>PXE Menu Configuration</h3>

<p>Just give out an example of the PXE Menu on SpaceWalk:</p>

<pre><code># cat /var/lib/tftpboot/pxelinux.cfg/default 
DEFAULT menu
PROMPT 0
MENU TITLE Cobbler | http://fedorahosted.org/cobbler
TIMEOUT 200
TOTALTIMEOUT 6000
ONTIMEOUT local

LABEL local
        MENU LABEL (local)
        MENU DEFAULT
        LOCALBOOT 0

LABEL precise-ia32:1:SpacewalkDefaultOrganization
        kernel /images/precise-ia32:1:SpacewalkDefaultOrganization/vmlinuz
        MENU LABEL precise-ia32:1:SpacewalkDefaultOrganization
        append ks=http://192.168.0.79/ubuntu1204kickstart1.cfg initrd=/images/precise-ia32:1:SpacewalkDefaultOrganization/initrd.gz ksdevice=eth0 --
        ipappend 2
MENU end
</code></pre>

<p>We use the kickstart file located in a webserver, using this we could install the
system unattendly.</p>

<p>An example of the this kickstart file is listed:</p>

<pre><code># cat ubuntu1204kickstart1.cfg  | more
#Generated by Kickstart Configurator
#platform=x86

#System language
lang en_US
#Language modules to install
langsupport en_US
#System keyboard
keyboard us
#System mouse
mouse
#System timezone
timezone Asia/Shanghai
#Root password
rootpw --iscrypted xxxxxxxxxxxxxxxxxxxxxxxxxxx
#Initial user
user xxxx --fullname "xxxx" --iscrypted --password xxxxxxxxxxxxxxxxxxxxxx
#Reboot after installation
reboot
#Use text mode install
text
#Install OS instead of upgrade
install
#Use Web installation
url --url http://192.168.0.79/ubuntu/
#System bootloader configuration
bootloader --location=mbr 
#Clear the Master Boot Record
zerombr yes
#Partition clearing information
clearpart --all --initlabel 
#Disk partitioning information
part swap --size 1024 
part / --fstype ext4 --size 1 --grow 
#System authorization infomation
auth  --useshadow  --enablemd5 
#Network information
network --bootproto=dhcp --device=eth0
#Firewall configuration
firewall --disabled 
#Do not configure the X Window System
skipx

%packages
ubuntu-minimal
openssh-server
screen
curl
wget

%post

# update fstab for the root partition
perl -pi -e 's/(errors=remount-ro)/noatime,nodiratime,$1,barrier=0/' /etc/fstab

# point sh to bash instead of dash
rm /bin/sh
ln -s /bin/bash /bin/sh

# add normal apt source list
(
cat &lt;&lt;'EOP'
deb http://192.168.0.79/ubuntu/ precise main restricted universe
deb http://192.168.0.79/ubuntu/ precise-security main restricted universe
deb http://192.168.0.79/ubuntu/ precise-updates main restricted universe
EOP
) &gt; /etc/apt/sources.list
apt-get update
apt-get upgrade -y

# install some additional packages
# apt-get install -y xenstore-utils

# set up xenserver automation scripts
# AUTOMATER_REPO=https://raw.github.com/krobertson/xenserver-automater
# curl $AUTOMATER_REPO/master/usr/sbin/xe-set-hostname &gt; /usr/sbin/xe-set-hostname
# curl $AUTOMATER_REPO/master/usr/sbin/xe-set-network &gt; /usr/sbin/xe-set-network
# curl $AUTOMATER_REPO/master/usr/sbin/generate-sshd-keys &gt; /usr/sbin/generate-sshd-keys
# curl $AUTOMATER_REPO/master/etc/init/xe-automator.conf &gt; /etc/init/xe-automator.conf
# chmod a+x /usr/sbin/xe-set-hostname
# chmod a+x /usr/sbin/xe-set-network
# chmod a+x /usr/sbin/generate-sshd-keys

# setup locales
locale-gen en_US.UTF-8
update-locale LANG="en_US.UTF-8"
echo 'LANG=en_US.UTF-8' &gt;&gt; /etc/environment
echo 'LC_ALL=en_US.UTF-8' &gt;&gt; /etc/environment

# install xe tools
# cd /tmp
# wget http://some/url/to/xe-guest-utilities_6.0.0-743_amd64.deb
# dpkg -i xe-guest-utilities_6.0.0-743_amd64.deb

# install paravirt kernel image
apt-get install -f -y linux-virtual
dpkg -l | grep generic | grep linux | awk '{print $2}' | xargs apt-get remove -y

# clean up some stuff
rm -f /etc/ssh/ssh_host_*
rm -f /var/cache/apt/archives/*.deb
rm -f /var/cache/apt/*cache.bin
rm -f /var/lib/apt/lists/*_Packages
</code></pre>

<h3>A Known Bug</h3>

<p>The initrd.gz file and vmlinuz file should be picked from the installation iso. While
the spacewalk uses a CentOS based initrd.gz file for starting the system. thus you will
met &ldquo;cdrom&rdquo; error.</p>

<pre><code>$ ls -l /var/lib/tftpboot/images/precise-ia32:1:SpacewalkDefaultOrganization/
total 31788
-r--r--r-- 1 root root 18434355 Aug 20 11:36 initrd.gz
-r--r--r-- 3 root root  8188836 Aug  7  2014 initrd.gz.back
-r--r--r-- 3 root root  5919280 Jul 29  2014 vmlinuz
</code></pre>
]]></content>
  </entry>
  
</feed>
