<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-07-12T12:10:21+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WH Worktips(10)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/12/wh-worktips-10/"/>
    <updated>2015-07-12T10:57:15+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/12/wh-worktips-10</id>
    <content type="html"><![CDATA[<p>This chapter will cover the ansible playbook for deploying CloudStack Agent.  <br/>
First you should download the packages for the deployed node.</p>

<p>In a computer which have the internet connection, do following:</p>

<pre><code># yum install -y yum-plugin-downloadonly
# vi /etc/yum.repos.d/cloudstack.repo
[cloudstack]
name=cloudstack
baseurl=http://cloudstack.apt-get.eu/centos7/4.5/
enabled=1
gpgcheck=0
# yum install --downloadonly --downloaddir=/root/Code/ cloud-agent
</code></pre>

<p>Then under the folder of <code>/root/Code</code> you will have all of the cloud-agent related packages, create a repo using <code>createrepo .</code>, and set the apache/nginx&rsquo;s serving directory to here.</p>

<h3>Node Testing.</h3>

<p>Write a new playbook, this playbook&rsquo;s name is <code>CloudStackAgentCentOS7.yml</code>.  Notice you also have to change the repository definition file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(9)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/10/wh-worktips-9/"/>
    <updated>2015-07-10T20:21:13+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/10/wh-worktips-9</id>
    <content type="html"><![CDATA[<h3>Cobbler In Non-DHCP Server Networking</h3>

<p>Sometimes you want to deploy system with cobbler server,  in some restricted network which dhcp service is not allowed(considering broadcasting storm, security, etc.) Following are the steps of how-to:  <br/>
Change Cobbler server setting:</p>

<pre><code>$ sudo vim /etc/cobbler/settings
manage_dhcp: 0
$ sudo cobbler sync
$ sudo service dhcpd stop
</code></pre>

<p>Add the node definition in cobbler(useless):</p>

<pre><code># cobbler system add --name=node2 --profile=CentOS6.5-x86_64 --mac=52:54:00:71:59:64 --interface=eth0 --static=1 --ip-address=10.47.58.3 --dns-name=node2 --gateway=10.47.58.1
</code></pre>

<p>Now bootup your newly added computer with PXE, hit <code>ctrl+B</code> once you see the bios hint.</p>

<pre><code>iPXE&gt; config net0
</code></pre>

<p>hit <code>ctrl+B</code> should be like in following image:  <br/>
<img src="/images/2015_07_10_20_31_15_761x354.jpg" alt="/images/2015_07_10_20_31_15_761x354.jpg" /></p>

<p><img src="/images/2015_07_10_20_26_29_656x381.jpg" alt="/images/2015_07_10_20_26_29_656x381.jpg" />  <br/>
Setting like following:  <br/>
<img src="/images/2015_07_10_20_33_15_676x453.jpg" alt="/images/2015_07_10_20_33_15_676x453.jpg" />  <br/>
Hit <code>Ctrl+x</code> for saving the settings and continue to set:</p>

<pre><code>iPXE&gt; imgfetch -n img tftp://10.47.58.2/pxelinux.0
iPXE&gt; imgload img
iPXE&gt; boot
</code></pre>

<p>Now begin to install, you will met nework configuration fail issue:  <br/>
<img src="/images/2015_07_10_20_39_30_580x240.jpg" alt="/images/2015_07_10_20_39_30_580x240.jpg" /></p>

<p>Hit Cancel, manually set up the network, first select installation method: <br/>
<img src="/images/2015_07_10_20_41_12_323x273.jpg" alt="/images/2015_07_10_20_41_12_323x273.jpg" /></p>

<p>Configure TCP/IP:  <br/>
<img src="/images/2015_07_10_20_42_14_430x286.jpg" alt="/images/2015_07_10_20_42_14_430x286.jpg" />  <br/>
Configure IP address/gateway/dns/netmask:  <br/>
<img src="/images/2015_07_10_20_43_08_600x280.jpg" alt="/images/2015_07_10_20_43_08_600x280.jpg" />  <br/>
Now configure the installation setting, you could find it in your own ks configuration file:  <br/>
<img src="/images/2015_07_10_20_44_22_585x334.jpg" alt="/images/2015_07_10_20_44_22_585x334.jpg" /></p>

<p>Continue to install, they are the same as you did before.</p>

<h3>Cobbler in the existing DHCP enabled Network</h3>

<p>Since the dhcp server is available in the network, simply press <code>ctrl+B</code> to enter the pxe boot menu and set the <code>next_server</code> to <code>10.47.58.2</code>, then:</p>

<pre><code>iPXE&gt; imgfetch -n img tftp://10.47.58.2/pxelinux.0
iPXE&gt; imgload img
iPXE&gt; boot
</code></pre>

<p>Now select whichever you want to deploy, your configuration will be deployed ASAP.</p>

<h3>Cobbler Server Image To New Network</h3>

<p>You have to change following items:  <br/>
1. IP address.  <br/>
2. dhcp templates
3. Next Server Name.</p>

<pre><code>$ sudo vim /etc/cobbler/settings
next_server: 172.16.10.2
server: 172.16.10.2
$ sudo vim /etc/cobbler/dhcp.templates
subnet 172.16.10.0 netmask 255.255.255.0 {
     option routers             172.16.10.1; 
     range dynamic-bootp        172.16.10.3 172.16.10.254;
     option domain-name-servers 114.114.114.114, 180.76.76.76;     
     option subnet-mask         255.255.255.0;         
     filename                   "/pxelinux.0";       
     default-lease-time         21600;           
     max-lease-time             43200;      
     next-server                $next_server; 
     class "pxeclients" {

//..................
</code></pre>

<p>Notice the IP address should be in the same ip address range.</p>

<p>After modification, simply use <code>cobbler sync</code> for syncing your changes, now restart the cobbler server, your operation should be the same as the above situations.</p>

<p>Also if you have playbooks of ansible which uses the static IP address, you also have to replace the IP related settings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(8)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/09/wh-worktips-8/"/>
    <updated>2015-07-09T11:08:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/09/wh-worktips-8</id>
    <content type="html"><![CDATA[<p>After Cobbler import and deployment, simply install download plugins,
Create the repo, and edit the repo definition file in the deployed node:</p>

<pre><code>[root@node164 ~]# cat /etc/yum.repos.d/cloudstack.repo 
[cloudstack]
name=cloudstack
baseurl=http://10.47.58.2/4.5CentOS7/
enabled=1
gpgcheck=0
</code></pre>

<p>Steps for installing the cloudstack on CentOS7:</p>

<pre><code># yum install -y ntp
[root@node164 ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
10.47.58.164    node164
[root@node164 ~]# vim /etc/selinux/config 
SELINUX=permissive
SELINUXTYPE=targeted
[root@node164 ~]# yum install libselinux-python
# yum install -y wget 
# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
# yum install -y python-pip
# yum install -y mysql

[root@node164 ~]# sudo rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm
[root@node164 ~]# sudo yum -y install mysql-community-server
[root@node164 ~]# yum install -y MySQL-python
# vim /etc/my.cnf
    # CloudStack MySQL settings
    innodb_rollback_on_timeout=1
    innodb_lock_wait_timeout=600
    max_connections=700
    log-bin=mysql-bin
    binlog-format = 'ROW'
    bind-address=0.0.0.0

    [mysqld_safe]
    log-error=/var/log/mariadb/mariadb.log
[root@node164 ~]# service mysqld start
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(7)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/07/wh-worktips-7/"/>
    <updated>2015-07-07T15:22:23+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/07/wh-worktips-7</id>
    <content type="html"><![CDATA[<h3>Cloudstack Agent Repository</h3>

<p>Setup the CloudStack Agent Repository via:</p>

<pre><code># yum install yum-plugin-downloadonly
# vim /etc/yum.repos.d/cloudstack.repo
[cloudstack]
name=cloudstack
baseurl=http://cloudstack.apt-get.eu/rhel/4.3/
enabled=1
gpgcheck=0
# mkdir Code
# yum install --downloadonly --downloaddir=/root/Code/ cloud-agent
</code></pre>

<p>Now all of the installation rpm packages has been downloaded to directory, simply upload them to a server, use <code>createrepo .</code> to generate the repository, and link them to nginx&rsquo;s root directory.  <br/>
Mine is under:  <br/>
<a href="http://192.168.0.79/4.4.3CloudStackAgent/">http://192.168.0.79/4.4.3CloudStackAgent/</a></p>

<h3>Agent Installation Steps</h3>

<p>In a new deployed machine:</p>

<pre><code># mv CentOS-* /root/
[root@node161 yum.repos.d]# cat cloudstack.repo 
[cloudstack]
name=cloudstack
baseurl=http://192.168.0.79/4.4.3CloudStackAgent/
enabled=1
gpgcheck=0
# yum install -y cloud-agent
</code></pre>

<p>Configure qemu and libvirt:</p>

<pre><code>[root@node161 yum.repos.d]# cp /etc/libvirt/qemu.conf /etc/libvirt/qemu.conf.orig
[root@node161 yum.repos.d]# sed -i '/#vnc_listen = "0.0.0.0"/ a vnc_listen = "0.0.0.0"' /etc/libvirt/qemu.conf
[root@node161 yum.repos.d]# diff -du /etc/libvirt/qemu.conf.orig /etc/libvirt/qemu.conf


# cp /etc/libvirt/libvirtd.conf /etc/libvirt/libvirtd.conf.orig
# sed -i '/#listen_tls = 0/ a listen_tls = 0' /etc/libvirt/libvirtd.conf
# sed -i '/#listen_tcp = 1/ a listen_tcp = 1' /etc/libvirt/libvirtd.conf
# sed -i '/#tcp_port = "16509"/ a tcp_port = "16509"' /etc/libvirt/libvirtd.conf
# sed -i '/#auth_tcp = "sasl"/ a auth_tcp = "none"' /etc/libvirt/libvirtd.conf
# sed -i '/#mdns_adv = 1/ a mdns_adv = 0' /etc/libvirt/libvirtd.conf
# diff -du /etc/libvirt/libvirtd.conf.orig  /etc/libvirt/libvirtd.conf

[root@node161 yum.repos.d]# cp /etc/sysconfig/libvirtd /etc/sysconfig/libvirtd.orig
[root@node161 yum.repos.d]# sed -i '/#LIBVIRTD_ARGS="--listen"/ a LIBVIRTD_ARGS="--listen"' /etc/sysconfig/libvirtd
[root@node161 yum.repos.d]# diff -du /etc/sysconfig/libvirtd.orig  /etc/sysconfig/libvirtd
[root@node161 yum.repos.d]# rm -f /etc/libvirt/libvirtd.conf.orig 

# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
127.0.0.1       node161
</code></pre>

<p>Now you could add the host into the cloudstack management interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Private NAT Networking in XenServer]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/06/add-private-nat-networking-in-xenserver/"/>
    <updated>2015-07-06T11:42:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/06/add-private-nat-networking-in-xenserver</id>
    <content type="html"><![CDATA[<h3>Create Networking In XenCenter</h3>

<p>Create the networking under the XenCenter UI&rsquo;s tab &ldquo;Networking&rdquo;.</p>

<h3>Networking Setting</h3>

<p>Enable the ip forward:</p>

<pre><code># vim /etc/sysctl.conf
net.ipv4.ip_forward = 1
# sysctl -p 
# cat /proc/sys/net/ipv4/ip_forward 
1
</code></pre>

<p>Use iptables for forwarding the network flow:</p>

<pre><code># iptables -A FORWARD --in-interface xapi0 -j ACCEPT
# iptables --table nat -A POSTROUTING --out-interface eth0 -j MASQUERADE
</code></pre>

<p>But this didn&rsquo;t bring up the internal networking, after discussing with college, edit the file:</p>

<pre><code>[root@xenserver-WolfHunter ~]# cat /etc/sysconfig/iptables
+++++  *nat
+++++  :PREROUTING ACCEPT [7019:539216]
+++++  :INPUT ACCEPT [77:3825]
+++++  :OUTPUT ACCEPT [104:6495]
+++++  :POSTROUTING ACCEPT [53:3228]
+++++  -A POSTROUTING -o xenbr0 -j MASQUERADE
+++++  COMMIT
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:RH-Firewall-1-INPUT - [0:0]
-A INPUT -j RH-Firewall-1-INPUT
++++ -A FORWARD -i xapi0 -j ACCEPT
-A FORWARD -j RH-Firewall-1-INPUT
-A RH-Firewall-1-INPUT -i lo -j ACCEPT
-A RH-Firewall-1-INPUT -p icmp --icmp-type any -j ACCEPT
# DHCP for host internal networks (CA-6996)
-A RH-Firewall-1-INPUT -p udp -m udp --dport 67 --in-interface xenapi -j ACCEPT
-A RH-Firewall-1-INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
# Linux HA hearbeat (CA-9394)
-A RH-Firewall-1-INPUT -m conntrack --ctstate NEW -m udp -p udp --dport 694 -j ACCEPT
-A RH-Firewall-1-INPUT -m conntrack --ctstate NEW -m tcp -p tcp --dport 22 -j ACCEPT
-A RH-Firewall-1-INPUT -m conntrack --ctstate NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A RH-Firewall-1-INPUT -m conntrack --ctstate NEW -m tcp -p tcp --dport 443 -j ACCEPT
-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited
COMMIT
</code></pre>

<p>Restart XenServer and waiting for verification.</p>
]]></content>
  </entry>
  
</feed>
