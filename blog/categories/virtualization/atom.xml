<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-05-05T05:54:23+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working Tips on Ansible-cobbler]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/05/04/working-tips-on-ansible-cobbler/"/>
    <updated>2016-05-04T15:36:55+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/05/04/working-tips-on-ansible-cobbler</id>
    <content type="html"><![CDATA[<h3>Source</h3>

<p>The source are downloaded from:  <br/>
<a href="https://github.com/signed8bit/ansible-cobbler">https://github.com/signed8bit/ansible-cobbler</a></p>

<p>Git clone it via:</p>

<pre><code>$ git clone https://github.com/signed8bit/ansible-cobbler.git
</code></pre>

<h3>Test</h3>

<p>The test will be done via <code>vagrant up</code>, while we met the problem: the cobbler version
in ansible playbooks are too old, thus the command <code>cobbler get-loaders</code> won&rsquo;t acts
well. we have to changing to the newest cobbler version which is available in</p>

<p><a href="http://cobbler.github.io/">http://cobbler.github.io/</a></p>

<h3>Manually Steps(Ubuntu)</h3>

<p>Install the newest cobbler via:</p>

<pre><code>$ wget -qO - http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/xUbuntu_14.04/Release.key | sudo apt-key add -
$ sudo add-apt-repository "deb http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/xUbuntu_14.04/ ./"
$ sudo apt-get install -y cobbler 
$ cobbler --version
Cobbler 2.6.11
  source: ?, ?
  build time: Sat Jan 23 14:13:42 2016
</code></pre>

<p>Change Password of the <code>cobbler</code>:</p>

<pre><code>Change the password for the 'cobbler' username:
htdigest /etc/cobbler/users.digest "Cobbler" cobbler
</code></pre>

<p>visit the url of <code>http://xxx.xxx.xxx.xx/cobbler_web</code> and you could access the management interface of cobbler.</p>

<h3>Import CentOS7.2</h3>

<p>Import the iso via following command</p>

<pre><code>$ sudo mount -t iso9660 -o loop ./CentOS-7-x86_64-Everything-1503-01.iso /mnt1
$ sudo cobbler import --name=CentOS-7.2 --arch=x86_64 --path=/mnt1
</code></pre>

<h3>Todo</h3>

<p>How to automatically install the mate desktop via kickstart?</p>

<p>First find out all of the pkgs in group, then add them into the kickstart file?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TipsOnOSExperiment]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/04/24/tipsonosexperiment/"/>
    <updated>2016-04-24T17:32:12+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/04/24/tipsonosexperiment</id>
    <content type="html"><![CDATA[<p>为了在家里验证一下DevStack的网络配置，组建了一个网络，涉及到的点比较多，以下是
具体记录。</p>

<h3>交换机配置</h3>

<p>前段时间从美国亚马逊买回来一个TP-LINK的千兆交换机一直没用起来，型号是TL-SG108E
，8口可网管交换机。但前面有写过文章可以用来参考:</p>

<p><a href="http://purplepalmdash.github.io/blog/2015/12/12/ba-wan-tl-sg108e/">http://purplepalmdash.github.io/blog/2015/12/12/ba-wan-tl-sg108e/</a></p>

<p>但这篇文章里讲的主要还是ovs后虚拟机的vlan，和最近要做的DevStack的FloatIP配置稍
微有点差异。</p>

<h3>网络规划</h3>

<p>家里已有网络192.168.177.0/24, 这个网络是可以访问Internet的。所以DevStack机器上
的eth0将连接到这个网段，并在其上分配floating IP.</p>

<p>另外我们需要创建一个VLAN隔离的private network，用于给DevStack里的虚拟机默认启
动后分配IP地址。将DevStack机器上的eth1连接到此网络。</p>

<h3>配置交换机</h3>

<p>TP-LINK的DEB-100网卡是比较皮实，奈何win10驱动需要找，随便找了个淘宝9.9包邮的
USB转10兆网卡连上SurfacePro，开始配置交换机。</p>

<p>步骤:  <br/>
打开桌面的<code>Easy Smart Configuration Utility</code>，开始自动发现局域网内的交换机，如
下图:</p>

<p><img src="/images/2016_04_24_17_58_49.jpg" alt="/images/2016_04_24_17_58_49.jpg" /></p>

<p>需要重新配置下USB有线网卡的IP地址才能连接上交换机:</p>

<p><img src="/images/2016_04_24_18_02_45.jpg" alt="/images/2016_04_24_18_02_45.jpg" /></p>

<p>双击发现的交换机，用<code>admin/admin</code>登录后的界面如下:</p>

<p><img src="/iamges/2016_04_24_18_08_04.jpg" alt="/images/2016_04_24_18_08_04.jpg" /></p>

<p>以前我曾经把这个交换机配置成802.1Q VLAN, 这次基于端口来隔离，所以要配置成<code>Port
Based VLAN</code>, 配置完毕后的画面如下:</p>

<p><img src="/images/2016_04_24_18_20_36.jpg" alt="/images/2016_04_24_18_20_36.jpg" /></p>

<p>这种基于端口VLAN的验证方法很简单，将上网机和宽带路由器分别插在1～4和5～8口，即
可测试出VLAN被端口隔离。但这好像不是DevStack中需要设置的。</p>

<p>还是继续配置802.1Q VLAN. 值得注意的是，如果之前配置端口VLAN时将SurfacePro的连
接和交换机网段隔离了，那可能会连接不上，换回同一VLAN即可连接上。</p>

<p>配置vlan100如以下图所示:</p>

<p><img src="/images/2016_04_24_19_51_15.jpg" alt="/images/2016_04_24_19_51_15.jpg" /></p>

<h3>测试VLAN</h3>

<p>将两台PC连接在5~8口上，VLAN100。</p>

<p>PC1, ArchLinux, Systemd配置VLAN:</p>

<pre><code>$ cat enp0s25.100.network
[Match]
Name=enp0s25.100

[Network]
DNS=192.168.2.1
Address=192.168.2.1/24
$ cat enp0s25.100.netdev 
[NetDev]
Name=enp0s25.100
Kind=vlan

[VLAN]
Id=100

[Network]
DNS=192.168.2.1
Address=192.168.2.1/24
Gateway=192.168.2.1
$ pwd
/etc/systemd/network
</code></pre>

<p>重新启动PC1后，<code>192.168.2.1</code>将成为VLAN100口的地址。作为<code>192.168.2.1</code>,我们在这
个端口上启动dhcp服务及路由转发等服务。</p>

<pre><code>$ sudo pacman -S dhcp
$ sudo systemctl enable dhcpd4.service
</code></pre>

<p>干掉冗余的默认dhcpd.conf文件，写一个最小的配置文件:</p>

<pre><code>$ sudo vim /etc/dhcpd.conf.example 
$ sudo vim /etc/dhcpd.conf         
option domain-name-servers 180.76.76.76,223.5.5.5;
option subnet-mask 255.255.255.0;
option routers 192.168.2.1;
subnet 192.168.2.0 netmask 255.255.255.0 {
  range 192.168.2.150 192.168.2.250;

  host macbookpro{
   hardware ethernet 70:56:81:22:33:44;
   fixed-address 192.168.2.199;
  }
}
</code></pre>

<p>开启dhcpd服务:</p>

<pre><code>$ sudo systemctl start dhcpd4.service
</code></pre>

<p>PC2, 用openvswitch的vlan配置, libvirt的XML配置如下:</p>

<pre><code>    &lt;interface type='bridge'&gt;
      &lt;mac address='52:54:00:fd:03:e9'/&gt;
      &lt;source bridge='ovsbr0'/&gt;
      &lt;vlan trunk='yes'&gt;
        &lt;tag id='100' nativeMode='untagged'/&gt;
      &lt;/vlan&gt;
      &lt;virtualport type='openvswitch'&gt;
        &lt;parameters interfaceid='fb3e7f34-6fcd-41dc-8fed-c3ffe0d54b18'/&gt;
      &lt;/virtualport&gt;
</code></pre>

<p>测试，即启动PC2上的虚拟机，若虚拟机能获得IP地址，则说明VLAN配置成功。</p>

<h3>DevStack网络配置</h3>

<p>操作系统为Ubuntu14.04, 网卡为eth0(192.168.177.100)和eth1(vlan 100)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在DevStack中使用Packer]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/04/24/zai-devstackzhong-shi-yong-packer/"/>
    <updated>2016-04-24T10:16:39+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/04/24/zai-devstackzhong-shi-yong-packer</id>
    <content type="html"><![CDATA[<h3>导入源镜像</h3>

<p>源镜像可以从ubuntu.com下载到，并使用以下命令导入:</p>

<pre><code>$ wget https://cloud-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-disk1.img
$ glance image-create --name ubuntu-trusty --disk-format qcow2 \
--container-format bare --file trusty-server-cloudimg-amd64-disk1.img
</code></pre>

<h3>openstack.json文件</h3>

<p>github上有现成的，克隆到本地:</p>

<pre><code>$ git clone https://github.com/Thingee/packer-devstack.git
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rsync the vault.centos.com]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/04/22/rsync-the-vault-dot-centos-dot-com/"/>
    <updated>2016-04-22T19:39:58+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/04/22/rsync-the-vault-dot-centos-dot-com</id>
    <content type="html"><![CDATA[<p>For I want to do some configuration workings on old distribution of CentOS, I have to
use lots of materials which from vault.centos.com, following are the steps for syncing
them.</p>

<p>First, rsync in <code>vault.centos.com</code> is closed, thus we have to choose
<code>http://archive.kernel.org/centos/</code>.</p>

<h3>Rsync Scripts</h3>

<p>Refers to:   <br/>
<a href="https://www.totalnetsolutions.net/2013/10/02/setting-up-a-corporate-yum-repository-mirror-for-bandwidth-and-staged-update-management/">https://www.totalnetsolutions.net/2013/10/02/setting-up-a-corporate-yum-repository-mirror-for-bandwidth-and-staged-update-management/</a></p>

<h3>Make Repository</h3>

<p><a href="https://wiki.centos.org/HowTos/CreateLocalMirror">https://wiki.centos.org/HowTos/CreateLocalMirror</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevStack Enable Neutron]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/04/20/devstack-enable-neutron/"/>
    <updated>2016-04-20T11:11:54+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/04/20/devstack-enable-neutron</id>
    <content type="html"><![CDATA[<h3>Steps</h3>

<p>Install steps are listed as following:</p>

<p>First as root user, create the initial stack user via:</p>

<pre><code># git clone https://git.openstack.org/openstack-dev/devstack
# tools/create-stack-user.sh 
# passwd stack
</code></pre>

<p>Now login with user <code>stack</code>, clone the repository and begin devstack installation:</p>

<pre><code>$ git clone https://git.openstack.org/openstack-dev/devstack
$ cd devstack
$ git checkout stable/liberty
$ cp samples/local.conf ./
$ vim local.conf
</code></pre>

<p>The <code>local.conf</code> file should added following items:</p>

<pre><code>

# use TryStack git mirror
GIT_BASE=http://git.trystack.cn
NOVNC_REPO=http://git.trystack.cn/kanaka/noVNC.git
SPICE_REPO=http://git.trystack.cn/git/spice/spice-html5.git
</code></pre>

<p>Add following configurations:</p>

<p><img src="/images/2016_04_21_10_46_16_505x495.jpg" alt="/images/2016_04_21_10_46_16_505x495.jpg" /></p>

<p>Now stacking the devstack:</p>

<pre><code>$ ./stack.sh
</code></pre>
]]></content>
  </entry>
  
</feed>
