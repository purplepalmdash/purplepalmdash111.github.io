<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-07-05T19:37:40+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install CloudStack All-In-One on Ubuntu14.04]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/05/install-cloudstack-all-in-one-on-ubuntu14-dot-04/"/>
    <updated>2015-07-05T16:08:59+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/05/install-cloudstack-all-in-one-on-ubuntu14-dot-04</id>
    <content type="html"><![CDATA[<h3>Preparation For Packages</h3>

<p>TBD</p>

<h3>Installation Steps</h3>

<h4>System Preparation</h4>

<p>First install Ubuntu14.04, I use Cobbler Server&rsquo;s PXE Installation.</p>

<p>Change the Root Permit login under <code>/etc/ssh/sshd_config</code> and restart the ssh service.</p>

<p>Change the IP Address to 10.10.10.2 via:</p>

<pre><code>root@Ubuntu-14:~# cat /etc/network/interfaces
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
address 10.10.10.2
netmask 255.255.255.0
gateway 10.10.10.1
dns-nameservers 180.76.76.76
</code></pre>

<p>Relogin to the system, and begin to install the packages.</p>

<pre><code># vi /etc/apt/source.list
deb http://192.168.1.111 amd64/
deb http://192.168.1.111/reprepro/      trusty  cloudstack44
# apt-get update &amp;&amp; apt-get install vim
</code></pre>

<p>I use 192.168.1.111 because I cached all of the required packages in this server, thus it could speed-up the deployment.</p>

<h4>Server Configuration</h4>

<p>Configure the Server&rsquo;s hostname:</p>

<pre><code>root@Ubuntu-14:~# cat /etc/hostname 
CS
root@Ubuntu-14:~# cat /etc/hosts
127.0.0.1       localhost
10.10.0.2       CS
127.0.1.1       CS.CSDomain     CS

root@Ubuntu-14:~# reboot
# hostname --fqdn
CS
</code></pre>

<p>Now configure the NTP via:</p>

<pre><code># apt-get purge ntp
# apt-get install openntpd
</code></pre>

<p>Configure the Network:</p>

<pre><code># apt-get install bridge-utils
# cat /etc/network/interfaces

    # The loopback network interface
    auto lo
    iface lo inet loopback

    # The primary network interface
    auto eth0
    iface eth0 inet manual


    auto cloudbr0
    iface cloudbr0 inet static
            address 10.10.10.2
            netmask 255.255.255.0
            gateway 10.10.10.1
            dns-nameservers 180.76.76.76
            bridge-ports eth0
            bridge_fd 5
            bridge_stp off
            bridge_maxwait 1

    # Private network
    auto cloudbr1
    iface cloudbr1 inet manual
            bridge_ports none
            bridge_fd 5
            bridge_stp off
            bridge_maxwait 1
# reboot
</code></pre>

<p>Now the Network Bridge is configured.</p>

<h4>CloudStack Installation</h4>

<p>Since all of the packages are cached into LAN environment, simply type following command for installing:</p>

<pre><code># apt-get install cloudstack-management
</code></pre>

<p>Then Install the database server:</p>

<pre><code># apt-get install mysql-server
# vim /etc/mysql/conf.d/cloudstack.cnf
[mysqld]
innodb_rollback_on_timeout=1
innodb_lock_wait_timeout=600
max_connections=350
log-bin=mysql-bin
binlog-format = 'ROW'
root@CS:~# service mysql restart
root@CS:~# cloudstack-setup-databases cloud:engine@localhost --deploy-as=root:engine -e file -m mymskey44 -k mydbkey00
</code></pre>

<h4>NFS Storage Preparation</h4>

<p>Add export directory:</p>

<pre><code># mkdir -p /export/primary /export/secondary
# apt-get install nfs-kernel-server
# vim /etc/exports
/export  *(rw,async,no_root_squash,no_subtree_check)
# cp /etc/default/nfs-common /etc/default/nfs-common.orig
# sed -i '/NEED_STATD=/ a NEED_STATD=yes' /etc/default/nfs-common
# sed -i '/STATDOPTS=/ a STATDOPTS="--port 662 --outgoing-port 2020"' /etc/default/nfs-common
# diff -du /etc/default/nfs-common.orig /etc/default/nfs-common

root@CS:~# cat /etc/modprobe.d/lockd.conf 
options lockd nlm_udpport=32769 nlm_tcpport=32803
root@CS:~# service nfs-kernel-server restart
root@CS:~# showmount -e 127.0.0.1
Export list for 127.0.0.1:
/export *
</code></pre>

<p>Mount it via:</p>

<pre><code>root@CS:~# mkdir -p /mnt/primary /mnt/secondary
root@CS:~# tail -2 /etc/fstab
10.10.10.2:/export/primary   /mnt/primary    nfs rsize=8192,wsize=8192,timeo=14,intr,vers=3,noauto  0   2
10.10.10.2:/export/secondary /mnt/secondary  nfs rsize=8192,wsize=8192,timeo=14,intr,vers=3,noauto  0   2
root@CS:~# mount /mnt/primary/
root@CS:~# mount /mnt/secondary/
root@CS:~# mount | tail -2
10.10.10.2:/export/primary on /mnt/primary type nfs (rw,rsize=8192,wsize=8192,timeo=14,intr,vers=3,addr=10.10.10.2)
10.10.10.2:/export/secondary on /mnt/secondary type nfs (rw,rsize=8192,wsize=8192,timeo=14,intr,vers=3,addr=10.10.10.2)
</code></pre>

<h4>Cloudstack Agent Installation</h4>

<p>Install it via:</p>

<pre><code>root@CS:~# apt-get install cloudstack-agent
root@CS:~# cp /etc/libvirt/libvirtd.conf /etc/libvirt/libvirtd.conf.orig
root@CS:~# sed -i '/#listen_tls = 0/ a listen_tls = 0' /etc/libvirt/libvirtd.conf
root@CS:~# sed -i '/#listen_tcp = 1/ a listen_tcp = 1' /etc/libvirt/libvirtd.conf
root@CS:~# sed -i '/#tcp_port = "16509"/ a tcp_port = "16509"' /etc/libvirt/libvirtd.conf
root@CS:~# sed -i '/#auth_tcp = "sasl"/ a auth_tcp = "none"' /etc/libvirt/libvirtd.conf
root@CS:~# diff -du /etc/libvirt/libvirtd.conf.orig /etc/libvirt/libvirtd.conf
root@CS:~# cp /etc/default/libvirt-bin /etc/default/libvirt-bin.orig
root@CS:~# sed -i -e 's/libvirtd_opts="-d"/libvirtd_opts="-d -l"/' /etc/default/libvirt-bin
root@CS:~# service libvirt-bin restart
root@CS:~# cp /etc/libvirt/qemu.conf /etc/libvirt/qemu.conf.orig
root@CS:~# sed -i '/#vnc_listen = "0.0.0.0"/ a vnc_listen = "0.0.0.0"' /etc/libvirt/qemu.conf
root@CS:~# diff -du /etc/libvirt/qemu.conf.orig /etc/libvirt/qemu.conf
root@CS:~# service libvirt-bin restart
root@CS:~# ln -s /etc/apparmor.d/usr.sbin.libvirtd /etc/apparmor.d/disable/
root@CS:~# ln -s /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper /etc/apparmor.d/disable/
root@CS:~# apparmor_parser -R /etc/apparmor.d/usr.sbin.libvirtd
root@CS:~# apparmor_parser -R /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper
root@CS:~# service libvirt-bin restart
</code></pre>

<h4>Configure FireWall</h4>

<p>Open the following ports:</p>

<pre><code>root@CS:~# ufw allow proto tcp from any to any port 22
Rules updated
Rules updated (v6)
root@CS:~# ufw allow proto tcp from any to any port 1798
Rules updated
Rules updated (v6)
root@CS:~# ufw allow proto tcp from any to any port 16509
Rules updated
Rules updated (v6)
root@CS:~# ufw allow proto tcp from any to any port 5900:6100
Rules updated
Rules updated (v6)
root@CS:~# ufw allow proto tcp from any to any port 49152:49216
Rules updated
Rules updated (v6)
</code></pre>

<p>Now restart and verify the NFS working.</p>

<pre><code>root@CS:~# rpcinfo -u 10.10.10.2 mount
program 100005 version 1 ready and waiting
program 100005 version 2 ready and waiting
program 100005 version 3 ready and waiting
root@CS:~# showmount -e 10.10.10.2
Export list for 10.10.10.2:
/export *
root@CS:~# mount /mnt/primary/
root@CS:~# mount /mnt/secondary/
</code></pre>

<p>Added the System Template:</p>

<pre><code>root@CS:~# /usr/share/cloudstack-common/scripts/storage/secondary/cloud-install-sys-tmplt -m /mnt/secondary -u http://192.168.1.111/systemvm64template-4.4.1-7-kvm.qcow2.bz2  -h kvm -F
......
Successfully installed system VM template  to /mnt/secondary/template/tmpl/1/3/
</code></pre>

<h3>Cloudstack</h3>

<p>First manually start the services:</p>

<pre><code>service cloudstack-management status
service cloudstack-agent status
service tomcat6 status

service cloudstack-management stop
service tomcat6 stop
service cloudstack-agent stop
ps -efl | grep java

service cloudstack-management start
service cloudstack-management status
service cloudstack-agent start
service cloudstack-agent status
</code></pre>

<p>Now setup the UI via visiting <code>http://10.10.10.2:8080/client</code>, usename/password: admin/password:</p>

<pre><code>Choose "Continue with basic installation". This will start a wizard that will walk through the configuration. You will need to adjust the network values for your environment, and make sure you use appropiate, free, ranges.

Add a new zone named "zone1", DNS1 10.10.10.1 and Internal DNS 10.10.10.1.
Add a new pod named "pod1", gateway 10.10.10.1, netmask 255.255.255.0, IP range 10.10.10.160-10.10.10.169.
Add a guest network, gateway 10.10.10.1, netmask 255.255.255.0, IP range 10.10.10.170-192.168.77.230.
Add a cluster named cluster1, Hypervisor KVM.
Add a host. Host Name "CS", user root, passsword for the root linux user.
Add primary storage: name primary1, protocol NFS, Scope Cluster, server 10.10.10.10, path /export/primary.
Add secondary storage: NFS server 10.10.10.10, path /export/secondary.
Hit Launch and pray.
This should go through a sequence of setup.
</code></pre>

<p>Now you could enjoy the cloudstack all-in-one</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preseed File for Ubuntu1404 in CobblerServer]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/04/preseed-file-for-ubuntu1404-in-cobblerserver/"/>
    <updated>2015-07-04T14:57:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/04/preseed-file-for-ubuntu1404-in-cobblerserver</id>
    <content type="html"><![CDATA[<h3>Proseed File</h3>

<pre><code>d-i time/zone string Asia/Shanghai

# Setup the installation source
d-i mirror/country string manual
d-i mirror/http/hostname string $http_server
#d-i mirror/http/directory string $install_source_directory
d-i mirror/http/directory string /cobbler/ks_mirror/Ubuntu-14.04-x86_64/ubuntu
d-i mirror/http/proxy string
d-i apt-setup/security_host string $http_server
d-i apt-setup/security_path string /cobbler/ks_mirror/Ubuntu-14.04-x86_64/ubuntu
</code></pre>

<h3>Local Repository</h3>

<p>In one installed machine, do following for getting the repository of all of the installed packages:</p>

<pre><code>$ sudo apt-get install dselect
$ dpkg --get-selections | grep -v deinstall&gt;InstalledPackage.txt
$ awk {'print $1'} InstalledPackage.txt | xargs apt-get download
</code></pre>

<p>Use nginx for sharing the repository:</p>

<pre><code>$ sudo apt-get install -y nginx
$ sudo vim /etc/nginx/site-enabled/default
server {
        listen 80 default_server;
        listen [::]:80 default_server ipv6only=on;

        root /var/www/html;
        index index.html index.htm;

        # Make site accessible from http://localhost/
        server_name localhost;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
                autoindex on;
                # Uncomment to enable naxsi on this location
$ sudo service nginx restart
</code></pre>

<p>Now generate the repository server:</p>

<pre><code>$ mkdir -p /var/www/html/amd64
$ mv /root/Code/*.deb /var/www/html/amd64
$ cd /var/www/html/
$ dpkg-scanpackages amd64/ | gzip -9c &gt; amd64/Packages.gz
$ mv /root/Code/InstalledPackage.txt /var/www/html
</code></pre>

<h3>Use Local Repository</h3>

<p>Change the repoisoty setting:</p>

<pre><code>root@Ubuntu-14:~# cat /etc/apt/sources.list
deb http://192.168.1.111 amd64/
root@Ubuntu-14:~# apt-get update &amp;&amp;  apt-get install -y dselect
root@Ubuntu-14:~# dselect update
root@Ubuntu-14:~# wget http://192.168.1.11/InstalledPackage.txt
root@Ubuntu-14:~# dpkg --set-selections &lt; InstalledPackage.txt &amp;&amp; apt-get -u dselect-upgrade 
</code></pre>

<p>After updating, you have the same system as your server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insert Public Key Into Cobbler Deployed System]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/29/insert-public-key-into-cobbler-deployed-system/"/>
    <updated>2015-06-29T14:13:08+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/29/insert-public-key-into-cobbler-deployed-system</id>
    <content type="html"><![CDATA[<p>First edit your kickstart file, add following line before the end of your kickstart:</p>

<pre><code>[root@z_WHServer kickstarts]# pwd
/var/lib/cobbler/kickstarts
[root@z_WHServer kickstarts]# cat sample_end.ks
# Start final steps
+ $SNIPPET('publickey_root')
$SNIPPET('kickstart_done')
# End final steps
%end
</code></pre>

<p>And the <code>publickey_root</code> should be edited as following:</p>

<pre><code>[root@z_WHServer snippets]# pwd
/var/lib/cobbler/snippets
[root@z_WHServer snippets]# cat publickey_root
# Install CobblerServer's(10.47.58.2) public key for root user
cd /root
mkdir --mode=700 .ssh
cat &gt;&gt; .ssh/authorized_keys &lt;&lt; "PUBLIC_KEY"
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA3B3GtGuKY0l2Ak9+WSkorY7R+Cx5/u3RMua/7GrvP05IPywQdkR+mqwdRydNjyhB96nHlYZtr8Fbfn5iwqn0j8dz8wmTZicBNeRqIdbe/YUje5NjXxDXjYda63VfDhpgzJ53KICTx6pBhGaeOKS/U5HqCpDbF7ODP8siU7bRhk1LkIQ6VwZYUg7b0oR+Sw6XJ31Z7gs4CWF6zfjfQQoF7EoMA+dnqvt2K4PQPXNSBJQx3qb9jyXIXvo333PcfIX6mD1TW1wDAIXLm4qz4mi7C8Ax9h+T/D98r08WX360vC5Tzr8feXMs6H4il4s4Ftq7RVoqCNKmG3AB1LTp4AQAzw== root@z_WHServer
PUBLIC_KEY
chmod 600 .ssh/authorized_keys
cat &gt;&gt; .ssh/config &lt;&lt;EOF
StrictHostKeyChecking no
UserKnownHostsFile /dev/null
EOF
</code></pre>

<p>Better you run <code>cobber sync</code> after updating your kickstart file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(6)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/24/wh-worktips-6/"/>
    <updated>2015-06-24T11:54:12+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/24/wh-worktips-6</id>
    <content type="html"><![CDATA[<h3>Migration</h3>

<p>So this time we will migrate the whole machine, that is the Cobbler Server from one physical machine to another one. The steps are:  <br/>
1. Transfer the harddisk files.   <br/>
2. Edit the <code>/etc/udev/rules.d/70-persistent-net.rules</code>, Change the eth1 to eth0, and remove the eth0 item.  <br/>
3. Edit the <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>, its mac address to the one you specified on step 2.   <br/>
4. Restart the machine.</p>

<h3>Modification &amp;&amp; Test</h3>

<p>Create a new machine, which mac address is <code>52:54:00:3a:87:4e</code>, and define it on Cobbler server:</p>

<pre><code>[root@z_WHServer ~]# cobbler system add --name=node147 --profile=CentOS-6.5-x86_64 --mac=52:54:00:3a:87:4e --interface=eth0 --ip-address=10.47.58.147 --hostname=node147 --gateway=10.47.58.1 --dns-name=node147
</code></pre>

<p>Now bootup the machine and let it be deployed by cobbler server. The deployment time depends on your disk speed.</p>

<p>At the same time, edit the Ansible configuration:</p>

<pre><code>[root@z_WHServer Ansible]# cat hosts
[node147]
10.47.58.147
[root@z_WHServer Ansible]# pwd
/root/Code/Ansible
</code></pre>

<p>Copy the repository to the <code>10.47.58.2:/var/www/html/</code>, and edit the Ansible configuration.   <br/>
And Also configure the nfs server for the second host, previously we use the one we got from the external nfs server.  <br/>
Also the download vhd template files.  <br/>
<code>
$ scp -r ./4.4/ root@10.47.58.2:/var/www/html/
[root@z_WHServer html]# chmod 777 -R 4.4
[root@z_WHServer CloudStack-Ansible-Playbook]# vim templates/cloudstack.repo.j2
[cloudstack]
name=cloudstack
baseurl=http://10.47.58.2/4.4/
clouder@pc121:/home/juju$ scp ./systemvm64template-* root@10.47.58.2:/var/www/html/
root@10.47.58.2's password:
systemvm64template-2014-06-23-master-xen.vhd.bz2                                                             100%  237MB  59.4MB/s   00:04
systemvm64template-4.4.1-7-kvm.qcow2.bz2                                                                     100%  291MB  36.4MB/s   00:08
clouder@pc121:/home/juju$ scp ./vhd-util root@10.47.58.2:/var/www/html/
[root@z_WHServer html]# chmod 777 systemvm64template-*
[root@z_WHServer html]# chmod 777 vhd-util
[root@z_WHServer html]# vim /etc/exports
/home/export *(rw,async,no_root_squash,no_subtree_check)
[root@z_WHServer html]# mkdir -p /home/export
[root@z_WHServer html]# chmod 777 -R /home/export/
[root@z_WHServer html]# chkconfig nfs on
[root@z_WHServer html]# chkconfig rpcbind on
[root@z_WHServer html]# service nfs restart
[root@z_WHServer html]# service rpcbind restart
[root@z_WHServer html]# iptables -D INPUT -j REJECT --reject-with icmp-host-prohibited
[root@z_WHServer home]# chown -R nobody /home/export/
[root@z_WHServer CloudStack-Ansible-Playbook]# vim cloudstack.yml
.......
    CSManagement:
      ManagementIP: 10.47.58.147
      SecondaryMount: /secondary
      NFSHost: 10.47.58.2
      NFSSecondaryShare: /home/export
      SysTemplateURLurl43: http://10.47.58.2/systemvm64template-2014-06-23-master-xen.vhd.bz2
      SysTemplateURLurl44: http://10.47.58.2/systemvm64template-4.4.1-7-kvm.qcow2.bz2
      SysTemplateURLhv: xenserver
      VhdutilURL: http://10.47.58.2/vhd-util
.....
</code></p>

<p>Now deploy the playbooks via the same process in:   <br/>
<a href="http://purplepalmdash.github.io/blog/2015/06/19/wh-worktips-4/">http://purplepalmdash.github.io/blog/2015/06/19/wh-worktips-4/</a></p>

<pre><code># cd /root/Code/Ansible/CloudStack-Ansible-Playbook
# ansible-playbook -i /root/Code/Ansible/hosts --limit=node113 ./cloudstack.yml --tags=pip
# ansible-playbook -i /root/Code/Ansible/hosts --limit=node113 ./cloudstack.yml --tags=base
# ansible-playbook -i /root/Code/Ansible/hosts --limit=node113 ./cloudstack.yml --tags=mysql
# ansible-playbook -i /root/Code/Ansible/hosts --limit=node113 ./cloudstack.yml --tags=mysql3306
# ansible-playbook -i /root/Code/Ansible/hosts --limit=node113 ./cloudstack.yml --tags=csmanagement 
</code></pre>

<p>Visit
<a href="http://10.47.58.147:8080/client">http://10.47.58.147:8080/client</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Newest Version of Cobbler]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/24/install-newest-version-of-cobbler/"/>
    <updated>2015-06-24T09:38:50+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/24/install-newest-version-of-cobbler</id>
    <content type="html"><![CDATA[<h3>Background</h3>

<p>Cobbler has changed its homepage from <code>www.cobblerd.org</code> to <code>http://cobbler.github.io/</code>, thus some configuration will be be failed. In order to solve these problems, we have to upgrade to the newest version, current newest version is <code>2.6.9</code>.</p>

<h3>Download And Install</h3>

<p>Go to <a href="http://cobbler.github.io/downloads/2.6.x.html">http://cobbler.github.io/downloads/2.6.x.html</a> for selecting your distribution, and download them to your folder. Mine is configured via:</p>

<pre><code>$ wget http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-6/home:libertas-ict:cobbler26.repo
$ cp home\:libertas-ict\:cobbler26.repo /etc/yum.repos.d/cobbler26.repo
$ yum install -y cobbler cobbler-web
</code></pre>

<h3>Configuration</h3>

<p>After installation, configure your newest cobbler via:</p>

<pre><code>$ cobbler sync
$ reboot
$ cobbler signature update
</code></pre>

<p>By updating the signature of the cobbler, the newest system will be supported, like Ubuntu15.04, etc.</p>

<p>You can also update all of the loaders via:</p>

<pre><code># cobbler get-loaders --force
# cobbler sync
</code></pre>
]]></content>
  </entry>
  
</feed>
