<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-06-08T19:48:26+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenVSwitch and VXLAN How-to]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/08/openvswitch-and-vxlan-how-to/"/>
    <updated>2015-06-08T09:48:20+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/08/openvswitch-and-vxlan-how-to</id>
    <content type="html"><![CDATA[<p>Following records the steps for my setup for OpenVSwitch environment and configure VXLAN on it.</p>

<h3>Preparation</h3>

<p>I use two VMs for this experiment, created a new virtual network, it&rsquo;s 10.94.94.0/24, every vm machines adds into this network. <br/>
VM1, VM2, both have 1G Memory. 1 Core. <br/>
VM1: 10.94.94.11, VM2: 10.94.94.12.</p>

<pre><code>$ sudo apt-get update &amp;&amp; sudo apt-get -y upgrade
$ sudo apt-get install build-essential$
$ sudo reboot
$ uname -a
$ uname -a
Linux OpenVSwitchVM1 3.13.0-24-generic #47-Ubuntu SMP Fri May 2 23:30:00 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
</code></pre>

<h3>Generate DEB</h3>

<p>Following steps includes install dependencies, fetching source code, build, generate package, notice we use 2.3.0 version of the openvswitch.</p>

<pre><code>$ sudo apt-get install -y build-essential fakeroot debhelper \
                    autoconf automake bzip2 libssl-dev \
                    openssl graphviz python-all procps \
                    python-qt4 python-zopeinterface \
                    python-twisted-conch libtool
$ wget http://openvswitch.org/releases/openvswitch-2.3.0.tar.gz
$ tar xzvf openvswitch-2.3.0.tar.gz
$ cd openvsiwtch-2.3.0
$ DEB_BUILD_OPTIONS='parallel=8 nocheck' fakeroot debian/rules binary
$ cd ..
$ ls -al *.deb
openvswitch-common_2.3.0-1_amd64.deb         openvswitch-ipsec_2.3.0-1_amd64.deb   openvswitch-vtep_2.3.0-1_amd64.deb
openvswitch-datapath-dkms_2.3.0-1_all.deb    openvswitch-pki_2.3.0-1_all.deb       python-openvswitch_2.3.0-1_all.deb
openvswitch-datapath-source_2.3.0-1_all.deb  openvswitch-switch_2.3.0-1_amd64.deb
openvswitch-dbg_2.3.0-1_amd64.deb            openvswitch-test_2.3.0-1_all.deb
</code></pre>

<p>Also copy all of the deb files into another PC.</p>

<h3>Installation</h3>

<p>In two machines, do following steps for installing.</p>

<pre><code>$ sudo apt-get install -y bridge-utils
$ sudo dpkg -i openvswitch-common_2.3.1-1_amd64.deb \
         openvswitch-switch_2.3.1-1_amd64.deb
</code></pre>

<h3>VM Netorking Configuration</h3>

<p>For VM1:</p>

<pre><code>root@OpenVSwitchVM1:~# ovs-vsctl add-br br0
root@OpenVSwitchVM1:~# ovs-vsctl add-br br1
# ovs-vsctl add-port br0 eth0
# ifconfig eth0 0 up
# ifconfig br0 10.94.94.11
# route add default gw 10.94.94.1 br0
# ifconfig br1 172.10.0.1
</code></pre>

<p>For VM2:</p>

<pre><code># ovs-vsctl add-br br0
# ovs-vsctl add-br br1
# ovs-vsctl add-port br0 eth0
# ifconfig eth0 0 up &amp;&amp; ifconfig br0 10.94.94.12
# route add default gw 10.94.94.1
# ifconfig br1 172.10.1.1
</code></pre>

<p>Ping each other, we could see br1 is not OK.</p>

<h3>VXLAN Setup</h3>

<p>On VM1, do following operation, to set the vx1:</p>

<pre><code>root@OpenVSwitchVM1:~# ovs-vsctl add-port br1 vx1 -- set interface vx1 type=vxlan options:remote_ip=10.94.94.12
root@OpenVSwitchVM1:~# ovs-vsctl show
a1e9afb6-345a-4f79-8e0b-131cd43cfb67
    Bridge "br0"
        Port "eth0"
            Interface "eth0"
        Port "br0"
            Interface "br0"
                type: internal
    Bridge "br1"
        Port "br1"
            Interface "br1"
                type: internal
        Port "vx1"
            Interface "vx1"
                type: vxlan
                options: {remote_ip="10.94.94.12"}
    ovs_version: "2.3.0"
</code></pre>

<p>On VM2, do following operation, to set vx1</p>

<pre><code>root@OpenVSwitchVM2:~# ovs-vsctl add-port br1 vx1 -- set interface vx1 type=vxlan options:remote_ip=10.94.94.11
root@OpenVSwitchVM2:~# ovs-vsctl show
bce3f2b5-9b77-41dc-8130-b8922dd7ac9e
    Bridge "br1"
        Port "vx1"
            Interface "vx1"
                type: vxlan
                options: {remote_ip="10.94.94.11"}
        Port "br1"
            Interface "br1"
                type: internal
    Bridge "br0"
        Port "br0"
            Interface "br0"
                type: internal
        Port "eth0"
            Interface "eth0"
    ovs_version: "2.3.0"
</code></pre>

<p>So now you could ping each other via the br1 address.</p>

<h3>Mirror Port</h3>

<p>Do the following things for setting up the mirror port.</p>

<pre><code>#  modprobe dummy
#  ip link set up dummy0
root@OpenVSwitchVM1:~# ovs-vsctl add-port br1 dummy0
root@OpenVSwitchVM1:~# ovs-vsctl --id=@m create mirror name=mirror0 -- add bridge br1 mirrors @m
33931f5a-008f-44cf-abc6-38afb3062b5e
root@OpenVSwitchVM1:~# ovs-vsctl list port dummy0
_uuid               : 5f5fe675-b1ee-4acd-a0ab-f14e952d1603
bond_downdelay      : 0
bond_fake_iface     : false
bond_mode           : []
bond_updelay        : 0
external_ids        : {}
fake_bridge         : false
interfaces          : [a6fbabe9-790d-4be8-a362-b7cbdd46db89]
lacp                : []
mac                 : []
name                : "dummy0"
other_config        : {}
qos                 : []
statistics          : {}
status              : {}
tag                 : []
trunks              : []
vlan_mode           : []
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Chef for Deploying CloudStack Management Node]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/05/use-chef-for-deploying-cloudstack-management-node/"/>
    <updated>2015-06-05T17:07:22+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/05/use-chef-for-deploying-cloudstack-management-node</id>
    <content type="html"><![CDATA[<p>Following record all of the necessary steps for deploying cloudstack management node on kvm based environment.</p>

<h3>Get The CookBook</h3>

<p>You need following cookbooks:</p>

<pre><code>[kkkk@~/chef-repo/cookbooks]$ ls
apt         cloudstack_wrapper      cookbook_cloudstack_wrapper  line   nfs    rbac       selinux  sudo  yum-mysql-community
cloudstack  cloudstack_wrapper_kvm  learn_chef_apache2           mysql  nginx  README.md  smf      yum
[kkkk@~/chef-repo/cookbooks]$ pwd
/home/kkkk/chef-repo/cookbooks
</code></pre>

<p>Most of the books could be downloaded from the chef supermarket, while the <code>cookbook_cloudstack_wrapper</code> is downloaded from the github, and <code>cloudstack_wrapper_kvm</code> is modified from it.</p>

<p>Note: You have to replace all of the <code>cloudstack_wrapper::</code> to <code>cloudstack_wrapper_kvm::</code> under the copied folder.</p>

<p>You have to modify the definition of the</p>

<pre><code>[dash@~/chef-repo/cookbooks]$ cat cloudstack_wrapper_kvm/recipes/management_server.rb

......

# download initial systemvm template
cloudstack_system_template 'kvm' do
  nfs_path    node['cloudstack']['secondary']['path']
  nfs_server  node['cloudstack']['secondary']['host']
  url         node['cloudstack']['systemvm']['kvm']
  db_user     node['cloudstack']['db']['username']
  db_password node['cloudstack']['db']['password']
  db_host     node['cloudstack']['db']['host']
  action :create
end
......
</code></pre>

<h3>Add Node</h3>

<p>Add a new node into the system , then you should do following steps for letting the deployment continue:</p>

<pre><code>$ proxychains4  /opt/chef/embedded/bin/gem install cloudstack_ruby_client
$ sudo apt-get update
$  sudo apt-get install nfs-common
</code></pre>

<p>Now continue until you could see the final result.</p>

<h3>Verification</h3>

<p>After deployment, visit:</p>

<p><a href="http://YourIP:8080/client">http://YourIP:8080/client</a>   admin/password</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Using Vagrant and Chefdk]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/03/tips-on-using-vagrant-and-chefdk/"/>
    <updated>2015-06-03T21:00:20+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/03/tips-on-using-vagrant-and-chefdk</id>
    <content type="html"><![CDATA[<ol>
<li>You should install all of the gem of <code>berkshelf</code> via:</li>
</ol>


<pre><code>$ gem install berkshelf
$ /opt/chef/embedded/bin/gem install berkshelf
$ /opt/vagrant/embedded/bin/gem install berkshelf
</code></pre>

<ol>
<li>Besure to add following into your PATH:</li>
</ol>


<pre><code>$  echo $PATH
/opt/chefdk/bin:/home/kkk/.rvm/gems/ruby-2.2.1/bin:/home/kkk/.rvm/gems/ruby-2.2.1@global/bin:/home/kkk/.rvm/rubies/ruby-2.2.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/kkk/.rvm/bin:/home/kkk/.rvm/bin:/home/kkk/.rvm/bin
</code></pre>

<p>So now you could continue with <code>vagrant up</code> or other steps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Trouble-Shooting]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/02/chef-trouble-shooting/"/>
    <updated>2015-06-02T16:16:42+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/02/chef-trouble-shooting</id>
    <content type="html"><![CDATA[<h3>Error</h3>

<p>Could not Add new nodes.</p>

<h3>Reason</h3>

<p>This is because the chefDK remains the old version of chef-client,</p>

<pre><code>[dash@~/chef-repo]$ chef --version
Chef Development Kit Version: 0.6.0
chef-client version: ERROR
berks version: ERROR
kitchen version: 1.4.0
</code></pre>

<h3>Solution</h3>

<p>In node, manually get verified via following command:</p>

<pre><code>$ knife ssl fetch --config /etc/chef/client.rb
$ chef-client -l debug -S https://ChefServer/organizations/xxxxx -K /xxx/xxx/xxxxx.pem
</code></pre>

<p>Now bootstrap again, and you will see the node could be added into the Chef-Server&rsquo;s system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Deleteing Neutron Subnet and Router]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/25/tips-on-deleteing-neutron-subnet-and-router/"/>
    <updated>2015-05-25T21:44:54+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/25/tips-on-deleteing-neutron-subnet-and-router</id>
    <content type="html"><![CDATA[<p>Get the existing subnet:</p>

<pre><code>root@Controller:~# neutron subnet-list 
+--------------------------------------+-------------+----------------+--------------------------------------------------+
| id                                   | name        | cidr           | allocation_pools                                 |
+--------------------------------------+-------------+----------------+--------------------------------------------------+
| 98725e3a-7ee2-4e3f-83e3-eaca0236918f | demo-subnet | 192.168.1.0/24 | {"start": "192.168.1.2", "end": "192.168.1.254"} |
+--------------------------------------+-------------+----------------+--------------------------------------------------+
</code></pre>

<p>Delete it via:</p>

<pre><code>root@Controller:~# neutron subnet-delete --name demo-subnet
Unable to complete operation on subnet 98725e3a-7ee2-4e3f-83e3-eaca0236918f. One or more ports have an IP allocation from this subnet. (HTTP 409) (Request-ID: req-7d729bcc-ec50-4de6-83d9-5d2b98332127)
</code></pre>

<p>Because we have the router, so we list the router via:</p>

<pre><code>root@Controller:~# neutron router-list
+--------------------------------------+-------------+-----------------------+
| id                                   | name        | external_gateway_info |
+--------------------------------------+-------------+-----------------------+
| a745487e-8e7c-4cc2-aff7-a8423d0a6614 | demo-router | null                  |
+--------------------------------------+-------------+-----------------------+
</code></pre>

<p>Get the ports of this router:</p>

<pre><code>root@Controller:~# neutron router-port-list a745487e-8e7c-4cc2-aff7-a8423d0a6614
+--------------------------------------+------+-------------------+------------------------------------------------------------------------------------+
| id                                   | name | mac_address       | fixed_ips                                                                          |
+--------------------------------------+------+-------------------+------------------------------------------------------------------------------------+
| e56fe57e-e939-493b-8984-b5adfa64e2cc |      | fa:16:3e:b3:7b:e6 | {"subnet_id": "98725e3a-7ee2-4e3f-83e3-eaca0236918f", "ip_address": "192.168.1.1"} |
+--------------------------------------+------+-------------------+------------------------------------------------------------------------------------+
</code></pre>

<p>So we remove the interface from this router via:</p>

<pre><code>root@Controller:~# neutron router-interface-delete demo-router 98725e3a-7ee2-4e3f-83e3-eaca0236918f
Removed interface from router demo-router.
root@Controller:~# neutron router-port-list a745487e-8e7c-4cc2-aff7-a8423d0a6614
</code></pre>

<p>Now we could remove the router and the subnet:</p>

<pre><code>root@Controller:~# neutron router-delete demo-router
Deleted router: demo-router
root@Controller:~# neutron subnet-delete demo-subnet
Deleted subnet: demo-subnet
</code></pre>

<p>From now on ,you could create another subnet and router.</p>
]]></content>
  </entry>
  
</feed>
