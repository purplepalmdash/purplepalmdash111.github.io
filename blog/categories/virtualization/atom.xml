<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-07-29T11:44:04+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WorkTips on LandScape]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/28/worktips-on-landscape/"/>
    <updated>2015-07-28T16:10:49+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/28/worktips-on-landscape</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Landscape is now in PPA repository, add it via:</p>

<pre><code>$ sudo apt-get install software-properties-common
$ sudo add-apt-repository ppa:landscape/15.01
$ sudo apt-get update
$ sudo apt-get install landscape-server-quickstart 
</code></pre>

<p>During the installation will ask you the configuration of postfix, specify local.</p>

<h3>Configuration</h3>

<p>First time you login into the LandScape Root machine, you have to setup your email
address and your password.     <br/>
Then you could visit <code>https://YourIPAddress</code> for the configuration page.</p>

<p>Add the node into the Landscape Root Node.</p>

<p>In to-be-added node, copy the root node&rsquo;s <code>/etc/ssl/certs/landscape_server_ca.crt</code> to
<code>/etc/landscape</code>, and modify the following configuration:</p>

<pre><code># vim /etc/landscape/client.conf
ssl_public_key = /etc/landscape/landscape_server_ca.crt
</code></pre>

<p>Now register the node into the Root Node.</p>

<pre><code>$ sudo apt-get install landscape-client
$ sudo landscape-config --computer-title "LSNode0" --account-name standalone \
--url https://packer-ubuntu-1404-server/message-system --ping-url \
http://packer-ubuntu-1404-server/ping
</code></pre>

<p><img src="/images/2015_07_29_11_27_27_582x380.jpg" alt="/images/2015_07_29_11_27_27_582x380.jpg" /></p>

<p>The following steps is to use or configurating the landscape based cluster
administration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Packer]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/27/tips-on-packer/"/>
    <updated>2015-07-27T12:18:46+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/27/tips-on-packer</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Install Packer via:</p>

<pre><code>$ wget https://dl.bintray.com/mitchellh/packer/packer_0.8.2_linux_amd64.zip
$ unzip packer_0.8.2_linux_amd64.zip
$ mv packer* ~/bin
$ export PATH=~/bin:$PATH
</code></pre>

<h3>KVM Based Image Build</h3>

<p>Fetch the kickstart configuration file.</p>

<pre><code>$ mkdir ~/Code/packer
$ wget https://gist.githubusercontent.com/mitchellh/7328271/raw/9035b8e26d001f14a2a960d3cec65eceb0e716ea/centos6-ks.cfg
# vim centos6-ks.cfg
    ### Replace your own repository URL
</code></pre>

<p>Create the json definition file for the packer build:</p>

<pre><code>$  packer validate first.json
Template validated successfully.
$ cat first.json
{
  "builders":
  [
    {
      "type": "qemu",
      "iso_url": "/media/opensuse/dash/iso/CentOS-6.6-x86_64-bin-DVD1.iso",
      "iso_checksum": "7b1fb1a11499b31271ded79da6af8584",
      "iso_checksum_type": "md5",
      "output_directory": "output_centos_tdhtest",
      "ssh_wait_timeout": "30s",
      "shutdown_command": "shutdown -P now",
      "disk_size": 5000,
      "format": "qcow2",
      "headless": false,
      "accelerator": "kvm",
      "http_directory": "httpdir",
      "http_port_min": 10082,
      "http_port_max": 10089,
      "ssh_host_port_min": 2222,
      "ssh_host_port_max": 2229,
      "ssh_username": "root",
      "ssh_password": "YourPassword",
      "ssh_port": 22,
      "ssh_wait_timeout": "90m",
      "vm_name": "tdhtest",
      "net_device": "virtio-net",
      "disk_interface": "virtio",
      "boot_wait": "5s",
      "boot_command":
      [
        "&lt;tab&gt; text ks=http://192.168.1.79/centos6-cdrom.cfg&lt;enter&gt;&lt;wait&gt;"
      ]
    }
  ]
}
$  packer validate first.json
Template validated successfully.
</code></pre>

<p>Now start build via:</p>

<pre><code>packer build first.json
</code></pre>

<h3>KickStart File</h3>

<p>An Template:</p>

<pre><code>[root:/var/www/html]# cat centos6-cdrom.cfg
#platform=x86, AMD64, or Intel EM64T
#version=DEVEL
# Firewall configuration
firewall --enabled --ssh --service=ssh
# Install OS instead of upgrade
install
# Use CDROM installation media
cdrom

rootpw  YourPassword
authconfig --enableshadow --passalgo=sha512

# System keyboard
keyboard uk
# System language
lang en_GB
# SELinux configuration
selinux --enforcing
# Do not configure the X Window System
skipx
# Installation logging level
logging --level=info

# Reboot after installation
reboot

# System timezone
timezone --isUtc Asia/Shanghai
# Network information
network  --bootproto=dhcp --device=eth0 --onboot=on
# System bootloader configuration
bootloader --append="crashkernel=auto rhgb quiet" --location=mbr --driveorder="vda"

# Partition clearing information
zerombr
clearpart --all  --drives=vda

# Disk partitioning information
part /boot --fstype="ext4" --size=500
part pv.008002 --grow --size=1
volgroup vg_centos --pesize=4096 pv.008002
logvol / --fstype=ext4 --name=lv_root --vgname=vg_centos --grow --size=1024
--maxsize=51200
logvol swap --name=lv_swap --vgname=vg_centos --grow --size=1024 --maxsize=1024

%packages --nobase
@core
at
acpid
cronie-noanacron
crontabs
logrotate
mailx
mlocate
openssh-clients
openssh-server
rsync
sendmail
tmpwatch
vixie-cron
which
wget
yum
-biosdevname
-postfix
-prelink
%end
</code></pre>

<h3>Build And Output</h3>

<pre><code>$ packer  build second.json
qemu output will be in this color.

==&gt; qemu: Downloading or copying ISO
    qemu: Downloading or copying:
file:///media/opensuse/dash/iso/CentOS-6.6-x86_64-bin-DVD1.iso
==&gt; qemu: Creating hard drive...
==&gt; qemu: Starting HTTP server on port 10088
==&gt; qemu: Found port for SSH: 2224.
==&gt; qemu: Looking for available port between 5900 and 6000
==&gt; qemu: Found available VNC port: 5947
==&gt; qemu: Starting VM, booting from CD-ROM
==&gt; qemu: Waiting 5s for boot...
==&gt; qemu: Connecting to VM via VNC
==&gt; qemu: Typing the boot command over VNC...
==&gt; qemu: Waiting for SSH to become available...
==&gt; qemu: Connected to SSH!
==&gt; qemu: Gracefully halting virtual machine...
Build 'qemu' finished.

==&gt; Builds finished. The artifacts of successful builds are:
--&gt; qemu: VM files in directory: output_centos_tdhtest
$ ls
output_centos_tdhtest  packer_cache  second.json
$ ls -l output_centos_tdhtest 
total 1411208
-rw-r--r-- 1 dash dash 1445134336 Jul 27 16:11 tdhtest
</code></pre>

<p>Next time we will investigate ubuntu installation.</p>

<h3>Ubuntu</h3>

<p>Ubuntu64.json:</p>

<pre><code>{
    "variables": {
        "ssh_name": "kappataumu",
        "ssh_pass": "kappataumu",
        "hostname": "packer-test"
    },

    "builders": [{
        "type": "virtualbox-iso",
        "guest_os_type": "Ubuntu_64",

        "vboxmanage": [
            ["modifyvm", "", "--vram", "32"]
        ],

        "disk_size" : 10000,

        "iso_url": "http://192.168.0.79/ubuntu-12.04.3-server-amd64.iso",
        "iso_checksum": "2cbe868812a871242cdcdd8f2fd6feb9",
        "iso_checksum_type": "md5",

        "http_directory" : "ubuntu_64",
        "http_port_min" : 9001,
        "http_port_max" : 9001,

        "ssh_username": "",
        "ssh_password": "",
        "ssh_wait_timeout": "20m",

        "shutdown_command": "echo  | sudo -S shutdown -P now",

        "boot_command" : [
            "&lt;esc&gt;&lt;esc&gt;&lt;enter&gt;&lt;wait&gt;",
            "/install/vmlinuz noapic ",
            "preseed/url=http://192.168.0.79/ubuntu1204preseed.cfg ",
            "debian-installer=en_US auto locale=en_US kbd-chooser/method=us ",
            "hostname= ",
            "fb=false debconf/frontend=noninteractive ",
            "keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA ",
            "keyboard-configuration/variant=USA console-setup/ask_detect=false ",
            "initrd=/install/initrd.gz -- &lt;enter&gt;"
        ]
    }]
}
</code></pre>

<p>KVM Based:</p>

<pre><code>{
    "variables": {
        "user": "adminubuntu",
        "password": "adminubuntu"
    },

    "builders":
    [
        {
            "name": "ubuntu-1404-server",

            "type": "qemu",
            "format": "qcow2",
            "accelerator": "kvm",
            "disk_size": 100000,

            "iso_url": "http://192.168.0.79/ubuntu-14.04-server-amd64.iso",
            "iso_checksum": "01545fa976c8367b4f0d59169ac4866c",
            "iso_checksum_type": "md5",

            "http_directory": "http",

            "ssh_username": "",
            "ssh_password": "",
        "ssh_wait_timeout": "90m",
            "shutdown_command": "echo ''|sudo -S shutdown -P now",

            "boot_wait": "2s",
            "boot_command": [
                "&lt;esc&gt;&lt;esc&gt;&lt;enter&gt;&lt;wait&gt;",
                "/install/vmlinuz url=http://192.168.0.79/TrustyPreseed.cfg ",
                "debian-installer=en_US auto locale=en_US kbd-chooser/method=us ",
                "hostname= ",

                "keyboard-configuration/modelcode=SKIP ",
                "keyboard-configuration/layout=USA ",
                "keyboard-configuration/variant=USA ",

                "passwd/user-fullname= ",
                "passwd/user-password-again= ",
                "passwd/user-password= ",
                "passwd/username= ",

                "initrd=/install/initrd.gz -- &lt;enter&gt;"
            ]
        }
    ]
}
</code></pre>

<p>The Preseed File:</p>

<pre><code># Some inspiration:
# *
https://github.com/chrisroberts/vagrant-boxes/blob/master/definitions/precise-64/preseed.cfg
# * https://github.com/cal/vagrant-ubuntu-precise-64/blob/master/preseed.cfg

# English plx
d-i debian-installer/language string en
d-i debian-installer/locale string en_US.UTF-8
d-i localechooser/preferred-locale string en_US.UTF-8
d-i localechooser/supported-locales en_US.UTF-8

# Including keyboards
d-i console-setup/ask_detect boolean false
d-i keyboard-configuration/layout select USA
d-i keyboard-configuration/variant select USA
d-i keyboard-configuration/modelcode string pc105


# Just roll with it
d-i netcfg/get_hostname string this-host
d-i netcfg/get_domain string this-host

d-i time/zone string UTC
d-i clock-setup/utc-auto boolean true
d-i clock-setup/utc boolean true


# Choices: Dialog, Readline, Gnome, Kde, Editor, Noninteractive
d-i debconf debconf/frontend select Noninteractive

d-i pkgsel/install-language-support boolean false
tasksel tasksel/first multiselect standard, ubuntu-server


# Stuck between a rock and a HDD place
d-i partman-auto/method string lvm
d-i partman-lvm/confirm boolean true
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-auto/choose_recipe select atomic

d-i partman/confirm_write_new_label boolean true
d-i partman/confirm_nooverwrite boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true

# Write the changes to disks and configure LVM?
d-i partman-lvm/confirm boolean true
d-i partman-lvm/confirm_nooverwrite boolean true
d-i partman-auto-lvm/guided_size string max

# No proxy, plx
d-i mirror/http/proxy string

# Default user, change
d-i passwd/user-fullname string adminubuntu
d-i passwd/username string adminubuntu
d-i passwd/user-password password adminubuntu
d-i passwd/user-password-again password adminubuntu
d-i user-setup/encrypt-home boolean false
d-i user-setup/allow-password-weak boolean true

# No language support packages.
d-i pkgsel/install-language-support boolean false

# Individual additional packages to install
d-i pkgsel/include string build-essential ssh

#For the update
d-i pkgsel/update-policy select none

# Whether to upgrade packages after debootstrap.
# Allowed values: none, safe-upgrade, full-upgrade
d-i pkgsel/upgrade select safe-upgrade

# Go grub, go!
d-i grub-installer/only_debian boolean true

d-i finish-install/reboot_in_progress note
</code></pre>

<h3>Use Local Repository</h3>

<p>Add following in the kickstart file:</p>

<pre><code># Setup the installation source
d-i mirror/country string manual
d-i mirror/http/hostname string 192.168.0.79
#d-i mirror/http/directory string $install_source_directory
# /var/www/cobbler/ks_mirror/Ubuntu-14.04-x86_64/ubuntu
d-i mirror/http/directory string /ks_mirror/Ubuntu-14.04-x86_64/ubuntu
d-i mirror/http/proxy string 
d-i apt-setup/security_host string 192.168.0.79
d-i apt-setup/security_path string /ks_mirror/Ubuntu-14.04-x86_64/ubuntu
d-i apt-setup/services-select multiselect none
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Libvirtd Trouble-Shooting on CentOS7.1]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/22/libvirtd-trouble-shooting-on-centos7-dot-1/"/>
    <updated>2015-07-22T09:54:59+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/22/libvirtd-trouble-shooting-on-centos7-dot-1</id>
    <content type="html"><![CDATA[<h3>Problem Description</h3>

<p>When upgraded from CentOS6.6 to CentOS7, the libvirtd will encounter following error:</p>

<p><img src="/images/2015_07_22_09_54_37_355x184.jpg" alt="/images/2015_07_22_09_54_37_355x184.jpg" /></p>

<p>Simply remove:</p>

<pre><code># virsh edit nodename
-     &lt;feature policy='require' name='invtsc'/&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Migration of KVM]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/19/on-migration-of-kvm/"/>
    <updated>2015-07-19T13:31:03+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/19/on-migration-of-kvm</id>
    <content type="html"><![CDATA[<h3>Migration</h3>

<p>First create the qemu based vm:</p>

<pre><code>$ pwd
/media/arch/home/juju/img/migration
$ qemu-img create -f qcow2 ubuntu1504.qcow2 100G
$ sudo qemu-system-x86_64 -enable-kvm -m 512 -smp 4 -name ubuntu1504 -monitor stdio -boot c -drive file=/media/arch/home/juju/img/migration/ubuntu1504.qcow2,if=none,id=drive-virtio-disk0,boot=on -device virtio-blk-pci,bus=pci.0,addr=0x4,drive=drive-virtio-disk0,id=virtio-disk0 -drive file=/media/arch/home/dash/iso/ubuntu-15.04-server-amd64.iso,if=none,media=cdrom,id=drive-ide0-1-0 -device ide-drive,bus=ide.1,unit=0,drive=drive-ide0-1-0,id=ide0-1-0 -device virtio-net-pci,vlan=0,id=net0,mac=52:54:00:13:08:96 -net tap -vnc 127.0.0.1:3
</code></pre>

<p>After Installation, startup the vm via(didn&rsquo;t attach the file):</p>

<pre><code>$ sudo qemu-system-x86_64 -enable-kvm -m 512 -smp 4 -name ubuntu1504 -monitor stdio -boot c -drive file=/media/arch/home/juju/img/migration/ubuntu1504.qcow2,if=none,id=drive-virtio-disk0,boot=on -device virtio-blk-pci,bus=pci.0,addr=0x4,drive=drive-virtio-disk0,id=virtio-disk0 -drive if=none,media=cdrom,id=drive-ide0-1-0 -device ide-drive,bus=ide.1,unit=0,drive=drive-ide0-1-0,id=ide0-1-0 -device virtio-net-pci,vlan=0,id=net0,mac=52:54:00:13:08:96 -net tap -vnc 127.0.0.1:3
</code></pre>

<p>Use <code>top -d 1</code> for every second refreshed.</p>

<p>The same environment is set as the src machine.</p>

<pre><code>$ qemu-img create -f qcow2 dest.img 20G
$ qemu-system-x86_64 -enable-kvm -m 512 -smp 4 -name ubuntu1504 -monitor stdio -boot c -drive file=/root/Code/dest.img,if=none,id=drive-virtio-disk0,boot=on -device virtio-blk-pci,bus=pci.0,addr=0x4,drive=drive-virtio-disk0,id=virtio-disk0 -drive if=none,media=cdrom,id=drive-ide0-1-0 -device ide-drive,bus=ide.1,unit=0,drive=drive-ide0-1-0,id=ide0-1-0 -device virtio-net-pci,vlan=0,id=net0,mac=52:54:00:13:08:96 -net tap -vnc 127.0.0.1:8
(qemu) info status
VM status: paused (inmigrate)
</code></pre>

<p>Start migration in the src side via:</p>

<pre><code>(qemu) migrate -d -b tcp:192.168.1.18:8888
(qemu) info migrate
</code></pre>

<p>In destination machine, you can see the status of the migration.</p>

<p>After migration, the machine stays its top output to the terminal.</p>

<h3>Trouble Shooting On Newly Installed Arch</h3>

<h4>Bug1 virtual network start fail</h4>

<p>libvirt via virt-manager virtual network start failed.   <br/>
Change:</p>

<pre><code>--- libvirt-1.2.16.orig/src/util/virfirewall.c  2015-05-23 08:56:12.000000000 -0400
+++ libvirt-1.2.16.new/src/util/virfirewall.c   2015-06-18 10:01:51.954157612 -0400
@@ -932,14 +932,14 @@

     virMutexLock(&amp;ruleLock);

-    if (currentBackend == VIR_FIREWALL_BACKEND_AUTOMATIC) {
+//    if (currentBackend == VIR_FIREWALL_BACKEND_AUTOMATIC) {
         /* a specific backend should have been set when the firewall
          * object was created. If not, it means none was found.
          */
-        virReportError(VIR_ERR_INTERNAL_ERROR, "%s",
-                       _("Failed to initialize a valid firewall backend"));
-        goto cleanup;
-    }
+//        virReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+//                       _("Failed to initialize a valid firewall backend"));
+//        goto cleanup;
+//    }
     if (!firewall || firewall-&gt;err == ENOMEM) {
         virReportOOMError();
         goto cleanup;
</code></pre>

<p>For building the libvirt, do following:</p>

<pre><code># pacman -S abs base-devel
# abs 
# cp /var/abs/community/libvirt ~/Code/
# cd ~/Code/libvirt
# makepkg
</code></pre>

<p>After makepkg, change the code as in above, tar it again, makepkg with following command <code>makepkg --skipchecksums</code>, this time it will generate a new tar.xz file. Install it via:</p>

<pre><code># pacman -U libvirt-1.2.17-1-x86_64.pkg.tar.xz
</code></pre>

<h4>starting network out of memory</h4>

<p>Solve it via:</p>

<pre><code># pacman -S ebtables vde2
# reboot
</code></pre>

<p>Start again and this time is OK.</p>

<h4>Bridge Configuration</h4>

<pre><code>[root@Arch network]# pwd
/etc/systemd/network
[root@Arch network]# cat MyBridge.netdev 
[NetDev]
Name=br0
MACAddress=52:54:00:91:e8:11
Kind=bridge
[root@Arch network]# cat MyBridge.network 
[Match]
Name=br0

[Network]
DNS=180.76.76.76,114.114.114.114

[Address]
Address=192.168.1.18/24

[Route]
Gateway=192.168.1.1
[root@Arch network]# cat MyEth.network 
[Match]
Name=eth0

[Network]
Bridge=br0
</code></pre>

<p>Now enable and start the systemd&rsquo;s networkd service via:</p>

<pre><code># systemctl enable systemd-networkd.service
# reboot
</code></pre>

<p>By this you could enable systemd on ArchLinux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISCSI Installed Debian Jessie]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/17/iscsi-installed-debian-jessie/"/>
    <updated>2015-07-17T14:24:20+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/17/iscsi-installed-debian-jessie</id>
    <content type="html"><![CDATA[<h3>FreeNAS Installation And Configuration</h3>

<p>Install Procedure ignored, because it&rsquo;s simple.   <br/>
Following steps are used for adding iscsi partition.</p>

<p><img src="/images/2015_07_17_14_25_57_558x549.jpg" alt="/images/2015_07_17_14_25_57_558x549.jpg" />  <br/>
Manually setup the volumn and now you could add your volumn into the FreeNAS System.</p>

<p>Configure iscsi:  <br/>
<img src="/images/2015_07_17_14_33_57_530x370.jpg" alt="/images/2015_07_17_14_33_57_530x370.jpg" /> <br/>
Add the name of <code>iqn.onecloud.iscsi</code>, next we add portal:  <br/>
<img src="/images/2015_07_17_14_35_12_617x403.jpg" alt="/images/2015_07_17_14_35_12_617x403.jpg" />  <br/>
Add Authorized Access Now:  <br/>
<img src="/images/2015_07_17_14_37_03_491x195.jpg" alt="/images/2015_07_17_14_37_03_491x195.jpg" />  <br/>
Add Initator:  <br/>
<img src="/images/2015_07_17_14_39_25_498x234.jpg" alt="/images/2015_07_17_14_39_25_498x234.jpg" />  <br/>
Create target:  <br/>
<img src="/images/2015_07_17_14_40_30_460x487.jpg" alt="/images/2015_07_17_14_40_30_460x487.jpg" />  <br/>
Add extent: <br/>
<img src="/images/2015_07_17_14_41_55_559x613.jpg" alt="/images/2015_07_17_14_41_55_559x613.jpg" /> <br/>
LUM RPMs could also be spcified:  <br/>
<img src="/images/2015_07_17_14_42_51_386x351.jpg" alt="/images/2015_07_17_14_42_51_386x351.jpg" /> <br/>
Associate Targets:  <br/>
<img src="/images/2015_07_17_14_44_09_619x310.jpg" alt="/images/2015_07_17_14_44_09_619x310.jpg" /></p>

<p>Enable the iscsi service:  <br/>
<img src="/images/2015_07_17_14_45_04_366x302.jpg" alt="/images/2015_07_17_14_45_04_366x302.jpg" /></p>

<p>Better you change the IP Address into static IP address.</p>

<h3>Install Debian Jessie Onto ISCSI Disk:</h3>

<p>On a installed Ubuntu, I choose Ubuntu14.04, do following for connecting the exising created iscsi partition:</p>

<pre><code>$ sudo apt-get install -y open-iscsi gdisk
[root:~]# iscsiadm -m discovery -t sendtargets -p 10.47.58.40
10.47.58.40:3260,-1 iqn.onecloud.iscsi:iscsidisk1
</code></pre>

<p>Login and listed the device :</p>

<pre><code>[root:~]# iscsiadm -m node -T 'iqn.onecloud.iscsi:iscsidisk1' -p 10.47.58.40 -l
Logging in to [iface: default, target: iqn.onecloud.iscsi:iscsidisk1, portal: 10.47.58.40,3260] (multiple)
Login to [iface: default, target: iqn.onecloud.iscsi:iscsidisk1, portal: 10.47.58.40,3260] successful.
[root:~]# ls -l /dev/disk/by-path
total 0
lrwxrwxrwx 1 root root 9 Jul 17 05:39 ip-10.47.58.40:3260-iscsi-iqn.onecloud.iscsi:iscsidisk1-lun-0 -&gt; ../../sda
</code></pre>

<p>Use gdisk for partition the /dev/sda, and creating the filesystem on them:</p>

<pre><code># gdisk -l /dev/sda

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048            8191   3.0 MiB     EF02  BIOS boot partition
   2            8192         1056767   512.0 MiB   8200  Linux swap
   3         1056768        40959966   19.0 GiB    8300  Linux filesystem
# mkfs.ext4 /dev/sda3
# mkswap /dev/sda2 
</code></pre>

<p>Now install system, first mount usable systems:</p>

<pre><code># mkdir /mnt/chroot
# mount /dev/sda3 /mnt/chroot
# debootstrap wheezy /mnt/chroot
# debootstrap jessie /mnt/chroot http://mirrors.aliyun.com/debian/ 
</code></pre>

<p>chroot into the newly install jessie:</p>

<pre><code>root@Ubuntu-14:~# mount -t proc none /mnt/chroot/proc
root@Ubuntu-14:~# mount -t sysfs none /mnt/chroot/sys
root@Ubuntu-14:~# mount --bind /dev /mnt/chroot/dev
root@Ubuntu-14:~# chroot /mnt/chroot /bin/bash
</code></pre>

<p>Disk configuration:</p>

<pre><code>root@Ubuntu-14:/# cp /proc/mounts /etc/mtab
root@Ubuntu-14:/# sed -i '\|^/dev/sda3|,$!d' /etc/mtab
root@Ubuntu-14:/# blkid /dev/sda2 /dev/sda3
/dev/sda2: UUID="0c570265-543a-41ec-9edb-65bc55d677cd" TYPE="swap" PARTLABEL="Linux swap" PARTUUID="bfb7c1b1-c6cd-4302-9cb4-d6c1de43a0ad"
/dev/sda3: UUID="c1c5f995-e3f7-48c7-b5d5-4963a77d9b7b" TYPE="ext4" PARTLABEL="Linux filesystem" PARTUUID="00ccaf63-b3b3-46c4-92ab-1933d31cbcb7"
root@Ubuntu-14:/# echo 'UUID=c1c5f995-e3f7-48c7-b5d5-4963a77d9b7b / ext4 errors=remount-ro 0 1' &gt;&gt; /etc/fstab
root@Ubuntu-14:/# echo 'UUID=0c570265-543a-41ec-9edb-65bc55d677cd none swap sw 0 0' &gt;&gt; /etc/fstab
root@Ubuntu-14:/# cat /etc/fstab
# UNCONFIGURED FSTAB FOR BASE SYSTEM
UUID=c1c5f995-e3f7-48c7-b5d5-4963a77d9b7b / ext4 errors=remount-ro 0 1
UUID=0c570265-543a-41ec-9edb-65bc55d677cd none swap sw 0 0
</code></pre>

<p>Install some packages, be sure to make grub2 installed to /dev/sda:</p>

<pre><code># apt-get install vim less openssh-server locales
# apt-get install linux-image-amd64 grub2 initramfs-tools
</code></pre>

<p>Configure the Grub:</p>

<pre><code># apt-get install open-iscsi
# vim /etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT=""
GRUB_CMDLINE_LINUX=""ISCSI_INITIATOR=iqn.onecloud.iscsi.client:client ISCSI_TARGET_NAME=iqn.onecloud.iscsi:iscsidisk1 ISCSI_TARGET_IP=10.47.58.40 ISCSI_TARGET_PORT=3260 root=UUID=c1c5f995-e3f7-48c7-b5d5-4963a77d9b7b ip=10.47.58.176::10.47.58.1:255.255.255.0:client:eth0:off""
# touch /etc/iscsi/iscsi.initramfs
# echo "InitiatorName=iqn.onecloud.iscsi.client:client" &gt; /etc/iscsi/initiatorname.iscsi
# update-grub
# update-initramfs -u
# passwd
</code></pre>

<p>Configure the network interfaces:</p>

<pre><code>root@Ubuntu-14:/etc/network# cat interfaces
# interfaces(5) file used by ifup(8) and ifdown(8)
# Include files from /etc/network/interfaces.d:
#source-directory /etc/network/interfaces.d
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
#iface eth0 inet manual
address 10.47.58.176
netmask 255.255.255.0
gateway 10.47.58.1
dns-nameservers 114.114.114.114
</code></pre>

<p>Now exit and umount all of the mounted partitions.</p>

<pre><code># exit
# umount /mnt/chroot/{dev,proc,sys,}
root@Ubuntu-14:~# iscsiadm -m node -T 'iqn.onecloud.iscsi:iscsidisk1' -p 10.47.58.40 -u
# echo "InitiatorName=iqn.onecloud.iscsi.client:client" &gt; /etc/iscsi/initiatorname.iscsi
#!ipxe
set initiator-iqn iqn.2007-08.com.example.client:client
sanboot iscsi:san.example.com:6:3260:0:iqn.2007-08.com.example.san:rootp
</code></pre>
]]></content>
  </entry>
  
</feed>
