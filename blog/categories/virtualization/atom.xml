<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-06-19T15:24:26+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WH Worktips(4)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/19/wh-worktips-4/"/>
    <updated>2015-06-19T11:32:04+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/19/wh-worktips-4</id>
    <content type="html"><![CDATA[<h3>A Whole Deployment</h3>

<pre><code>$ pwd
/home/juju/img/WolfHunter/WH
$ qemu-img create -f qcow2 z_Node113.qcow2 100G
$ 
</code></pre>

<p>Create Virtual Machine:</p>

<p><img src="/images/2015_06_19_11_39_45_474x366.jpg" alt="/images/2015_06_19_11_39_45_474x366.jpg" /></p>

<p>Memory:</p>

<p><img src="/images/2015_06_19_11_40_51_477x363.jpg" alt="/images/2015_06_19_11_40_51_477x363.jpg" /></p>

<p><img src="/images/2015_06_19_11_41_58_482x369.jpg" alt="/images/2015_06_19_11_41_58_482x369.jpg" /></p>

<p>Click <code>Customize configuration before install</code>:</p>

<p>VirtIO Disk 1:</p>

<p><img src="/images/2015_06_19_11_43_22_478x309.jpg" alt="/images/2015_06_19_11_43_22_478x309.jpg" /></p>

<p>Virtual Network Interface:</p>

<p><img src="/images/2015_06_19_11_44_12_553x205.jpg" alt="/images/2015_06_19_11_44_12_553x205.jpg" /></p>

<p>Notice the mac address is <code>52:54:00:9a:73:1a</code>.</p>

<h3>Cobbler Customization</h3>

<p>Define the node:</p>

<pre><code>[root@z_WHServer ~]#  cobbler system add --name=node113 --profile=CentOS-6.5-x86_64 --mac=52:54:00:9a:73:1a --interface=eth0 --ip-address=10.47.58.113 --hostname=node113 --gateway=10.47.58.1 --dns-name=node113
</code></pre>

<h3>Begin Installation</h3>

<p><img src="/images/2015_06_19_11_49_09_685x401.jpg" alt="/images/2015_06_19_11_49_09_685x401.jpg" /></p>

<h3>Configure</h3>

<p>Notice the ssh failed to 112 because we poweroff this node.</p>

<pre><code>ssh-keyscan 10.47.58.113&gt;&gt;/root/.ssh/known_hosts 
# 10.47.58.113 SSH-2.0-OpenSSH_5.3

# cd /root/Code/Ansible
# ansible-playbook ssh-addkey.yml --ask-pass
SSH password: 

PLAY [all] ******************************************************************** 

TASK: [install ssh key] ******************************************************* 
changed: [10.47.58.113]
fatal: [10.47.58.112] =&gt; SSH Error: ssh: connect to host 10.47.58.112 port 22: Connection timed out
    while connecting to 10.47.58.112:22
It is sometimes useful to re-run the command using -vvvv, which prints SSH debug output to help diagnose the issue.

PLAY RECAP ******************************************************************** 
           to retry, use: --limit @/root/ssh-addkey.retry

10.47.58.112               : ok=0    changed=0    unreachable=1    failed=0   
10.47.58.113               : ok=1    changed=1    unreachable=0    failed=0  
</code></pre>

<p>Check:</p>

<pre><code># ansible all -m shell -a "uptime"
10.47.58.113 | success | rc=0 &gt;&gt;
 04:32:21 up 32 min,  3 users,  load average: 0.00, 0.00, 0.00

10.47.58.112 | FAILED =&gt; SSH Error: ssh: connect to host 10.47.58.112 port 22: No route to host
    while connecting to 10.47.58.112:22
It is sometimes useful to re-run the command using -vvvv, which prints SSH debug output to help diagnose the issue.
</code></pre>

<p>Deployed via:</p>

<pre><code># cd /root/Code/Ansible/CloudStack-Ansible-Playbook
# ansible-playbook -i /root/Code/Ansible/hosts --limit=node113 ./cloudstack.yml --tags=base
# ansible-playbook -i /root/Code/Ansible/hosts --limit=node113 ./cloudstack.yml --tags=mysql
# ansible-playbook -i /root/Code/Ansible/hosts --limit=node113 ./cloudstack.yml --tags=mysql3306
# ansible-playbook -i /root/Code/Ansible/hosts --limit=node113 ./cloudstack.yml --tags=csmanagement -vvvv
</code></pre>

<p>Now you could enjoy a new node&rsquo;s ansible deployment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use VirtualEnv for Downloading PIP Packages]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/18/use-virtualenv-for-downloading-pip-packages/"/>
    <updated>2015-06-18T20:56:30+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/18/use-virtualenv-for-downloading-pip-packages</id>
    <content type="html"><![CDATA[<p>In order to use offline installation of pip, I tried following steps for retrieving the packages.</p>

<h3>Fetch Packages</h3>

<p>First install virtualenv packages on CentOS7.</p>

<pre><code>$ sudo yum install -y python-virtualenv
$ virtualenv venv
New python executable in venv/bin/python
Installing Setuptools..............................................................................................................................................................................................................................done.
Installing Pip.....................................................................................................................................................................................................................................................................................................................................done.
$ ls venv
bin  include  lib  lib64
$ source venv/bin/activate
(venv)$      
(venv)$ pip install --download-cache=/home/dash/pipcache cloudmonkey
(venv)$ ls pipcache/
https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2Fa%2Fargcomplete%2Fargcomplete-0.8.9.tar.gz
https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2Fa%2Fargcomplete%2Fargcomplete-0.8.9.tar.gz.content-type
https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2Fc%2Fcloudmonkey%2Fcloudmonkey-5.3.1-0.tar.gz
https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2Fc%2Fcloudmonkey%2Fcloudmonkey-5.3.1-0.tar.gz.content-type
https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2FP%2FPrettyTable%2Fprettytable-0.7.2.tar.bz2
......
(venv)$ mkdir ~/pipcache2
(venv)$ pip install cloudmonkey --download=/home/dash/pipcache2
(venv)$ ls pipcache2
argcomplete-0.8.9.tar.gz    Pygments-2.0.2.tar.gz
cloudmonkey-5.3.1-0.tar.gz  requests-2.7.0.tar.gz
prettytable-0.7.2.tar.bz2
</code></pre>

<h3>Use Packages</h3>

<p>In order to use packages, we did following things.</p>

<pre><code>$ scp xxx@xxx.xxx.xxx.xx:/home/xxx/pipcache2.tar.gz ./
$ tar xzvf pipcache2.tar.gz 
$ pip install --no-index --find-links ~/pipcache2 cloudmonkey
</code></pre>

<p>Now the package has been installed. enjoy them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(3)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/18/wh-worktips-3/"/>
    <updated>2015-06-18T15:50:11+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/18/wh-worktips-3</id>
    <content type="html"><![CDATA[<h3>Prepare Packages</h3>

<h4>System Pacakges</h4>

<p>Since CentOS6.5 already deprecated, we need to use <code>http://vault.centos.org/6.5/</code> for download the packages.  <br/>
Or we could remove all of the repo definition files except the cobbler deployed one.</p>

<p>We need python-pip for usage. Download it via yum firstly to the directory.</p>

<p>Download the following packages, these packages may have problems because I downloaded them from the latest repository.</p>

<pre><code>$ yum install yum-plugin-downloadonly
$ yum install --downloadonly --downloaddir=/root/Code/repo/ python-pip
$ yum install --downloadonly --downloaddir=/root/Code/repo/ nethogs
$ yum reinstall --downloadonly --downloaddir=/root/Code/repo/ java7
$ yum reinstall --downloadonly --downloaddir=/root/Code/repo/ mysql-devel
$ yum install --downloadonly --downloaddir=/root/Code/repo/ java-1.7.0-openjdk-devel
$ yum install --downloadonly --downloaddir=/root/Code/repo/ mysql-server
$ yum install --downloadonly --downloaddir=/root/Code/repo/ mysql-devel
[root@z_WHServer repo]# ls
python-pip-1.3.1-4.el6.noarch.rpm
....
</code></pre>

<h4>Cloudstack Packages</h4>

<p>Download all of the cloudstack packages from <code>http://cloudstack.apt-get.eu/rhel/4.4/</code>, and put them into a directory, run <code>createrepo</code> for generating the repodata.</p>

<h4>PIP Packages</h4>

<p>Manually create the offline installation resources.</p>

<h3>Deployment</h3>

<pre><code>#  ansible-playbook -i /root/Code/Ansible/hosts --limit=node112 ./cloudstack.yml --tags=base
#  ansible-playbook -i /root/Code/Ansible/hosts --limit=node112 ./cloudstack.yml --tags=mysql
#  ansible-playbook -i /root/Code/Ansible/hosts --limit=node112 ./cloudstack.yml --tags=mysql3306
#  ansible-playbook -i /root/Code/Ansible/hosts --limit=node112 ./cloudstack.yml --tags=csmanagement -vvvv
</code></pre>

<p>There may be some problems in deployment in <code>/etc/hosts</code>, so manually add itself to the hostname:  <br/>
!!! node112 !!!</p>

<pre><code>[root@node112 yum.repos.d]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
10.47.58.112    node112
</code></pre>

<p>From now on, you could visit the management server via:</p>

<p><a href="http://10.47.58.112:8080/client/">http://10.47.58.112:8080/client/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(2)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/18/wh-worktips-2/"/>
    <updated>2015-06-18T10:20:48+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/18/wh-worktips-2</id>
    <content type="html"><![CDATA[<h3>Cobbler Web</h3>

<p>Visit the following website:</p>

<p><a href="http://10.47.58.2/cobbler_web">http://10.47.58.2/cobbler_web</a></p>

<p>You will see:</p>

<p><img src="/images/2015_06_18_10_21_45_755x413.jpg" alt="/images/2015_06_18_10_21_45_755x413.jpg" /></p>

<h3>Added More Profiles</h3>

<p>The default kickstart configuration file could found under:   <br/>
<code>/var/lib/cobbler/kickstarts/sample_end.ks</code>, copy it to your own.</p>

<pre><code>$ cp /var/lib/cobbler/kickstarts/sample_end.ks CentOS65Desktop.cfg
$ vim CentOS65Desktop.cfg
# Allow anaconda to partition the system as needed
# autopart
# 1G Swap and remains others to be ext4
part swap --fstype="swap" --size=1024
part / --asprimary --fstype="ext4" --grow --size=1
.......
%packages
# Added from here
@additional-devel
@basic-desktop
@chinese-support
@desktop-platform
@development
@fonts
@general-desktop
@input-methods
@x11
git
-ibus-table-cangjie
-ibus-table-erbi
-ibus-table-wubi
# End of added
$SNIPPET('func_install_if_enabled')
%end
</code></pre>

<p>More configurations could be customized.</p>

<h3>Fixed IP Address Via DHCP</h3>

<p>By adding the configuration in dhcp configuration:</p>

<pre><code>$ sudo vim /etc/cobbler/dhcp.template
     max-lease-time             43200;      
     next-server                $next_server; 

     host ns111 {
         next-server $next_server;
         hardware ethernet 52:54:00:e0:cc:18;
         fixed-address 10.47.58.111;
     }


     class "pxeclients" {
$ sudo cobbler sync
</code></pre>

<p>Now restart the deployed node, you will easily see the node.</p>

<h3>Specify Fixed IP For Host</h3>

<p>Add the configration of the node112, then this machine will start with our specified parameters:</p>

<pre><code># cobbler system add --name=node112 --profile=CentOS6.5-Desktop --mac=52:54:00:92:8c:4d --interface=eth0 --ip-address=10.47.58.112 --hostname=node112 --gateway=10.47.58.1 --dns-name=node112
</code></pre>

<p>Now bootup the machine, then this computer will have the fixed IP address.</p>

<p><img src="/images/2015_06_18_11_38_48_794x263.jpg" alt="/images/2015_06_18_11_38_48_794x263.jpg" /></p>

<h3>Use Ansible For Administrate The Added Nodes</h3>

<p>Install ansible via:</p>

<pre><code># yum install -y ansible sshpass
# vim /etc/hosts
10.47.58.112    node112

# mkdir -p ~/Code/Ansible
# cd ~/Code/Ansible
# vim ansible.cfg
    [defaults]
    hostfile=/root/Code/Ansible/hosts

# vim hosts
    [node112]
    10.47.58.112

# vim ssh-addkey.yml
    ---
    - hosts: all
      sudo: yes
      gather_facts: no
      remote_user: root

      tasks:

      - name: install ssh key
        authorized_key: user=root
                        key="" 
                        state=present

# ssh-keyscan 10.47.58.112&gt;&gt;/root/.ssh/known_hosts
# ansible-playbook ssh-addkey.yml --ask-pass
</code></pre>

<p>Now the node112 is under controlled by you.  <br/>
Take refers to:  <br/>
<a href="https://sysadmincasts.com/episodes/45-learning-ansible-with-vagrant-part-2-4">https://sysadmincasts.com/episodes/45-learning-ansible-with-vagrant-part-2-4</a></p>

<p>Test via:</p>

<pre><code>[root@z_WHServer Ansible]# ansible all -m shell -a "uptime"
10.47.58.112 | success | rc=0 &gt;&gt;
 06:18:59 up  1:32,  2 users,  load average: 0.00, 0.00, 0.00
</code></pre>

<p>In following parts we will try to deploy Cloudstack using playbook.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(1)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/17/wh-worktips-1/"/>
    <updated>2015-06-17T14:55:39+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/17/wh-worktips-1</id>
    <content type="html"><![CDATA[<h3>Preparation</h3>

<p>Hardware: 2G Memory, 1-Core, the Cobbler Server, which runs CentOS6.6.   <br/>
Network: Use a 10.47.58.0/24(Its name is WHNetwork), no dhcp server in this network.</p>

<h3>Cobbler Server Preparation</h3>

<p>First Change its IP address to 10.47.58.2, gateway to 10.47.58.1.</p>

<pre><code>[root@z_WHServer ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 
DEVICE=eth0
TYPE=Ethernet
UUID=a6e5b56f-661f-4128-ab8c-c575a9623245
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=none
IPADDR=10.47.58.2
GATEWAY=10.47.58.1
......

[root@z_WHServer ~]# cat /etc/sysconfig/network
NETWORKING=yes
HOSTNAME=z_WHServer
# vim /etc/selinux/config
    #SELINUX=enforcing
    SELINUX=disabled 
# reboot
</code></pre>

<p>Install and configure Cobbler Server via:</p>

<pre><code># yum -y update &amp;&amp; yum install -y cobbler cobbler-web
# reboot
# openssl passwd -1                                                                                                     │
Password:                                                                                                                                 │
Verifying - Password:                                                                                                                     │
igaowugoauwgoueougo
# vim /etc/cobbler/settings
    default_password_crypted: "agowuoguwoawoguwoe"
    # default, localhost
    server: 10.47.58.2
    # default, localhost
    next_server: 10.47.58.2
    manage_dhcp: 1
</code></pre>

<p>Edit the dhcp template:</p>

<pre><code># vim /etc/cobbler/dhcp.template
####  subnet 192.168.1.0 netmask 255.255.255.0 {
####       option routers             192.168.1.5;
####       option domain-name-servers 192.168.1.1;
####       option subnet-mask         255.255.255.0;
####       range dynamic-bootp        192.168.1.100 192.168.1.254;
####       default-lease-time         21600;
####       max-lease-time             43200;
####       next-server                $next_server;
subnet 10.47.58.0 netmask 255.255.255.0 {
     option routers             10.47.58.1; 
     range dynamic-bootp        10.47.58.3 10.47.58.254;
     option domain-name-servers 114.114.114.114, 180.76.76.76;     
     option subnet-mask         255.255.255.0;         
     filename                   "/pxelinux.0";       
     default-lease-time         21600;           
     max-lease-time             43200;      
     next-server                $next_server; 

     class "pxeclients" {
</code></pre>

<p>Check via:</p>

<pre><code>[root@z_WHServer ~]# service cobblerd start
Starting cobbler daemon:                                   [  OK  ]
[root@z_WHServer ~]# chkconfig cobblerd on
[root@z_WHServer ~]# chkconfig httpd on
[root@z_WHServer ~]# service cobblerd status
cobblerd (pid 5421) is running...
</code></pre>

<p>Reboot and Check via:</p>

<pre><code># cobbler check
</code></pre>

<p>You will get lots of the errors, first solve the dhcpd issue, notice the following dhcpd configuration file is temporarily used.</p>

<pre><code># yum install -y dhcp
# vim /etc/dhcp/dhcpd.conf
#
# DHCP Server Configuration file.
#   see /usr/share/doc/dhcp*/dhcpd.conf.sample
#   see 'man 5 dhcpd.conf'
#
# create new
# specify domain name
option domain-name "server.world";
# specify name server's hostname or IP address
option domain-name-servers dlp.server.world;
# default lease time
default-lease-time 600;
# max lease time
max-lease-time 7200;
# this DHCP server to be declared valid
authoritative;
# specify network address and subnet mask
subnet 10.47.58.0 netmask 255.255.255.0 {
    # specify the range of lease IP address
    range dynamic-bootp 10.47.58.200 10.47.58.254;
    # specify broadcast address
    option broadcast-address 10.47.58.255;
    # specify default gateway
    option routers 10.47.58.1;
}
# service dhcpd start
# chkconfig dhcpd on
# chkconfig xinetd on
# reboot
</code></pre>

<p>Get loaders to download the loaders to <code>/var/lib/cobbler/loaders</code>:  <br/>
!!! Notice, this step maybe failed because of networking issues!!!!</p>

<pre><code>$ cobbler get-loaders
</code></pre>

<p>Change xinted:</p>

<pre><code># cat  /etc/xinetd.d/rsync 
# default: off
# description: The rsync server is a good addition to an ftp server, as it \
#       allows crc checksumming etc.
service rsync
{
        disable = no
</code></pre>

<p>Edit iptables:</p>

<pre><code>$ sudo vim /etc/sysconfig/iptables
:OUTPUT ACCEPT [0:0]
-A INPUT -p udp -m multiport --dports 69,80,443,25151 -j ACCEPT 
-A INPUT -p tcp -m multiport --dports 69,80,443,25151 -j ACCEPT 
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$ sudo reboot
</code></pre>

<p>Install packages:</p>

<pre><code># yum install -y debmirror pykickstart cman
# cobbler check
# cobbler sync
</code></pre>

<h3>Import Systems</h3>

<p>Import 2 DVD iso via:</p>

<pre><code># mount -o loop -t iso9660 CentOS-6.5-x86_64-bin-DVD1.iso  /mnt1/
# cobbler import --name=CentOS-6.5 --arch=x86_64 --path=/mnt1
# mount -o loop -t iso9660 CentOS-6.5-x86_64-bin-DVD2.iso  /mnt2
# rsync -a '/mnt2/' /var/www/cobbler/ks_mirror/CentOS-6.5-x86_64/ --exclude-from=/etc/cobbler/rsync.exclude --progress
# COMPSXML=$(ls /var/www/cobbler/ks_mirror/CentOS-6.5-x86_64/repodata/*comps*.xml)
# createrepo -c cache -s sha --update --groupfile ${COMPSXML} /var/www/cobbler/ks_mirror/CentOS-6.5-x86_64/ 
</code></pre>

<p>Verify it via:</p>

<pre><code>[root@z_WHServer repodata]# cobbler distro list
   CentOS-6.5-x86_64
[root@z_WHServer repodata]# cobbler profile list
   CentOS-6.5-x86_64
[root@z_WHServer repodata]# cobbler distro report --name=CentOS-6.5-x86_64
Name                           : CentOS-6.5-x86_64
Architecture                   : x86_64
TFTP Boot Files                : {}
Breed                          : redhat
Comment                        : 
Fetchable Files                : {}
Initrd                         : /var/www/cobbler/ks_mirror/CentOS-6.5-x86_64/images/pxeboot/initrd.img
Kernel                         : /var/www/cobbler/ks_mirror/CentOS-6.5-x86_64/images/pxeboot/vmlinuz
</code></pre>

<p>Check if your tftp working:</p>

<pre><code># yum install tftp-server
# vim /etc/xinetd.d/tftp
# /sbin/chkconfig tftp on
# service xinetd start
# netstat -anp | grep 69
# tftp 10.47.58.2
get pxelinux.0
</code></pre>

<p>If successful, the pxelinux.0 will downloaded to your directory.</p>

<h3>Install New Systems</h3>

<p>Use a machine, configure to the same network, then start from pxe.</p>

<h3>Customize the KS file</h3>

<p>Generate kickstart configuration file via:</p>

<pre><code># system-config-kickstart 
</code></pre>

<p>Add a new profile via:</p>

<pre><code>[root@z_WHServer kickstarts]# cobbler profile add --name=CentOS6.5-Desktop --kickstart=/var/lib/cobbler/kickstarts/CentOS-6.5-x86_64/C
sktop.cfg --distro=CentOS-6.5-x86_64
[root@z_WHServer kickstarts]# cobbler profile list
   CentOS-6.5-x86_64
   CentOS6.5-Desktop
</code></pre>

<h3>Cobbler Web Interface</h3>

<pre><code>$ htdigest /etc/cobbler/users.digest "Cobbler" cobbler 
Which will prompt you for a new password. 
Once you have updated the password remember to run
$ cobbler sync
</code></pre>
]]></content>
  </entry>
  
</feed>
