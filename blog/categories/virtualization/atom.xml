<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-08-17T19:23:46+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatically Create Virtual Machine]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/13/automatically-create-virtual-machine/"/>
    <updated>2015-08-13T16:21:23+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/13/automatically-create-virtual-machine</id>
    <content type="html"><![CDATA[<p>Just record the whole scripts for create/define/start the vm machine.</p>

<pre><code>#!/bin/sh
# $1: The name of the virtual machine. 

### 1. Check Input Parameters. 
if [ $# != 1 ]
then
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "!!         Parameters error       !!"
  echo "!! Example: ./createvm.sh name    !!"
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  exit 1
fi

### 2. Create the qcow2 file in local directory. 
echo $1
qemu-img create -f qcow2 -b /home/juju/img/WolfHunter/SpaceWalk/Base/packer-ubuntu-1204-server-i386 $1.qcow2

### 3. Generate Random MAC Address.
printf -v macaddr "52:54:%02x:%02x:%02x:%02x" $(( $RANDOM &amp; 0xff)) $(( $RANDOM &amp; 0xff )) $(( $RANDOM &amp; 0xff)) $(( $RANDOM &amp; 0xff ))
# echo $macaddr
### 3.1 Check whether this MAC Address is in the host's existing items. 
declare maclist

### 3.2 Get the MAC Address List
for vm in $(virsh list --all | tail -n +3 |  awk '{print $2}')
do
        # Multiple NIC need this. 
    for mac_item in $(virsh dumpxml $vm | grep "mac address" | awk -F "'" '{print $2}')
                do
                        # echo $mac_item
                        maclist+=($mac_item)
                done
done

# echo ${maclist[*]} 
# echo ${#maclist[@]}

### 3.3 Processing possible duplicated problem. 
### We don't hope the generate random mac address to be duplicated, so write whatever you want to see under the while loop for debugging
### Judge if the generated random mac address duplicated. 
while [[ ${maclist[*]} =~ ${macaddr} ]]
do
        echo "yes, you entered while for changing the mac address!"
        printf -v macaddr "52:54:%02x:%02x:%02x:%02x" $(( $RANDOM &amp; 0xff)) $(( $RANDOM &amp; 0xff )) $(( $RANDOM &amp; 0xff)) $(( $RANDOM &amp; 0xff ))
        echo $macaddr
done

### 3.4 Only for debugging purpose, view result
### For debugging purpose
### if [[ ${maclist[*]} =~ ${macaddr} ]]
### then
###     echo "Yes, it's in the existing mac list"
### else
###     echo "Congratulations, it's safe to use this mac!"
### fi
### echo $macaddr

### 4. Create new xml file and modify the xml file.
### 4.1 Create the file
mkdir -p xml
cp ./Template.xml ./xml/$1.xml
### 4.2 Remove the uuid(Virt-manager will automatically generate it)
sed -i '/uuid/d' ./xml/$1.xml
### 4.3 Replace the MAC Address
sed -i -r "s/(.*)([a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2})(.*)/\1$macaddr\3/g" ./xml/$1.xml 
### 4.4 Replace the virt disk file
imagepath=($PWD/$1.qcow2)
echo $imagepath
sed -i "s#&lt;source file.*#&lt;source file='$imagepath'/&gt;#g"  ./xml/$1.xml

### 5. Change the VM Name
sed -i "s#&lt;name.*#&lt;name&gt;$1&lt;/name&gt;#g" ./xml/$1.xml

### 6. Define and Start VM Machine
virsh define $PWD/xml/$1.xml
virsh start $1
</code></pre>

<p>Steps for create the machine:</p>

<pre><code># ./createvm.sh zz_bee1
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trouble Shooting on SpaceWalk OSAD on Ubuntu Clients]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/12/trouble-shooting-on-spacewalk-osad-on-ubuntu-clients/"/>
    <updated>2015-08-12T11:25:34+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/12/trouble-shooting-on-spacewalk-osad-on-ubuntu-clients</id>
    <content type="html"><![CDATA[<h3>Problem</h3>

<p>On Clients(Ubuntu nodes), you will see lots of the following message in
<code>/var/log/osad</code>:</p>

<pre><code>$ tail /var/log/osad
2015-08-11 19:31:14 jabber_lib.main: Unable to connect to jabber servers, sleeping 78 seconds
2015-08-11 19:32:32 jabber_lib.main: Unable to connect to jabber servers, sleeping 117 seconds
</code></pre>

<p>When restart the osda service you will see following error message:</p>

<pre><code># service osad restart
OSAD SpaceWalk Deamon osad                                                     Traceback (most recent call last):
  File "/usr/share/rhn/osad/jabber_lib.py", line 252, in setup_connection
    c = self._get_jabber_client(js)
  File "/usr/share/rhn/osad/jabber_lib.py", line 309, in _get_jabber_client
    c.connect()
  File "/usr/share/rhn/osad/jabber_lib.py", line 583, in connect
    self.disconnect()
  File "/usr/share/rhn/osad/jabber_lib.py", line 653, in disconnect
    jabber.Client.disconnect(self)
  File "/usr/lib/python2.7/dist-packages/jabber/jabber.py", line 432, in disconnect
    xmlstream.Client.disconnect(self)
  File "/usr/lib/python2.7/dist-packages/jabber/xmlstream.py", line 388, in disconnect
    while self.process(): pass
  File "/usr/share/rhn/osad/jabber_lib.py", line 1059, in process
    raise JabberError("Premature EOF")
JabberError: Premature EOF
</code></pre>

<p>Though seeing this error, your osad will start and running, but with errors.</p>

<h3>Trouble Shooting</h3>

<p>Make sure the port 5222 and 5269 of spacewalk server are telnet-able from client machine:</p>

<pre><code>adminubuntu@spacewalknode1:~$ telnet spacewalk 5222
Trying 10.11.11.3...
Connected to spacewalk.
Escape character is '^]'.
^]
telnet&gt; quit
Connection closed.
adminubuntu@spacewalknode1:~$ telnet spacewalk 5269
Trying 10.11.11.3...
Connected to spacewalk.
Escape character is '^]'.
^]
telnet&gt; 
</code></pre>

<p>Make sure you register yourself on client using FQDN but not the IP Address:</p>

<pre><code># rhnreg_ks --activationkey=1-precise --serverUrl=http://spacewalk/XMLRPC --force
# service osad restart
</code></pre>

<p>If by this you won&rsquo;t pass the osad check, you should setup the local dns server, which
enable name resolve of <code>spacewalk</code>, you could take following article for reference:  <br/>
<a href="http://purplepalmdash.github.io/blog/2015/08/05/enable-dhcp-slash-dns-server-for-spacewalker-server/">http://purplepalmdash.github.io/blog/2015/08/05/enable-dhcp-slash-dns-server-for-spacewalker-server/</a></p>

<p>For checking the dns resole, run following command on client:</p>

<pre><code>adminubuntu@spacewalknode1:~$ dig spacewalk

; &lt;&lt;&gt;&gt; DiG 9.8.1-P1 &lt;&lt;&gt;&gt; spacewalk
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 16045
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;spacewalk.                     IN      A

;; ANSWER SECTION:
spacewalk.              604800  IN      A       10.11.11.3

;; AUTHORITY SECTION:
spacewalk.              604800  IN      NS      spacewalk.

;; Query time: 2 msec
;; SERVER: 10.11.11.3#53(10.11.11.3)
;; WHEN: Wed Aug 12 03:34:18 2015
;; MSG SIZE  rcvd: 57
</code></pre>

<h3>Result</h3>

<p>After resolving this problem, your log should like this:</p>

<p>On Server:</p>

<pre><code>$ tail /var/log/message
Aug 12 10:34:50 spacewalk jabberd/c2s[1379]: [9] [::ffff:10.11.11.100, port=45486] connect
Aug 12 10:34:50 spacewalk named[993]: error (network unreachable) resolving 'ns4.p27.dynect.net/A/IN': 2001:500:94::100#53
Aug 12 10:34:50 spacewalk jabberd/c2s[1379]: [9] created user: user=osad-c942811c1c; realm=
Aug 12 10:34:50 spacewalk jabberd/c2s[1379]: [9] registration succeeded, requesting user creation: jid=osad-c942811c1c@spacewalk
Aug 12 10:34:50 spacewalk jabberd/sm[1371]: created user: jid=osad-c942811c1c@spacewalk
Aug 12 10:34:50 spacewalk jabberd/c2s[1379]: [9] legacy authentication succeeded: host=, username=osad-c942811c1c, resource=osad, TLS negotiated
Aug 12 10:34:50 spacewalk jabberd/c2s[1379]: [9] requesting session: jid=osad-c942811c1c@spacewalk/osad
Aug 12 10:34:50 spacewalk jabberd/sm[1371]: session started: jid=osad-c942811c1c@spacewalk/osad
</code></pre>

<p>In SpaceWalk backend you will see:</p>

<p><img src="/images/2015_08_12_11_37_48_538x222.jpg" alt="/images/2015_08_12_11_37_48_538x222.jpg" /> <br/>
Now you could direct <code>push</code> your modification to clients in SpaceWalk backend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Added Precise Repository in SpaceWalk]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/11/added-precise-repository-in-spacewalk/"/>
    <updated>2015-08-11T16:26:32+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/11/added-precise-repository-in-spacewalk</id>
    <content type="html"><![CDATA[<h3>SpaceWalk Backend Configruation</h3>

<p>First Create the Channel:  <br/>
<img src="/images/2015_08_11_16_27_35_420x157.jpg" alt="/images/2015_08_11_16_27_35_420x157.jpg" />  <br/>
Then Create the Repository like following:  <br/>
<img src="/images/2015_08_11_16_28_21_562x226.jpg" alt="/images/2015_08_11_16_28_21_562x226.jpg" /> <br/>
Associate the channel together with repository:  <br/>
<img src="/images/2015_08_11_16_29_33_659x385.jpg" alt="/images/2015_08_11_16_29_33_659x385.jpg" /></p>

<h3>Install packages</h3>

<p>Do following for the prerequisition for syncing the repository.</p>

<pre><code># yum update python-debian
# vim  /usr/lib/python2.6/site-packages/debian/debfile.py 
PART_EXTS = ['gz', 'xz', 'lzma']
# wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
# rpm -ivh epel-release-6-8.noarch.rpm
# cat epel-testing.repo  | more
[epel-testing]
name=Extra Packages for Enterprise Linux 6 - Testing - $basearch
#baseurl=http://download.fedoraproject.org/pub/epel/testing/6/$basearch
#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=testing-epel6&amp;arch=$basearch
baseurl=http://mirrors.aliyun.com/epel/testing/6/x86_64/
failovermethod=priority
</code></pre>

<h3>Sync With Local Repository</h3>

<p>An example of precise-backports is listed like following, take this example for
example, create other 3 shell scripts:</p>

<pre><code># cat precise-backports.sh
until spacewalk-debian-sync.pl --username xxxxx --password xxxxxx --channel 'precise-backports' --url 'http://192.168.0.79/ubuntu/dists/precise-backports/main/binary-amd64/'
do
        echo "retry again"
        sleep 30
done
# ls *.sh
precise-backports.sh  precise-security.sh  precise.sh  precise-update.sh
</code></pre>

<p>Sync repository via <code>sh precise-backports.sh</code> or other scripts.</p>

<p>After a long while, you repository will be updated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Ubuntu Agent Into SpaceWalk]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/10/add-ubuntu-agent-into-spacewalk/"/>
    <updated>2015-08-10T14:53:28+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/10/add-ubuntu-agent-into-spacewalk</id>
    <content type="html"><![CDATA[<p>Install via:</p>

<pre><code>$ sudo apt-get install debhelper build-essential gcc devscripts git intltool quilt \
automake python-all-dev libnl-route-3-dev asciidoc pkg-config libxml2-utils \
docbook-xml xsltproc sgml-data docbook-xs
$ sudo apt-get install apt-transport-spacewalk rhnsd
</code></pre>

<p>Fix the bug of XMLRPCLib:</p>

<pre><code>--- /usr/lib/python2.7/xmlrpclib.py 2013-05-28 20:44:38.000000000 +0200
+++ new/xmlrpclib.py 2013-05-28 20:44:24.000000000 +0200
@@ -654,8 +654,8 @@
f(self, value, write)

def dump_nil (self, value, write):
- if not self.allow_none:
- raise TypeError, "cannot marshal None unless allow_none is enabled"
+# if not self.allow_none:
+# raise TypeError, "cannot marshal None unless allow_none is enabled"
write("&lt;value&gt;&lt;nil/&gt;&lt;/value&gt;")
dispatch[NoneType] = dump_nil
</code></pre>

<p>Create a key for managing trusty clients:  <br/>
<img src="/images/2015_08_10_15_18_26_629x476.jpg" alt="/images/2015_08_10_15_18_26_629x476.jpg" /></p>

<p>Register with SpaceWalk Server:</p>

<pre><code>$ sudo mkdir /var/lock/subsys
$ sudo rhnreg_ks --activationkey=1-TrustyKey --serverUrl=http://10.9.10.13/XMLRPC
Warning: unable to enable rhnsd with chkconfig
</code></pre>

<p>Seeing the warning doesn&rsquo;t matter. Now your computer is registered into the SpaceWalker
Root Node.</p>

<p>Make sure the subscribed software are listed as following:</p>

<p><img src="/images/2015_08_10_16_00_26_795x557.jpg" alt="/images/2015_08_10_16_00_26_795x557.jpg" /></p>

<p>Now change the apt configuration of the registed nodes:</p>

<pre><code># echo 'deb spacewalk://10.9.10.13/XMLRPC channels: trusty-main trusty-updates trusty-backports trusty-security'&gt; /etc/apt/sources.list.d/spacewalk.list
# mv /etc/apt/sources.list /etc/apt/sources.list.bak
# apt-get update
</code></pre>

<p>After updating, the repo will be refresed as:</p>

<pre><code># cat /etc/apt/sources.list.d/spacewalk.list 
deb spacewalk://10.9.10.13 channels: main trusty-backports trusty-updates trusty-security
</code></pre>

<p>Seems something error happened, syncing the repository, tomorrow will use precise for
verification.</p>

<h3>Use Precise</h3>

<p>Manually build the package and install the generated packages.</p>

<pre><code># apt-get install debhelper build-essential gcc devscripts git intltool quilt automake  python-all-dev libnl-route-3-dev asciidoc pkg-config libxml2-utils docbook-xml xsltproc  sgml-data docbook-xsl
# apt-get -f install

# git clone git://anonscm.debian.org/collab-maint/spacewalk/rhnlib.git
# git clone git://anonscm.debian.org/collab-maint/spacewalk/rhn-client-tools.git  rhn-client-tools
# git clone git://anonscm.debian.org/collab-maint/spacewalk/python-ethtool.git  python-ethtool
# git clone git://anonscm.debian.org/collab-maint/spacewalk/rhnsd.git rhnsd
# git clone git://anonscm.debian.org/collab-maint/spacewalk/apt-spacewalk.git

# debuild -i -us -uc -b
# dpkg -i *.deb
# apt-get -f install
</code></pre>

<p>Change the code for bug-fix:</p>

<pre><code>--- /usr/lib/python2.7/xmlrpclib.py 2013-05-28 20:44:38.000000000 +0200
+++ new/xmlrpclib.py 2013-05-28 20:44:24.000000000 +0200
@@ -654,8 +654,8 @@
f(self, value, write)

def dump_nil (self, value, write):
- if not self.allow_none:
- raise TypeError, "cannot marshal None unless allow_none is enabled"
+# if not self.allow_none:
+# raise TypeError, "cannot marshal None unless allow_none is enabled"
write("&lt;value&gt;&lt;nil/&gt;&lt;/value&gt;")
dispatch[NoneType] = dump_nil
</code></pre>

<p>Register to Server:</p>

<pre><code># apt-get install python-libxml2
# mkdir /var/lock/subsys
# rhnreg_ks --activationkey=1-precise --serverUrl=http://10.9.10.13/XMLRPC
</code></pre>

<p>Use Spacewalk for install the packages:</p>

<pre><code># cat /etc/apt/sources.list.d/spacewalk.list 
deb spacewalk://10.9.10.13 channels: main precise-backports precise-updates precise-security
# mv /etc/apt/sources.list /etc/apt/sources.list.back
# apt-get update
</code></pre>

<p>Now your repositories are managed by SpaceWalk.</p>

<h3>Upgrade in Client</h3>

<p>List all of the channel that you subscribed:</p>

<pre><code># rhn-channel --list
</code></pre>

<p>Check the update and apply them:</p>

<pre><code># rhn_check
</code></pre>

<h3>Install Packages in Client</h3>

<p>Take install libreoffice for example:   <br/>
First go to this page and select install new software:</p>

<p><img src="/images/2015_08_11_11_19_58_665x396.jpg" alt="/images/2015_08_11_11_19_58_665x396.jpg" /></p>

<p>Then search and get the searched result:</p>

<p><img src="/images/2015_08_11_11_22_18_684x225.jpg" alt="/images/2015_08_11_11_22_18_684x225.jpg" />  <br/>
Via <code>rhn_check</code> on client you will really install libreoffice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Kickstartable ISO]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/06/build-kickstartable-iso/"/>
    <updated>2015-08-06T22:11:44+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/06/build-kickstartable-iso</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<pre><code># mount -t iso9660 -o loop ./ubuntu1404.iso /mnt
# cp -rT /mnt/ iso/
</code></pre>

<p>Make a kickstart file use <code>system-config-kickstart</code>, and copy it to:</p>

<pre><code>$ cp ks.cfg ./
$ vim isolinux/langlinux
en
$ vim isolinux/txt.cfg
default install
label install
  menu label ^Install Ubuntu Server
  kernel /install/vmlinuz
  append  file=/cdrom/preseed/ubuntu-server.seed initrd=/install/initrd.gz ks=cdrom:/ks.cfg --
</code></pre>

<h3>Make ISO</h3>

<p>Make the iso.</p>

<pre><code>$ chmod a+w ./iso/isolinux/isolinux.bin 
$ mkisofs -J -l -b isolinux/isolinux.bin -no-emul-boot -boot-load-size 4 -boot-info-table -z -iso-level 4 -c isolinux/isolinux.cat -o /material/iso/newiso2.iso -joliet-long ./iso/
</code></pre>

<h3>Know Issue</h3>

<p>umount the partition which has been mounted.</p>
]]></content>
  </entry>
  
</feed>
