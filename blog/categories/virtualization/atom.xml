<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-07-09T20:22:07+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WH Worktips(8)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/09/wh-worktips-8/"/>
    <updated>2015-07-09T11:08:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/09/wh-worktips-8</id>
    <content type="html"><![CDATA[<p>After Cobbler import and deployment, simply install download plugins,
Create the repo, and edit the repo definition file in the deployed node:</p>

<pre><code>[root@node164 ~]# cat /etc/yum.repos.d/cloudstack.repo 
[cloudstack]
name=cloudstack
baseurl=http://10.47.58.2/4.5CentOS7/
enabled=1
gpgcheck=0
</code></pre>

<p>Steps for installing the cloudstack on CentOS7:</p>

<pre><code># yum install -y ntp
[root@node164 ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
10.47.58.164    node164
[root@node164 ~]# vim /etc/selinux/config 
SELINUX=permissive
SELINUXTYPE=targeted
[root@node164 ~]# yum install libselinux-python
# yum install -y wget 
# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
# yum install -y python-pip
# yum install -y mysql

[root@node164 ~]# sudo rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm
[root@node164 ~]# sudo yum -y install mysql-community-server
[root@node164 ~]# yum install -y MySQL-python
# vim /etc/my.cnf
    # CloudStack MySQL settings
    innodb_rollback_on_timeout=1
    innodb_lock_wait_timeout=600
    max_connections=700
    log-bin=mysql-bin
    binlog-format = 'ROW'
    bind-address=0.0.0.0

    [mysqld_safe]
    log-error=/var/log/mariadb/mariadb.log
[root@node164 ~]# service mysqld start
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(7)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/07/wh-worktips-7/"/>
    <updated>2015-07-07T15:22:23+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/07/wh-worktips-7</id>
    <content type="html"><![CDATA[<h3>Cloudstack Agent Repository</h3>

<p>Setup the CloudStack Agent Repository via:</p>

<pre><code># yum install yum-plugin-downloadonly
# vim /etc/yum.repos.d/cloudstack.repo
[cloudstack]
name=cloudstack
baseurl=http://cloudstack.apt-get.eu/rhel/4.3/
enabled=1
gpgcheck=0
# mkdir Code
# yum install --downloadonly --downloaddir=/root/Code/ cloud-agent
</code></pre>

<p>Now all of the installation rpm packages has been downloaded to directory, simply upload them to a server, use <code>createrepo .</code> to generate the repository, and link them to nginx&rsquo;s root directory.  <br/>
Mine is under:  <br/>
<a href="http://192.168.0.79/4.4.3CloudStackAgent/">http://192.168.0.79/4.4.3CloudStackAgent/</a></p>

<h3>Agent Installation Steps</h3>

<p>In a new deployed machine:</p>

<pre><code># mv CentOS-* /root/
[root@node161 yum.repos.d]# cat cloudstack.repo 
[cloudstack]
name=cloudstack
baseurl=http://192.168.0.79/4.4.3CloudStackAgent/
enabled=1
gpgcheck=0
# yum install -y cloud-agent
</code></pre>

<p>Configure qemu and libvirt:</p>

<pre><code>[root@node161 yum.repos.d]# cp /etc/libvirt/qemu.conf /etc/libvirt/qemu.conf.orig
[root@node161 yum.repos.d]# sed -i '/#vnc_listen = "0.0.0.0"/ a vnc_listen = "0.0.0.0"' /etc/libvirt/qemu.conf
[root@node161 yum.repos.d]# diff -du /etc/libvirt/qemu.conf.orig /etc/libvirt/qemu.conf


# cp /etc/libvirt/libvirtd.conf /etc/libvirt/libvirtd.conf.orig
# sed -i '/#listen_tls = 0/ a listen_tls = 0' /etc/libvirt/libvirtd.conf
# sed -i '/#listen_tcp = 1/ a listen_tcp = 1' /etc/libvirt/libvirtd.conf
# sed -i '/#tcp_port = "16509"/ a tcp_port = "16509"' /etc/libvirt/libvirtd.conf
# sed -i '/#auth_tcp = "sasl"/ a auth_tcp = "none"' /etc/libvirt/libvirtd.conf
# sed -i '/#mdns_adv = 1/ a mdns_adv = 0' /etc/libvirt/libvirtd.conf
# diff -du /etc/libvirt/libvirtd.conf.orig  /etc/libvirt/libvirtd.conf

[root@node161 yum.repos.d]# cp /etc/sysconfig/libvirtd /etc/sysconfig/libvirtd.orig
[root@node161 yum.repos.d]# sed -i '/#LIBVIRTD_ARGS="--listen"/ a LIBVIRTD_ARGS="--listen"' /etc/sysconfig/libvirtd
[root@node161 yum.repos.d]# diff -du /etc/sysconfig/libvirtd.orig  /etc/sysconfig/libvirtd
[root@node161 yum.repos.d]# rm -f /etc/libvirt/libvirtd.conf.orig 

# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
127.0.0.1       node161
</code></pre>

<p>Now you could add the host into the cloudstack management interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Private NAT Networking in XenServer]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/06/add-private-nat-networking-in-xenserver/"/>
    <updated>2015-07-06T11:42:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/06/add-private-nat-networking-in-xenserver</id>
    <content type="html"><![CDATA[<h3>Create Networking In XenCenter</h3>

<p>Create the networking under the XenCenter UI&rsquo;s tab &ldquo;Networking&rdquo;.</p>

<h3>Networking Setting</h3>

<p>Enable the ip forward:</p>

<pre><code># vim /etc/sysctl.conf
net.ipv4.ip_forward = 1
# sysctl -p 
# cat /proc/sys/net/ipv4/ip_forward 
1
</code></pre>

<p>Use iptables for forwarding the network flow:</p>

<pre><code># iptables -A FORWARD --in-interface xapi0 -j ACCEPT
# iptables --table nat -A POSTROUTING --out-interface eth0 -j MASQUERADE
</code></pre>

<p>But this didn&rsquo;t bring up the internal networking, after discussing with college, edit the file:</p>

<pre><code>[root@xenserver-WolfHunter ~]# cat /etc/sysconfig/iptables
+++++  *nat
+++++  :PREROUTING ACCEPT [7019:539216]
+++++  :INPUT ACCEPT [77:3825]
+++++  :OUTPUT ACCEPT [104:6495]
+++++  :POSTROUTING ACCEPT [53:3228]
+++++  -A POSTROUTING -o xenbr0 -j MASQUERADE
+++++  COMMIT
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:RH-Firewall-1-INPUT - [0:0]
-A INPUT -j RH-Firewall-1-INPUT
++++ -A FORWARD -i xapi0 -j ACCEPT
-A FORWARD -j RH-Firewall-1-INPUT
-A RH-Firewall-1-INPUT -i lo -j ACCEPT
-A RH-Firewall-1-INPUT -p icmp --icmp-type any -j ACCEPT
# DHCP for host internal networks (CA-6996)
-A RH-Firewall-1-INPUT -p udp -m udp --dport 67 --in-interface xenapi -j ACCEPT
-A RH-Firewall-1-INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
# Linux HA hearbeat (CA-9394)
-A RH-Firewall-1-INPUT -m conntrack --ctstate NEW -m udp -p udp --dport 694 -j ACCEPT
-A RH-Firewall-1-INPUT -m conntrack --ctstate NEW -m tcp -p tcp --dport 22 -j ACCEPT
-A RH-Firewall-1-INPUT -m conntrack --ctstate NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A RH-Firewall-1-INPUT -m conntrack --ctstate NEW -m tcp -p tcp --dport 443 -j ACCEPT
-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited
COMMIT
</code></pre>

<p>Restart XenServer and waiting for verification.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install CloudStack All-In-One on Ubuntu14.04]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/05/install-cloudstack-all-in-one-on-ubuntu14-dot-04/"/>
    <updated>2015-07-05T16:08:59+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/05/install-cloudstack-all-in-one-on-ubuntu14-dot-04</id>
    <content type="html"><![CDATA[<p>Refers to:   <br/>
<a href="http://www.greenhills.co.uk/2015/02/23/cloudstack-4.4-single-server-on-ubuntu-14.04.1-with-kvm.html">http://www.greenhills.co.uk/2015/02/23/cloudstack-4.4-single-server-on-ubuntu-14.04.1-with-kvm.html</a></p>

<h3>Preparation For Packages</h3>

<p>Install reprepro:</p>

<pre><code># apt-get install -y reprepro
</code></pre>

<pre><code># mkdir -p /srv/reprepro
root@DebServer:/srv/reprepro# ls
conf  db  dists  incoming  indices  lists  logs  pool  project  tmp
root@DebServer:/srv/reprepro# ls conf/
distributions  incomming  updates  uploaders
root@DebServer:/srv/reprepro# cat conf/distributions 
Origin: Alveonet
Label: Alveonet
Suite: trusty
Codename: trusty
Version: 14.04
Architectures: i386 amd64 source
Components: main cloudstack43 cloudstack44 cloudstack45 cloudstack
Description: Alveonet specific (or backported) packages
#SignWith: dash1982
DebOverride: ../indices/override.trusty.main
UDebOverride: ../indices/override.tursy.main.debian-installer
DscOverride: ../indices/override.trusty.main.src
DebIndices: Packages Release . .gz .bz2
UDebIndices: Packages . .gz .bz2
DscIndices: Sources Release .gz .bz2
Contents: . .gz .bz2
Update: - cloudstack45 cloudstack43 cloudstack44
Log: packages.alveonet.org.log
root@DebServer:/srv/reprepro# cat conf/incomming 
Name: default
IncomingDir: incoming
TempDir: tmp
Allow: trusty trusty-backports
Cleanup: on_deny on_error
root@DebServer:/srv/reprepro# cat conf/updates 
Name: cloudstack44
Method: http://cloudstack.apt-get.eu/ubuntu
#VerifyRelease: 86C278E3
Suite: trusty
Architectures: amd64
GetInRelease: no
#Components: 4.3&gt;main
Components: 4.4&gt;cloudstack44

# Name: cloudstack44
# Method: http://cloudstack.apt-get.eu/ubuntu
# #VerifyRelease: 86C278E3
# Suite: trusty
# Architectures: amd64
# GetInRelease: no
# #Components: 4.3&gt;main
# Components: 4.4&gt;main


Name: cloudstack45
Method: http://cloudstack.apt-get.eu/ubuntu
#VerifyRelease: 86C278E3
Suite: trusty
Architectures: amd64
GetInRelease: no
#Components: 4.3&gt;main
Components: 4.5&gt;cloudstack45


Name: cloudstack43
Method: http://cloudstack.apt-get.eu/ubuntu
#VerifyRelease: 86C278E3
Suite: trusty
Architectures: amd64
GetInRelease: no
#Components: 4.3&gt;main
Components: 4.3&gt;cloudstack43
root@DebServer:/srv/reprepro# cat conf/uploaders 
allow * by unsigned



# reprepro -Vb /srv/reprepro export
# reprepro update
</code></pre>

<p>By doing this you could make a local reprepro created repository.</p>

<p>TBD</p>

<h3>Installation Steps</h3>

<h4>System Preparation</h4>

<p>First install Ubuntu14.04, I use Cobbler Server&rsquo;s PXE Installation.</p>

<p>Change the Root Permit login under <code>/etc/ssh/sshd_config</code> and restart the ssh service.</p>

<p>Change the IP Address to 10.10.10.2 via:</p>

<pre><code>root@Ubuntu-14:~# cat /etc/network/interfaces
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
address 10.10.10.2
netmask 255.255.255.0
gateway 10.10.10.1
dns-nameservers 180.76.76.76
</code></pre>

<p>Relogin to the system, and begin to install the packages.</p>

<pre><code># vi /etc/apt/source.list
deb http://192.168.1.111 amd64/
deb http://192.168.1.111/reprepro/      trusty  cloudstack44
# apt-get update &amp;&amp; apt-get install vim
</code></pre>

<p>I use 192.168.1.111 because I cached all of the required packages in this server, thus it could speed-up the deployment.</p>

<h4>Server Configuration</h4>

<p>Configure the Server&rsquo;s hostname:</p>

<pre><code>root@Ubuntu-14:~# cat /etc/hostname 
CS
root@Ubuntu-14:~# cat /etc/hosts
127.0.0.1       localhost
10.10.0.2       CS
127.0.1.1       CS.CSDomain     CS

root@Ubuntu-14:~# reboot
# hostname --fqdn
CS
</code></pre>

<p>Now configure the NTP via:</p>

<pre><code># apt-get purge ntp
# apt-get install openntpd
</code></pre>

<p>Configure the Network:</p>

<pre><code># apt-get install bridge-utils
# cat /etc/network/interfaces

    # The loopback network interface
    auto lo
    iface lo inet loopback

    # The primary network interface
    auto eth0
    iface eth0 inet manual


    auto cloudbr0
    iface cloudbr0 inet static
            address 10.10.10.2
            netmask 255.255.255.0
            gateway 10.10.10.1
            dns-nameservers 180.76.76.76
            bridge-ports eth0
            bridge_fd 5
            bridge_stp off
            bridge_maxwait 1

    # Private network
    auto cloudbr1
    iface cloudbr1 inet manual
            bridge_ports none
            bridge_fd 5
            bridge_stp off
            bridge_maxwait 1
# reboot
</code></pre>

<p>Now the Network Bridge is configured.</p>

<h4>CloudStack Installation</h4>

<p>Since all of the packages are cached into LAN environment, simply type following command for installing:</p>

<pre><code># apt-get install cloudstack-management
</code></pre>

<p>Then Install the database server:</p>

<pre><code># apt-get install mysql-server
# vim /etc/mysql/conf.d/cloudstack.cnf
[mysqld]
innodb_rollback_on_timeout=1
innodb_lock_wait_timeout=600
max_connections=350
log-bin=mysql-bin
binlog-format = 'ROW'
root@CS:~# service mysql restart
root@CS:~# cloudstack-setup-databases cloud:engine@localhost --deploy-as=root:engine -e file -m mymskey44 -k mydbkey00
</code></pre>

<h4>NFS Storage Preparation</h4>

<p>Add export directory:</p>

<pre><code># mkdir -p /export/primary /export/secondary
# apt-get install nfs-kernel-server
# vim /etc/exports
/export  *(rw,async,no_root_squash,no_subtree_check)
# cp /etc/default/nfs-common /etc/default/nfs-common.orig
# sed -i '/NEED_STATD=/ a NEED_STATD=yes' /etc/default/nfs-common
# sed -i '/STATDOPTS=/ a STATDOPTS="--port 662 --outgoing-port 2020"' /etc/default/nfs-common
# diff -du /etc/default/nfs-common.orig /etc/default/nfs-common

root@CS:~# cat /etc/modprobe.d/lockd.conf 
options lockd nlm_udpport=32769 nlm_tcpport=32803
root@CS:~# service nfs-kernel-server restart
root@CS:~# showmount -e 127.0.0.1
Export list for 127.0.0.1:
/export *
</code></pre>

<p>Mount it via:</p>

<pre><code>root@CS:~# mkdir -p /mnt/primary /mnt/secondary
root@CS:~# tail -2 /etc/fstab
10.10.10.2:/export/primary   /mnt/primary    nfs rsize=8192,wsize=8192,timeo=14,intr,vers=3,noauto  0   2
10.10.10.2:/export/secondary /mnt/secondary  nfs rsize=8192,wsize=8192,timeo=14,intr,vers=3,noauto  0   2
root@CS:~# mount /mnt/primary/
root@CS:~# mount /mnt/secondary/
root@CS:~# mount | tail -2
10.10.10.2:/export/primary on /mnt/primary type nfs (rw,rsize=8192,wsize=8192,timeo=14,intr,vers=3,addr=10.10.10.2)
10.10.10.2:/export/secondary on /mnt/secondary type nfs (rw,rsize=8192,wsize=8192,timeo=14,intr,vers=3,addr=10.10.10.2)
</code></pre>

<h4>Cloudstack Agent Installation</h4>

<p>Install it via:</p>

<pre><code>root@CS:~# apt-get install cloudstack-agent
root@CS:~# cp /etc/libvirt/libvirtd.conf /etc/libvirt/libvirtd.conf.orig
root@CS:~# sed -i '/#listen_tls = 0/ a listen_tls = 0' /etc/libvirt/libvirtd.conf
root@CS:~# sed -i '/#listen_tcp = 1/ a listen_tcp = 1' /etc/libvirt/libvirtd.conf
root@CS:~# sed -i '/#tcp_port = "16509"/ a tcp_port = "16509"' /etc/libvirt/libvirtd.conf
root@CS:~# sed -i '/#auth_tcp = "sasl"/ a auth_tcp = "none"' /etc/libvirt/libvirtd.conf
root@CS:~# diff -du /etc/libvirt/libvirtd.conf.orig /etc/libvirt/libvirtd.conf
root@CS:~# cp /etc/default/libvirt-bin /etc/default/libvirt-bin.orig
root@CS:~# sed -i -e 's/libvirtd_opts="-d"/libvirtd_opts="-d -l"/' /etc/default/libvirt-bin
root@CS:~# service libvirt-bin restart
root@CS:~# cp /etc/libvirt/qemu.conf /etc/libvirt/qemu.conf.orig
root@CS:~# sed -i '/#vnc_listen = "0.0.0.0"/ a vnc_listen = "0.0.0.0"' /etc/libvirt/qemu.conf
root@CS:~# diff -du /etc/libvirt/qemu.conf.orig /etc/libvirt/qemu.conf
root@CS:~# service libvirt-bin restart
root@CS:~# ln -s /etc/apparmor.d/usr.sbin.libvirtd /etc/apparmor.d/disable/
root@CS:~# ln -s /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper /etc/apparmor.d/disable/
root@CS:~# apparmor_parser -R /etc/apparmor.d/usr.sbin.libvirtd
root@CS:~# apparmor_parser -R /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper
root@CS:~# service libvirt-bin restart
</code></pre>

<h4>Configure FireWall</h4>

<p>Open the following ports:</p>

<pre><code>root@CS:~# ufw allow proto tcp from any to any port 22
Rules updated
Rules updated (v6)
root@CS:~# ufw allow proto tcp from any to any port 1798
Rules updated
Rules updated (v6)
root@CS:~# ufw allow proto tcp from any to any port 16509
Rules updated
Rules updated (v6)
root@CS:~# ufw allow proto tcp from any to any port 5900:6100
Rules updated
Rules updated (v6)
root@CS:~# ufw allow proto tcp from any to any port 49152:49216
Rules updated
Rules updated (v6)
</code></pre>

<p>Now restart and verify the NFS working.</p>

<pre><code>root@CS:~# rpcinfo -u 10.10.10.2 mount
program 100005 version 1 ready and waiting
program 100005 version 2 ready and waiting
program 100005 version 3 ready and waiting
root@CS:~# showmount -e 10.10.10.2
Export list for 10.10.10.2:
/export *
root@CS:~# mount /mnt/primary/
root@CS:~# mount /mnt/secondary/
</code></pre>

<p>Added the System Template:</p>

<pre><code>root@CS:~# /usr/share/cloudstack-common/scripts/storage/secondary/cloud-install-sys-tmplt -m /mnt/secondary -u http://192.168.1.111/systemvm64template-4.4.1-7-kvm.qcow2.bz2  -h kvm -F
......
Successfully installed system VM template  to /mnt/secondary/template/tmpl/1/3/
</code></pre>

<h3>Cloudstack</h3>

<p>First manually start the services:</p>

<pre><code>service cloudstack-management status
service cloudstack-agent status
service tomcat6 status

service cloudstack-management stop
service tomcat6 stop
service cloudstack-agent stop
ps -efl | grep java

service cloudstack-management start
service cloudstack-management status
service cloudstack-agent start
service cloudstack-agent status
</code></pre>

<p>Now setup the UI via visiting <code>http://10.10.10.2:8080/client</code>, usename/password: admin/password:</p>

<pre><code>Choose "Continue with basic installation". This will start a wizard that will walk through the configuration. You will need to adjust the network values for your environment, and make sure you use appropiate, free, ranges.

Add a new zone named "zone1", DNS1 10.10.10.1 and Internal DNS 10.10.10.1.
Add a new pod named "pod1", gateway 10.10.10.1, netmask 255.255.255.0, IP range 10.10.10.160-10.10.10.169.
Add a guest network, gateway 10.10.10.1, netmask 255.255.255.0, IP range 10.10.10.170-192.168.77.230.
Add a cluster named cluster1, Hypervisor KVM.
Add a host. Host Name "CS", user root, passsword for the root linux user.
Add primary storage: name primary1, protocol NFS, Scope Cluster, server 10.10.10.10, path /export/primary.
Add secondary storage: NFS server 10.10.10.10, path /export/secondary.
Hit Launch and pray.
This should go through a sequence of setup.
</code></pre>

<p>Now you could enjoy the cloudstack all-in-one</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preseed File for Ubuntu1404 in CobblerServer]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/04/preseed-file-for-ubuntu1404-in-cobblerserver/"/>
    <updated>2015-07-04T14:57:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/04/preseed-file-for-ubuntu1404-in-cobblerserver</id>
    <content type="html"><![CDATA[<h3>Proseed File</h3>

<pre><code>d-i time/zone string Asia/Shanghai

# Setup the installation source
d-i mirror/country string manual
d-i mirror/http/hostname string $http_server
#d-i mirror/http/directory string $install_source_directory
d-i mirror/http/directory string /cobbler/ks_mirror/Ubuntu-14.04-x86_64/ubuntu
d-i mirror/http/proxy string
d-i apt-setup/security_host string $http_server
d-i apt-setup/security_path string /cobbler/ks_mirror/Ubuntu-14.04-x86_64/ubuntu
</code></pre>

<h3>Local Repository</h3>

<p>In one installed machine, do following for getting the repository of all of the installed packages:</p>

<pre><code>$ sudo apt-get install dselect
$ dpkg --get-selections | grep -v deinstall&gt;InstalledPackage.txt
$ awk {'print $1'} InstalledPackage.txt | xargs apt-get download
</code></pre>

<p>Use nginx for sharing the repository:</p>

<pre><code>$ sudo apt-get install -y nginx
$ sudo vim /etc/nginx/site-enabled/default
server {
        listen 80 default_server;
        listen [::]:80 default_server ipv6only=on;

        root /var/www/html;
        index index.html index.htm;

        # Make site accessible from http://localhost/
        server_name localhost;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
                autoindex on;
                # Uncomment to enable naxsi on this location
$ sudo service nginx restart
</code></pre>

<p>Now generate the repository server:</p>

<pre><code>$ mkdir -p /var/www/html/amd64
$ mv /root/Code/*.deb /var/www/html/amd64
$ cd /var/www/html/
$ dpkg-scanpackages amd64/ | gzip -9c &gt; amd64/Packages.gz
$ mv /root/Code/InstalledPackage.txt /var/www/html
</code></pre>

<h3>Use Local Repository</h3>

<p>Change the repoisoty setting:</p>

<pre><code>root@Ubuntu-14:~# cat /etc/apt/sources.list
deb http://192.168.1.111 amd64/
root@Ubuntu-14:~# apt-get update &amp;&amp;  apt-get install -y dselect
root@Ubuntu-14:~# dselect update
root@Ubuntu-14:~# wget http://192.168.1.11/InstalledPackage.txt
root@Ubuntu-14:~# dpkg --set-selections &lt; InstalledPackage.txt &amp;&amp; apt-get -u dselect-upgrade 
</code></pre>

<p>After updating, you have the same system as your server.</p>
]]></content>
  </entry>
  
</feed>
