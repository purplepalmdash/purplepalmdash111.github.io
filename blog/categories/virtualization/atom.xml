<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-07-19T14:31:02+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Migration of KVM]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/19/on-migration-of-kvm/"/>
    <updated>2015-07-19T13:31:03+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/19/on-migration-of-kvm</id>
    <content type="html"><![CDATA[<h3>Migration</h3>

<p>First create the qemu based vm:</p>

<pre><code>$ pwd
/media/arch/home/juju/img/migration
$ qemu-img create -f qcow2 ubuntu1504.qcow2 100G
$ sudo qemu-system-x86_64 -enable-kvm -m 512 -smp 4 -name ubuntu1504 -monitor stdio -boot c -drive file=/media/arch/home/juju/img/migration/ubuntu1504.qcow2,if=none,id=drive-virtio-disk0,boot=on -device virtio-blk-pci,bus=pci.0,addr=0x4,drive=drive-virtio-disk0,id=virtio-disk0 -drive file=/media/arch/home/dash/iso/ubuntu-15.04-server-amd64.iso,if=none,media=cdrom,id=drive-ide0-1-0 -device ide-drive,bus=ide.1,unit=0,drive=drive-ide0-1-0,id=ide0-1-0 -device virtio-net-pci,vlan=0,id=net0,mac=52:54:00:13:08:96 -net tap -vnc 127.0.0.1:3
</code></pre>

<p>After Installation, startup the vm via(didn&rsquo;t attach the file):</p>

<pre><code>$ sudo qemu-system-x86_64 -enable-kvm -m 512 -smp 4 -name ubuntu1504 -monitor stdio -boot c -drive file=/media/arch/home/juju/img/migration/ubuntu1504.qcow2,if=none,id=drive-virtio-disk0,boot=on -device virtio-blk-pci,bus=pci.0,addr=0x4,drive=drive-virtio-disk0,id=virtio-disk0 -drive if=none,media=cdrom,id=drive-ide0-1-0 -device ide-drive,bus=ide.1,unit=0,drive=drive-ide0-1-0,id=ide0-1-0 -device virtio-net-pci,vlan=0,id=net0,mac=52:54:00:13:08:96 -net tap -vnc 127.0.0.1:3
</code></pre>

<p>Use <code>top -d 1</code> for every second refreshed.</p>

<p>The same environment is set as the src machine.</p>

<pre><code>$ qemu-img create -f qcow2 dest.img 20G
$ qemu-system-x86_64 -enable-kvm -m 512 -smp 4 -name ubuntu1504 -monitor stdio -boot c -drive file=/root/Code/dest.img,if=none,id=drive-virtio-disk0,boot=on -device virtio-blk-pci,bus=pci.0,addr=0x4,drive=drive-virtio-disk0,id=virtio-disk0 -drive if=none,media=cdrom,id=drive-ide0-1-0 -device ide-drive,bus=ide.1,unit=0,drive=drive-ide0-1-0,id=ide0-1-0 -device virtio-net-pci,vlan=0,id=net0,mac=52:54:00:13:08:96 -net tap -vnc 127.0.0.1:8
(qemu) info status
VM status: paused (inmigrate)
</code></pre>

<p>Start migration in the src side via:</p>

<pre><code>(qemu) migrate -d -b tcp:192.168.1.18:8888
(qemu) info migrate
</code></pre>

<p>In destination machine, you can see the status of the migration.</p>

<p>After migration, the machine stays its top output to the terminal.</p>

<h3>Trouble Shooting On Newly Installed Arch</h3>

<h4>Bug1 virtual network start fail</h4>

<p>libvirt via virt-manager virtual network start failed.   <br/>
Change:</p>

<pre><code>--- libvirt-1.2.16.orig/src/util/virfirewall.c  2015-05-23 08:56:12.000000000 -0400
+++ libvirt-1.2.16.new/src/util/virfirewall.c   2015-06-18 10:01:51.954157612 -0400
@@ -932,14 +932,14 @@

     virMutexLock(&amp;ruleLock);

-    if (currentBackend == VIR_FIREWALL_BACKEND_AUTOMATIC) {
+//    if (currentBackend == VIR_FIREWALL_BACKEND_AUTOMATIC) {
         /* a specific backend should have been set when the firewall
          * object was created. If not, it means none was found.
          */
-        virReportError(VIR_ERR_INTERNAL_ERROR, "%s",
-                       _("Failed to initialize a valid firewall backend"));
-        goto cleanup;
-    }
+//        virReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+//                       _("Failed to initialize a valid firewall backend"));
+//        goto cleanup;
+//    }
     if (!firewall || firewall-&gt;err == ENOMEM) {
         virReportOOMError();
         goto cleanup;
</code></pre>

<p>For building the libvirt, do following:</p>

<pre><code># pacman -S abs base-devel
# abs 
# cp /var/abs/community/libvirt ~/Code/
# cd ~/Code/libvirt
# makepkg
</code></pre>

<p>After makepkg, change the code as in above, tar it again, makepkg with following command <code>makepkg --skipchecksums</code>, this time it will generate a new tar.xz file. Install it via:</p>

<pre><code># pacman -U libvirt-1.2.17-1-x86_64.pkg.tar.xz
</code></pre>

<h4>starting network out of memory</h4>

<p>Solve it via:</p>

<pre><code># pacman -S ebtables vde2
# reboot
</code></pre>

<p>Start again and this time is OK.</p>

<h4>Bridge Configuration</h4>

<pre><code>[root@Arch network]# pwd
/etc/systemd/network
[root@Arch network]# cat MyBridge.netdev 
[NetDev]
Name=br0
MACAddress=52:54:00:91:e8:11
Kind=bridge
[root@Arch network]# cat MyBridge.network 
[Match]
Name=br0

[Network]
DNS=180.76.76.76,114.114.114.114

[Address]
Address=192.168.1.18/24

[Route]
Gateway=192.168.1.1
[root@Arch network]# cat MyEth.network 
[Match]
Name=eth0

[Network]
Bridge=br0
</code></pre>

<p>Now enable and start the systemd&rsquo;s networkd service via:</p>

<pre><code># systemctl enable systemd-networkd.service
# reboot
</code></pre>

<p>By this you could enable systemd on ArchLinux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISCSI Installed Debian Jessie]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/17/iscsi-installed-debian-jessie/"/>
    <updated>2015-07-17T14:24:20+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/17/iscsi-installed-debian-jessie</id>
    <content type="html"><![CDATA[<h3>FreeNAS Installation And Configuration</h3>

<p>Install Procedure ignored, because it&rsquo;s simple.   <br/>
Following steps are used for adding iscsi partition.</p>

<p><img src="/images/2015_07_17_14_25_57_558x549.jpg" alt="/images/2015_07_17_14_25_57_558x549.jpg" />  <br/>
Manually setup the volumn and now you could add your volumn into the FreeNAS System.</p>

<p>Configure iscsi:  <br/>
<img src="/images/2015_07_17_14_33_57_530x370.jpg" alt="/images/2015_07_17_14_33_57_530x370.jpg" /> <br/>
Add the name of <code>iqn.onecloud.iscsi</code>, next we add portal:  <br/>
<img src="/images/2015_07_17_14_35_12_617x403.jpg" alt="/images/2015_07_17_14_35_12_617x403.jpg" />  <br/>
Add Authorized Access Now:  <br/>
<img src="/images/2015_07_17_14_37_03_491x195.jpg" alt="/images/2015_07_17_14_37_03_491x195.jpg" />  <br/>
Add Initator:  <br/>
<img src="/images/2015_07_17_14_39_25_498x234.jpg" alt="/images/2015_07_17_14_39_25_498x234.jpg" />  <br/>
Create target:  <br/>
<img src="/images/2015_07_17_14_40_30_460x487.jpg" alt="/images/2015_07_17_14_40_30_460x487.jpg" />  <br/>
Add extent: <br/>
<img src="/images/2015_07_17_14_41_55_559x613.jpg" alt="/images/2015_07_17_14_41_55_559x613.jpg" /> <br/>
LUM RPMs could also be spcified:  <br/>
<img src="/images/2015_07_17_14_42_51_386x351.jpg" alt="/images/2015_07_17_14_42_51_386x351.jpg" /> <br/>
Associate Targets:  <br/>
<img src="/images/2015_07_17_14_44_09_619x310.jpg" alt="/images/2015_07_17_14_44_09_619x310.jpg" /></p>

<p>Enable the iscsi service:  <br/>
<img src="/images/2015_07_17_14_45_04_366x302.jpg" alt="/images/2015_07_17_14_45_04_366x302.jpg" /></p>

<p>Better you change the IP Address into static IP address.</p>

<h3>Install Debian Jessie Onto ISCSI Disk:</h3>

<p>On a installed Ubuntu, I choose Ubuntu14.04, do following for connecting the exising created iscsi partition:</p>

<pre><code>$ sudo apt-get install -y open-iscsi gdisk
[root:~]# iscsiadm -m discovery -t sendtargets -p 10.47.58.40
10.47.58.40:3260,-1 iqn.onecloud.iscsi:iscsidisk1
</code></pre>

<p>Login and listed the device :</p>

<pre><code>[root:~]# iscsiadm -m node -T 'iqn.onecloud.iscsi:iscsidisk1' -p 10.47.58.40 -l
Logging in to [iface: default, target: iqn.onecloud.iscsi:iscsidisk1, portal: 10.47.58.40,3260] (multiple)
Login to [iface: default, target: iqn.onecloud.iscsi:iscsidisk1, portal: 10.47.58.40,3260] successful.
[root:~]# ls -l /dev/disk/by-path
total 0
lrwxrwxrwx 1 root root 9 Jul 17 05:39 ip-10.47.58.40:3260-iscsi-iqn.onecloud.iscsi:iscsidisk1-lun-0 -&gt; ../../sda
</code></pre>

<p>Use gdisk for partition the /dev/sda, and creating the filesystem on them:</p>

<pre><code># gdisk -l /dev/sda

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048            8191   3.0 MiB     EF02  BIOS boot partition
   2            8192         1056767   512.0 MiB   8200  Linux swap
   3         1056768        40959966   19.0 GiB    8300  Linux filesystem
# mkfs.ext4 /dev/sda3
# mkswap /dev/sda2 
</code></pre>

<p>Now install system, first mount usable systems:</p>

<pre><code># mkdir /mnt/chroot
# mount /dev/sda3 /mnt/chroot
# debootstrap wheezy /mnt/chroot
# debootstrap jessie /mnt/chroot http://mirrors.aliyun.com/debian/ 
</code></pre>

<p>chroot into the newly install jessie:</p>

<pre><code>root@Ubuntu-14:~# mount -t proc none /mnt/chroot/proc
root@Ubuntu-14:~# mount -t sysfs none /mnt/chroot/sys
root@Ubuntu-14:~# mount --bind /dev /mnt/chroot/dev
root@Ubuntu-14:~# chroot /mnt/chroot /bin/bash
</code></pre>

<p>Disk configuration:</p>

<pre><code>root@Ubuntu-14:/# cp /proc/mounts /etc/mtab
root@Ubuntu-14:/# sed -i '\|^/dev/sda3|,$!d' /etc/mtab
root@Ubuntu-14:/# blkid /dev/sda2 /dev/sda3
/dev/sda2: UUID="0c570265-543a-41ec-9edb-65bc55d677cd" TYPE="swap" PARTLABEL="Linux swap" PARTUUID="bfb7c1b1-c6cd-4302-9cb4-d6c1de43a0ad"
/dev/sda3: UUID="c1c5f995-e3f7-48c7-b5d5-4963a77d9b7b" TYPE="ext4" PARTLABEL="Linux filesystem" PARTUUID="00ccaf63-b3b3-46c4-92ab-1933d31cbcb7"
root@Ubuntu-14:/# echo 'UUID=c1c5f995-e3f7-48c7-b5d5-4963a77d9b7b / ext4 errors=remount-ro 0 1' &gt;&gt; /etc/fstab
root@Ubuntu-14:/# echo 'UUID=0c570265-543a-41ec-9edb-65bc55d677cd none swap sw 0 0' &gt;&gt; /etc/fstab
root@Ubuntu-14:/# cat /etc/fstab
# UNCONFIGURED FSTAB FOR BASE SYSTEM
UUID=c1c5f995-e3f7-48c7-b5d5-4963a77d9b7b / ext4 errors=remount-ro 0 1
UUID=0c570265-543a-41ec-9edb-65bc55d677cd none swap sw 0 0
</code></pre>

<p>Install some packages, be sure to make grub2 installed to /dev/sda:</p>

<pre><code># apt-get install vim less openssh-server locales
# apt-get install linux-image-amd64 grub2 initramfs-tools
</code></pre>

<p>Configure the Grub:</p>

<pre><code># apt-get install open-iscsi
# vim /etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT=""
GRUB_CMDLINE_LINUX=""ISCSI_INITIATOR=iqn.onecloud.iscsi.client:client ISCSI_TARGET_NAME=iqn.onecloud.iscsi:iscsidisk1 ISCSI_TARGET_IP=10.47.58.40 ISCSI_TARGET_PORT=3260 root=UUID=c1c5f995-e3f7-48c7-b5d5-4963a77d9b7b ip=10.47.58.176::10.47.58.1:255.255.255.0:client:eth0:off""
# touch /etc/iscsi/iscsi.initramfs
# echo "InitiatorName=iqn.onecloud.iscsi.client:client" &gt; /etc/iscsi/initiatorname.iscsi
# update-grub
# update-initramfs -u
# passwd
</code></pre>

<p>Configure the network interfaces:</p>

<pre><code>root@Ubuntu-14:/etc/network# cat interfaces
# interfaces(5) file used by ifup(8) and ifdown(8)
# Include files from /etc/network/interfaces.d:
#source-directory /etc/network/interfaces.d
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
#iface eth0 inet manual
address 10.47.58.176
netmask 255.255.255.0
gateway 10.47.58.1
dns-nameservers 114.114.114.114
</code></pre>

<p>Now exit and umount all of the mounted partitions.</p>

<pre><code># exit
# umount /mnt/chroot/{dev,proc,sys,}
root@Ubuntu-14:~# iscsiadm -m node -T 'iqn.onecloud.iscsi:iscsidisk1' -p 10.47.58.40 -u
# echo "InitiatorName=iqn.onecloud.iscsi.client:client" &gt; /etc/iscsi/initiatorname.iscsi
#!ipxe
set initiator-iqn iqn.2007-08.com.example.client:client
sanboot iscsi:san.example.com:6:3260:0:iqn.2007-08.com.example.san:rootp
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(12)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/14/wh-worktips-12/"/>
    <updated>2015-07-14T19:09:11+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/14/wh-worktips-12</id>
    <content type="html"><![CDATA[<h3>How to quickly get all packages</h3>

<p>First deploy a new system, Then:</p>

<pre><code># cd /etc/yum.repos.d/
# mv CentOS-* /root/
# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo
# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo
</code></pre>

<p>If you previously downloaded the 4.5 packages, then put them under one web server&rsquo;s directory,  do following:</p>

<pre><code>[root@node161 yum.repos.d]# vim cloudstack.repo 
[cloudstack]
name=cloudstack
baseurl=http://10.47.58.2/4.5/
enabled=1
gpgcheck=0
</code></pre>

<p>Now install the yum-download plugin, and begin to create local repository:</p>

<pre><code># yum install -y yum-plugin-downloadonly
# mkdir ~/Code
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(11)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/13/wh-worktips-11/"/>
    <updated>2015-07-13T21:12:14+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/13/wh-worktips-11</id>
    <content type="html"><![CDATA[<h3>CentOS7 Based</h3>

<p>Following modification need to be done:  <br/>
On Deployed node:</p>

<pre><code>$ sudo vim /etc/hosts
10.47.58.157    node157
</code></pre>

<p>There will be iptables issue. for you have to install following packages:</p>

<pre><code># yum install -y install iptables-utils iptables-services
# reboot
</code></pre>

<p>Now begin to install again, and it will be ok.</p>

<p>Add the client, and make sure the &ldquo;COPY CPU configuration&rdquo; is selected in the menu.  <br/>
Or, your system vm won&rsquo;t startup.</p>

<p>Why at home my output becomes:</p>

<pre><code>[root@node157 network-scripts]# cat ifcfg-cloudbr0 

DEVICE=cloudbr0

ONBOOT=yes
HWADDR=52:54:00:73:86:D2

TYPE=Bridge
BOOTPROTO=dhcp
NM_CONTROLLED=no
[root@node157 network-scripts]# cat ifcfg-eth0 
DEVICE=eth0

ONBOOT=yes
HWADDR=52:54:00:73:86:D2
TYPE=Ethernet
BOOTPROTO=dhcp
NM_CONTROLLED=no
BRIDGE=cloudbr0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WH Worktips(10)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/07/12/wh-worktips-10/"/>
    <updated>2015-07-12T10:57:15+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/07/12/wh-worktips-10</id>
    <content type="html"><![CDATA[<p>This chapter will cover the ansible playbook for deploying CloudStack Agent.  <br/>
First you should download the packages for the deployed node.</p>

<p>In a computer which have the internet connection, do following:</p>

<pre><code># yum install -y yum-plugin-downloadonly
# vi /etc/yum.repos.d/cloudstack.repo
[cloudstack]
name=cloudstack
baseurl=http://cloudstack.apt-get.eu/centos7/4.5/
enabled=1
gpgcheck=0
# yum install --downloadonly --downloaddir=/root/Code/ cloud-agent
</code></pre>

<p>Then under the folder of <code>/root/Code</code> you will have all of the cloud-agent related packages, create a repo using <code>createrepo .</code>, and set the apache/nginx&rsquo;s serving directory to here.</p>

<h3>Node Testing.</h3>

<p>Write a new playbook, this playbook&rsquo;s name is <code>CloudStackAgentCentOS7.yml</code>.  Notice you also have to change the repository definition file.</p>

<p>Configuration of cloudbr0:</p>

<pre><code>[root@localhost ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 
# Generated by parse-kickstart
DEVICE=eth0
TYPE=Ethernet
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=none
BRIDGE=cloudbr0
IPV6INIT=no
[root@localhost ~]# cat /etc/sysconfig/network-scripts/ifcfg-cloudbr0 
DEVICE=cloudbr0
TYPE=Bridge
BOOTPROTO=dhcp
IPV6INIT=no 
ONBOOT=yes
DELAY=0
</code></pre>
]]></content>
  </entry>
  
</feed>
