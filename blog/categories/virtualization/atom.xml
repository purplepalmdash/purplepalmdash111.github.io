<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-03-27T13:32:52+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XenServer6.2切换管理端口]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/24/cloudstackqie-huan-guan-li-duan-kou/"/>
    <updated>2016-03-24T17:28:55+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/24/cloudstackqie-huan-guan-li-duan-kou</id>
    <content type="html"><![CDATA[<p>默认安装完的XenServer，不能找到eth1, 用以下命令找到eth1:</p>

<pre><code>[root@csagentv1 ~]# xe pif-list
uuid ( RO)                  : cd4409d4-b2b8-543c-ea9c-35170673e924
                device ( RO): eth0
    currently-attached ( RO): true
                  VLAN ( RO): -1
          network-uuid ( RO): 597114f0-e71a-34fe-d6a2-230cc75e085a


[root@csagentv1 ~]#  xe host-list
uuid ( RO)                : 367ebe92-0634-41a8-825a-cd23184824ea
          name-label ( RW): csagentv1
    name-description ( RW): Default install of XenServer


[root@csagentv1 ~]# xe pif-scan host-uuid=367ebe92-0634-41a8-825a-cd23184824ea
[root@csagentv1 ~]# xe pif-list
uuid ( RO)                  : 3f6e551b-993e-0a3d-96b6-0f0d172f867f
                device ( RO): eth1
    currently-attached ( RO): false
                  VLAN ( RO): -1
          network-uuid ( RO): 1ff03ece-8b93-b231-ac2d-679d035422da


uuid ( RO)                  : cd4409d4-b2b8-543c-ea9c-35170673e924
                device ( RO): eth0
    currently-attached ( RO): true
                  VLAN ( RO): -1
          network-uuid ( RO): 597114f0-e71a-34fe-d6a2-230cc75e085a
</code></pre>

<p>在Console上可以看到管理端口:</p>

<p><img src="/images/2016_03_24_17_33_06_659x355.jpg" alt="/images/2016_03_24_17_33_06_659x355.jpg" /></p>

<p>命令:</p>

<pre><code>[root@csagentv1 ~]# xe host-management-disable
[root@csagentv1 ~]# xe pif-reconfigure-ip uuid=3f6e551b-993e-0a3d-96b6-0f0d172f867f mode=static IP=192.168.56.3 netmask=255.255.255.0 gateway=192.168.56.1 DNS=180.76.76.76
[root@csagentv1 ~]# xe pif-list params=uuid,device,MAC
uuid ( RO)      : 3f6e551b-993e-0a3d-96b6-0f0d172f867f
    device ( RO): eth1
       MAC ( RO): 08:00:27:b2:9d:5c


uuid ( RO)      : cd4409d4-b2b8-543c-ea9c-35170673e924
    device ( RO): eth0
       MAC ( RO): 08:00:27:f7:38:0b
[root@csagentv1 ~]# xe host-management-reconfigure pif-uuid=3f6e551b-993e-0a3d-96b6-0f0d172f867f
</code></pre>

<p>更改成功后，可以看到现在管理端口已经配置为eth1了:  <br/>
<img src="/images/2016_03_24_17_39_08_653x397.jpg" alt="/images/2016_03_24_17_39_08_653x397.jpg" /></p>

<p>Tips:</p>

<p>View eth1 pif:</p>

<pre><code>$ xe pif-list device=eth1 params=uuid --minimal
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Vagrant-libvirt Env on Ubuntu15.04]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/23/setup-vagrant-libvirt-env-on-ubuntu15-dot-04/"/>
    <updated>2016-03-23T20:49:52+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/23/setup-vagrant-libvirt-env-on-ubuntu15-dot-04</id>
    <content type="html"><![CDATA[<p>For continue working at home, I have to install vagrant-libvirt on
Ubuntu15.04, following are steps:</p>

<h3>Vagrant Installation</h3>

<p>The vagrant version in repository is too old, examine it via:</p>

<pre><code>$ apt-cache policy vagrant
vagrant:
  Installed: (none)
  Candidate: 1.6.5+dfsg1-2
  Version table:
     1.6.5+dfsg1-2 0
        500 http://mirrors.aliyun.com/ubuntu/ vivid/universe amd64 Packages
</code></pre>

<p>Download the installation file in:    <br/>
<a href="https://releases.hashicorp.com/vagrant/1.8.1/vagrant_1.8.1_x86_64.deb">https://releases.hashicorp.com/vagrant/1.8.1/vagrant_1.8.1_x86_64.deb</a></p>

<p>Install it via:</p>

<pre><code>$ sudo dpkg -i vagrant_1.8.1_x86_64.deb
$ which vagrant
/usr/bin/vagrant
</code></pre>

<h3>Vagrant-libvirt</h3>

<p>For building vagrant-libvirt, we have to install following packages:</p>

<pre><code>$ sudo apt-get install libvirt-bin libvirt-dev qemu-kvm ruby-dev
$ sudo adduser YourName libvirtd
</code></pre>

<p>Installing vagrant plugins:</p>

<pre><code>$ sudo mkdir /var/lib/gems
$ sudo chmod 777 -R /var/lib/gems/
$ gem source -r https://rubygems.org/
$ gem source -a http://mirrors.aliyun.com/rubygems/
$ gem source
$ gem install json -v '1.8.3'
$ gem install ruby-libvirt -v '0.6.0'
$ vagrant plugin install vagrant-libvirt
$ vagrant plugin install vagrant-mutate
$ vagrant plugin install --plugin-version 0.0.3 fog-libvirt
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Vagrant to Manage XenServer]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/21/use-vagrant-to-manage-xenserver/"/>
    <updated>2016-03-21T14:20:09+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/21/use-vagrant-to-manage-xenserver</id>
    <content type="html"><![CDATA[<h3>Building Templates</h3>

<p>Build XenServer 6.2 Template is pretty easy, simply do following:</p>

<pre><code>$ git clone  https://github.com/imduffy15/packer-xenserver.git
$ cd packer-xenserver
$ packer build template.iso
</code></pre>

<p>After building, check the following box file available under the directory:</p>

<pre><code>$ ls -l -h XenServer.box 
-rw-rw-r-- 1 dash dash 708M  3月 21 14:41 XenServer.box
</code></pre>

<h3>Import box File</h3>

<p>Import the generated box file via:</p>

<pre><code>$ vagrant box add XenServer.box --name "XenServer62"
$ vagrant box list | grep XenServer62
XenServer62        (virtualbox, 0)
</code></pre>

<h3>Start the Virtualbox XenServer</h3>

<pre><code>$ mkdir XenServer62
$ cd XenServer62 
$ vim Vagrantfile
Vagrant.configure(2) do |config|

    # disable mounting of vagrant folder as its not supported on xenserver
    config.vm.synced_folder ".", "/vagrant", disabled: true

    # disable checking for vbguest versions as its not supported on xenserver
    if Vagrant.has_plugin?("vagrant-vbguest")
      config.vbguest.auto_update = false
    end

    config.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--memory", 2048]
      v.customize [ "modifyvm", :id, "--nicpromisc2", "allow-all" ]
    end

    config.vm.define :csagent do |csagent|
      csagent.vm.box = "XenServer62"
    end

end
$ vagrant up
</code></pre>

<h3>XenServer In libvirt</h3>

<p>We want to use XenServer under libvirt(kvm), thus we have to do following changes:</p>

<p>First startup the virtualbox vagrant environment of XenServer, then login to the
localhost(127.0.0.1) as root:</p>

<pre><code>$ vagrant ssh csagent
[vagrant@localhost ~]$ ssh root@127.0.0.1
[root@localhost ~]# ifconfig | grep eth0 | grep HWaddr
eth0      Link encap:Ethernet  HWaddr 08:00:27:49:A4:92  
[root@localhost etc]# ifconfig -a | grep eth1
eth1      Link encap:Ethernet  HWaddr 08:00:27:9D:8C:71 
</code></pre>

<p>Get the Hardware Address(eth0/eth1) via ifconfig, we need them in the following
operations.</p>

<p>Now remove the udev items of <code>eth0</code>, <code>eth1</code> in <code>/etc/udev/rules.d/60-net.rules</code>:</p>

<pre><code># vi /etc/udev/rules.d/60-net.rules
    # Rules generated from static configuration and last boot data
    #SUBSYSTEM=="net" KERNEL=="eth*" SYSFS{address}=="08:00:27:49:a4:92" ID=="0000:00:03.0" NAME="eth0"
    #SUBSYSTEM=="net" KERNEL=="eth*" SYSFS{address}=="08:00:27:9d:8c:71" ID=="0000:00:08.0" NAME="eth1"
</code></pre>

<p>Remove the dynamic rules of the interface renaming:</p>

<pre><code># vim /etc/sysconfig/network-scripts/interface-rename-data/dynamic-rules.json 
    # Automatically adjusted file.  Do not edit unless you are certain you know how to
    {
        "lastboot": [
            - [
            -     "08:00:27:49:a4:92",
            -     "0000:00:03.0",
            -     "eth0"
            - ],
            - [
            -     "08:00:27:9d:8c:71",
            -     "0000:00:08.0",
            -     "eth1"
            - ]
        ],
        "old": []
    }
</code></pre>

<p>Should looks like this:</p>

<pre><code># cat /etc/sysconfig/network-scripts/interface-rename-data/dynamic-rules.json 
    # Automatically adjusted file.  Do not edit unless you are certain you know how to
    {
        "lastboot": [
        ], 
        "old": []
    }
</code></pre>

<p>Now add the static rules for the XenServer:</p>

<pre><code>$
08:00:27:9D:8C:71 
</code></pre>

<p>Get the Hardware Address(eth0/eth1) via ifconfig, we need them in the following
operations.</p>

<p>Now remove the udev items of <code>eth0</code>, <code>eth1</code> in <code>/etc/udev/rules.d/60-net.rules</code>:</p>

<pre><code># vi /etc/udev/rules.d/60-net.rules
    # Rules generated from static configuration and last boot data
    #SUBSYSTEM=="net" KERNEL=="eth*" SYSFS{address}=="08:00:27:49:a4:92" ID=="0000:00:03.0" NAME="eth0"
    #SUBSYSTEM=="net" KERNEL=="eth*" SYSFS{address}=="08:00:27:9d:8c:71" ID=="0000:00:08.0" NAME="eth1"
</code></pre>

<p>Remove the dynamic rules of the interface renaming:</p>

<pre><code># vim /etc/sysconfig/network-scripts/interface-rename-data/dynamic-rules.json 
    # Automatically adjusted file.  Do not edit unless you are certain you know how to
    {
        "lastboot": [
            - [
            -     "08:00:27:49:a4:92",
            -     "0000:00:03.0",
            -     "eth0"
            - ],
            - [
            -     "08:00:27:9d:8c:71",
            -     "0000:00:08.0",
            -     "eth1"
            - ]
        ],
        "old": []
    }
</code></pre>

<p>Should looks like this:</p>

<pre><code># vim  /etc/sysconfig/network-scripts/interface-rename-data/static-rules.conf 
eth0:mac = "08:00:27:49:A4:92"
eth1:mac = "08:00:27:9D:8C:71"
</code></pre>

<p>Define xenbr0 and eth0 bridging configuration:</p>

<pre><code># vim /etc/sysconfig/network-scripts/ifcfg-xenbr0 
DEVICE=xenbr0
TYPE=Bridge
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=dhcp
# vim  /etc/sysconfig/network-scripts/ifcfg-eth0 
DEVICE=eth0
TYPE=Ethernet
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=none
BRIDGE=xenbr0
</code></pre>

<p>Now shutdown the Virtualbox Based XenServer VM via:</p>

<pre><code>[root@localhost network-scripts]# shutdown -h now
</code></pre>

<h3>Package for Libvirt</h3>

<p>Package the modified vbox file and export to libvirt via following steps:</p>

<p>Verify the env is down:</p>

<pre><code>$ vagrant status
Current machine states:

csagent                   poweroff (virtualbox)
</code></pre>

<p>Package the modified vm:</p>

<pre><code>$ vagrant package
==&gt; csagent: Clearing any previously set forwarded ports...
==&gt; csagent: Exporting VM...
==&gt; csagent: Compressing package to: /home/dash/Code/Vagrant/XenServer62/package.box
$ ls
package.box  Vagrantfile  Vagrantfile~
</code></pre>

<p>Mutate to libvirt box:</p>

<pre><code>$ vagrant mutate package.box libvirt
Extracting box file to a temporary directory.
Converting package from virtualbox to libvirt.
    (100.00/100%)
Cleaning up temporary files.
The box package (libvirt) is now ready to use.
$ cd ~/.vagrant.d/boxes 
$ vagrant box list
XenServer62        (virtualbox, 0)
XenServer62        (libvirt, 0)
</code></pre>

<h3>Start the libvirt XenServer</h3>

<p>Edit the Vagrantfile like following:</p>

<pre><code># vim Vagrantfile
Vagrant.configure(2) do |config|

  # vagrant issues #1673..fixes hang with configure_networks
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"
  config.ssh.username = 'vagrant'
  config.ssh.password = 'vagrant'
  config.ssh.insert_key = 'true'
  config.vm.provider :libvirt do |domain|
    domain.nic_model_type = 'e1000'
    domain.memory = 384
    domain.nested = true
    domain.cpu_mode = 'host-passthrough'
  end


  # csagent node.
  # Add one networking, modify hostname, define memory, CPU cores.
  config.vm.define :csagent do |csagent|
    csagent.vm.box = "XenServer62"
    csagent.vm.hostname = CLOUDSTACK_AGENT_HOSTNAME
    csagent.vm.network :private_network, :ip =&gt; CLOUDSTACK_AGENT_IP, :mac =&gt; "08:00:27:9D:8C:71"
    # Disable mounting of vagrant folder as it's not supported on xenserver
    csagent.vm.synced_folder ".", "/vagrant", disabled: true
    csagent.vm.provider :libvirt do |domain|
      domain.memory = 8192
      domain.cpus = 4
      domain.nested = true
      domain.cpu_mode = 'host-passthrough'
      domain.nic_model_type = 'e1000'
      domain.management_network_mac = "08:00:27:49:A4:92"
    end
  end

end
</code></pre>

<p>Start the Vagrant machine via: <code>vagrant up --provider=libvirt</code>.</p>

<p>The result shows XenServer are now running under libvirt:  <br/>
<img src="/images/2016_03_21_16_10_44_643x284.jpg" alt="/images/2016_03_21_16_10_44_643x284.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant-libvirt Playing]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/16/vagrant-libvirt-playing/"/>
    <updated>2016-03-16T10:31:53+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/16/vagrant-libvirt-playing</id>
    <content type="html"><![CDATA[<p>最终目的是用vagrant实现CloudStack+Xenserver的自动化部署。</p>

<h3>CentOS6.7 box Creating</h3>

<p>用packer生成CentOS6.7 amd64的镜像，这个镜像默认是virtualbox兼容的，用vagrant-mutate插件
将其转换为libvirt可用的box镜像:</p>

<pre><code># vagrant mutate centos-6.7.virtualbox.box libvirt
# cd /root/.vagrant.d/boxes
# ls
centos-6.7.virtualbox  trusty64
# mv centos-6.7.virtualbox/ centos6764
# vagrant box list
centos6764 (libvirt, 0)
trusty64   (libvirt, 0)
</code></pre>

<p>创建Vagrantfile文件启动一个实验性质的虚拟机：</p>

<pre><code># pwd
/media/opensusue/dash/Code/Vagrant/CentOS2New
# ls
Vagrantfile  Vagrantfile~
# cat Vagrantfile
    # -*- mode: ruby -*-
    # vi: set ft=ruby :
    Vagrant.configure(2) do |config|
      # The most common configuration options are documented and commented below.
      # For a complete reference, please see the online documentation at
      # https://docs.vagrantup.com.

      config.vm.box = "centos6764"
      # vagrant issues #1673..fixes hang with configure_networks
      config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"
      config.vm.provider :libvirt do |domain|
        domain.memory = 512
        domain.nested = true
      end

      config.vm.define :centosnew do |centosnew|
        centosnew.vm.network :private_network, :ip =&gt; "192.168.88.2"
      end

    end
# vagrant up
</code></pre>

<p><code>vagrant up</code>以后，一个名为<code>CentOS2New_centosnew</code>的虚拟机将被创建， 命名规则为当前文件夹
名+定义的vm名称。</p>

<p>虚拟机启动完毕后，检查状态并登录到该机器:</p>

<pre><code># vagrant status
Current machine states:

centosnew                 running (libvirt)

The Libvirt domain is running. To stop this machine, you can run
`vagrant halt`. To destroy the machine, you can run `vagrant destroy`.
# vagrant ssh centosnew
Last login: Wed Mar 16 02:31:18 2016 from 192.168.121.1
[vagrant@localhost ~]$
</code></pre>

<p>我们可以检查网卡状态，是否设置为我们需要设置的地址<code>192.168.88.2</code>.</p>

<h3>更多定制化参数</h3>

<h4>嵌套虚拟化</h4>

<p>未知原因，我在CentOS6上检查嵌套虚拟化总是提示有问题，所以以下的验证是在Ubuntu系统上验证
的。</p>

<p>我们在上面的配置文件里制定了nested选项为true, 现在登录进去检查一下嵌套虚拟化是否加载成
功:</p>

<pre><code>vagrant@vagrant:~$ lsmod | grep kvm
kvm_intel             143590  0 
kvm                   452043  1 kvm_intel
vagrant@vagrant:~$ modinfo kvm_intel | grep nested
parm:           nested:bool
vagrant@vagrant:~$ cat /sys/module/kvm_intel/parameters/nested
N
vagrant@vagrant:~$ sudo modprobe -r kvm_intel
vagrant@vagrant:~$ sudo modprobe kvm_intel nested=1
vagrant@vagrant:~$ cat /sys/module/kvm_intel/parameters/nested
Y
</code></pre>

<p>改变nested选项为false后，验证步骤如下:</p>

<pre><code>$ cat /sys/module/kvm_intel/parameters/nested
N
</code></pre>

<p>值得注意的是，在虚拟机中，仍然可以通过<code>modprobe kvm_intel nested=1</code>来打开nested选项。</p>

<h4>CPU Passthrough</h4>

<p>指定参数为<code>domain.cpu_mode = 'host-passthrough'</code>:</p>

<pre><code>  config.vm.provider :libvirt do |domain|
    domain.memory = 512
    domain.nested = false
    #domain.cpu_mode = 'host-passthrough'
  end
</code></pre>

<p>未指定时:</p>

<pre><code>vagrant@vagrant:~$ cat /proc/cpuinfo  | grep -i "model name"
model name  : Intel Core i7 9xx (Nehalem Class Core i7)
</code></pre>

<p>指定后:</p>

<pre><code>[vagrant@localhost ~]$ cat /proc/cpuinfo | grep -i "model name"
model name  : Intel(R) Core(TM) i3 CPU         540  @ 3.07GHz
</code></pre>

<h4>指定hostname</h4>

<p>安装cloudstack时hostname是必要条件之一， Vagrantfile中可以指定vm的hostname:</p>

<pre><code>  config.vm.define "centosnew" do |centosnew|
    centosnew.vm.hostname = "centosnew.example.com"
  end
</code></pre>

<p>启动虚拟机后可以通过<code>hostname</code>和<code>hostname --fqdn</code>来检查结果。</p>

<h3>快照</h3>

<p>通过sahara来实现libvirt机器的快照:</p>

<pre><code>$ vagrant plugin install sahara
</code></pre>

<p>在验证系统时，可以进入vagrant的sandbox模式，验证成功后才正式提交。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Vagrant管理libvirt]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/13/yong-vagrantguan-li-libvirt/"/>
    <updated>2016-03-13T16:07:59+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/13/yong-vagrantguan-li-libvirt</id>
    <content type="html"><![CDATA[<h3>先决条件</h3>

<p>Vagrant为0.8.1.</p>

<p>参考:  <br/>
<a href="http://linuxsimba.com/vagrant.html">http://linuxsimba.com/vagrant.html</a>  <br/>
<a href="http://linuxsimba.com/vagrant-libvirt-install/">http://linuxsimba.com/vagrant-libvirt-install/</a></p>

<h3>Ubuntu设置</h3>

<p>考虑到天朝防火墙的存在,需要经过以下命令才能安装vagrant-libvirt插件:</p>

<pre><code>$ sudo apt-get install -y libvirt-dev ruby-dev
$ gem source -r https://rubygems.org/
$ gem source -a http://mirrors.aliyun.com/rubygems/
$ gem install ruby-libvirt -v '0.6.0'
$ gem install vagrant-libvirt -v '0.0.32'
$ vagrant plugin install vagrant-libvirt
$ vagrant plugin list
vagrant-libvirt (0.0.32)
$ axel http://linuxsimba.com/vagrantbox/ubuntu-trusty.box
$ vagrant box add ./ubuntu-trusty.box --name "trusty64"
</code></pre>

<h3>ArchLinux设置</h3>

<p>按照ArchLinux wiki的方法,安装vagrant-libvirt插件:</p>

<pre><code> # in case it's already installled
 vagrant plugin uninstall vagrant-libvirt

 # vagrant's copy of curl prevents the proper installation of ruby-libvirt
 sudo mv /opt/vagrant/embedded/lib/libcurl.so{,.backup}
 sudo mv /opt/vagrant/embedded/lib/libcurl.so.4{,.backup}
 sudo mv /opt/vagrant/embedded/lib/libcurl.so.4.4.0{,.backup}
 sudo mv /opt/vagrant/embedded/lib/pkgconfig/libcurl.pc{,.backup}

 CONFIGURE_ARGS="with-libvirt-include=/usr/include/libvirt with-libvirt-lib=/usr/lib" vagrant plugin install vagrant-libvirt

 # https://github.com/pradels/vagrant-libvirt/issues/541
 export PATH=/opt/vagrant/embedded/bin:$PATH
 export GEM_HOME=~/.vagrant.d/gems
 export GEM_PATH=$GEM_HOME:/opt/vagrant/embedded/gems
 gem uninstall ruby-libvirt
 gem install ruby-libvirt

 # put vagrant's copy of curl back
 sudo mv /opt/vagrant/embedded/lib/libcurl.so{.backup,}
 sudo mv /opt/vagrant/embedded/lib/libcurl.so.4{.backup,}
 sudo mv /opt/vagrant/embedded/lib/libcurl.so.4.4.0{.backup,}
 sudo mv /opt/vagrant/embedded/lib/pkgconfig/libcurl.pc{.backup,}
</code></pre>

<h3>导入box</h3>

<p>用packer编译出来的box文件默认工作在virtualbox下,我们需要用一个插件将其转换为
libvirt可用的box:</p>

<pre><code>#  vagrant plugin install vagrant-mutate
# vagrant mutate ubuntu-14.04.virtualbox.box libvirt
Extracting box file to a temporary directory.
Converting ubuntu-14.04.virtualbox from virtualbox to libvirt.
    (100.00/100%)
Cleaning up temporary files.
The box ubuntu-14.04.virtualbox (libvirt) is now ready to use.
# cd /root/.vagrant.d/boxes/
# mv ubuntu-14.04.virtualbox/ trusty64
# vagrant box list
trusty64 (libvirt, 0)
</code></pre>

<h3>检查安装的box</h3>

<p>可以通过以下命令检查已经安装好的box:</p>

<pre><code>$ vagrant box list
trusty64    (libvirt, 0)
ubuntu1404  (virtualbox, 0)
</code></pre>

<h3>配置Vagrantfile</h3>

<p>以下是一个例子:</p>

<pre><code># -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure(2) do |config|

  config.vm.box = "trusty64"
  # vagrant issues #1673..fixes hang with configure_networks
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"
  config.vm.provider :libvirt do |domain|
    domain.memory = 256
    domain.nested = true
  end

# Private network using virtual network switching
  config.vm.define :vm1 do |vm1|
    vm1.vm.network :private_network, :ip =&gt; "192.168.56.11"
  end

  config.vm.define :vm2 do |vm2|
    vm2.vm.network :private_network, :ip =&gt; "192.168.56.12"
  end

  # Private network. Point to Point between 2 Guest OS using a TCP tunnel
  # Guest 1
  #config.vm.define :test_vm1 do |test_vm1|
  #  test_vm1.vm.network :private_network,
  #    :libvirt__tunnel_type =&gt; 'server',
  #    # default is 127.0.0.1 if omitted
  #    # :libvirt__tunnel_ip =&gt; '127.0.0.1',
  #    :libvirt__tunnel_port =&gt; '11111'

  # Guest 2
  #config.vm.define :test_vm2 do |test_vm2|
  #  test_vm2.vm.network :private_network,
  #    :libvirt__tunnel_type =&gt; 'client',
  #    # default is 127.0.0.1 if omitted
  #    # :libvirt__tunnel_ip =&gt; '127.0.0.1',
  #    :libvirt__tunnel_port =&gt; '11111'


  # Public Network
  config.vm.define :vm1 do |vm1|
    vm1.vm.network :public_network,
      :dev =&gt; "virbr0",
      :mode =&gt; "bridge",
      :type =&gt; "bridge"
  end
end
</code></pre>

<h3>启动虚拟机</h3>

<pre><code># vagrant up --provider=libvirt
</code></pre>

<p>启动时会出现以下问题, 解决方案为:</p>

<pre><code>$ vagrant up --provider=libvirt
....
Missing required arguments: libvirt_uri
.....
$ vagrant plugin install --plugin-version 0.0.3 fog-libvirt
</code></pre>
]]></content>
  </entry>
  
</feed>
