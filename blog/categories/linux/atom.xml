<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-01-04T22:33:40+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips on Veewee and Vagrant]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/01/03/tips-on-veewee-and-vagrant/"/>
    <updated>2016-01-03T15:56:09+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/01/03/tips-on-veewee-and-vagrant</id>
    <content type="html"><![CDATA[<h3>Install Veewee</h3>

<p>Install the veewee via:</p>

<pre><code>$ proxychains4 gem install bundler
$ git clone https://github.com/jedi4ever/veewee.git
$ cd veewee
$ proxychains4 gem install i18n -v '0.7.0'
$ bundle install
</code></pre>

<h3>Install Vagrant</h3>

<p>Since the vagrant provided via Ubuntu14.04 is pretty old, we have to download
it from vagrant&rsquo;s official website and dpkg install it.</p>

<p>Install veewee plugins:</p>

<pre><code>$ proxychains4 vagrant plugin install veewee
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rundeck Tips]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/07/rundeck-tips/"/>
    <updated>2015-12-07T11:58:55+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/07/rundeck-tips</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Install the rundeck under CentOS 7:</p>

<pre><code># rpm -Uvh http://repo.rundeck.org/latest.rpm
# yum install rundeck
</code></pre>

<h3>Configuration</h3>

<p>Configure some properties:</p>

<pre><code># vim /etc/rundeck/framework.properties
framework.server.name = 192.168.0.79
framework.server.hostname = 192.168.0.79
framework.server.port = 4440
framework.server.url = http://192.168.0.79:4440
# vim /etc/rundeck/rundeck-config.properties
grails.serverURL=http://192.168.0.79:4440 
</code></pre>

<p>Start the service:</p>

<pre><code># service rundeckd start
Starting rundeckd (via systemctl):                         [  OK  ]
</code></pre>

<p>You could check the status via <code># systemctl status rundeckd</code>.</p>

<p>Now visit the server via <a href="http://192.168.0.79:4440,">http://192.168.0.79:4440,</a> username/password are all <code>admin</code>, you should see following image:</p>

<p><img src="/images/2015_12_07_12_11_49_956x398.jpg" alt="/images/2015_12_07_12_11_49_956x398.jpg" /></p>

<p>Hint for creating project:</p>

<p><img src="/images/2015_12_07_12_13_56_694x389.jpg" alt="/images/2015_12_07_12_13_56_694x389.jpg" /></p>

<h3>Run</h3>

<p>Run command locally for creating an command based job.</p>

<p>In case of sudo requires a tty for executing the command:</p>

<pre><code># visudo
+ # Defaults    requiretty
+ rundeck ALL=(ALL)   NOPASSWD: ALL 
</code></pre>

<h3>Reference</h3>

<p><a href="http://www.tuicool.com/articles/zuI3ua">http://www.tuicool.com/articles/zuI3ua</a></p>

<p><a href="http://www.oschina.net/p/rundeck">http://www.oschina.net/p/rundeck</a></p>

<p><a href="http://gunner.me/archives/488">http://gunner.me/archives/488</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Bluetooth PAN]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/04/on-bluetooth-pan/"/>
    <updated>2015-12-04T10:51:10+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/04/on-bluetooth-pan</id>
    <content type="html"><![CDATA[<h3>AIM</h3>

<p>For sharing the internet connection from working PC to Surface Pro.</p>

<h3>Setup And Configuration</h3>

<h4>SurfacePro</h4>

<p>Install bluez/bluez-libs/bluez-utils:</p>

<pre><code>$ sudo pacman -S bluez bluez-utils bluez-libs
</code></pre>

<p>Modprobe the bnep kernel module:</p>

<pre><code>[root@surfacepro ~]# modprobe bnep
[root@surfacepro ~]# lsmod | grep bnep
bnep                   20480  0
bluetooth             450560  6 bnep,btbcm,btrtl,btusb,btintel
[root@surfacepro ~]# modprobe btusb
</code></pre>

<p>Start the bluetooth.service via:</p>

<pre><code>$ sudo systemctl start bluetooth.service
</code></pre>

<p><code>bluetoothctl</code> will give access for configurating bluetooth equipment, following steps
shows how to connect to a bluetooth keyboard:</p>

<pre><code>[root@surfacepro ~]# bluetoothctl 
[NEW] Controller xx:xx:xx:xx:xx:xx surfacepro [default]
[bluetooth]#
[bluetooth]# agent KeyboardOnly 
Agent registered
[bluetooth]# default-agent      
Default agent request successful
[bluetooth]# power on
[CHG] Controller xx:xx:xx:xx:xx:xx Class: 0x00011c
Changing power on succeeded
[CHG] Controller xx:XX:XX:XX:XX:XX Powered: yes
[bluetooth]# scan on
Discovery started
[bluetooth]# pair D0:13:1E:11:F5:45
Attempting to pair with D0:13:1E:11:F5:45
[bluetooth]# connect D0:13:1E:11:F5:45
</code></pre>

<p>Now try to connect to the keyboard, yes you could use keyboard for typing.</p>

<h4>PAN</h4>

<p>Network Aggregation Point - NAP</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome's Battery Indicator]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/25/awesomes-battery-indicator/"/>
    <updated>2015-11-25T12:18:29+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/25/awesomes-battery-indicator</id>
    <content type="html"><![CDATA[<h3>Background</h3>

<p>I installed ArchLinux+Awesome On my SurfacePro, while the charger of Surface Pro is not
so tight to the pad. Thus I have to use a battery indicator in Awesome.</p>

<h3>Software</h3>

<p>Refers to:</p>

<p><a href="http://www.everythingisvoid.com/uncategorized/simple-battery-status-indicator-awesome-window-manager">http://www.everythingisvoid.com/uncategorized/simple-battery-status-indicator-awesome-window-manager</a></p>

<p>Install steps on ArchLinux:</p>

<pre><code>$ sudo pacman -S luarocks5.1 gobject-introspection acpi
$ sudo luarocks-5.1 install battery_status
</code></pre>

<p>You could manually run <code>show_battery_status</code> or add it into your own rc.lua file:</p>

<pre><code>$ vim ~/.config/awesome/rc.lua
----.....................
autorunApps =
{
--.........
"synergyc 192.168.0.119",
"sudo echo 1240&gt;/sys/class/backlight/intel_backlight/brightness", 
"fcitx",
"show_battery_status", 
----.....................
</code></pre>

<p>Now restart the awesome you could see the battery indicator.</p>

<h3>Add Charging Indicator</h3>

<p>First download the source code from github:</p>

<pre><code>$ git clone https://github.com/svarogg/battery_status
</code></pre>

<p>Debug with luarocks loader:</p>

<pre><code>rocks-5.1   lua5.1 -lluarocks.loader
Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio
&gt; require("rex_posix")
&gt; rex = require("rex_posix")
&gt; battery_rex = rex.new([[([^,]{1,3})%]])
&gt; rex=require("rex_posix")
&gt; battery_rex=rex.new([[([^,]{1,3})%]])
&gt; acpi=io.popen('acpi 2&gt;&amp;1')
&gt; acpi_res = acpi:read("*line")
&gt; acpi:close()
&gt; print (acpi_res)
Battery 0: Full, 100%
&gt; percentage=battery_rex:match(acpi_res)
&gt; print (percentage)
100
&gt; print(type(percentage))
string
&gt; print(type(tonumber(percentage)))
number
&gt; adapter = io.popen('acpi -a 2&gt;&amp;1')
&gt; adapter_res = adapter:read("*line")
&gt; adapter:close()
&gt; print(adapter_res)
Adapter 0: on-line
&gt; charge_rex = rex.new([[(on|off)]])
&gt; print(charge_rex:match(adapter_res))
on
</code></pre>

<p>We get the status of the charge, then update the corresponding icon to the systray.</p>

<p>The modified repository could be fetched from:</p>

<p><a href="https://github.com/purplepalmdash/Awesome-Battery-Indicator">https://github.com/purplepalmdash/Awesome-Battery-Indicator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on ArchLinux on SSD for SurfacePro]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/18/tips-on-archlinux-on-ssd-for-surfacepro/"/>
    <updated>2015-11-18T16:59:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/18/tips-on-archlinux-on-ssd-for-surfacepro</id>
    <content type="html"><![CDATA[<h3>Hardware</h3>

<p>Surface Pro, KingShare 128G SSD(USB).</p>

<p>Picture will be updated after successfully installed.</p>

<h3>Virtualbox Way</h3>

<p>Make a vmdk file which actually points to the USB Disk:</p>

<pre><code>$ sudo VBoxManage internalcommands createrawvmdk -filename ./rawusb1.vmdk -rawdisk \ 
/dev/disk/by-id/usb-KINGSHAR_KS-CUTS25W_123456789010-0:0
$ sudo chown -R YourName rawusb1.vmdk
</code></pre>

<p>Now using this rawdisk for starting the VirtualBox based machine.</p>

<p><img src="/images/2015_11_18_17_10_46_645x529.jpg" alt="/images/2015_11_18_17_10_46_645x529.jpg" /></p>

<h3>Installation</h3>

<p>The system installation is refers to following links:</p>

<p><a href="https://wiki.archlinux.org/index.php/Microsoft_Surface_Pro_3">https://wiki.archlinux.org/index.php/Microsoft_Surface_Pro_3</a></p>

<p><a href="https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_a_USB_key">https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_a_USB_key</a></p>

<h3>Updated Configuration</h3>

<p>Finally I installed the surface pro by using a usb dongle which burned the archlinux
installation iso, put it into the surface pro and startup the machine pressing power
key and volume down key, it will goes into the installtion steps.</p>

<p>Install the system on the SSD, the main steps are available at:</p>

<p><a href="http://purplepalmdash.github.io/blog/2014/06/16/archlinux-on-surface-pro/">http://purplepalmdash.github.io/blog/2014/06/16/archlinux-on-surface-pro/</a></p>

<pre><code>root@archiso ~ # mount /dev/sdb2 /mnt
root@archiso ~ # mount /dev/sdb1 /mnt/boot/EFI 
root@archiso ~ # arch-chroot /mnt /bin/bash
[root@archiso /]# grub-install --target=x86_64-efi --efi-directory=/boot/EFI \ 
--bootloader-id=arch_grub --recheck
[root@archiso /]# grub-mkconfig -o /boot/grub/grub.cfg
</code></pre>

<p>Because I frequently change the installtion media(I have SSD and Harddisk), so
everytime I change the installtion media, I have to run above steps again.</p>

<h3>Kernel Configuration</h3>

<p>Install the kernel from yaourt, you could get the surfacepro3 compatiable linux kernel,
install it on surface pro will also be OK:</p>

<pre><code>$ yaourt surfacepro
1 aur/linux-surfacepro3 4.3-1 [installed] (5)
    The Linux-surfacepro3 kernel and modules
2 aur/linux-surfacepro3-docs 4.3-1 (5)
    Kernel hackers manual - HTML documentation that comes with the Linux-surfacepro3
kernel
3 aur/linux-surfacepro3-headers 4.3-1 (5)
    Header files and scripts for building modules for Linux-surfacepro3 kernel
</code></pre>

<p>After installation, you have to manually generate the grub items:</p>

<pre><code>$ sudo grub-mkconfig -o /boot/grub/grub.cfg
</code></pre>

<p>Now reboot the surface pro, you could view the kernel has been upgraded to our newly
installed version:</p>

<pre><code>➜  ~  uname -a
Linux surfacepro 4.3.0-1-surfacepro3 #1 SMP PREEMPT Fri Nov 20 05:47:41 CST 2015 x86_64
GNU/Linux
</code></pre>

<p>With the new version of kernel, you won&rsquo;t face too much problems, my problem is when
using the official kernel, my wifi will get stucked, sometimes the machine will be
dead.</p>
]]></content>
  </entry>
  
</feed>
