<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-09-27T23:37:34+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sharing Mouse/Keyboard Among 3 Nodes]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/09/22/sharing-mouse-slash-keyboard-among-3-nodes/"/>
    <updated>2015-09-22T20:42:04+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/09/22/sharing-mouse-slash-keyboard-among-3-nodes</id>
    <content type="html"><![CDATA[<p>I have 3 computers which runs ArchLinux/Ubuntu15.04 Mate, they both connected
to the same ethernet, I&rsquo;d like to use only one mouse/keyboard for controlling
them, following are the steps for how-to.</p>

<h3>Network Configuration</h3>

<p>The 3 computer are listed as following:  <br/>
* 192.168.1.11/dashArch/ArchLinux
* 192.168.1.13/dash32G/Ubuntu15.04
* 192.168.1.10/dashMate/Ubuntu15.04</p>

<p>Edit the <code>/etc/hosts</code> in 192.168.1.11:</p>

<pre><code>$ sudo vim /etc/hosts
192.168.1.13    dash32G
192.168.1.14    dashMate
</code></pre>

<p>In 192.168.1.13, Edit <code>/etc/hosts</code>:</p>

<pre><code>$ sudo vim /etc/hosts
192.168.1.11    dashArch
</code></pre>

<h3>Synergy Server</h3>

<p>I use ArchLinux for Synergy Server, install it simply via:</p>

<pre><code>$ sudo pacman -S synergy
</code></pre>

<p>Run synergy via <code>synergy</code>, now configure it:</p>

<p><img src="/images/2015_09_22_20_47_11_692x530.jpg" alt="/images/2015_09_22_20_47_11_692x530.jpg" /></p>

<p>By drag a new machine in the configuration window, named dash32G:</p>

<p><img src="/images/2015_09_22_21_00_13_732x508.jpg" alt="/images/2015_09_22_21_00_13_732x508.jpg" /></p>

<p>Also drag a new machine in the configuraitn window, named dashMate:</p>

<p><img src="/images/2015_09_22_22_35_02_607x363.jpg" alt="/images/2015_09_22_22_35_02_607x363.jpg" /></p>

<p>Save the conf file as <code>~/SynergyArch.conf</code>, then configure the systemctl.</p>

<p>Start the Synergy Server at the startup:</p>

<pre><code>$ cat /usr/lib/systemd/synergys@.service 
[Unit]
Description=Synergy Server Daemon
After=network.target

[Service]
User=%i
ExecStart=/usr/bin/synergys --no-daemon --config /home/dash/SynergyArch.conf --enable-crypto
Restart=on-failure

[Install]
WantedBy=multi-user.target
$ sudo systemctl start synergys@dash
$ sudo systemctl enable synergys@dash
Created symlink from
/etc/systemd/system/multi-user.target.wants/synergys@dash.service to
/usr/lib/systemd/system/synergys@.service.
</code></pre>

<h3>Synergy Client</h3>

<p>Install synergy client on Ubuntu via:</p>

<pre><code>$ sudo apt-get install -y synergy
</code></pre>

<p>Configure the synergy as the client mode, like following:</p>

<p><img src="/images/2015_09_22_21_18_42_697x546.jpg" alt="/images/2015_09_22_21_18_42_697x546.jpg" /></p>

<p>Save the configuration file under your home directory, named it as
<code>synergyconfig.conf</code>.</p>

<p>Since the Ubuntu15.04 Mate use lightdm for login, we add following line into
lightdm&rsquo;s configuration file:</p>

<pre><code>$ sudo vim /usr/share/lightdm/lightdm.conf.d/50-ubuntu-mate.conf
+ greeter-setup-script=/usr/bin/synergyc 192.168.1.11
</code></pre>

<p>The same configuration should be applied to dashMate.</p>

<h3>Conclusion</h3>

<p>Now restart the computer, and everytime you could switch from different
machines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trouble-Shooting on ChromeOS's Crouton Updating]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/09/10/trouble-shooting-on-chromeoss-crouton-updating/"/>
    <updated>2015-09-10T10:17:17+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/09/10/trouble-shooting-on-chromeoss-crouton-updating</id>
    <content type="html"><![CDATA[<h3>Problem</h3>

<p>After updating of ChromeOS itself, the crouton failed to start with following message:</p>

<pre><code>Entering /mnt/stateful_partition/crouton/chroots/xxxxxx...

ERROR: ld.so: object '/usr/local/lib/croutonfreon.so' from LD_PRELOAD cannot be
preloaded (cannot open shared object file): ignored.
_XSERVTransmkdir: Owner of /tmp/.X11-unix should be set to root
</code></pre>

<h3>Solution</h3>

<p>First setup the proxy for acrossing the Fucking Great Fire Wall.</p>

<p>In another PC which have the socket proxy, install privoxy:</p>

<pre><code>$ sudo apt-get install -y privoxy
</code></pre>

<p>Oh sorry I have to delete the whole chroot environment, delete it via:</p>

<pre><code>$ sudo delete-chroot trusty
</code></pre>

<p>This time try kali, list all of the available rleases via:</p>

<pre><code>$ sh ~/Downloads/crouton -r list
</code></pre>

<p>Install it via:</p>

<pre><code>$ sudo sh -e ~/Downloads/crouton -r kali -t x11
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Remove Maas-dhcp]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/31/tips-on-remove-maas-dhcp/"/>
    <updated>2015-08-31T12:07:37+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/31/tips-on-remove-maas-dhcp</id>
    <content type="html"><![CDATA[<h3>Solution</h3>

<p>Previous I always encounter problems in removing maas-dhcp, so I checked some materials
show the result is because I disabled apparmor, the solution is:</p>

<pre><code>$ vim /etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT="security=selinux selinux=1  apparmor=1 security=apparmor"
</code></pre>

<p>Add apparmor related, and reboot the computer.  <br/>
Now you could remove the maas-dhcp and install new softwares.</p>

<h3>TIPS</h3>

<h4>apparmor status</h4>

<p>View apparmor status:</p>

<pre><code>sudo apparmor_status
</code></pre>

<h4>Track Reason</h4>

<p>Via restart you could know the exact reason:</p>

<pre><code>$ sudo /etc/init.d/apparmor restart
* Reloading AppArmor profiles * AppArmor not available as kernel LSM.
[fail]
</code></pre>

<p>The reason is because the LSM is not avaiable, by editing the grub configuration you
could enable apparmor again.</p>

<h3>Disable checking in deb</h3>

<p>Hold the package, then you could continue with installing other packages.</p>

<pre><code># sudo apt-mark hold &lt;package&gt;
OR
# echo &lt;package&gt; hold | sudo dpkg --set-selections
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for SSD Installation]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/30/tips-for-ssd-installation/"/>
    <updated>2015-08-30T14:45:24+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/30/tips-for-ssd-installation</id>
    <content type="html"><![CDATA[<p>Refers to:  <br/>
<a href="https://wiki.archlinux.org/index.php/Beginners'_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">https://wiki.archlinux.org/index.php/Beginners'<em>guide</em>%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29</a></p>

<h3>Partition</h3>

<p>Check if you are in efi mode:</p>

<pre><code># efivar -l
</code></pre>

<p>Then format your disk using parted:</p>

<pre><code># parted /dev/sda
(parted) mkpart ESP fat32 1M 513M
(parted) set 1 boot on
(parted) mkpart primary ext4 513M 100%
</code></pre>

<p>Check if your partition is aligned:</p>

<pre><code># blockdev --getalignoff /dev/sda
0
</code></pre>

<p>I have 2 disks, one for ssd, the other for hdd, so I want to share the swap partition,
and locate the /var directory in the hdd, modify it via:</p>

<pre><code># mkfs.ext4 /dev/sda2
# mkfs.vfat -F32 /dev/sda1
# mount /dev/sda2 /mnt
# mkdir -p /mnt/boot
# mount /dev/sda1 /mnt/boot
# swapon /dev/sdb1
# mkdir /media/
# mount /dev/sdb2 /media
# mkdir /media/var_for_sda
# ln -s /media/var_for_sda /mnt/var
</code></pre>

<p>Now you could do pacstrap.</p>

<h3>Installation</h3>

<p>Installation are the same as the guildeline show,</p>

<pre><code># pacman -S dosfstools efibootmgr
# bootctl --path=/boot install
# vim /boot/loader/entries/arch.conf
title          Arch Linux
linux          /vmlinuz-linux
initrd         /initramfs-linux.img
options        root=/dev/sda2 rw
# vim /boot//loader/loader.conf
#timeout 3
default arch
timeout 5
</code></pre>

<p>For wireless connection:</p>

<pre><code># pacman -S iw wpa_supplicant
# pacman -S dialog
</code></pre>

<p>Modification of the /etc/fstab:</p>

<pre><code># /dev/sda2
UUID=xxxxxxxxxxxxxxxxxxxxxxxx       /               ext4 default,rw,data=ordered,noatime,discard 0 1

# /dev/sda1
UUID=xxxxxxxxxxxxxxxxx          /boot           vfat rw,noatime,discard,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro  0 2

# /dev/sdb1
UUID=xxxxxxxxxxxxxxxxxxx       none            swap defaults        0 0

# /dev/sdb2
UUID=xxxxxxxxxxxxxxxxxxx       /media          ext4  rw,relatime,data=ordered        0 2

# Only for /var , use mount -o bind
/media/var_for_sda      /var    none    bind
</code></pre>

<p>Now reboot everything will be OK.</p>

<h3>Configuration For SSD</h3>

<p>Profile-sync-daemon for optimization of Browser :</p>

<pre><code>$ yaourt profile-sync-daemon
$ sudo vim /etc/psd.conf
USERS="XXXXX"
BROWSERS="chromium firefox"
USE_OVERLAYFS="yes"
$ sudo systemctl enable psd.service
$ sudo systemctl start psd.service
</code></pre>

<p>Test it via:</p>

<pre><code>$ profile-sync-daemon parse
</code></pre>

<p>Use <code>firefox -P</code> for changing the profile position. I put all of the profils on HDD.</p>

<p>For chromium, softlink the ~/.config/chromium to HDD disk then you play the tricks for
avoiding HDD from too much write.   .</p>

<h3>Quickly Add User</h3>

<p>Use following command for quickly adding the user with specified priviledge:</p>

<pre><code># useradd -m -g root -G \
audio,video,floppy,network,rfkill,scanner,storage,optical,power,wheel,uucp -s  \
/usr/bin/zsh xxxxx
# passwd xxxxx
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GPT/SSD on ArchLinux Installation]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/30/gpt-slash-ssd-on-archlinux-installation/"/>
    <updated>2015-08-30T09:18:15+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/30/gpt-slash-ssd-on-archlinux-installation</id>
    <content type="html"><![CDATA[<p>Since I met so many problems in archlinux installation on SSD, plus UEFI issues, I use
following virt machine for re-produce the problem and try to find out the solution.</p>

<h3>Prepare</h3>

<p>Prepare two disk, one for SSD, the second is the oridinary one.</p>

<pre><code>$ qemu-img create -f qcow2 -o cluster_size=4k ArchSSD.qcow2 100G
$ qemu-img create -f qcow2 ArchHDD.qcow2 80G
$ virt-manage
</code></pre>

<h3>UEFI Support In Virt-Manager</h3>

<p>Follow the tips in
<a href="https://fedoraproject.org/wiki/Using_UEFI_with_QEMU">https://fedoraproject.org/wiki/Using_UEFI_with_QEMU</a></p>

<pre><code># wget http://www.kraxel.org/repos/firmware.repo -O /etc/yum.repos.d/firmware.repo
# yum install edk2.git-ovmf-x64
# vim /etc/libvirt/qemu.conf
 nvram = [
    "/usr/share/edk2.git/ovmf-x64/OVMF_CODE-pure-efi.fd:/usr/share/edk2.git/ovmf-x64/OVMF_VARS-pure-efi.fd",
 ]
</code></pre>

<p>In customization of the vm, select like following:</p>

<p><img src="/images/2015_08_30_10_09_31_306x202.jpg" alt="/images/2015_08_30_10_09_31_306x202.jpg" /></p>

<h3>Virtual Machine Definition</h3>

<p>The configuration of the vm machine is listed as in following picture:</p>

<p><img src="/images/2015_08_30_09_28_46_445x204.jpg" alt="/images/2015_08_30_09_28_46_445x204.jpg" /></p>

<p>So now begin to install virt-machine. Use iso for booting up the machine and you will
see following partition configuration in the terminal:</p>

<pre><code>root@archiso ~ # fdisk -l /dev/vda
Disk /dev/vda: 100 GiB, 107374182400 bytes, 209715200 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
root@archiso ~ # fdisk -l /dev/vdb
Disk /dev/vdb: 80 GiB, 85899345920 bytes, 167772160 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
</code></pre>

<h3>Partition Preparation</h3>
]]></content>
  </entry>
  
</feed>
