<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-06-25T22:24:00+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use 8188eu and Hostapd for Setting Soft-AP Router]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/11/use-8188eu-and-hostapd-for-setting-soft-ap-router/"/>
    <updated>2015-06-11T16:25:51+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/11/use-8188eu-and-hostapd-for-setting-soft-ap-router</id>
    <content type="html"><![CDATA[<h3>HostAPD</h3>

<p>Install HostAPD via following commands:</p>

<pre><code>$ sudo apt-get autoremove hostapd
$ wget https://github.com/jenssegers/RTL8188-hostapd/archive/v2.0.tar.gz
$ tar -zxvf v2.0.tar.gz
$ cd RTL8188-hostapd-2.0/hostapd
$ sudo make
$ sudo make install
$ sudo service hostapd restart
[ ok ] Stopping advanced IEEE 802.11 management: hostapd.
[ ok ] Starting advanced IEEE 802.11 management: hostapd.
</code></pre>

<h3>dhcpd</h3>

<p>We need a dhcp server for assigning a new IP address to the clients who joins the ap:  <br/>
An example file is listed as following:</p>

<pre><code>ddns-update-style none;
ignore client-updates;
authoritative;
option local-wpad code 252 = text;

subnet
10.0.0.0 netmask 255.255.255.0 {
# --- default gateway
option routers
10.0.0.1;
# --- Netmask
option subnet-mask
255.255.255.0;
# --- Broadcast Address
option broadcast-address
10.0.0.255;
# --- Domain name servers, tells the clients which DNS servers to use.
option domain-name-servers
10.0.0.1, 8.8.8.8, 8.8.4.4;
option time-offset
0;
range 10.0.0.3 10.0.0.13;
default-lease-time 1209600;
max-lease-time 1814400;
}
</code></pre>

<h3>WLAN0 Network</h3>

<p>The WLAN0 equipment network should be configured as following:</p>

<pre><code>$ cat /etc/network/interface
# wireless wlan0
allow-hotplug wlan0
iface wlan0 inet static
address 10.0.70.1
netmask 255.255.255.0
</code></pre>

<p>So next time you reboot the computer, it will automatically get the ip address for wlan0.</p>

<h3>Enable the ip forwarding</h3>

<p>Using following 2 commands for enabling your AP.</p>

<pre><code>$ sudo iptables -t nat -A POSTROUTING -s 10.0.70.0/24 ! -d 10.0.70.0/24  -j MASQUERADE
$ sudo dhcpd wlan0
</code></pre>

<p>I add these two lines into the start file of awesome(My desktop environment).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef TroubleShooting 2]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/08/chef-troubleshooting-2/"/>
    <updated>2015-06-08T19:43:13+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/08/chef-troubleshooting-2</id>
    <content type="html"><![CDATA[<p>The ssl checking for adding new nodes is still a horrible procedure, following shows the correct steps for adding new node:</p>

<p>On Chef Workstation, add node via its ip address rather than via its hostname:</p>

<pre><code>$ knife bootstrap 172.16.0.12 -x username_on_12 -P password_on_12 --sudo
</code></pre>

<p>The example knife.rb file should be written like following:</p>

<pre><code>current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
node_name                "nodename"
client_key               "#{current_dir}/node.pem"
validation_client_name   "nodename"
validation_key           "#{current_dir}/node_org.pem"
chef_server_url          "https://tmpChefServer/organizations/nodename"
syntax_check_cache_path  "#{ENV['HOME']}/.chef/syntaxcache"
cookbook_path            ["#{current_dir}/../cookbooks"]
</code></pre>

<p>On Chef Client, first fetching the ssl, then manually passed the verification.</p>

<pre><code>$ knife ssl fetch --config /etc/chef/client.rb
$ chef-client -l debug -S https://ChefServer/organizations/xxxxx -K /xxx/xxx/xxxxx.pem
</code></pre>

<p>On Chef Server, bootstrap again via the same command, now you could work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly Change CentOS Networking]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/07/quickly-change-centos-networking/"/>
    <updated>2015-06-07T14:44:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/07/quickly-change-centos-networking</id>
    <content type="html"><![CDATA[<p>When adding the existing qcow2 files to a new machine, following steps needs to be done to enable the new configuration for the networking:</p>

<h3>Change udev rules</h3>

<p>Change the eth1 to eth0, and disable the previous defined eth0:</p>

<pre><code>[root@CentOSVM1 ~]# cat /etc/udev/rules.d/70-persistent-net.rules
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

# PCI device 0x1af4:0x1000 (virtio-pci)
#SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="52:54:00:23:14:96", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"

# PCI device 0x1af4:0x1000 (virtio-pci)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="52:54:00:bc:c6:f5", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
</code></pre>

<h3>Change the ethernet configuration</h3>

<h4>Hostname</h4>

<p>The hostname and the gateway could be modified via:</p>

<pre><code># cat /etc/sysconfig/network
NETWORKING=yes
+ HOSTNAME=CentOSVM1
+ GATEWAY=172.16.0.1
</code></pre>

<h4>Change the IP configuration of the eth0</h4>

<pre><code>[root@CentOSVM1 ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
TYPE=Ethernet
UUID=9d92e12c-54a3-404a-bd1c-ae033e8e968c
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=none
+ IPADDR=172.16.0.20
PREFIX=24
GATEWAY=172.16.0.1
DNS1=114.114.114.114
DNS2=180.76.76.76
DEFROUTE=yes
IPV4_FAILURE_FATAL=yes
IPV6INIT=no
NAME="System eth0"
#HWADDR=52:54:00:23:14:96
+ HWADDR=52:54:00:BC:C6:F5
</code></pre>

<p>By now you could customize the network configuration of the CentOS using the same qcow2 disk file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef for Deploying OpenStack]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/06/01/chef-for-deploying-openstack/"/>
    <updated>2015-06-01T11:19:34+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/06/01/chef-for-deploying-openstack</id>
    <content type="html"><![CDATA[<p>Following article records all of the steps for using chef for deploying OpenStack.</p>

<p>Refers to:  <br/>
<a href="http://ehaselwanter.com/en/blog/2014/10/15/deploying-openstack-with-stackforge-chef-zero-style/">http://ehaselwanter.com/en/blog/2014/10/15/deploying-openstack-with-stackforge-chef-zero-style/</a></p>

<h3>Change vbox files</h3>

<p>Edit the Vagrantfile for bring up the vbox, then startup the machine, modify its content , save it.</p>

<pre><code>$ vim Vagrantfile
    # -*- mode: ruby -*-
    # vi: set ft=ruby :
    Vagrant::Config.run do |config|
    config.vm.box = "Trusy64"
    config.vm.box_url = "http://xxx.xxx.xxx.xxx/opscode_ubuntu-14.04_chef-provisionerless.box"
    config.vm.customize ["modifyvm", :id, "--memory", 1024]
    end
</code></pre>

<p>Login to the running machine and modify its default repository from official to local repository.</p>

<pre><code>$ vagrant up
$ vagrant ssh
(YourVagrantMachine) $ sudo vim /etc/apt/sources.list
(YourVagrantMachine) $ sudo vim /etc/apt/apt.conf
(YourVagrantMachine) $ sudo apt-get update &amp;&amp; sudo apt-get -y upgrade
</code></pre>

<p>Now save your modification to the vbox file:</p>

<pre><code>$ vagrant package --base vagrant_default_1433130468275_38998
$ ls
package.box Vagrantfile
</code></pre>

<h3>Setup Chef Code</h3>

<p>First install the vagrant plugins via:</p>

<pre><code>$ vagrant plugin install vagrant-berkshelf
$ vagrant plugin install vagrant-chef-zero
$ vagrant plugin install vagrant-omnibus
$ vagrant plugin list
</code></pre>

<p>Get the repository from github, modify the file <code>vagrant_linux.rb</code>:</p>

<pre><code>[xxxx@~/Code/Chef/MasterVersion]$ git clone https://github.com/stackforge/openstack-chef-repo.git
$ cd openstack-chef-repo
$ vim vagrant_linux.rb
  #url 'http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-7.1_chef-provisionerless.box'
  url 'http://xxx.xxx.xxx.xxx/opscode_centos-7.1_chef-provisionerless.box'

  #url 'http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-14.04_chef-provisionerless.box'
  url 'http://xxx.xxx.xxx.xxx/package.box'

  'vm.box' =&gt; 'ubuntu14'
</code></pre>

<p>Download all of the cookbooks, and modify the rubygems.org to Chinese mirror, Thanks for the fucking GreatFW!:</p>

<pre><code>$ chef exec rake berks_vendor
$ cp -r cookbooks cookbooks.back
$ cd cookbooks
$ find . -type f -exec sed -i -e 's/https:\/\/rubygems.org/http:\/\/mirrors.aliyun.com\/rubygems/g' {} \; 
</code></pre>

<p>Edit the ruby definition file for avoiding <code>Chef encountered an error attempting to load the node data for "controller"</code>:</p>

<pre><code>$ vim ./aio-neutron.rb
machine 'controller' do
  add_machine_options vagrant_config: controller_config
+  chef_server( :chef_server_url =&gt; 'http://localhost:8889')
  role 'allinone-compute'
  role 'os-image-upload'
</code></pre>

<p>One Cookbook needs to modify, because it will automatically use source from <code>rubygems.org</code>, Thanks again for the fucking GreatFW!:</p>

<pre><code>$ cd cookbooks
$ vim ./mysql2_chef_gem/libraries/provider_mysql2_chef_gem_mysql.rb
             options("--clear-sources --source http://mirrors.aliyun.com/rubygems/gems/mysql2-0.3.18.gem") 
</code></pre>

<p>Now begin to provision via:</p>

<pre><code>$ chef exec rake aio_neutron 2&gt;&amp;1 | tee aio_neutron.txt
</code></pre>

<p>After installation and configuration, you could visit following URL for your OpenStack:</p>

<p><a href="https://127.0.0.1:9443">https://127.0.0.1:9443</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Apt-cacher for Speeding Up Deployment]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/23/use-apt-cacher-for-speeding-up-deployment/"/>
    <updated>2015-05-23T08:27:55+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/23/use-apt-cacher-for-speeding-up-deployment</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Install apt-cacher via following command:</p>

<pre><code>$ sudo apt-get install apt-cacher
</code></pre>

<p>Choose &ldquo;Daemon&rdquo; When you see following picture:</p>

<p><img src="/images/2015_05_23_08_28_39_418x264.jpg" alt="/images/2015_05_23_08_28_39_418x264.jpg" /></p>

<h3>Configuration</h3>

<p>Make sure the configuration <code>AUTOSTART=1</code> in <code>/etc/default/apt-cacher</code>.</p>

<p>Enable <code>allowed_hosts=*</code> in <code>/etc/apt-cacher/apt-cacher.conf</code>.</p>

<p>Now restart the machine, and check the apt-cacher service via following command:</p>

<pre><code>$ ps -ef | grep apt
www-data   825     1  0 20:34 ?        00:00:00 /usr/bin/perl /usr/sbin/apt-cacher -R 3 -d -p /var/run/apt-cacher.pid
$ sudo netstat -anp | grep 3142
tcp6       0      0 :::3142                 :::*                    LISTEN      825/perl
</code></pre>

<p>Now when you setup the machines, point the http-proxy into this machine, it will automatically cache the packages.</p>
]]></content>
  </entry>
  
</feed>
