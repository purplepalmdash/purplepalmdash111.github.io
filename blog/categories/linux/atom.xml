<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-03-17T13:16:47+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[把玩ebuddy(4)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/15/ba-wan-ebuddy-4/"/>
    <updated>2016-03-15T14:25:48+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/15/ba-wan-ebuddy-4</id>
    <content type="html"><![CDATA[<p>总结了一下ebuddy的玩法，最近加了点玩法，就是用ebuddy作为Bash运行脚本后的提示部件。譬如
，当完成了某个编译任务后，用ebuddy来告知任务的运行成功。</p>

<pre><code>$ Task A ; NOTIFY EBUDDY
</code></pre>

<h3>/bin/ebuddy</h3>

<p>创建一个<code>/bin/ebuddy</code>的文件，内容如下:</p>

<pre><code>#!/bin/bash
FILE=/tmp/ebuddy
while true
do
    # if exists the file, then blinking the ebuddy.
  if [ -f $FILE ];
  then
      # Exists the file, shining the ebuddy
     echo 07 &gt; /dev/udp/127.0.0.1/8888
  else
      # Now clear the status of the ebuddy
     echo 17 &gt; /dev/udp/127.0.0.1/8888
  fi
#echo 07 &gt; /dev/udp/127.0.0.1/8888
sleep 3
done
</code></pre>

<p>这个文件的意思是，如果存在<code>/tmp/ebuddy</code>文件，ebuddy的头会亮起，否则，清除ebuddy的状态。</p>

<h3>notifyebuddy &amp;&amp; clearebuddy</h3>

<p>这两个命令是做在.zshrc里的两个alias:</p>

<pre><code>$ vim ~/.zshrc
# For Using ebuddy
alias notifyebuddy='touch /tmp/ebuddy'
alias clearebuddy='rm -f /tmp/ebuddy'
</code></pre>

<p>这样我们可以在运行完某个命令后，告知ebuddy完成事件。</p>

<h3>局限</h3>

<p>不能同时标识两个以上的命令完成情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用squid缓存所有rpm/deb安装包]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/15/shi-yong-squidhuan-cun-suo-you-rpm-slash-deban-zhuang-bao/"/>
    <updated>2016-03-15T10:23:34+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/15/shi-yong-squidhuan-cun-suo-you-rpm-slash-deban-zhuang-bao</id>
    <content type="html"><![CDATA[<p>在进行自动化部署的时候，需要频繁安装系统，鉴于工作环境的带宽有限，我需要设置一个代理服
务器，用于缓存所有的RPM/DEB安装包，以便自动化部署可以在瞬间完成。</p>

<p>以下示例运行在ArchLinux上。</p>

<h3>Squid搭建</h3>

<p>Squid介绍:</p>

<p>Squid 是一个 Web 缓存代理，支持 HTTP, HTTPS, FTP, 以及更多。它通过缓存与重用经常请求的
web页面，减少带宽使用同时提升了响应时间。Squid 具有可扩展的访问控制功能，同时可以使服务
器加速。它运行在 Unix 和 Windows 中，采用 GNU GPL 协议发布。</p>

<p>安装squid:</p>

<pre><code>$ sudo pacman -S squid
</code></pre>

<p>我们需要配置squid以便它能适配我们的环境，我的环境里主要需要做以下几个事情： <br/>
1. 更改squid缓存目录到/home分区。  <br/>
2. 更改squid缓存目录大小为30G以上。  <br/>
3. 更改缓存文件大小，以便它支持大的RPM/DEB包。</p>

<p>更改缓存目录， 找到以下的行，在其下添加我们自定义的缓存目录:</p>

<pre><code>$ sudo vim /etc/squid/squid.conf
# Uncomment and adjust the following to add a disk cache directory.
#cache_dir ufs /var/cache/squid 100 16 256
cache_dir ufs /home/dash/squid 30000 16 256
</code></pre>

<p>我们将在指定目录下创建目录， 第一层数为16, 每个文件夹下最多包含256个子文件夹。</p>

<p>在配置文件的最后加入以下行，以支持更大的缓存文件:</p>

<pre><code>$ sudo vim /etc/squid/squid.conf
maximum_object_size 200 MB
</code></pre>

<p>现在开始创建缓存目录:</p>

<pre><code>$ squid -z
</code></pre>

<p>启动服务后，运行检查</p>

<pre><code>$ sudo systemctl restart squid
$ sudo systemctl enable squidz
$ sudo systemctl -k check
</code></pre>

<p>验证可以通过<code>netstat -anp | grep 3128</code>来检查squid进程是否运行。</p>

<h3>使用squid代理</h3>

<h3>apt-cacher</h3>

<p>以上设置的代理仅能支持RPM包的工作，对于DEB包我们需要使用apt-cacher, 在ArchLinux上安装和配置apt-cacher:</p>

<pre><code>$ yaourt apt-cacher
$ sudo vim /etc/apt-cacher-ng/acng.conf
CacheDir: /home/nomodify/apt-cacher
Port: 3142
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置Qemu的VDE网络]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/10/pei-zhi-qemude-vdewang-luo/"/>
    <updated>2016-03-10T14:18:43+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/10/pei-zhi-qemude-vdewang-luo</id>
    <content type="html"><![CDATA[<p>为了快速验证镜像，配置出一个在本机上的tap0端口，虚拟机则通过VDE虚拟交换机连接到此端口后
，DHCP获得IP地址，从而得到网络连接， 以下是步骤。</p>

<h3>安装VDE</h3>

<p>ArchLinux下安装命令为<code>sudo pacman -S vde2</code>.</p>

<h3>配置</h3>

<p>贴出配置文件如下, 摘录自ArchLinux的Wiki. 值得注意的是，在Systemd的配置文件中，需要先把
tun驱动装载上，才能使得VDE启动成功。</p>

<p>配置qemu网络环境配置脚本:</p>

<pre><code class="sh">$ vim /etc/systemd/scripts/qemu-network-env 
#!/bin/sh
# QEMU/VDE network environment preparation script

# The IP configuration for the tap device that will be used for
# the virtual machine network:

TAP_DEV=tap0
TAP_IP=10.33.34.254
TAP_MASK=24
TAP_NETWORK=10.33.34.0

# Host interface
NIC=enp2s0

case "$1" in
  start)
        echo -n "Starting VDE network for QEMU: "

        # If you want tun kernel module to be loaded by script uncomment here
        modprobe tun 2&gt;/dev/null
        # Wait for the module to be loaded
        while ! lsmod | grep -q "^tun"; do echo "Waiting for tun device"; sleep 1; done

        # Start tap switch
        vde_switch -tap "$TAP_DEV" -daemon -mod 660 -group users

        # Bring tap interface up
        ip address add "$TAP_IP"/"$TAP_MASK" dev "$TAP_DEV"
        ip link set "$TAP_DEV" up

        # Start IP Forwarding
        echo "1" &gt; /proc/sys/net/ipv4/ip_forward
        iptables -t nat -A POSTROUTING -s "$TAP_NETWORK"/"$TAP_MASK" -o "$NIC" -j MASQUERADE
        ;;
  stop)
        echo -n "Stopping VDE network for QEMU: "
        # Delete the NAT rules
        iptables -t nat -D POSTROUTING "$TAP_NETWORK"/"$TAP_MASK" -o "$NIC" -j MASQUERADE

        # Bring tap interface down
        ip link set "$TAP_DEV" down

        # Kill VDE switch
        pgrep -f vde_switch | xargs kill -TERM
        ;;
  restart|reload)
        $0 stop
        sleep 1
        $0 start
        ;;
  *)
        echo "Usage: $0 {start|stop|restart|reload}"
        exit 1
esac
exit 0
</code></pre>

<p>配置symtemd服务:</p>

<pre><code class="sh">$ vim /etc/systemd/system/qemu-network-env.service
[Unit]
Description=Manage VDE Switch

[Service]
Type=oneshot
ExecStart=/etc/systemd/scripts/qemu-network-env start
ExecStop=/etc/systemd/scripts/qemu-network-env stop
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
</code></pre>

<p>使能服务，并重新启动机器:</p>

<pre><code>$ sudo systemctl enable qemu-network-env.service
</code></pre>

<h3>配置DHCPD</h3>

<p>需要配置dhcpd以使得在<code>10.33.34.0/24</code>网段提供DHCP服务：</p>

<pre><code>$ sudo vim /etc/dhcpd.conf

subnet
10.33.34.0 netmask 255.255.255.0 {
# --- default gateway
option routers
10.33.34.254;
# --- Netmask
option subnet-mask
255.255.255.0;
# --- Broadcast Address
option broadcast-address
10.33.34.255;
# --- Domain name servers, tells the clients which DNS servers to use.
option domain-name-servers
223.5.5.5,180.76.76.76;
option time-offset 0;
range 10.33.34.2 10.33.34.253;
default-lease-time 1209600;
max-lease-time 1814400;
}
</code></pre>

<p>修改完dhcpd的配置后， 重新启动dhcpd服务:</p>

<pre><code>$ sudo systemctl restart dhcpd4
</code></pre>

<h3>启动虚拟机</h3>

<p>启动虚拟机，并使其使用我们刚才添加的vde网络:</p>

<pre><code>$ sudo qemu-system-x86_64 -net nic -net vde -hda ./test1.qcow2 -m 2048 --enable-kvm
</code></pre>

<p>启动的虚拟机将获得10.33.34.2~10.33.33.253之间的地址。    <br/>
如果使用普通用户，会出错， To be solved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把玩ebuddy(3)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/05/ba-wan-ebuddy-3/"/>
    <updated>2016-03-05T21:39:41+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/05/ba-wan-ebuddy-3</id>
    <content type="html"><![CDATA[<p>早上起来刷微信, 觉得网页版微信的提示信息大可用ebuddy来响应. 说干就干,以下是解
决方案.</p>

<h3>gnotifier</h3>

<p>写作时,我的firefox版本是44.0.2, 需要安装gnotifier这个插件,从而把firefox的提示
消息转为系统提示信息, 下载地址在:</p>

<p><a href="https://addons.mozilla.org/en-US/firefox/addon/gnotifier/">https://addons.mozilla.org/en-US/firefox/addon/gnotifier/</a></p>

<p>点击<code>Add to Firefox</code>即完成安装:</p>

<p><img src="/images/2016_03_05_21_50_12_766x490.jpg" alt="/images/2016_03_05_21_50_12_766x490.jpg" /></p>

<h3>查看dbus消息</h3>

<p>gnotifier将网页版微信的提示消息转为了系统提示消息, 那么只需要获取到系统消息总
线里的提示信息, 筛选出我们要的类型后, 给ebuddy发送相应的指令即可.</p>

<p><code>dbus-monitor</code>工具可用于侦听dbus总线里的消息, 我们来运行一下,如下:</p>

<pre><code>$  dbus-monitor --session
interface='org.freedesktop.Notifications',member='Notify'

signal time=1457186062.137082 sender=org.freedesktop.DBus -&gt;
destination=:1.163 serial=2 path=/org/freedesktop/DBus;
interface=org.freedesktop.DBus; member=NameAcquired
   string ":1.163"
signal time=1457186062.137154 sender=org.freedesktop.DBus -&gt;
destination=:1.163 serial=4 path=/org/freedesktop/DBus;
interface=org.freedesktop.DBus; member=NameLost
   string ":1.163"
method call time=1457186083.405690 sender=:1.39 -&gt; destination=:1.14
serial=220 path=/org/freedesktop/Notifications;
interface=org.freedesktop.Notifications; member=Notify
   string "Firefox"
   uint32 0
   string "/tmp/gnotifier-3Fh5Sa"
   string "yfp"
   string "[Sticker][Sticker][Sticker]"
   array [
   ]
   array [
   ]
   int32 -1
method call time=1457186086.866000 sender=:1.39 -&gt; destination=:1.14
serial=221 path=/org/freedesktop/Notifications;
interface=org.freedesktop.Notifications; member=Notify
   string "Firefox"
   uint32 0
   string "/tmp/gnotifier-9kaLsI"
   string "yfp"
   string "test"
   array [
   ]
   array [
   ]
   int32 -1
</code></pre>

<p>以上是两条从微信号为<code>yfp</code>的用户发送给网页端微信的dbus总线消息, 我们要注意的是,
需要从dbus session总线取得此信息(system bus和session bus的差别可以自行Google).</p>

<h3>python2-dbus</h3>

<p>ArchLinux下有<code>python-dbus</code>和<code>python2-dbus</code>两个关于dbus的python绑定库, 个人比较
习惯python2的缘故,安装<code>python2-dbus</code></p>

<pre><code>$ sudo pacman -Ss python2-dbus
extra/python2-dbus 1.2.0-5 [installed]
    Python 2.7 bindings for DBUS
</code></pre>

<p>用于过滤/提取dbus总线消息的python代码如下, 另存为<code>DbusEbuddy.py</code>:</p>

<pre><code class="python">import glib
import dbus
import subprocess
from dbus.mainloop.glib import DBusGMainLoop

def notifications(bus, message):
    if (len(message.get_args_list()) &gt; 0):
        if ('Firefox' == message.get_args_list()[0]):
                if ('yfp' == message.get_args_list()[3]):
                    bashCommand = 'echo 01 &gt; /dev/udp/127.0.0.1/8888'
                    output = subprocess.check_output(['bash','-c',bashCommand])

DBusGMainLoop(set_as_default=True)

bus = dbus.SessionBus()
bus.add_match_string_non_blocking("eavesdrop=true,\
    interface='org.freedesktop.Notifications', member='Notify'")
bus.add_message_filter(notifications)

mainloop = glib.MainLoop()
mainloop.run()
</code></pre>

<p>简单解释一下, 这几行代码首先attach到dbus的sessionbus总线,
<code>org.freedesktop.Notification</code>端口上所有<code>Notify</code>的成员, 如果匹配到这种消息, 则
通过<code>add_message_filter()</code>调用回调函数.</p>

<p><code>notifications</code>是我们定义的回调函数,这个回调函数同样很简单, 如果消息长度大于
0(消息非空), 则检查消息的来源(<code>message.get_args_list()[0]</code>), 选取来自Firefox的
, 由yfp(<code>messages.get_args_list()[3]</code>)用户发来的消息, 作出对应的动作
(<code>echo 01 &gt; /dev/udp/127.0.0.1/8888</code>).</p>

<h3>使用</h3>

<p>首先开启pybuddyDX库(注意要先安装python2版本的pyusb, 上一篇文章有讲):</p>

<pre><code>$ git clone git@github.com:purplepalmdash/pybuddy-dx.git
$ sudo python2 ~/Code/python/pybuddy-dx/pybuddyDX.py
</code></pre>

<p>此时系统在8888端口监听ebuddy动作, 直接运行<code>DbusEbuddy.py</code></p>

<pre><code>$ sudo python2 ~/Code/python/DbusEbuddy.py
</code></pre>

<p>以后每条由用户yfp发来的消息,都将引发ebuddy人偶执行01指令对应的动作.</p>

<h3>延伸</h3>

<p>可以匹配不同的人名, 执行不同的动作. 例如:</p>

<pre><code>李四  执行02指令
王五  执行12指令
某某群   执行08指令
</code></pre>

<p>当然,根据需要,也可以制定一些规则,譬如某VIP用户, 就是微信里你特别看重的那个人
,TA发消息来以后, 人偶心跳不止(指令19即是). 但这样一来,就引入了清零问题, 即重置
人偶状态, 很简单,我们用<code>notify-send</code>这条命令, 发送出指令17给人偶让它重置状态
即可.</p>

<p>代码的修改:</p>

<pre><code class="python">def notifications(bus, message):
    if (len(message.get_args_list()) &gt; 0):
        if ('Firefox' == message.get_args_list()[0]):
                if ('yfp' == message.get_args_list()[3]):
                    bashCommand = 'echo 19 &gt; /dev/udp/127.0.0.1/8888'
                    output = subprocess.check_output(['bash','-c', bashCommand])
        if ('notify-send' == message.get_args_list()[0]):
                if ('Clear' == message.get_args_list()[3]):
                    bashCommand = 'echo 17 &gt; /dev/udp/127.0.0.1/8888'
                    output = subprocess.check_output(['bash','-c', bashCommand])
</code></pre>

<p>而对应的清空命令则可以写成alias形式(我用的是zsh, bash类似):</p>

<pre><code>$ vim ~/.zshrc
alias clearnotify="notify-send 'Clear' 'This is a clear ebuddy notification.' --icon=dialog-information"
$ source ~/.zshrc
$ clearnotify
</code></pre>

<h3>测试</h3>

<p>现在开始测试, 首先让yfp发微信给浏览器里登录的微信用户, 可以看到, 当浏览器收到
消息后, 系统桌面出现提示, 人偶心脏处的红灯开始狂闪, 不会停止.</p>

<p><img src="/images/1039489558.jpg" alt="/images/1039489558.jpg" /></p>

<p>输入<code>clearnotify</code>命令后, 人偶恢复正常.</p>

<h3>下一步需要做的</h3>

<ol>
<li>Windows响应?</li>
<li>如何通过微信的API获取到好友列表,从而动态指定需要监听的人和事件?</li>
<li>图形界面的配置?</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conntrack-tools Usage]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/02/conntrack-tools-usage/"/>
    <updated>2016-03-02T17:30:31+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/02/conntrack-tools-usage</id>
    <content type="html"><![CDATA[<h3>参考</h3>

<p><a href="https://blogs.it.ox.ac.uk/networks/2014/09/30/linux-and-eduroam-nat-logging-perl-and-regular-expressions/">https://blogs.it.ox.ac.uk/networks/2014/09/30/linux-and-eduroam-nat-logging-perl-and-regular-expressions/</a></p>

<h3>安装</h3>

<p>ArchLinux下:</p>

<pre><code>$ sudo pacman -S conntrack-tools
</code></pre>

<h3>使用</h3>

<p>记录新建/销毁连接数至文件:</p>

<pre><code>$ sudo touch /var/log/conntrack-data.log
$ sudo chmod 777 /var/log/conntrack-data.log
$ sudo conntrack -E -eNEW,DESTROY --src-nat -otimestamp,extended --buffer-size=104857600 &gt; /var/log/conntrack-data.log
</code></pre>
]]></content>
  </entry>
  
</feed>
