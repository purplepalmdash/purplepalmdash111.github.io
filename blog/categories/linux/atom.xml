<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-05-12T21:04:38+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Tips(5)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/05/04/linux-tips-5/"/>
    <updated>2016-05-04T20:03:21+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/05/04/linux-tips-5</id>
    <content type="html"><![CDATA[<h3>1. Detach Running Tasks</h3>

<p><code>Ctrl+Z</code> for suspend the tasks, then <code>bg</code> it, now you could use <code>disown %1</code> for
detaching the running process.</p>

<p>Next time you login, you will see this background task is also running.</p>

<h3>2. Installation of Cobbler</h3>

<p>Shell Scripts:</p>

<p><a href="https://gist.github.com/luisbolson/1d0dc42976d2468171d0">https://gist.github.com/luisbolson/1d0dc42976d2468171d0</a></p>

<h3>3. yum groups</h3>

<p><a href="http://ramblings.narrabilis.com/creating-a-yum-repository-repo-and-creating-a-yum-group-to-install-kickstart">http://ramblings.narrabilis.com/creating-a-yum-repository-repo-and-creating-a-yum-group-to-install-kickstart</a></p>

<h3>4. rvm issue</h3>

<p>rvm met <code>openssl.so (LoadError)</code>, could be solved via following steps.</p>

<pre><code>$  curl https://github.com/ruby/ruby/commit/801e1fe46d83c856844ba18ae4751478c59af0d1.diff &gt; openssl.patch\n
$  rvm install 1.9.3 --with-openssl-dir=$HOME/.rvm/usr --patch ./openssl.patch 
</code></pre>

<h3>5. Get the name of rpm packages</h3>

<p>Only print the name of the rpm package:</p>

<pre><code># rpm -qp --queryformat '%{NAME}\n' *.rpm&gt;package.list
</code></pre>

<h3>6. xargs tips</h3>

<p>Example:</p>

<pre><code># find . -type f -exec grep -ilR "MY PATTERN" {} \; | xargs -I % cp % /dest/dir/
</code></pre>

<p>For me, I find out all of the packges in cache file, and copy them to another position:</p>

<pre><code>$ find . | \grep rpm$ | xargs -I % cp % /home/dash/rpms
</code></pre>

<h3>7. Make local repo</h3>

<p>From the stackoverflow answers.</p>

<pre><code>Yes as you've described it, it sounds doable. I think I would be inclined to do the
following steps.

Setup directories
$ mkdir {Desktop,Desktop_Platform,X_Window_System,Fonts}
Download RPMs
Then run these types of commands to download the RPMs for the given groups:

$ repoquery --qf=%{name} -g --list --grouppkgs=all "Fonts" | \
     xargs -I{} repotrack -a x86_64 -p Fonts/ {}
You can wrap it in a for loop too:

$ for i in "Desktop" "Desktop_Platform" "X_Window_System" "Fonts";do  
    repoquery --qf=%{name} -g --list --grouppkgs=all "$i" | \
       xargs -I{} repotrack -a x86_64 -p $i/ {}; 
  done
This will go through each group and download the packages into their respective
directories.

Re-installation
Then use the command as you've described:

$ yum --nogpgcheck localinstall {Desktop,Desktop_Platform,X_Window_System,Fonts}/*.rpm
</code></pre>

<h3>8. Simple Screen Recorder</h3>

<p>Ubuntu:</p>

<pre><code>sudo add-apt-repository ppa:maarten-baert/simplescreenrecorder
sudo apt-get update
sudo apt-get install simplescreenrecorder
# if you want to record 32-bit OpenGL applications on a 64-bit system:
sudo apt-get install simplescreenrecorder-lib:i386
</code></pre>

<p>ArchLinux:</p>

<pre><code>$ sudo pacman -S simplescreenrecorder
</code></pre>

<h3>9. Convert virtualbox hd to qcow2</h3>

<pre><code>VBoxManage clonehd /home/dash/VirtualBox\ VMs/ansible-cobbler_cobbler-ubuntu_1462410925173_15793/packer-virtualbox-iso-1454031074-disk1.vmdk /home/dash/output.img --format raw &amp;&amp; qemu-img convert -f raw /home/dash/output.img -O qcow2 /home/dash/ansible-cobbler.qcow2
</code></pre>

<h3>10. Ansible issue</h3>

<p>The isssue is:</p>

<pre><code>ansible: ERROR: become is not a legal parameter in an Ansible Playbook
</code></pre>

<p>Solved via upgrading to the newest version of ansible:</p>

<pre><code>$ sudo apt-get install software-properties-common
$ sudo apt-add-repository ppa:ansible/ansible
$ sudo apt-get update
$ sudo apt-get install ansible
</code></pre>

<p>Using the newest ansible you could aoid this error.</p>

<h3>11. Create customized lxc image</h3>

<pre><code>http://unix.stackexchange.com/questions/186638/how-to-make-a-local-template-for-a-linux-container-and-point-to-that
</code></pre>

<p><a href="https://insights.ubuntu.com/2015/03/20/installing-lxd-and-the-command-line-tool/">https://insights.ubuntu.com/2015/03/20/installing-lxd-and-the-command-line-tool/</a></p>

<p><a href="https://www.stgraber.org/2016/03/30/lxd-2-0-image-management-512/">https://www.stgraber.org/2016/03/30/lxd-2-0-image-management-512/</a></p>

<p><a href="https://insights.ubuntu.com/2016/04/01/lxd-2-0-image-management-512/">https://insights.ubuntu.com/2016/04/01/lxd-2-0-image-management-512/</a></p>

<h3>12. Changing to eth0 in Ubuntu</h3>

<p>Modify the name of <code>enps*</code> to <code>eth0/1/2/3/4/</code>, via following steps:</p>

<pre><code>try this: Edit your /etc/default/grub. Change the line from

GRUB_CMDLINE_LINUX=""
to

GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0"
and, finally run:

# update-grub
</code></pre>

<h3>13. MAAS Syncing PXE File</h3>

<p><a href="https://maas.ubuntu.com/docs/sstreams-mirror.html">https://maas.ubuntu.com/docs/sstreams-mirror.html</a>  <br/>
<a href="http://ytooyama.hatenadiary.jp/entry/2016/05/11/002532">http://ytooyama.hatenadiary.jp/entry/2016/05/11/002532</a></p>

<p>For building our own MAAS image:</p>

<p><a href="http://askubuntu.com/questions/744966/how-do-you-install-the-maas-image-builder-on-14-04-lts">http://askubuntu.com/questions/744966/how-do-you-install-the-maas-image-builder-on-14-04-lts</a></p>

<h3>14. Vagrant For MAAS</h3>

<p><a href="https://github.com/battlemidget/vagrant-maas">https://github.com/battlemidget/vagrant-maas</a></p>

<p><a href="https://github.com/battlemidget/vagrant-maas-in-a-box/blob/master/Vagrantfile">https://github.com/battlemidget/vagrant-maas-in-a-box/blob/master/Vagrantfile</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching to Win10]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/04/21/switching-to-win10/"/>
    <updated>2016-04-21T10:06:44+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/04/21/switching-to-win10</id>
    <content type="html"><![CDATA[<h3>Background</h3>

<p>Since the monitor in my company are so ba&hellip;&hellip;..d, I have to change my working
environment from PC to SurfacePro, thus I have some tools changes, following are the
records.</p>

<h3>Tool List</h3>

<p>Terminal: XShell4, Make sure you have change the screen-size issue.   <br/>
<a href="purplepalmdash.github.io/blog/2015/11/13/win10-tips-for-using-xshell/">purplepalmdash.github.io/blog/2015/11/13/win10-tips-for-using-xshell/</a></p>

<p>Screen-Shot:  <br/>
I use picPick for replacing the scrot, the scrot is so convenient thus I found many
tools for replacing it.</p>

<p>picPick Configuration: the main purpose is for selecting the rectangle and save it
automatically to the folder with the timestamp.</p>

<p>Auto-Syncing tool:   <br/>
using WinSCP&rsquo;s keep remote the latest status:</p>

<p><img src="/images/2016_04_21_10_39_10.jpg" alt="/images/2016_04_21_10_39_10.jpg" /></p>

<p>OK, Now we could also using the same writing behavior just as under Linux Awesome
Desktop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把玩ebuddy(4)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/15/ba-wan-ebuddy-4/"/>
    <updated>2016-03-15T14:25:48+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/15/ba-wan-ebuddy-4</id>
    <content type="html"><![CDATA[<p>总结了一下ebuddy的玩法，最近加了点玩法，就是用ebuddy作为Bash运行脚本后的提示部件。譬如
，当完成了某个编译任务后，用ebuddy来告知任务的运行成功。</p>

<pre><code>$ Task A ; NOTIFY EBUDDY
</code></pre>

<h3>/bin/ebuddy</h3>

<p>创建一个<code>/bin/ebuddy</code>的文件，内容如下:</p>

<pre><code>#!/bin/bash
FILE=/tmp/ebuddy
while true
do
    # if exists the file, then blinking the ebuddy.
  if [ -f $FILE ];
  then
      # Exists the file, shining the ebuddy
     echo 07 &gt; /dev/udp/127.0.0.1/8888
  else
      # Now clear the status of the ebuddy
     echo 17 &gt; /dev/udp/127.0.0.1/8888
  fi
#echo 07 &gt; /dev/udp/127.0.0.1/8888
sleep 3
done
</code></pre>

<p>这个文件的意思是，如果存在<code>/tmp/ebuddy</code>文件，ebuddy的头会亮起，否则，清除ebuddy的状态。</p>

<h3>notifyebuddy &amp;&amp; clearebuddy</h3>

<p>这两个命令是做在.zshrc里的两个alias:</p>

<pre><code>$ vim ~/.zshrc
# For Using ebuddy
alias notifyebuddy='touch /tmp/ebuddy'
alias clearebuddy='rm -f /tmp/ebuddy'
</code></pre>

<p>这样我们可以在运行完某个命令后，告知ebuddy完成事件。</p>

<h3>局限</h3>

<p>不能同时标识两个以上的命令完成情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用squid缓存所有rpm/deb安装包]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/15/shi-yong-squidhuan-cun-suo-you-rpm-slash-deban-zhuang-bao/"/>
    <updated>2016-03-15T10:23:34+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/15/shi-yong-squidhuan-cun-suo-you-rpm-slash-deban-zhuang-bao</id>
    <content type="html"><![CDATA[<p>在进行自动化部署的时候，需要频繁安装系统，鉴于工作环境的带宽有限，我需要设置一个代理服
务器，用于缓存所有的RPM/DEB安装包，以便自动化部署可以在瞬间完成。</p>

<p>以下示例运行在ArchLinux上。</p>

<h3>Squid搭建</h3>

<p>Squid介绍:</p>

<p>Squid 是一个 Web 缓存代理，支持 HTTP, HTTPS, FTP, 以及更多。它通过缓存与重用经常请求的
web页面，减少带宽使用同时提升了响应时间。Squid 具有可扩展的访问控制功能，同时可以使服务
器加速。它运行在 Unix 和 Windows 中，采用 GNU GPL 协议发布。</p>

<p>安装squid:</p>

<pre><code>$ sudo pacman -S squid
</code></pre>

<p>我们需要配置squid以便它能适配我们的环境，我的环境里主要需要做以下几个事情： <br/>
1. 更改squid缓存目录到/home分区。  <br/>
2. 更改squid缓存目录大小为30G以上。  <br/>
3. 更改缓存文件大小，以便它支持大的RPM/DEB包。</p>

<p>更改缓存目录， 找到以下的行，在其下添加我们自定义的缓存目录:</p>

<pre><code>$ sudo vim /etc/squid/squid.conf
# Uncomment and adjust the following to add a disk cache directory.
#cache_dir ufs /var/cache/squid 100 16 256
cache_dir ufs /home/dash/squid 30000 16 256
</code></pre>

<p>我们将在指定目录下创建目录， 第一层数为16, 每个文件夹下最多包含256个子文件夹。</p>

<p>在配置文件的最后加入以下行，以支持更大的缓存文件:</p>

<pre><code>$ sudo vim /etc/squid/squid.conf
maximum_object_size 200 MB
</code></pre>

<p>现在开始创建缓存目录:</p>

<pre><code>$ squid -z
</code></pre>

<p>启动服务后，运行检查</p>

<pre><code>$ sudo systemctl restart squid
$ sudo systemctl enable squidz
$ sudo systemctl -k check
</code></pre>

<p>验证可以通过<code>netstat -anp | grep 3128</code>来检查squid进程是否运行。</p>

<h3>使用squid代理</h3>

<h3>apt-cacher</h3>

<p>以上设置的代理仅能支持RPM包的工作，对于DEB包我们需要使用apt-cacher, 在ArchLinux上安装和配置apt-cacher:</p>

<pre><code>$ yaourt apt-cacher
$ sudo vim /etc/apt-cacher-ng/acng.conf
CacheDir: /home/nomodify/apt-cacher
Port: 3142
</code></pre>

<p>Config on Agent:</p>

<pre><code>$ sudo vim /etc/apt/apt.conf.d/01proxy 
Acquire::http::Proxy "http://192.168.0.121:3142";
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置Qemu的VDE网络]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/10/pei-zhi-qemude-vdewang-luo/"/>
    <updated>2016-03-10T14:18:43+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/10/pei-zhi-qemude-vdewang-luo</id>
    <content type="html"><![CDATA[<p>为了快速验证镜像，配置出一个在本机上的tap0端口，虚拟机则通过VDE虚拟交换机连接到此端口后
，DHCP获得IP地址，从而得到网络连接， 以下是步骤。</p>

<h3>安装VDE</h3>

<p>ArchLinux下安装命令为<code>sudo pacman -S vde2</code>.</p>

<h3>配置</h3>

<p>贴出配置文件如下, 摘录自ArchLinux的Wiki. 值得注意的是，在Systemd的配置文件中，需要先把
tun驱动装载上，才能使得VDE启动成功。</p>

<p>配置qemu网络环境配置脚本:</p>

<pre><code class="sh">$ vim /etc/systemd/scripts/qemu-network-env 
#!/bin/sh
# QEMU/VDE network environment preparation script

# The IP configuration for the tap device that will be used for
# the virtual machine network:

TAP_DEV=tap0
TAP_IP=10.33.34.254
TAP_MASK=24
TAP_NETWORK=10.33.34.0

# Host interface
NIC=enp2s0

case "$1" in
  start)
        echo -n "Starting VDE network for QEMU: "

        # If you want tun kernel module to be loaded by script uncomment here
        modprobe tun 2&gt;/dev/null
        # Wait for the module to be loaded
        while ! lsmod | grep -q "^tun"; do echo "Waiting for tun device"; sleep 1; done

        # Start tap switch
        vde_switch -tap "$TAP_DEV" -daemon -mod 660 -group users

        # Bring tap interface up
        ip address add "$TAP_IP"/"$TAP_MASK" dev "$TAP_DEV"
        ip link set "$TAP_DEV" up

        # Start IP Forwarding
        echo "1" &gt; /proc/sys/net/ipv4/ip_forward
        iptables -t nat -A POSTROUTING -s "$TAP_NETWORK"/"$TAP_MASK" -o "$NIC" -j MASQUERADE
        ;;
  stop)
        echo -n "Stopping VDE network for QEMU: "
        # Delete the NAT rules
        iptables -t nat -D POSTROUTING "$TAP_NETWORK"/"$TAP_MASK" -o "$NIC" -j MASQUERADE

        # Bring tap interface down
        ip link set "$TAP_DEV" down

        # Kill VDE switch
        pgrep -f vde_switch | xargs kill -TERM
        ;;
  restart|reload)
        $0 stop
        sleep 1
        $0 start
        ;;
  *)
        echo "Usage: $0 {start|stop|restart|reload}"
        exit 1
esac
exit 0
</code></pre>

<p>配置symtemd服务:</p>

<pre><code class="sh">$ vim /etc/systemd/system/qemu-network-env.service
[Unit]
Description=Manage VDE Switch

[Service]
Type=oneshot
ExecStart=/etc/systemd/scripts/qemu-network-env start
ExecStop=/etc/systemd/scripts/qemu-network-env stop
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
</code></pre>

<p>使能服务，并重新启动机器:</p>

<pre><code>$ sudo systemctl enable qemu-network-env.service
</code></pre>

<h3>配置DHCPD</h3>

<p>需要配置dhcpd以使得在<code>10.33.34.0/24</code>网段提供DHCP服务：</p>

<pre><code>$ sudo vim /etc/dhcpd.conf

subnet
10.33.34.0 netmask 255.255.255.0 {
# --- default gateway
option routers
10.33.34.254;
# --- Netmask
option subnet-mask
255.255.255.0;
# --- Broadcast Address
option broadcast-address
10.33.34.255;
# --- Domain name servers, tells the clients which DNS servers to use.
option domain-name-servers
223.5.5.5,180.76.76.76;
option time-offset 0;
range 10.33.34.2 10.33.34.253;
default-lease-time 1209600;
max-lease-time 1814400;
}
</code></pre>

<p>修改完dhcpd的配置后， 重新启动dhcpd服务:</p>

<pre><code>$ sudo systemctl restart dhcpd4
</code></pre>

<h3>启动虚拟机</h3>

<p>启动虚拟机，并使其使用我们刚才添加的vde网络:</p>

<pre><code>$ sudo qemu-system-x86_64 -net nic -net vde -hda ./test1.qcow2 -m 2048 --enable-kvm
</code></pre>

<p>启动的虚拟机将获得10.33.34.2~10.33.33.253之间的地址。    <br/>
如果使用普通用户，会出错， To be solved.</p>
]]></content>
  </entry>
  
</feed>
