<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-01-20T19:58:48+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Tips(4)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/01/15/linux-tips-4/"/>
    <updated>2016-01-15T18:37:03+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/01/15/linux-tips-4</id>
    <content type="html"><![CDATA[<h3>1. Run ansible commands</h3>

<p>Run commands in all hosts:</p>

<pre><code># ansible all -i inventory.ini -m command -u root --args "uptime"
</code></pre>

<h3>2. mesos introduction</h3>

<p><a href="http://www.infoq.com/cn/articles/analyse-mesos-part-02">http://www.infoq.com/cn/articles/analyse-mesos-part-02</a></p>

<h3>3. Limit ansible run hosts</h3>

<pre><code># ansible-playbook -i inventory_mesos_cluster changehostname.yml -u root -k
-vvvv --list-hosts

playbook: changehostname.yml

  play #1 (master1): host count=1
    10.47.58.31

#  ansible-playbook -i
inventory_mesos_cluster changehostname.yml -u root -k -vvvv --limit="master1"
</code></pre>

<h3>4. Configure the dhcp configuration of libvirtd</h3>

<p>First edit the net configuration:</p>

<pre><code># virsh net-edit xxxxx
</code></pre>

<p><img src="/images/2016_01_16_20_23_08_715x270.jpg" alt="/images/2016_01_16_20_23_08_715x270.jpg" /></p>

<h3>5. Copy items into clipboard in vim</h3>

<p>Hit <code>Ctrl+v</code> to visual model, then select the items you want to copy, after select
them, click <code>"*y</code> will copy whatever you selected into your clipbard.</p>

<p>Copy from clipboard&mdash;- simply hit <code>p</code> in command mode.</p>

<h3>6. mesos.cli</h3>

<p>When you meet <code>no module named mesos</code>, install it via pip:</p>

<pre><code>$ pip install mesos.cli
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Veewee and Vagrant]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/01/03/tips-on-veewee-and-vagrant/"/>
    <updated>2016-01-03T15:56:09+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/01/03/tips-on-veewee-and-vagrant</id>
    <content type="html"><![CDATA[<h3>Install Veewee</h3>

<p>First you should get rvm avaiable, then use rvm for install ruby-2.2.1:  <br/>
Note: you should import gpg signature via commandline.</p>

<pre><code>$ proxychains4 curl -k --insecure  -L https://get.rvm.io | bash -s stable --ruby
$ proxychains4 rvm install ruby-2.2.1 
</code></pre>

<p>Install the veewee via:</p>

<pre><code>$ proxychains4 gem install bundler
$ git clone https://github.com/jedi4ever/veewee.git
$ cd veewee
$ proxychains4 gem install i18n -v '0.7.0'
$ proxychains4 bundle install
</code></pre>

<p>After installation createing an alias for quickly refers to veewee:</p>

<pre><code>$ alias veewee="bundle exec veewee version"
</code></pre>

<p>Bug-fix: for adding <code>net/scp</code> in the Gemfile:</p>

<pre><code>$ vim Gemfile
.......
+ gem "net-scp"
gemspec
</code></pre>

<h3>Install Vagrant</h3>

<p>Since the vagrant provided via Ubuntu14.04 is pretty old, we have to download
it from vagrant&rsquo;s official website and dpkg install it.</p>

<p>Install veewee plugins:</p>

<pre><code>$ proxychains4 vagrant plugin install veewee
</code></pre>

<h3>Create new definition</h3>

<p>Create new definition via:</p>

<pre><code>$ veewee vbox define awesome-ubuntu-server ubuntu-14.04-server-amd64
The basebox 'awesome-ubuntu-server' has been successfully created from the template
'ubuntu-14.04-server-amd64'
You can now edit the definition files stored in
/home/dash/Code/veewee/definitions/awesome-ubuntu-server or build the box with:
veewee vbox build 'awesome-ubuntu-server' --workdir=/home/dash/Code/veewee
</code></pre>

<p>Now start building:</p>

<pre><code>$ veewee vbox build awesome-ubuntu-server
</code></pre>

<h3>Speed-up Building</h3>

<p>Use Local Installation ISO:</p>

<pre><code>$ vim definitions/awesome-ubuntu-server/definition.rb
+   :iso_src =&gt; "http://192.168.0.79/iso/ubuntu-14.04-server-amd64.iso",
$ vim ./lib/veewee/provider/virtualbox/box/helper/guest_additions.rb
+          url="http://192.168.0.79/iso/#{isofile}"
</code></pre>

<p>Force ruby for using local installation:</p>

<pre><code>$ vim definitions/awesome-ubuntu-server/ruby.sh
......
wget http://192.168.0.79/iso/veewee/ruby-$RUBY_VERSION.tar.gz
tar xvzf ruby-$RUBY_VERSION.tar.gz
......
RUBYGEMS_VERSION=2.1.10
wget http://192.168.0.79/iso/veewee/rubygems-$RUBYGEMS_VERSION.tgz
</code></pre>

<h3>File Position</h3>

<p>The generated image position is listed in:</p>

<pre><code>➜  awesome-ubuntu-server  pwd
/home/dash/VirtualBox VMs/awesome-ubuntu-server
➜  awesome-ubuntu-server  du -hs *
3.2G    awesome-ubuntu-server1.vdi
8.0K    awesome-ubuntu-server.vbox
8.0K    awesome-ubuntu-server.vbox-prev
68K     Logs
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rundeck Tips]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/07/rundeck-tips/"/>
    <updated>2015-12-07T11:58:55+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/07/rundeck-tips</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Install the rundeck under CentOS 7:</p>

<pre><code># rpm -Uvh http://repo.rundeck.org/latest.rpm
# yum install rundeck
</code></pre>

<h3>Configuration</h3>

<p>Configure some properties:</p>

<pre><code># vim /etc/rundeck/framework.properties
framework.server.name = 192.168.0.79
framework.server.hostname = 192.168.0.79
framework.server.port = 4440
framework.server.url = http://192.168.0.79:4440
# vim /etc/rundeck/rundeck-config.properties
grails.serverURL=http://192.168.0.79:4440 
</code></pre>

<p>Start the service:</p>

<pre><code># service rundeckd start
Starting rundeckd (via systemctl):                         [  OK  ]
</code></pre>

<p>You could check the status via <code># systemctl status rundeckd</code>.</p>

<p>Now visit the server via <a href="http://192.168.0.79:4440,">http://192.168.0.79:4440,</a> username/password are all <code>admin</code>, you should see following image:</p>

<p><img src="/images/2015_12_07_12_11_49_956x398.jpg" alt="/images/2015_12_07_12_11_49_956x398.jpg" /></p>

<p>Hint for creating project:</p>

<p><img src="/images/2015_12_07_12_13_56_694x389.jpg" alt="/images/2015_12_07_12_13_56_694x389.jpg" /></p>

<h3>Run</h3>

<p>Run command locally for creating an command based job.</p>

<p>In case of sudo requires a tty for executing the command:</p>

<pre><code># visudo
+ # Defaults    requiretty
+ rundeck ALL=(ALL)   NOPASSWD: ALL 
</code></pre>

<h3>Reference</h3>

<p><a href="http://www.tuicool.com/articles/zuI3ua">http://www.tuicool.com/articles/zuI3ua</a></p>

<p><a href="http://www.oschina.net/p/rundeck">http://www.oschina.net/p/rundeck</a></p>

<p><a href="http://gunner.me/archives/488">http://gunner.me/archives/488</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Bluetooth PAN]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/04/on-bluetooth-pan/"/>
    <updated>2015-12-04T10:51:10+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/04/on-bluetooth-pan</id>
    <content type="html"><![CDATA[<h3>AIM</h3>

<p>For sharing the internet connection from working PC to Surface Pro.</p>

<h3>Setup And Configuration</h3>

<h4>SurfacePro</h4>

<p>Install bluez/bluez-libs/bluez-utils:</p>

<pre><code>$ sudo pacman -S bluez bluez-utils bluez-libs
</code></pre>

<p>Modprobe the bnep kernel module:</p>

<pre><code>[root@surfacepro ~]# modprobe bnep
[root@surfacepro ~]# lsmod | grep bnep
bnep                   20480  0
bluetooth             450560  6 bnep,btbcm,btrtl,btusb,btintel
[root@surfacepro ~]# modprobe btusb
</code></pre>

<p>Start the bluetooth.service via:</p>

<pre><code>$ sudo systemctl start bluetooth.service
</code></pre>

<p><code>bluetoothctl</code> will give access for configurating bluetooth equipment, following steps
shows how to connect to a bluetooth keyboard:</p>

<pre><code>[root@surfacepro ~]# bluetoothctl 
[NEW] Controller xx:xx:xx:xx:xx:xx surfacepro [default]
[bluetooth]#
[bluetooth]# agent KeyboardOnly 
Agent registered
[bluetooth]# default-agent      
Default agent request successful
[bluetooth]# power on
[CHG] Controller xx:xx:xx:xx:xx:xx Class: 0x00011c
Changing power on succeeded
[CHG] Controller xx:XX:XX:XX:XX:XX Powered: yes
[bluetooth]# scan on
Discovery started
[bluetooth]# pair D0:13:1E:11:F5:45
Attempting to pair with D0:13:1E:11:F5:45
[bluetooth]# connect D0:13:1E:11:F5:45
</code></pre>

<p>Now try to connect to the keyboard, yes you could use keyboard for typing.</p>

<h4>PAN</h4>

<p>Network Aggregation Point - NAP</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome's Battery Indicator]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/25/awesomes-battery-indicator/"/>
    <updated>2015-11-25T12:18:29+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/25/awesomes-battery-indicator</id>
    <content type="html"><![CDATA[<h3>Background</h3>

<p>I installed ArchLinux+Awesome On my SurfacePro, while the charger of Surface Pro is not
so tight to the pad. Thus I have to use a battery indicator in Awesome.</p>

<h3>Software</h3>

<p>Refers to:</p>

<p><a href="http://www.everythingisvoid.com/uncategorized/simple-battery-status-indicator-awesome-window-manager">http://www.everythingisvoid.com/uncategorized/simple-battery-status-indicator-awesome-window-manager</a></p>

<p>Install steps on ArchLinux:</p>

<pre><code>$ sudo pacman -S luarocks5.1 gobject-introspection acpi
$ sudo luarocks-5.1 install battery_status
</code></pre>

<p>You could manually run <code>show_battery_status</code> or add it into your own rc.lua file:</p>

<pre><code>$ vim ~/.config/awesome/rc.lua
----.....................
autorunApps =
{
--.........
"synergyc 192.168.0.119",
"sudo echo 1240&gt;/sys/class/backlight/intel_backlight/brightness", 
"fcitx",
"show_battery_status", 
----.....................
</code></pre>

<p>Now restart the awesome you could see the battery indicator.</p>

<h3>Add Charging Indicator</h3>

<p>First download the source code from github:</p>

<pre><code>$ git clone https://github.com/svarogg/battery_status
</code></pre>

<p>Debug with luarocks loader:</p>

<pre><code>rocks-5.1   lua5.1 -lluarocks.loader
Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio
&gt; require("rex_posix")
&gt; rex = require("rex_posix")
&gt; battery_rex = rex.new([[([^,]{1,3})%]])
&gt; rex=require("rex_posix")
&gt; battery_rex=rex.new([[([^,]{1,3})%]])
&gt; acpi=io.popen('acpi 2&gt;&amp;1')
&gt; acpi_res = acpi:read("*line")
&gt; acpi:close()
&gt; print (acpi_res)
Battery 0: Full, 100%
&gt; percentage=battery_rex:match(acpi_res)
&gt; print (percentage)
100
&gt; print(type(percentage))
string
&gt; print(type(tonumber(percentage)))
number
&gt; adapter = io.popen('acpi -a 2&gt;&amp;1')
&gt; adapter_res = adapter:read("*line")
&gt; adapter:close()
&gt; print(adapter_res)
Adapter 0: on-line
&gt; charge_rex = rex.new([[(on|off)]])
&gt; print(charge_rex:match(adapter_res))
on
</code></pre>

<p>We get the status of the charge, then update the corresponding icon to the systray.</p>

<p>The modified repository could be fetched from:</p>

<p><a href="https://github.com/purplepalmdash/Awesome-Battery-Indicator">https://github.com/purplepalmdash/Awesome-Battery-Indicator</a></p>
]]></content>
  </entry>
  
</feed>
