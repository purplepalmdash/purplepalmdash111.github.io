<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-07-05T22:38:56+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Hugo]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/07/04/using-hugo/"/>
    <updated>2016-07-04T15:36:43+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/07/04/using-hugo</id>
    <content type="html"><![CDATA[<p>For switching my blogging engine from octopress to hugo, following are the steps.</p>

<h3>Installing GO</h3>

<p>ArchLinux installation is:</p>

<pre><code>$ sudo pacman -S go
$ mkdir -p ~/go/{bin,src}
$ export GOPATH=~/go
$ export PATH="$PATH:$GOPATH/bin"
</code></pre>

<h3>Get Hugo</h3>

<p>Hugo could be fetched directly from github, install it via:</p>

<pre><code>$ Notice you have to use redsocks!
$ go get -u -v github.com/spf13/hugo
$ which hugo
/home/vagrant/go/bin/hugo
</code></pre>

<h3>First Blog</h3>

<p>Create a new site:</p>

<pre><code>$ hugo new site myblog
$ tree myblog
myblog/
|-- archetypes
|-- config.toml
|-- content
|-- data
|-- layouts
|-- static
`-- themes

6 directories, 1 file
</code></pre>

<p>Creat a new blog:</p>

<pre><code>$ hugo new post/hello.md
$ vim /home/vagrant/Code/myblog/content/post/hello.md
$ cd themes/
    git clone git@github.com:dim0627/hugo_theme_beg.git
</code></pre>

<p>Run preview of the blog:</p>

<pre><code>$ hugo server -w --theme=hugo_theme_beg
</code></pre>

<p>Now open browser for visiting `<a href="http://localhost:1313">http://localhost:1313</a>", you could see:</p>

<p><img src="/images/2016_07_04_16_35_26_464x401.jpg" alt="/images/2016_07_04_16_35_26_464x401.jpg" /></p>

<h3>Import From Octopress</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建基于docker的监控系统]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/06/20/da-jian-ji-yu-dockerde-jian-kong-xi-tong/"/>
    <updated>2016-06-20T09:39:55+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/06/20/da-jian-ji-yu-dockerde-jian-kong-xi-tong</id>
    <content type="html"><![CDATA[<h3>Graphite/Grafana</h3>

<p>这两个用于记录和展示监控数据，通过以下命令可以快速搭建:</p>

<h4>Graphite</h4>

<p>开启容器:</p>

<pre><code>$ mkdir -p /local/path/to/graphite/storage/whisper/
$ sudo docker run -d \
  --name graphite \
  -p 8080:80 \
  -p 2003:2003 \
  -v /local/path/to/.htpasswd:/etc/nginx/.htpasswd \
  -v /local/path/to/graphite/storage/whisper:/opt/graphite/storage/whisper \
  sitespeedio/graphite
</code></pre>

<p>创建htpasswd文件的方法可以参阅:    <br/>
<a href="http://httpd.apache.org/docs/2.2/programs/htpasswd.html">http://httpd.apache.org/docs/2.2/programs/htpasswd.html</a></p>

<p>当然如果你使用默认的密码的话，用户名/密码是:guest/guest.</p>

<h4>Grafana</h4>

<p>开启容器:</p>

<pre><code># mkdir -p /local/path/to/grafana
# docker run -d -p 3000:3000 --name=grafana -v /local/path/to/grafana:/var/lib/grafana  grafana/grafana
</code></pre>

<p>默认用户名/密码为admin/admin.</p>

<h3>Collectd</h3>

<p>用于采集节点机上的数据，</p>

<pre><code># docker run -d --net=host --privileged -v /:/hostfs:ro --name=collectd -e \
HOST_NAME=localhost -e \
GRAPHITE_HOST=192.168.1.79 andreasjansson/collectd-write-graphite
</code></pre>

<p>参数说明:</p>

<pre><code>--net=host :    使用主机上的网络配置
GRAPHITE_HOST:  前面设置的graphite机器的地址
</code></pre>

<h3>systemd 启动方式</h3>

<p>collectd启动方式:</p>

<pre><code>$ sudo vim /usr/lib/systemd/system/collectddocker.service
[Unit]
Description=collectd container
Requires=docker.service
After=docker.service

[Service]
Restart=always
ExecStart=/usr/bin/docker start -a collectd
ExecStop=/usr/bin/docker stop -t 2 collectd

[Install]
WantedBy=multi-user.target
</code></pre>

<p>启动并使能服务:</p>

<pre><code>$ sudo systemctl enable collectddocker.service
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建无盘CentOS桌面环境]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/06/18/da-jian-wu-pan-centoszhuo-mian-huan-jing/"/>
    <updated>2016-06-18T13:43:48+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/06/18/da-jian-wu-pan-centoszhuo-mian-huan-jing</id>
    <content type="html"><![CDATA[<h3>网络准备</h3>

<p>创建一个无DHCP的网络:</p>

<p><img src="/images/2016_06_18_13_53_06_399x429.jpg" alt="/images/2016_06_18_13_53_06_399x429.jpg" /></p>

<p>DHCP服务器我们将配置在PXE服务器节点上。</p>

<h3>PXE节点配置</h3>

<h4>初始化配置</h4>

<p>最小化安装CentOS 7 Server。并配置其IP地址为<code>10.19.20.2</code>.  <br/>
关闭selinux和firewalld服务:</p>

<pre><code># vi /etc/selinux/config 
SELINUX=disabled

# systemctl disable firewalld.service
</code></pre>

<h4>使用DVD作为源</h4>

<p>创建挂载目录并挂在DVD：</p>

<pre><code># mkdir /cdrom
# mount -t iso9660 -o loop ./CentOS-7-x86_64-Everything-1511.iso /cdrom/
</code></pre>

<p>创建新的repo文件:</p>

<pre><code># vi /etc/yum.repos.d/local.repo

[LocalRepo]
name=Local Repository
baseurl=file:///cdrom
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
</code></pre>

<p>生成新的缓存：</p>

<pre><code># mkdir back
# mv CentOS-* back
# yum makecache
</code></pre>

<p>安装一些必要的包:</p>

<pre><code># yum install -y vim wget
</code></pre>

<h4>TFTP Server</h4>

<p>安装必要的包:</p>

<pre><code># yum -y install syslinux xinetd tftp-server
# mkdir /var/lib/tftpboot/pxelinux.cfg 
# cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/ 
</code></pre>

<p>配置PXE：</p>

<pre><code># vim /etc/xinetd.d/tftp 
disable = no
# systemctl start xinetd
# systemctl enable xinetd
</code></pre>

<h4>DHCP服务器</h4>

<p>安装:</p>

<pre><code># yum install -y dhcp
</code></pre>

<p>配置:</p>

<pre><code># vim /etc/dhcp/dhcpd.conf
    #
    # DHCP Server Configuration file.
    #   see /usr/share/doc/dhcp*/dhcpd.conf.example
    #   see dhcpd.conf(5) man page
    #
    # create new

    # specify domain name
    option domain-name "srv.world";
    # specify name server's hostname or IP address
    option domain-name-servers dlp.srv.world;
    # default lease time
    default-lease-time 600;
    # max lease time
    max-lease-time 7200;
    # this DHCP server to be declared valid
    authoritative;
    # specify network address and subnet mask
    subnet 10.19.20.0 netmask 255.255.255.0 {
        # specify the range of lease IP address
        range dynamic-bootp 10.19.20.200 10.19.20.254;
        # specify broadcast address
        option broadcast-address 10.19.20.255;
        # specify default gateway
        option routers 10.19.20.1;
        option domain-name-servers   10.19.20.2;
        filename        "pxelinux.0";
        next-server     10.19.20.2;
    }
</code></pre>

<p>启动并使能服务:</p>

<pre><code># systemctl start dhcpd 
# systemctl enable dhcpd 
</code></pre>

<h4>PXE服务器</h4>

<p>安装一些必要的包:</p>

<pre><code># yum -y install dracut-network nfs-utils
</code></pre>

<p>在PXE服务器上构建一个无盘系统用的文件系统</p>

<pre><code># mkdir -p /var/lib/tftpboot/centos7/root 
# yum groups -y install "Server with GUI" --releasever=7 --installroot=/var/lib/tftpboot/centos7/root/
</code></pre>

<p>给出root用户的默认密码:</p>

<pre><code># python -c 'import crypt,getpass; \ 
print(crypt.crypt(getpass.getpass(), \
crypt.mksalt(crypt.METHOD_SHA512)))' 
Password:
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</code></pre>

<p>填入root密码到/etc/shadown中:</p>

<pre><code># vim /var/lib/tftpboot/centos7/root/etc/shadow
root:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:16372:0:99999:7:::
</code></pre>

<p>构建<code>/etc/fstab</code>文件:</p>

<pre><code># vi /var/lib/tftpboot/centos7/root/etc/fstab
 none    /tmp        tmpfs   defaults   0 0
tmpfs   /dev/shm    tmpfs   defaults   0 0
sysfs   /sys        sysfs   defaults   0 0
proc    /proc       proc    defaults   0 0
</code></pre>

<p>下载pxe所需要的vmlinuz和initrd.img文件:</p>

<pre><code># wget -P /var/lib/tftpboot/centos7/ \
http://mirrors.aliyun.com/centos/7/os/x86_64/images/pxeboot/vmlinuz \
http://mirrors.aliyun.com/centos/7/os/x86_64/images/pxeboot/initrd.img
</code></pre>

<p>创建默认的pxe启动项目:</p>

<pre><code># vi /var/lib/tftpboot/pxelinux.cfg/default
# create new
 default centos7

label centos7
    kernel centos7/vmlinuz
    append initrd=centos7/initrd.img root=nfs:10.19.20.2:/var/lib/tftpboot/centos7/root rw selinux=0 
</code></pre>

<p>映射NFS服务器:</p>

<pre><code># vi /etc/exports
/var/lib/tftpboot/centos7/root 10.19.20.0/24(rw,no_root_squash)
# systemctl start rpcbind nfs-server 
# systemctl enable rpcbind nfs-server 
</code></pre>

<p>现在在网络中加入新的机器，从PXE启动后，将直接进入到CentOS7的桌面。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不同桌面环境占用内存/CPU对比]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/05/31/bu-tong-zhuo-mian-huan-jing-zhan-yong-nei-cun-slash-cpudui-bi/"/>
    <updated>2016-05-31T09:25:38+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/05/31/bu-tong-zhuo-mian-huan-jing-zhan-yong-nei-cun-slash-cpudui-bi</id>
    <content type="html"><![CDATA[<p>对比xfce4, lxde, gnome, mate等桌面环境占用内存/CPU对比</p>

<h3>先决条件</h3>

<p>使用vagrant的镜像(ubuntu14.04):</p>

<pre><code>$ vagrant box list
ubuntu1404                                   (virtualbox, 0)
</code></pre>

<p>每一个桌面环境的验证如下:</p>

<pre><code>$ vagrant init ubuntu1404
$ vim Vagrantfile
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
  #  vb.gui = true

    # Customize the amount of memory on the VM:
    vb.memory = "1024"
  end
$ vagrant up
</code></pre>

<h3>基础镜像占用内存</h3>

<p>用<code>free -m</code>来查看系统运行时所占用内存：</p>

<p><img src="/images/2016_05_31_09_42_54_688x111.jpg" alt="/images/2016_05_31_09_42_54_688x111.jpg" /></p>

<h3>xfce4(xubuntu)</h3>

<p>安装:</p>

<pre><code>$ sudo apt-get update
$ sudo apt-get install xubuntu-desktop
</code></pre>

<p>启动xfce4桌面后，内存占用结果为：</p>

<p><img src="/images/2016_05_31_09_57_44_483x164.jpg" alt="/images/2016_05_31_09_57_44_483x164.jpg" /></p>

<h3>lxde(lubuntu)</h3>

<p>安装:</p>

<pre><code>$ sudo apt-get update
$ sudo apt-get install -y lubuntu-desktop
</code></pre>

<p>启动lxde后，内存占用为:</p>

<p><img src="/images/2016_05_31_10_07_46_458x84.jpg" alt="/images/2016_05_31_10_07_46_458x84.jpg" /></p>

<h3>gnome(gnome-session-fallback)</h3>

<p>安装:</p>

<pre><code>$ sudo apt-get update; sudo apt-get install gnome-session-fallback
$ sudo apt-get install -y gdm xterm
</code></pre>

<p>启动gnome-session-fallback后，内存占用为:</p>

<p><img src="/images/2016_05_31_10_22_08_490x185.jpg" alt="/images/2016_05_31_10_22_08_490x185.jpg" /></p>

<h3>unity</h3>

<p>安装:</p>

<pre><code>$ sudo apt-get update &amp;&amp; sudo apt-get install -y ubuntu-desktop
</code></pre>

<p>启动unity后，内存占用为:</p>

<p><img src="/images/2016_05_31_10_26_22_553x168.jpg" alt="/images/2016_05_31_10_26_22_553x168.jpg" /></p>

<h3>mate</h3>

<p>安装:</p>

<pre><code>$ sudo apt-add-repository ppa:ubuntu-mate-dev/ppa
$ sudo apt-add-repository ppa:ubuntu-mate-dev/trusty-mate
$ sudo apt-get update &amp;&amp; sudo apt-get upgrade
$ sudo apt-get install --no-install-recommends ubuntu-mate-core ubuntu-mate-desktop
</code></pre>

<p>启动mate后，内存占用为:</p>

<p><img src="/images/2016_05_31_10_50_58_486x148.jpg" alt="/images/2016_05_31_10_50_58_486x148.jpg" /></p>

<h3>KDE</h3>

<p>安装:</p>

<pre><code>$ sudo apt-get update &amp;&amp; sudo apt-get install -y kubuntu-desktop
</code></pre>

<p>内存占用:</p>

<p><img src="/images/2016_05_31_11_06_50_487x108.jpg" alt="/images/2016_05_31_11_06_50_487x108.jpg" /></p>

<h3>对比</h3>

<p>统计结果:</p>

<p><img src="/images/2016_05_31_11_08_35_342x269.jpg" alt="/images/2016_05_31_11_08_35_342x269.jpg" /></p>

<p>图例:</p>

<p><img src="/images/2016_05_31_11_10_32_896x593.jpg" alt="/images/2016_05_31_11_10_32_896x593.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working Tips on Ansible-cobbler(3)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/05/18/working-tips-on-ansible-cobbler-3/"/>
    <updated>2016-05-18T21:15:10+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/05/18/working-tips-on-ansible-cobbler-3</id>
    <content type="html"><![CDATA[<h3>APT Packages</h3>

<p>The downloaded deb files should be under <code>/var/cache/apt</code>, use following command for copying to
another position:</p>

<pre><code>$ find . | grep -i deb$ | xargs % cp % ~/Dest_Folder
$ scp -r ~/Dest_Folder Your_Cobbler_Machine
</code></pre>

<h3>Repositories</h3>

<p>Install <code>dpkg-dev</code> package, so we could generate the dpkg packages:</p>

<pre><code>$ sudo apt-get install -y dpkg-dev
</code></pre>

<p>Create a new repository:</p>

<p><img src="/images/2016_05_18_21_28_37_717x452.jpg" alt="/images/2016_05_18_21_28_37_717x452.jpg" /></p>

<p>Edit the advanced options:</p>

<p><img src="/images/2016_05_18_21_30_04_508x314.jpg" alt="/images/2016_05_18_21_30_04_508x314.jpg" /></p>

<p>Report the repository info via:</p>

<pre><code>root@cobbler-ubuntu:~# cobbler repo report --name=ubuntu1604Mate
Name                           : ubuntu1604Mate
Apt Components (apt only)      : ['main']
Apt Dist Names (apt only)      : ['stable']
Arch                           : x86_64
Breed                          : apt
Comment                        : Ubuntu 16.04 Repository For installing MATE
Createrepo Flags               : &lt;&lt;inherit&gt;&gt;
Environment Variables          : {}
Keep Updated                   : False
Mirror                         : 
Mirror locally                 : True
Owners                         : ['admin']
Priority                       : 99
External proxy URL             : 
RPM List                       : []
Yum Options                    : {}
</code></pre>

<p>Repository Structure Creation:</p>

<pre><code>$ mkdir /srv/www/cobbler/repo_mirror/ubuntu1604Mate
$ cd /srv/www/cobbler/repo_mirror/ubuntu1604Mate
$ mkdir -p pool/main dists/stable/main/binary-i386 dists/stable/main/binary-amd64
$ cp ~/apt/debs/*.deb ./pool/main/
</code></pre>

<p>Enable the <code>allow_unauthenticated</code> options in kickstart file:</p>

<pre><code>$ vim /var/lib/cobbler/kickstarts/sample.seed
 d-i debian-installer/allow_unauthenticated boolean true
</code></pre>

<p>Generate the gpg key:</p>

<pre><code># gpg --gen-key
  gpg (GnuPG) 2.0.14; Copyright (C) 2009 Free Software Foundation, Inc.
  This is free software: you are free to change and redistribute it.
  There is NO WARRANTY, to the extent permitted by law.

  gpg: directory `/root/.gnupg' created
  gpg: new configuration file `/root/.gnupg/gpg.conf' created
  gpg: WARNING: options in `/root/.gnupg/gpg.conf' are not yet active during this run
  gpg: keyring `/root/.gnupg/secring.gpg' created
  gpg: keyring `/root/.gnupg/pubring.gpg' created
 Please select what kind of key you want:
    (1) RSA and RSA (default)
    (2) DSA and Elgamal
    (3) DSA (sign only)
    (4) RSA (sign only)
 Your selection? 1
 RSA keys may be between 1024 and 4096 bits long.
 What keysize do you want? (2048)
 Requested keysize is 2048 bits
 Please specify how long the key should be valid.
          0 = key does not expire
       &lt;n&gt;  = key expires in n days
       &lt;n&gt;w = key expires in n weeks
       &lt;n&gt;m = key expires in n months
       &lt;n&gt;y = key expires in n years
 Key is valid for? (0)
 Key does not expire at all
 Is this correct? (y/N) y
</code></pre>

<p>For generating the random key, install the <code>haveged</code> in system:</p>

<pre><code>$ sudo aptitude install haveged
</code></pre>

<p>List the keys via:</p>

<pre><code># gpg --list-keys
/home/vagrant/.gnupg/pubring.gpg
--------------------------------
pub   2048R/16D87321 2016-05-18
uid                  xxxxx &lt;xxxxxx@gmail.com&gt;
sub   2048R/8C4A318A 2016-05-18
</code></pre>

<p>Generate the pgp signature via:</p>

<pre><code># gpg --export -a 16D87321&gt;~/junk.key
# gpg --no-default-keyring --keyring /srv/www/cobbler/repo_mirror/ubuntu1604Mate/public.pgp --import ~/junk.key
# rm -f ~/junk.key
# chmod a+r /srv/www/cobbler/repo_mirror/ubuntu1604Mate/public.pgp
</code></pre>

<p>Re-Generate the repository infos via:</p>

<pre><code>$ cd /srv/www/cobbler/repo_mirror/ubuntu1604Mate/
$ vim reindex_apt.sh
$ chmod 777 reindex_apt.sh 
$ ./reindex_apt.sh 
</code></pre>

<p>The content of <code>reindex_apt.sh</code> is listed as following:</p>

<pre><code>#!/bin/bash

GPG_NAME=16D87321
REPONAME=stable
VERSION=1.0

for bindir in `find dists/${REPONAME} -type d -name "binary*"`; do
    arch=`echo $bindir|cut -d"-" -f 2`
    echo "Processing ${bindir} with arch ${arch}"

    overrides_file=/tmp/overrides
    package_file=$bindir/Packages
    release_file=$bindir/Release

    # Create simple overrides file to stop warnings
    cat /dev/null &gt; $overrides_file
    for pkg in `ls pool/main/ | grep -E "(all|${arch})\.deb"`; do
        pkg_name=`/usr/bin/dpkg-deb -f pool/main/${pkg} Package`
        echo "${pkg_name} Priority extra" &gt;&gt; $overrides_file
    done

    # Index of packages is written to Packages which is also zipped
    dpkg-scanpackages -a ${arch} pool/main $overrides_file &gt; $package_file
    # The line above is also commonly written as:
    # dpkg-scanpackages -a ${arch} pool/main /dev/null &gt; $package_file
    gzip -9c $package_file &gt; ${package_file}.gz
    bzip2 -c $package_file &gt; ${package_file}.bz2

    # Cleanup
    rm $overrides_file
done

# Release info goes into Release &amp; Release.gpg which includes an md5 &amp; sha1 hash of Packages.*
# Generate &amp; sign release file
cd dists/${REPONAME}
cat &gt; Release &lt;&lt;ENDRELEASE
Suite: ${REPONAME}
Version: ${VERSION}
Component: main
Origin: somewhere
Label: ubuntu1604Mate
Architecture: i386 amd64
Date: `date`
ENDRELEASE

# Generate hashes
echo "MD5Sum:" &gt;&gt; Release
for hashme in `find main -type f`; do
    md5=`openssl dgst -md5 ${hashme}|cut -d" " -f 2`
    size=`stat -c %s ${hashme}`
    echo " ${md5} ${size} ${hashme}" &gt;&gt; Release
done
echo "SHA1:" &gt;&gt; Release
for hashme in `find main -type f`; do
    sha1=`openssl dgst -sha1 ${hashme}|cut -d" " -f 2`
    size=`stat -c %s ${hashme}`
    echo " ${sha1} ${size} ${hashme}" &gt;&gt; Release
done

# Sign!
gpg --yes -u $GPG_NAME --sign -bao Release.gpg Release
cd -
</code></pre>

<p>Now continue to modify the kickstart file for using the generated gpgs:</p>

<pre><code># pwd
/var/lib/cobbler/snippets
# cp preseed_apt_repo_config preseed_apt_repo_config_pgpkey
</code></pre>

<p>The <code>preseed_apt_repo_config_pgpkey</code> should be listed as following:</p>

<pre><code># Additional repositories, local[0-9] available
#set $cur=1
#set $repo_data = $getVar("repo_data",[])
#for $repo in $repo_data
 #for $dist in $repo.apt_dists
 #set $comps = " ".join($repo.apt_components)
d-i apt-setup/local${cur}/repository string \
 #if $repo.mirror_locally
      http://$http_server/cblr/repo_mirror/${repo.name} $dist $comps
 #else
      ${repo.mirror} $dist $comps
 #end if
 #if $repo.comment != ""
d-i apt-setup/local${cur}/comment string ${repo.comment}
 #end if
 #if $repo.breed == "src"
# Enable deb-src lines
d-i apt-setup/local${cur}/source boolean false
 #end if
+++ # Add repo pgp pub key
+++ d-i apt-setup/local${cur}/key string \
+++       http://$http_server/cblr/repo_mirror/${repo.name}/public.pgp
 #set $cur=$cur+1
 #end for
#end for
</code></pre>

<p>Using the new preseed file, and changint the <code>preseed_apt_repo_config_pgpkey</code>:</p>

<pre><code># pwd
/var/lib/cobbler/kickstarts
# cp sample.seed ubuntu1604.seed
# vim ubuntu1604.seed
-  $SNIPPET('preseed_apt_repo_config')
+  $SNIPPET('preseed_apt_repo_config_pgpkey')
</code></pre>

<p>Changing the seed in the <code>cobbler_web</code>:</p>

<p><img src="/images/2016_05_18_22_25_48_732x294.jpg" alt="/images/2016_05_18_22_25_48_732x294.jpg" /></p>

<p>Use <code>cobbler sync</code> for syncing the configuration.</p>

<h3>Use the Repository</h3>

<p>Add the <code>ubuntu1604Mate</code> into the Repos:</p>

<p><img src="/images/2016_05_18_22_31_42_731x486.jpg" alt="/images/2016_05_18_22_31_42_731x486.jpg" /></p>

<p>After added, the configuration should be:</p>

<p><img src="/images/2016_05_18_22_33_00_471x149.jpg" alt="/images/2016_05_18_22_33_00_471x149.jpg" /></p>

<p>Now <code>cobbler sync</code> for syncing the configuration.</p>

<p>Bug: you should move the <code>preseed_apt_repo_config</code> and  then <code>cobbler sync</code> then your deployment will be OK:</p>

<pre><code>$ mv /var/lib/cobbler/snippets/preseed_apt_repo_config /root/
$ cobbler sync
</code></pre>

<h3>Added Mate Installation</h3>

<p>Configure the preseed late:</p>

<pre><code># cp /var/lib/cobbler/scripts/preseed_late_default /var/lib/cobbler/scripts/preseed_late_default_mate
# vim /var/lib/cobbler/scripts/preseed_late_default_mate
# vim preseed_late_default_mate 
$SNIPPET('post_install_network_config_deb')
$SNIPPET('late_apt_repo_config')
$SNIPPET('post_run_deb')
$SNIPPET('download_config_files')
+ $SNIPPET('ubuntumate')
$SNIPPET('kickstart_done')
</code></pre>

<p>Now add the snippet of <code>ubuntumate</code>:</p>

<pre><code># cat ../snippets/ubuntumate 
echo "debconf debconf/frontend select noninteractive" | sudo debconf-set-selections
apt-get --allow-unauthenticated update -y
apt-get --allow-unauthenticated upgrade -y
apt-get --allow-unauthenticated install -y build-essential
### apt-get --allow-unauthenticated install -y ubuntu-mate-desktop
apt-get --allow-unauthenticated install -y vim
### apt-get --allow-unauthenticated install -y chromium-browser
### apt-get --allow-unauthenticated install -y meld vim-gtk
### apt-get --allow-unauthenticated install -y evince
### sudo apt-get --allow-unauthenticated install -y language-pack-zh-hans language-pack-zh-hans-base language-pack-gnome-zh-hans language-pack-gnome-zh-hans-base
### sudo apt-get --allow-unauthenticated install -y `check-language-support -l zh`
### sudo localectl set-locale LANG=zh_CN.UTF-8
### # TW/HK language support
### sudo apt-get --allow-unauthenticated install -y language-pack-zh-hant language-pack-zh-hant-base language-pack-gnome-zh-hant language-pack-gnome-zh-hant-base
### sudo apt-get --allow-unauthenticated install -y `check-language-support -l zh`
### apt-get --allow-unauthenticated install -y fcitx
### apt-get --allow-unauthenticated install -y fcitx-table-wubi fcitx-table-wubi-large
### apt-get --allow-unauthenticated install -y fcitx-googlepinyin
### apt-get --allow-unauthenticated install -y gimp
### apt-get --allow-unauthenticated install -y ibus-pinyin 
### apt-get --allow-unauthenticated install -y thunderbird-locale-en-us mythes-en-au hunspell-en-gb thunderbird-locale-en-gb fonts-arphic-ukai wbritish fcitx-sunpinyin openoffice.org-hyphenation language-pack-gnome-en hunspell-en-za fcitx-chewing fcitx-table-cangjie gimp-help-en language-pack-en mythes-en-us thunderbird-locale-en fcitx-module-cloudpinyin libreoffice-help-en-us firefox-locale-en libreoffice-help-en-gb fonts-arphic-uming hyphen-en-gb libreoffice-l10n-en-za fcitx-ui-qimpanel hunspell-en-au libreoffice-l10n-en-gb hyphen-en-us hunspell-en-ca 
### apt-get --allow-unauthenticated install -y zsh
### apt-get --allow-unauthenticated install -y fonts-wqy-zenhei fonts-wqy-microhei ttf-wqy-microhei  ttf-wqy-zenhei  xfonts-wqy
### apt-get --allow-unauthenticated install -y eclipse
### apt-get --allow-unauthenticated install -y gpicview
### apt-get --allow-unauthenticated install -y scrot
### apt-get --allow-unauthenticated install -y byobu
### apt-get --allow-unauthenticated install -y subversion git
### apt-get --allow-unauthenticated install -y kdiff3
### apt-get --allow-unauthenticated install -y docker
</code></pre>

<p>Use <code>cobbler sync</code>, and now you could deploy mate desktop via cobbler.</p>
]]></content>
  </entry>
  
</feed>
