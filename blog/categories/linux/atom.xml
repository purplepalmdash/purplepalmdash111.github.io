<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2016-03-05T22:34:30+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[把玩ebuddy(3)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/05/ba-wan-ebuddy-3/"/>
    <updated>2016-03-05T21:39:41+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/05/ba-wan-ebuddy-3</id>
    <content type="html"><![CDATA[<p>早上起来刷微信, 觉得网页版微信的提示信息大可用ebuddy来响应. 说干就干,以下是解
决方案.</p>

<h3>gnotifier</h3>

<p>写作时,我的firefox版本是44.0.2, 需要安装gnotifier这个插件,从而把firefox的提示
消息转为系统提示信息, 下载地址在:</p>

<p><a href="https://addons.mozilla.org/en-US/firefox/addon/gnotifier/">https://addons.mozilla.org/en-US/firefox/addon/gnotifier/</a></p>

<p>点击<code>Add to Firefox</code>即完成安装:</p>

<p><img src="/images/2016_03_05_21_50_12_766x490.jpg" alt="/images/2016_03_05_21_50_12_766x490.jpg" /></p>

<h3>查看dbus消息</h3>

<p>gnotifier将网页版微信的提示消息转为了系统提示消息, 那么只需要获取到系统消息总
线里的提示信息, 筛选出我们要的类型后, 给ebuddy发送相应的指令即可.</p>

<p><code>dbus-monitor</code>工具可用于侦听dbus总线里的消息, 我们来运行一下,如下:</p>

<pre><code>$  dbus-monitor --session
interface='org.freedesktop.Notifications',member='Notify'

signal time=1457186062.137082 sender=org.freedesktop.DBus -&gt;
destination=:1.163 serial=2 path=/org/freedesktop/DBus;
interface=org.freedesktop.DBus; member=NameAcquired
   string ":1.163"
signal time=1457186062.137154 sender=org.freedesktop.DBus -&gt;
destination=:1.163 serial=4 path=/org/freedesktop/DBus;
interface=org.freedesktop.DBus; member=NameLost
   string ":1.163"
method call time=1457186083.405690 sender=:1.39 -&gt; destination=:1.14
serial=220 path=/org/freedesktop/Notifications;
interface=org.freedesktop.Notifications; member=Notify
   string "Firefox"
   uint32 0
   string "/tmp/gnotifier-3Fh5Sa"
   string "yfp"
   string "[Sticker][Sticker][Sticker]"
   array [
   ]
   array [
   ]
   int32 -1
method call time=1457186086.866000 sender=:1.39 -&gt; destination=:1.14
serial=221 path=/org/freedesktop/Notifications;
interface=org.freedesktop.Notifications; member=Notify
   string "Firefox"
   uint32 0
   string "/tmp/gnotifier-9kaLsI"
   string "yfp"
   string "test"
   array [
   ]
   array [
   ]
   int32 -1
</code></pre>

<p>以上是两条从微信号为<code>yfp</code>的用户发送给网页端微信的dbus总线消息, 我们要注意的是,
需要从dbus session总线取得此信息(system bus和session bus的差别可以自行Google).</p>

<h3>python2-dbus</h3>

<p>ArchLinux下有<code>python-dbus</code>和<code>python2-dbus</code>两个关于dbus的python绑定库, 个人比较
习惯python2的缘故,安装<code>python2-dbus</code></p>

<pre><code>$ sudo pacman -Ss python2-dbus
extra/python2-dbus 1.2.0-5 [installed]
    Python 2.7 bindings for DBUS
</code></pre>

<p>用于过滤/提取dbus总线消息的python代码如下, 另存为<code>DbusEbuddy.py</code>:</p>

<pre><code class="python">import glib
import dbus
import subprocess
from dbus.mainloop.glib import DBusGMainLoop

def notifications(bus, message):
    if (len(message.get_args_list()) &gt; 0):
        if ('Firefox' == message.get_args_list()[0]):
                if ('yfp' == message.get_args_list()[3]):
                    bashCommand = 'echo 01 &gt; /dev/udp/127.0.0.1/8888'
                    output = subprocess.check_output(['bash','-c',bashCommand])

DBusGMainLoop(set_as_default=True)

bus = dbus.SessionBus()
bus.add_match_string_non_blocking("eavesdrop=true,\
    interface='org.freedesktop.Notifications', member='Notify'")
bus.add_message_filter(notifications)

mainloop = glib.MainLoop()
mainloop.run()
</code></pre>

<p>简单解释一下, 这几行代码首先attach到dbus的sessionbus总线,
<code>org.freedesktop.Notification</code>端口上所有<code>Notify</code>的成员, 如果匹配到这种消息, 则
通过<code>add_message_filter()</code>调用回调函数.</p>

<p><code>notifications</code>是我们定义的回调函数,这个回调函数同样很简单, 如果消息长度大于
0(消息非空), 则检查消息的来源(<code>message.get_args_list()[0]</code>), 选取来自Firefox的
, 由yfp(<code>messages.get_args_list()[3]</code>)用户发来的消息, 作出对应的动作
(<code>echo 01 &gt; /dev/udp/127.0.0.1/8888</code>).</p>

<h3>使用</h3>

<p>首先开启pybuddyDX库(注意要先安装python2版本的pyusb, 上一篇文章有讲):</p>

<pre><code>$ git clone git@github.com:purplepalmdash/pybuddy-dx.git
$ sudo python2 ~/Code/python/pybuddy-dx/pybuddyDX.py
</code></pre>

<p>此时系统在8888端口监听ebuddy动作, 直接运行<code>DbusEbuddy.py</code></p>

<pre><code>$ sudo python2 ~/Code/python/DbusEbuddy.py
</code></pre>

<p>以后每条由用户yfp发来的消息,都将引发ebuddy人偶执行01指令对应的动作.</p>

<h3>延伸</h3>

<p>可以匹配不同的人名, 执行不同的动作. 例如:</p>

<pre><code>李四  执行02指令
王五  执行12指令
某某群   执行08指令
</code></pre>

<p>当然,根据需要,也可以制定一些规则,譬如某VIP用户, 就是微信里你特别看重的那个人
,TA发消息来以后, 人偶心跳不止(指令19即是). 但这样一来,就引入了清零问题, 即重置
人偶状态, 很简单,我们用<code>notify-send</code>这条命令, 发送出指令17给人偶让它重置状态
即可.</p>

<p>代码的修改:</p>

<pre><code class="python">def notifications(bus, message):
    if (len(message.get_args_list()) &gt; 0):
        if ('Firefox' == message.get_args_list()[0]):
                if ('yfp' == message.get_args_list()[3]):
                    bashCommand = 'echo 19 &gt; /dev/udp/127.0.0.1/8888'
                    output = subprocess.check_output(['bash','-c', bashCommand])
        if ('notify-send' == message.get_args_list()[0]):
                if ('Clear' == message.get_args_list()[3]):
                    bashCommand = 'echo 17 &gt; /dev/udp/127.0.0.1/8888'
                    output = subprocess.check_output(['bash','-c', bashCommand])
</code></pre>

<p>而对应的清空命令则可以写成alias形式(我用的是zsh, bash类似):</p>

<pre><code>$ vim ~/.zshrc
alias clearnotify="notify-send 'Clear' 'This is a clear ebuddy notification.' --icon=dialog-information"
$ source ~/.zshrc
$ clearnotify
</code></pre>

<h3>测试</h3>

<p>现在开始测试, 首先让yfp发微信给浏览器里登录的微信用户, 可以看到, 当浏览器收到
消息后, 系统桌面出现提示, 人偶心脏处的红灯开始狂闪, 不会停止.</p>

<p><img src="/images/1039489558.jpg" alt="/images/1039489558.jpg" /></p>

<p>输入<code>clearnotify</code>命令后, 人偶恢复正常.</p>

<h3>下一步需要做的</h3>

<ol>
<li>Windows响应?</li>
<li>如何通过微信的API获取到好友列表,从而动态指定需要监听的人和事件?</li>
<li>图形界面的配置?</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conntrack-tools Usage]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/03/02/conntrack-tools-usage/"/>
    <updated>2016-03-02T17:30:31+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/03/02/conntrack-tools-usage</id>
    <content type="html"><![CDATA[<h3>参考</h3>

<p><a href="https://blogs.it.ox.ac.uk/networks/2014/09/30/linux-and-eduroam-nat-logging-perl-and-regular-expressions/">https://blogs.it.ox.ac.uk/networks/2014/09/30/linux-and-eduroam-nat-logging-perl-and-regular-expressions/</a></p>

<h3>安装</h3>

<p>ArchLinux下:</p>

<pre><code>$ sudo pacman -S conntrack-tools
</code></pre>

<h3>使用</h3>

<p>记录新建/销毁连接数至文件:</p>

<pre><code>$ sudo touch /var/log/conntrack-data.log
$ sudo chmod 777 /var/log/conntrack-data.log
$ sudo conntrack -E -eNEW,DESTROY --src-nat -otimestamp,extended --buffer-size=104857600 &gt; /var/log/conntrack-data.log
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenVswitch Bonding]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/02/25/openvswitch-bonding/"/>
    <updated>2016-02-25T15:02:24+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/02/25/openvswitch-bonding</id>
    <content type="html"><![CDATA[<h3>Before</h3>

<p>Add 2 NICs, and show their ip infos via:</p>

<pre><code>[root@localhost ~]# ifconfig
eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 10.47.58.207  netmask 255.255.255.0  broadcast 10.47.58.255
        inet6 fe80::5054:ff:feae:f2be  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 52:54:00:ae:f2:be  txqueuelen 1000  (Ethernet)
        RX packets 75  bytes 10924 (10.6 KiB)
        RX errors 0  dropped 5  overruns 0  frame 0
        TX packets 15  bytes 1668 (1.6 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

eth1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 10.47.58.135  netmask 255.255.255.0  broadcast 10.47.58.255
        inet6 fe80::5054:ff:fe56:8c2e  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 52:54:00:56:8c:2e  txqueuelen 1000  (Ethernet)
        RX packets 108  bytes 17136 (16.7 KiB)
        RX errors 0  dropped 5  overruns 0  frame 0
        TX packets 47  bytes 6928 (6.7 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</code></pre>

<h3>Install Openvswitch</h3>

<p>Install/Configure ovs via:</p>

<pre><code># yum localinstall /home/ovs/rpmbuild/RPMS/x86_64/openvswitch-2.3.2-1.x86_64.rpm
# systemctl start openvswitch.service
# chkconfig openvswitch on
# ovs-vsctl -V
ovs-vsctl (Open vSwitch) 2.3.2 
Compiled Feb 23 2016 10:12:37
DB Schema 7.6.2
</code></pre>

<h3>Configure Bonding</h3>

<p>Add bridge and list the added bridge:</p>

<pre><code>[root@localhost ~]# ovs-vsctl add-br br0 
[root@localhost ~]# ovs-vsctl list-br
br0                               
[root@localhost ~]# ovs-vsctl show
fb542c8e-968a-4dcf-b55f-934667abc7d3
    Bridge "br0"                  
        Port "br0"
            Interface "br0"
                type: internal
    ovs_version: "2.3.2"
</code></pre>

<p>Add bonding:</p>

<pre><code># ovs-vsctl add-bond br0 bond0 eth0 eth1
</code></pre>

<p>Or? ??</p>

<pre><code>$ ovs-vsctl add-bond br0 bond0 eth1 eth0 bond_mode=balance-slb other_config:lacp-time=fast
</code></pre>

<p>Configure eth0/eth1/br0:</p>

<pre><code>[root@localhost network-scripts]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 
# Generated by dracut initrd
DEVICE="eth0"
ONBOOT=yes
NETBOOT=yes
UUID="8dbd22bd-764d-48d0-b896-99ae358aebcc"
IPV6INIT=yes
BOOTPROTO="none"
TYPE=Ethernet
NAME="eth0"
[root@localhost network-scripts]# cat /etc/sysconfig/network-scripts/ifcfg-eth1
# Generated by dracut initrd
DEVICE="eth1"
ONBOOT=yes
NETBOOT=yes
IPV6INIT=yes
BOOTPROTO="none"
TYPE=Ethernet
NAME="eth1"
[root@localhost network-scripts]# cat /etc/sysconfig/network-scripts/ifcfg-br0
# Generated by dracut initrd
DEVICE="br0"
ONBOOT=yes
DEVICETYPE="ovs"
NETBOOT=yes
IPV6INIT=yes
BOOTPROTO=dhcp
TYPE="OVSBridge"
NAME="br0"
</code></pre>

<p>now restart the machine, you will get ovs bonding networking working.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python for Checking Imap Mailbox Unread Message]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/02/23/using-python-for-checking-imap-mailbox-unread-message/"/>
    <updated>2016-02-23T19:52:57+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/02/23/using-python-for-checking-imap-mailbox-unread-message</id>
    <content type="html"><![CDATA[<p>Just paste some python scripts:</p>

<pre><code>&gt;&gt;&gt; import imaplib
&gt;&gt;&gt; obj=imaplib.IMAP4_SSL('imap.163.com','993')
&gt;&gt;&gt; obj.login('XXXXX','XXXXXXXX')
('OK', [b'LOGIN completed'])
&gt;&gt;&gt; obj.select()
('OK', [b'49'])
&gt;&gt;&gt; obj.search(None,'Unseen')
('OK', [b''])
&gt;&gt;&gt; len(obj.search(None, 'UnSeen')[1][0].split()) 
0
&gt;&gt;&gt; len(obj.search(None, 'UnSeen')[1][0].split()) 
1
&gt;&gt;&gt; len(obj.search(None, 'UnSeen')[1][0].split()) 
2
&gt;&gt;&gt; len(obj.search(None, 'UnSeen')[1][0].split()) 
2
&gt;&gt;&gt; len(obj.search(None, 'UnSeen')[1][0].split()) 
1
&gt;&gt;&gt; 
</code></pre>

<p>Using the unread counts, you could easily interact with some other programs,
for example shining LEDs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mutt Configuration on DO]]></title>
    <link href="http://purplepalmdash.github.io/blog/2016/02/19/mutt-configuration-on-do/"/>
    <updated>2016-02-19T07:11:24+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2016/02/19/mutt-configuration-on-do</id>
    <content type="html"><![CDATA[<p>For sending back the daily fetched items into China Great LAN, I have to setup
the smtp configuration for mutt on DO&rsquo;s ubuntu machine. Following are the
steps.</p>

<p>Install the mutt and msmtp:</p>

<pre><code>$ sudo apt-get install -y mutt msmtp 
</code></pre>

<p>Edit following files:</p>

<pre><code>$ cat ~/.muttrc
set mbox_type=Maildir
set folder=$HOME/.mail
set spoolfile=~/.mail
set header_cache=~/.mail/.hcache
set sendmail="/usr/bin/msmtp"
set use_from=yes
set realname="YourRealName"
set from=YourUserNameHere@163.com
set envelope_from=yes 
</code></pre>

<p>msmtp rc config file:</p>

<pre><code>$ cat ~/.msmtprc
account default
host smtp.163.com
port 25
protocol smtp
auth plain
from YourUserNameHere@163.com
user YourUserNameHere
password YourPasswordHere
$ chmod 600 ~/.msmtprc
</code></pre>

<p>And muttrc under .muttrc and edit it with:</p>

<pre><code>$ mkdir -p  ~/.mutt
$ touch ~/.mutt/muttrc
$ cat ~/.mutt/muttrc
set realname='YourRealName'
set sendmail="/usr/bin/msmtp"
set edit_headers=yes
set folder=~/mail
set mbox=+mbox
set spoolfile=+inbox
set record=+sent
set postponed=+drafts
set mbox_type=Maildir

mailboxes +inbox +lovey-dovey +happy-kangaroos
</code></pre>

<p>Now send mail via:</p>

<pre><code>$ echo "cba" | mutt -s "Today download" YourFriendMail@qq.com
$ echo "cba" | mutt -s "Today download" YourFriendMail@qq.com  -a /var/www/cl.tar.xz
</code></pre>

<p>I tried to configure the qq.com mailbox, but failed, the above solution only
suitable for 163.com.</p>
]]></content>
  </entry>
  
</feed>
