<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-10-16T06:40:29+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use OpenWRT Router for Lan Forwarding]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/15/use-openwrt-router-for-lan-forwarding/"/>
    <updated>2015-10-15T11:50:28+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/15/use-openwrt-router-for-lan-forwarding</id>
    <content type="html"><![CDATA[<h3>USB Ethernet</h3>

<p>Insert the USB Ethernet Dongle into the Ubuntu14.04, it will be automatically
recognized and initialized.</p>

<pre><code>$ dmesg | tail 
    [10323.307662] asix 2-2.2:1.0 eth1: register 'asix' at usb-0000:00:1d.7-2.2, ASIX
    AX88772B USB 2.0 Ethernet, 84:xx:xx:xx:xx
    [10323.307704] usbcore: registered new interface driver asix
    [10324.285425] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready
$ ifconfig eth1
    eth1      Link encap:Ethernet  HWaddr 84:xx:xx:xx:
</code></pre>

<p>Be care to see the udev rules definition:</p>

<pre><code>$ cat /etc/udev/rules.d/70-persistent-net.rules 

# USB device 0x:0x (asix)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="84:xx:xx:xx:xx",
ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
</code></pre>

<h3>IP Configuration</h3>

<p>Add the following items into the network configuration file:</p>

<pre><code># vim /etc/network/interfaces 
    # usb network eth1
    allow-hotplug eth1
    iface eth1 inet static
    address 10.0.80.1
    netmask 255.255.255.0
</code></pre>

<p>Now restart the network</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Tips 3]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/13/linux-tips-3/"/>
    <updated>2015-10-13T10:43:51+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/13/linux-tips-3</id>
    <content type="html"><![CDATA[<h3>1. Tips on Cloud-Init</h3>

<p><a href="http://www.cnblogs.com/smallcoderhujin/p/4238609.html">http://www.cnblogs.com/smallcoderhujin/p/4238609.html</a></p>

<h3>2. Access CloudStack VR</h3>

<p>Get the VR IP address from the CloudStack Web Interface:</p>

<p><img src="/images/2015_10_13_15_46_59_464x499.jpg" alt="/images/2015_10_13_15_46_59_464x499.jpg" /></p>

<p>Then get the ssh connection via(On Agent Node):</p>

<pre><code>[root@csmgmt ~]# ssh -i .ssh/id_rsa.cloud -p3922 169.254.1.177  
Linux r-9-VM 3.2.0-4-amd64 #1 SMP Debian 3.2.65-1+deb7u2 x86_64
.......
root@r-9-VM:~#
</code></pre>

<h3>3. Cloudmonkey issue</h3>

<p>Couldnot start cloudmonkey, use virtualenv for starting:</p>

<pre><code>$ yum install -y python-virtualenv
$ virtualenv venv --python=python2.6
$ . venv/bin/activate
$ pip install cloudmonkey
</code></pre>

<p>Then you could start cloudmonkey in venv environment.</p>

<h3>4. Cloud Performance Testing</h3>

<p>Cloud Performance testing URL.</p>

<pre><code>http://www.qyjohn.net/?p=2715
http://www.ccf.org.cn/resources/1190201776262/2011/10/17/2.pdf
http://www.os-easy.com/News/2014-10/526.html
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20151009备注]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/09/20151009bei-zhu/"/>
    <updated>2015-10-09T22:21:11+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/09/20151009bei-zhu</id>
    <content type="html"><![CDATA[<h3>Mirantis</h3>

<p>定时任务，更新Mirantis镜像</p>

<h3>Autossh Issue</h3>

<p>取远端服务器上的某个值，若该值为真，则临时建立反向链接。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerize Markdown Written CV]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/08/dockerize-markdown-written-cv/"/>
    <updated>2015-10-08T10:08:02+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/08/dockerize-markdown-written-cv</id>
    <content type="html"><![CDATA[<h3>Tips</h3>

<p>Manually run the commands for generating the CVs.</p>

<pre><code>$ sudo apt-get install -y build-essential
$ sudo apt-get install -y pandoc
$ sudo apt-get install -y wkhtmltopdf 
$ sudo apt-get install xvfb
$  echo 'xvfb-run --server-args="-screen 0, 1024x768x24" /usr/bin/wkhtmltopdf $*' &gt; \
/usr/bin/wkhtmltopdf.sh
$ chmod a+x /usr/bin/wkhtmltopdf
$ chmod a+x /usr/bin/wkhtmltopdf.sh 
$ ln -s /usr/bin/wkhtmltopdf.sh /usr/local/bin/wkhtmltopdf
$ apt-get install -y ttf-wqy-zenhei
$ apt-get install -y git
$ apt-get install -y rubygems-integration ruby-dev
$ apt-get install -y libimage-exiftool-perl
$ gem install compass
$ gem install susy
$ git clone https://github.com/barraq/pandoc-moderncv.git
$ cd pandoc-moderncv/
$ mkdir -p cv/images/
$ vim cv/cv.md
$ gem install gempass
$ gem install 
$ make
#####$ apt-get install python-software-properties
#####$ apt-get install software-properties-common
$ vim Makefile 
   -&gt; Change the wkpdf to wkhtmltopdf
$ make pdf
</code></pre>

<h3>Dockerfile</h3>

<p>Write the Dockerfile like following:</p>

<pre><code># Based on Ubuntu 14.04
FROM ubuntu:trusty

# Install Packages, via apt-get. 
RUN apt-get update &amp;&amp; apt-get install -y \
    build-essential \
    pandoc \
    wkhtmltopdf \
    xvfb \
    ttf-wqy-zenhei \
    git \
    rubygems-integration \
    ruby-dev \
    libimage-exiftool-perl \
    python-twisted

# Now Change wkhtmltopdf
RUN echo 'xvfb-run --server-args="-screen 0, 1024x768x24" /usr/bin/wkhtmltopdf $*' &gt; /usr/bin/wkhtmltopdf.sh
RUN chmod a+x /usr/bin/wkhtmltopdf
RUN chmod a+x /usr/bin/wkhtmltopdf.sh 
RUN ln -s /usr/bin/wkhtmltopdf.sh /usr/local/bin/wkhtmltopdf

# Now Run gems 
RUN gem install compass
RUN gem install susy

# Git Clone the CV FrameWork from github.
RUN mkdir -p /opt/Code/
RUN git clone https://github.com/barraq/pandoc-moderncv.git  /opt/Code/pandoc-moderncv

# Now begin to build the cv, using the demo 'scaffold'
RUN cd /opt/Code/pandoc-moderncv/ &amp;&amp; make scaffold &amp;&amp; make pdf HTMLTOPDF=wkhtmltopdf

# Run http server on server 5177, since in dist/ folder we will have the html and pdf
EXPOSE 5177
CMD ["twistd", "-n", "web", "-p", "5177", "--path", "/opt/Code/pandoc-moderncv/dist/"]
</code></pre>

<p>Put it on github, and trigger an auto-build on dockerhub, pulling it and you could get
the well built docker image.</p>

<h3>Use this Container</h3>

<p>Use it via:</p>

<pre><code>$ sudo docker build -t mycv/mycvapp /home/dash/Code/DockerBuild
$ sudo docker run -d -p 5000:5177 mycv/mycvapp
</code></pre>

<p>Since our Docker Container listens 5177 port, we use <code>-p</code> for mapping local machine&rsquo;s
5000 port to 5177, visit localmachine:5000 then you could found the CV based directory.</p>

<h3>Change to Debian Based</h3>

<p>Maybe Debian based will be much more slim? But this involves the pandoc issue.</p>

<pre><code># Based on Debian Wheezy
FROM debian:wheezy

# Install Packages, via apt-get. 
RUN apt-get update &amp;&amp; apt-get install -y \
        build-essential \
        cabal-install \
        wkhtmltopdf \
        xvfb \
        ttf-wqy-zenhei \
        git \
        rubygems-integration \
        ruby-dev \
        libimage-exiftool-perl \
    zlib1g-dev \
    libdigest-perl \
        python-twisted &amp;&amp; rm -rf /var/lib/apt/lists/*

# Via cabal for installing pandoc, latest one will have the markdown plugins
RUN cabal update &amp;&amp; cabal install pandoc

# After install pandoc via cabal, update the $PATH
ENV PATH /root/.cabal/bin:$PATH

# Now Change wkhtmltopdf
RUN echo 'xvfb-run --server-args="-screen 0, 1024x768x24" /usr/bin/wkhtmltopdf $*' &gt;
/usr/bin/wkhtmltopdf.sh
RUN chmod a+x /usr/bin/wkhtmltopdf
RUN chmod a+x /usr/bin/wkhtmltopdf.sh 
RUN ln -s /usr/bin/wkhtmltopdf.sh /usr/local/bin/wkhtmltopdf

# Now Run gems 
RUN gem install compass
RUN gem install susy

# Git Clone the CV FrameWork from github.
RUN mkdir -p /opt/Code/
RUN git clone https://github.com/barraq/pandoc-moderncv.git  /opt/Code/pandoc-moderncv

# Now begin to build the cv, using the demo 'scaffold'
RUN cd /opt/Code/pandoc-moderncv/ &amp;&amp; make scaffold &amp;&amp; make pdf HTMLTOPDF=wkhtmltopdf

# Run http server on server 5177, since in dist/ folder we will have the html and pdf
EXPOSE 5177
CMD ["twistd", "-n", "web", "-p", "5177", "--path", "/opt/Code/pandoc-moderncv/dist/"]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing Mouse/Keyboard Among 3 Nodes]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/09/22/sharing-mouse-slash-keyboard-among-3-nodes/"/>
    <updated>2015-09-22T20:42:04+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/09/22/sharing-mouse-slash-keyboard-among-3-nodes</id>
    <content type="html"><![CDATA[<p>I have 3 computers which runs ArchLinux/Ubuntu15.04 Mate, they both connected
to the same ethernet, I&rsquo;d like to use only one mouse/keyboard for controlling
them, following are the steps for how-to.</p>

<h3>Network Configuration</h3>

<p>The 3 computer are listed as following:  <br/>
* 192.168.1.11/dashArch/ArchLinux
* 192.168.1.13/dash32G/Ubuntu15.04
* 192.168.1.10/dashMate/Ubuntu15.04</p>

<p>Edit the <code>/etc/hosts</code> in 192.168.1.11:</p>

<pre><code>$ sudo vim /etc/hosts
192.168.1.13    dash32G
192.168.1.14    dashMate
</code></pre>

<p>In 192.168.1.13, Edit <code>/etc/hosts</code>:</p>

<pre><code>$ sudo vim /etc/hosts
192.168.1.11    dashArch
</code></pre>

<h3>Synergy Server</h3>

<p>I use ArchLinux for Synergy Server, install it simply via:</p>

<pre><code>$ sudo pacman -S synergy
</code></pre>

<p>Run synergy via <code>synergy</code>, now configure it:</p>

<p><img src="/images/2015_09_22_20_47_11_692x530.jpg" alt="/images/2015_09_22_20_47_11_692x530.jpg" /></p>

<p>By drag a new machine in the configuration window, named dash32G:</p>

<p><img src="/images/2015_09_22_21_00_13_732x508.jpg" alt="/images/2015_09_22_21_00_13_732x508.jpg" /></p>

<p>Also drag a new machine in the configuraitn window, named dashMate:</p>

<p><img src="/images/2015_09_22_22_35_02_607x363.jpg" alt="/images/2015_09_22_22_35_02_607x363.jpg" /></p>

<p>Save the conf file as <code>~/SynergyArch.conf</code>, then configure the systemctl.</p>

<p>Start the Synergy Server at the startup:</p>

<pre><code>$ cat /usr/lib/systemd/synergys@.service 
[Unit]
Description=Synergy Server Daemon
After=network.target

[Service]
User=%i
ExecStart=/usr/bin/synergys --no-daemon --config /home/dash/SynergyArch.conf --enable-crypto
Restart=on-failure

[Install]
WantedBy=multi-user.target
$ sudo systemctl start synergys@dash
$ sudo systemctl enable synergys@dash
Created symlink from
/etc/systemd/system/multi-user.target.wants/synergys@dash.service to
/usr/lib/systemd/system/synergys@.service.
</code></pre>

<h3>Synergy Client</h3>

<p>Install synergy client on Ubuntu via:</p>

<pre><code>$ sudo apt-get install -y synergy
</code></pre>

<p>Configure the synergy as the client mode, like following:</p>

<p><img src="/images/2015_09_22_21_18_42_697x546.jpg" alt="/images/2015_09_22_21_18_42_697x546.jpg" /></p>

<p>Save the configuration file under your home directory, named it as
<code>synergyconfig.conf</code>.</p>

<p>Since the Ubuntu15.04 Mate use lightdm for login, we add following line into
lightdm&rsquo;s configuration file:</p>

<pre><code>$ sudo vim /usr/share/lightdm/lightdm.conf.d/50-ubuntu-mate.conf
+ greeter-setup-script=/usr/bin/synergyc 192.168.1.11
</code></pre>

<p>The same configuration should be applied to dashMate.</p>

<h3>Auto-login Synergyc Configuration</h3>

<p>Start synergy after login:</p>

<p>To start Synergy once you have logged into your X-session.</p>

<pre><code>Main Menu - System - Preferences - Startup Applications   
[ Add ]  
  Name:     synergys
  Command:  synergys --config ~/.synergy.conf
  Comment:  synergys  
</code></pre>

<p>Also you should configure the mate configuration file:</p>

<pre><code>$ cat /usr/share/lightdm/lightdm.conf.d/50-ubuntu-mate.conf
[SeatDefaults]
user-session=mate
greeter-setup-script=/usr/bin/synergyc 192.168.1.11
autologin-user=xxxxxx
</code></pre>

<p>Now you will have the synergy runs after you login to the mate desktop.</p>

<h3>Conclusion</h3>

<p>Now restart the computer, and everytime you could switch from different
machines.</p>
]]></content>
  </entry>
  
</feed>
