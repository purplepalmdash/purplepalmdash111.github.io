<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-08-30T18:17:37+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips for SSD Installation]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/30/tips-for-ssd-installation/"/>
    <updated>2015-08-30T14:45:24+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/30/tips-for-ssd-installation</id>
    <content type="html"><![CDATA[<p>Refers to:  <br/>
<a href="https://wiki.archlinux.org/index.php/Beginners'_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">https://wiki.archlinux.org/index.php/Beginners'<em>guide</em>%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29</a></p>

<h3>Partition</h3>

<p>Check if you are in efi mode:</p>

<pre><code># efivar -l
</code></pre>

<p>Then format your disk using parted:</p>

<pre><code># parted /dev/sda
(parted) mkpart ESP fat32 1M 513M
(parted) set 1 boot on
(parted) mkpart primary ext4 513M 100%
</code></pre>

<p>Check if your partition is aligned:</p>

<pre><code># blockdev --getalignoff /dev/sda
0
</code></pre>

<p>I have 2 disks, one for ssd, the other for hdd, so I want to share the swap partition,
and locate the /var directory in the hdd, modify it via:</p>

<pre><code># mkfs.ext4 /dev/sda2
# mkfs.vfat -F32 /dev/sda1
# mount /dev/sda2 /mnt
# mkdir -p /mnt/boot
# mount /dev/sda1 /mnt/boot
# swapon /dev/sdb1
# mkdir /media/
# mount /dev/sdb2 /media
# mkdir /media/var_for_sda
# ln -s /media/var_for_sda /mnt/var
</code></pre>

<p>Now you could do pacstrap.</p>

<h3>Installation</h3>

<p>Installation are the same as the guildeline show,</p>

<pre><code># pacman -S dosfstools efibootmgr
# bootctl --path=/boot install
# vim /boot/loader/entries/arch.conf
title          Arch Linux
linux          /vmlinuz-linux
initrd         /initramfs-linux.img
options        root=/dev/sda2 rw
# vim /boot//loader/loader.conf
#timeout 3
default arch
timeout 5
</code></pre>

<p>For wireless connection:</p>

<pre><code># pacman -S iw wpa_supplicant
# pacman -S dialog
</code></pre>

<p>Modification of the /etc/fstab:</p>

<pre><code># /dev/sda2
UUID=xxxxxxxxxxxxxxxxxxxxxxxx       /               ext4 default,rw,data=ordered,noatime,discard 0 1

# /dev/sda1
UUID=xxxxxxxxxxxxxxxxx          /boot           vfat rw,noatime,discard,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro  0 2

# /dev/sdb1
UUID=xxxxxxxxxxxxxxxxxxx       none            swap defaults        0 0

# /dev/sdb2
UUID=xxxxxxxxxxxxxxxxxxx       /media          ext4  rw,relatime,data=ordered        0 2

# Only for /var , use mount -o bind
/media/var_for_sda      /var    none    bind
</code></pre>

<p>Now reboot everything will be OK.</p>

<h3>Configuration For SSD</h3>

<p>Profile-sync-daemon for optimization of Browser :</p>

<pre><code>$ yaourt profile-sync-daemon
$ sudo vim /etc/psd.conf
USERS="XXXXX"
BROWSERS="chromium firefox"
USE_OVERLAYFS="yes"
$ sudo systemctl enable psd.service
$ sudo systemctl start psd.service
</code></pre>

<p>Test it via:</p>

<pre><code>$ profile-sync-daemon parse
</code></pre>

<p>Use <code>firefox -P</code> for changing the profile position. I put all of the profils on HDD.</p>

<p>For chromium, softlink the ~/.config/chromium to HDD disk then you play the tricks for
avoiding HDD from too much write.   .</p>

<h3>Quickly Add User</h3>

<p>Use following command for quickly adding the user with specified priviledge:</p>

<pre><code># useradd -m -g root -G \
audio,video,floppy,network,rfkill,scanner,storage,optical,power,wheel,uucp -s  \
/usr/bin/zsh xxxxx
# passwd xxxxx
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GPT/SSD on ArchLinux Installation]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/30/gpt-slash-ssd-on-archlinux-installation/"/>
    <updated>2015-08-30T09:18:15+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/30/gpt-slash-ssd-on-archlinux-installation</id>
    <content type="html"><![CDATA[<p>Since I met so many problems in archlinux installation on SSD, plus UEFI issues, I use
following virt machine for re-produce the problem and try to find out the solution.</p>

<h3>Prepare</h3>

<p>Prepare two disk, one for SSD, the second is the oridinary one.</p>

<pre><code>$ qemu-img create -f qcow2 -o cluster_size=4k ArchSSD.qcow2 100G
$ qemu-img create -f qcow2 ArchHDD.qcow2 80G
$ virt-manage
</code></pre>

<h3>UEFI Support In Virt-Manager</h3>

<p>Follow the tips in
<a href="https://fedoraproject.org/wiki/Using_UEFI_with_QEMU">https://fedoraproject.org/wiki/Using_UEFI_with_QEMU</a></p>

<pre><code># wget http://www.kraxel.org/repos/firmware.repo -O /etc/yum.repos.d/firmware.repo
# yum install edk2.git-ovmf-x64
# vim /etc/libvirt/qemu.conf
 nvram = [
    "/usr/share/edk2.git/ovmf-x64/OVMF_CODE-pure-efi.fd:/usr/share/edk2.git/ovmf-x64/OVMF_VARS-pure-efi.fd",
 ]
</code></pre>

<p>In customization of the vm, select like following:</p>

<p><img src="/images/2015_08_30_10_09_31_306x202.jpg" alt="/images/2015_08_30_10_09_31_306x202.jpg" /></p>

<h3>Virtual Machine Definition</h3>

<p>The configuration of the vm machine is listed as in following picture:</p>

<p><img src="/images/2015_08_30_09_28_46_445x204.jpg" alt="/images/2015_08_30_09_28_46_445x204.jpg" /></p>

<p>So now begin to install virt-machine. Use iso for booting up the machine and you will
see following partition configuration in the terminal:</p>

<pre><code>root@archiso ~ # fdisk -l /dev/vda
Disk /dev/vda: 100 GiB, 107374182400 bytes, 209715200 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
root@archiso ~ # fdisk -l /dev/vdb
Disk /dev/vdb: 80 GiB, 85899345920 bytes, 167772160 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
</code></pre>

<h3>Partition Preparation</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Trusty KickStart for SpaceWalk]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/25/enable-trusty-kickstart-for-spacewalk/"/>
    <updated>2015-08-25T16:06:17+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/25/enable-trusty-kickstart-for-spacewalk</id>
    <content type="html"><![CDATA[<h3>Import distro-tree</h3>

<p>Copy iso content into the distro-tree:</p>

<pre><code># mount -t  iso9660 -o loop /mnt/iso/ubuntu-14.04.3-server-amd64.iso /mnt1/
# mkdir /var/distro-trees/ubuntu-14.04.3-amd64
# chmod 755 /var/distro-trees/ubuntu-14.04.3-amd64/
# cp -ar /mnt1/* /var/distro-trees/ubuntu-14.04.3-amd64/
</code></pre>

<p>We will copy the pxeboot startup file from CentOS7 into ubuntu14.04 distro tree for
cheating the spacewalk:</p>

<pre><code># mount -t iso9660 -o loop /mnt/iso/CentOS-7-x86_64-Everything-1503-01.iso /mnt2/
# mkdir -p /var/distro-trees/ubuntu-14.04.3-amd64/images/pxeboot/
# cp /mnt2/images/pxeboot/{initrd.img,vmlinuz} /var/distro-trees/ubuntu-14.04.3-amd64/images/pxeboot/
# ls /var/distro-trees/ubuntu-14.04.3-amd64/images/pxeboot/ -l -h
....
</code></pre>

<h3>Kickstarting</h3>

<p>Now in spacewalk go to Systems->Kickstart->Distributions, with the parameters like
following picture:</p>

<p><img src="/images/2015_08_25_16_17_53_595x352.jpg" alt="/images/2015_08_25_16_17_53_595x352.jpg" />  <br/>
We copy the CentOS Kernel and initrd, so Spacewalk use redhat parameters for this
distribution, later we will fix this.</p>

<p>Now create a profile via go to Systems->Kickstart->Profiles and &ldquo;upload a new kickstart
file&rdquo;, just like following picture.</p>

<p><img src="/images/2015_08_25_16_22_53_617x590.jpg" alt="/images/2015_08_25_16_22_53_617x590.jpg" /></p>

<p>We fix the hardcoded breed from redhat to ubuntu via following steps:</p>

<p>Get the list info via <code>cobbler list</code>:</p>

<p><img src="/images/2015_08_25_16_27_12_515x205.jpg" alt="/images/2015_08_25_16_27_12_515x205.jpg" /></p>

<p>Report the selected distro info:</p>

<pre><code># cobbler distro report --name=trustyamd64:1:SpacewalkDefaultOrganization
</code></pre>

<p><img src="/images/2015_08_25_16_28_48_990x256.jpg" alt="/images/2015_08_25_16_28_48_990x256.jpg" /></p>

<p>Edit it like following:</p>

<pre><code># cobbler distro edit --name trustyamd64:1:SpacewalkDefaultOrganization --breed=ubuntu --os-version=jaunty --initrd=/var/distro-trees/ubuntu-14.04.3-amd64/install/netboot/ubuntu-installer/amd64/initrd.gz --kernel=/var/distro-trees/ubuntu-14.04.3-amd64/install/vmlinuz 
</code></pre>

<p>We should notice the initrd file and kernel has been modified!!!</p>

<p><img src="/images/2015_08_25_16_32_24_933x261.jpg" alt="/images/2015_08_25_16_32_24_933x261.jpg" /></p>

<p>Now edit the <code>/var/lib/tftpboot/pxelinux.cfg/default</code> file, find the item and modify it like following:</p>

<pre><code>LABEL trustykickstart:1:SpacewalkDefaultOrganization
        kernel /images/trustyamd64:1:SpacewalkDefaultOrganization/vmlinuz
        MENU LABEL trustykickstart:1:SpacewalkDefaultOrganization
        append initrd=/images/trustyamd64:1:SpacewalkDefaultOrganization/initrd.gz  ks=http://192.168.0.79/trustykickstart.cfg ksdevice=eth0 --
        ipappend 2
</code></pre>

<p>Now you could kickstart your ubuntu trusty now.</p>

<h3>Register to SpaceWalk</h3>

<p>First create a key under spacewalk for activating all of the trusty clients:  <br/>
<img src="/images/2015_08_26_11_10_35_378x489.jpg" alt="/images/2015_08_26_11_10_35_378x489.jpg" /></p>

<p>Register the client via:</p>

<pre><code># apt-get install apt-transport-spacewalk rhnsd
# vim /usr/lib/python2.7/xmlrpclib.py
    def dump_nil (self, value, write):
    - if not self.allow_none:
    - raise TypeError, "cannot marshal None unless allow_none is enabled"
    +# if not self.allow_none:
    +# raise TypeError, "cannot marshal None unless allow_none is enabled"
# apt-get install python-libxml2
# mkdir /var/lock/subsys
# vim /etc/hosts
10.11.11.3      spacewalk
# rhnreg_ks --activationkey=1-trustyamd64 --serverUrl=http://spacewalk/XMLRPC
Warning: unable to enable rhnsd with chkconfig
</code></pre>

<p>Register to the main channel:</p>

<pre><code># cat /etc/apt/sources.list.d/spacewalk.list
deb spacewalk://spacewalk channels: main
# apt-get update
</code></pre>

<p>Added more software channels in the spacewalk web.</p>

<p><img src="/images/2015_08_26_11_22_13_607x454.jpg" alt="/images/2015_08_26_11_22_13_607x454.jpg" /></p>

<p>Update it via:</p>

<pre><code># apt-get update &amp;&amp; apt-get update
Apt-Spacewalk: Updating sources.list
WARNING:root:could not open file '/etc/apt/sources.list'

Ign spacewalk://spacewalk channels: InRelease
Ign spacewalk://spacewalk channels: Release.gpg
Ign spacewalk://spacewalk channels: Release
Ign spacewalk://spacewalk channels:/main amd64 Packages/DiffIndex
Ign spacewalk://spacewalk channels:/main i386 Packages/DiffIndex
Get:1 spacewalk://spacewalk channels:/trusty-amd64-updates amd64 Packages [829 kB]
Get:2 spacewalk://spacewalk channels:/trusty-amd64-backports amd64 Packages [5,177 B]
Get:3 spacewalk://spacewalk channels:/trusty-amd64-security amd64 Packages [437 kB]
Get:4 spacewalk://spacewalk channels:/trusty-amd64-updates i386 Packages [829 kB]
Get:5 spacewalk://spacewalk channels:/trusty-amd64-backports i386 Packages [5,177 B]
Get:6 spacewalk://spacewalk channels:/trusty-amd64-security i386 Packages [437 kB]
Get:7 spacewalk://spacewalk channels:/main amd64 Packages [2,017 kB]
Get:8 spacewalk://spacewalk channels:/main i386 Packages [2,017 kB]
Ign spacewalk://spacewalk channels:/main Translation-en_US
Ign spacewalk://spacewalk channels:/main Translation-en
Ign spacewalk://spacewalk channels:/trusty-amd64-backports Translation-en_US
Ign spacewalk://spacewalk channels:/trusty-amd64-backports Translation-en
Ign spacewalk://spacewalk channels:/trusty-amd64-security Translation-en_US
Ign spacewalk://spacewalk channels:/trusty-amd64-security Translation-en
Ign spacewalk://spacewalk channels:/trusty-amd64-updates Translation-en_US
Ign spacewalk://spacewalk channels:/trusty-amd64-updates Translation-en
Fetched 6,577 kB in 1s (5,320 kB/s)
</code></pre>

<p>Met many problems, perhaps the repository error.</p>

<p>Fix Bug, In spacewalk server, change following items:</p>

<pre><code>[root@spacewalk trusty-ia32]# cat Packages | grep -i "Package: python$" -A2
Package: python
Version: 2.7.5-5ubuntu3
Multi-Arch: allowed
[root@spacewalk trusty-ia32]# cat Packages | grep -i "Package: python3$" -A2
Package: python3
Version: 3.4.0-0ubuntu2
Multi-Arch: allowed
[root@spacewalk trusty-ia32]# pwd
/var/cache/rhn/repodata/trusty-ia32
</code></pre>

<p>And regenerate the Packages.gz via:</p>

<pre><code># rm -f Packages.gz
# gzip -c Packages Packages.gz
</code></pre>

<p>Now re-install firefox you won&rsquo;t meet problem.</p>

<h3>Enable &ldquo;Push&rdquo;</h3>

<p>Install the packages, precise&rsquo;s package will also be OK for trusty.</p>

<p>Notice, the Trusty could use saucy based deb.</p>

<pre><code>$ wget https://launchpad.net/~mj-casalogic/+archive/ubuntu/spacewalk-ubuntu/+files/rhncfg_5.10.14-1ubuntu1%7Esaucy2_all.deb
$ wget https://launchpad.net/~mj-casalogic/+archive/ubuntu/spacewalk-ubuntu/+files/osad_5.11.27-1ubuntu1%7Esaucy5_all.deb
$ wget https://launchpad.net/~mj-casalogic/+archive/ubuntu/spacewalk-ubuntu/+files/pyjabber_0.5.0-1.4ubuntu3%7Esaucy1_all.deb
$ sudo dpkg -i osad_5.11.27-1ubuntu1~saucy5_all.deb
$ sudo dpkg -i pyjabber_0.5.0-1.4ubuntu3~saucy1_all.deb
</code></pre>

<p>Import the certification file and modify the osad&rsquo;s certification file:</p>

<pre><code># cd /usr/share/rhn
# wget http://spacewalk.example.com/pub/RHN-ORG-TRUSTED-SSL-CERT
# vim /etc/sysconfig/rhn/up2date
sslCACert=/usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT
# vim /etc/sysconfig/rhn/osad.conf
osa_ssl_cert = /usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT
# service osad start
# update-rc.d osad defaults
# reboot
</code></pre>

<p>If you encounter problem, check the version of the osad/pyjabber, remove the precise
version and install saucy version on Trusty via <code>dpkg -P osad &amp;&amp; dpkg -P pyjabber</code>,
install the right version, then everything will becomes OK.</p>

<h3>Enable Remote Command</h3>

<p>Install and Configure it via:</p>

<pre><code># dpkg -i rhncfg_5.10.14-1ubuntu1~saucy2_all.deb 
# rhn-actions-control --enable-run
# mkdir /var/spool/rhn
</code></pre>

<p>Also add configuration:   <br/>
<img src="/images/2015_08_27_15_09_31_375x346.jpg" alt="/images/2015_08_27_15_09_31_375x346.jpg" /></p>

<p>Now you could run command in spacewalk backend.</p>

<h3>Errata</h3>

<p>Following the tips on <a href="http://cefs.steve-meier.de/">http://cefs.steve-meier.de/</a>  <br/>
Import erratas into the system.</p>

<pre><code># ./errata-import.pl --server spacewalk --errata ./errata.latest.xml  --rhsa-oval \
./com.redhat.rhsa-all.xml --channel centos6-i386 --os-version 6 --publish
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add CentOS Client Into SpaceWalk]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/25/add-centos-client-into-spacewalk/"/>
    <updated>2015-08-25T14:30:44+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/25/add-centos-client-into-spacewalk</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Take i386 architecture for example, first download the rpm package then install it:</p>

<pre><code>$ wget /yum.spacewalkproject.org/2.3-client/RHEL/6/i386/spacewalk-client-repo-2.3-2.el6.noarch.rpm
$ rpm -ivh spacewalk-client-repo-2.3-2.el6.noarch.rpm 
</code></pre>

<p>If your architecture is x86_64, then select x86_64 corresponding rpm and install it.</p>

<p>Enable EPEL:</p>

<pre><code># BASEARCH=$(uname -i)
# rpm -Uvh http://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
</code></pre>

<p>Now install the spacewalk client via:</p>

<pre><code># yum install -y rhn-client-tools rhn-check rhn-setup rhnsd m2crypto yum-rhn-plugin
</code></pre>

<h3>Configuration</h3>

<p>Install Spacewalk server&rsquo;s CA certificate on the server to enable SSL communication:</p>

<pre><code># wget http://10.11.11.3/pub/rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm
# rpm -ivh rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm
</code></pre>

<p>Add following item into the <code>/etc/hosts</code> and test its reachable:</p>

<pre><code># vim /etc/hosts
....
10.11.11.3      spacewalk
# ping spacewalk
PING spacewalk (10.11.11.3) 56(84) bytes of data.
64 bytes from spacewalk (10.11.11.3): icmp_seq=1 ttl=64 time=0.214 ms
...
</code></pre>

<p>Now register your machine into the server:</p>

<pre><code>#  rhnreg_ks --serverUrl=https://spacewalk/XMLRPC --sslCACert=/usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT --activationkey=1-centos6-i386
</code></pre>

<p>Verify it in SpaceWalk&rsquo;s system details view.</p>

<h3>Enable osad</h3>

<p>Install and configure it via:</p>

<pre><code># yum install osad
# vim /etc/sysconfig/rhn/osad.conf
osa_ssl_cert = /usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT
# yum install python-hashlib
# service osad start
</code></pre>

<p>After osad has been installed, the installation of packages will be done almost
instantly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Game-KeyBoard Rapoo V5 Pro in Ubuntu Trusty]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/08/24/enable-game-keyboard-rapoo-v5-pro-in-ubuntu-trusty/"/>
    <updated>2015-08-24T12:13:42+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/08/24/enable-game-keyboard-rapoo-v5-pro-in-ubuntu-trusty</id>
    <content type="html"><![CDATA[<h3>Problem</h3>

<p>A Game KeyBoard Rapoo V5 Pro could work propery under windows, but in
Ubuntu 14.04(Trusty) it could not be identified. Following are the steps for enable it.   <br/>
The dmesg shows following message(similar message):</p>

<pre><code>[ 272.865245] hid-generic 0003:04D9:A04A.0007: input,hidraw4: USB HID v1.10 Keyboard
[xxxxxxxxxxxxxx] on usb-0000:00:1d.0-1/input0
[ 272.874127] hid-generic 0003:04D9:A04A.0008: usage index exceeded
[ 272.874142] hid-generic 0003:04D9:A04A.0008: item 0 2 2 2 parsing failed
[ 272.874187] hid-generic: probe of 0003:04D9:A04A.0008 failed with error -22
</code></pre>

<h3>Reason</h3>

<p>This is an known bug which we could found at:<br/>
<a href="https://bugs.archlinux.org/task/33322">https://bugs.archlinux.org/task/33322</a>   <br/>
Or:  <br/>
<a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1064490">https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1064490</a></p>

<p>The reason is because &ldquo;usage index exceeded&rdquo; because the source code definition in
kernel only 12288:</p>

<pre><code>$ cat include/hid.c
....
#define HID_MAX_USAGES          12288
</code></pre>

<h3>Solution</h3>

<p>We need to re-compile the kernel with the modified code, then install it we could get
this keyboard working.</p>

<p>Download the kernel source:</p>

<pre><code>$ mkdir ~/Code/Kernel_Enable_Keyboard &amp;&amp; ce ~/Code/Kernel_Enable_Keyboard
$ apt-get source linux-image-$(uname -r)
</code></pre>

<p>Now prepare the building environment:</p>

<pre><code>$ sudo apt-get install kernel-package
$ sudo apt-get build-dep linux-image-$(uname -r)
$ sudo apt-get install libncurses5 libncurses5-dev
</code></pre>

<p>Modify the code:</p>

<pre><code>$ vim linux-lts-utopic-3.16.0/include/hid.h
- #define HID_MAX_USAGES            12288
+ #define HID_MAX_USAGES            42288
</code></pre>

<p>Configure the kernel using your current running configuration and build it:</p>

<pre><code>$ sudo make oldconfig
$ sudo make-kpkg -j N --initrd --append-to-version=my-very-own-kernel kernel-image
kernel-headers
</code></pre>

<p>You will get the deb file generated under the folder, <code>sudo dpkg -i *.deb</code> them, reboot
the system, now insert your USB Keyboard, it will be identified and runs OK.</p>

<h3>Known Issue</h3>

<p>My 8188eu usb wifi dongle could not be identified, so <code>modprobe r8188eu</code> could solve
the problem, Later add it into the system startup script.</p>

<pre><code>$ sudo vim /etc/modules
r8188eu
</code></pre>
]]></content>
  </entry>
  
</feed>
