<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Dash]]></title>
  <link href="http://purplepalmdash.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-11-02T09:27:45+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Call System Command]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/10/24/python-call-system-command/"/>
    <updated>2014-10-24T09:49:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/10/24/python-call-system-command</id>
    <content type="html"><![CDATA[<h3>Use Popen for running ls</h3>

<p>We could use following python scripts for running the bash command <code>ls -l</code>:</p>

<pre><code>&gt;&gt;&gt; from subprocess import *
&gt;&gt;&gt; from subprocess import call
&gt;&gt;&gt; from subprocess import Popen
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; ls_child = Popen(['ls', '-l'], stdout=subprocess.PIPE, stderr = subprocess.PIPE)
&gt;&gt;&gt; ls_result = ls_child.communicate()
&gt;&gt;&gt; print ls_result
.......
</code></pre>

<p>The command I want to call is:</p>

<pre><code>sed -n 1~2p File_Name
</code></pre>

<p>This command will get the half of the file contents.</p>

<h3>Popen Wrapping</h3>

<p>The commands for canling sed is:</p>

<pre><code>&gt;&gt;&gt; sed_child = Popen(['sed', '-n', '1~2p', '/home/Trusty/code/mybash/rtp02_2014_10_23_03_23_36.txt'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
&gt;&gt;&gt; sed_content = sed_child.communicate()
</code></pre>

<p>Judge the parameters:</p>

<pre><code>&gt;&gt;&gt; command_line=raw_input()
 sed -n 1~2p /home/Trusty/code/mybash/rtp02_2014_10_23_03_23_36.txt 
&gt;&gt;&gt; args=shlex.split(command_line)
&gt;&gt;&gt; print args
</code></pre>

<p>Write the result into the file(half size as the origin input file), notice we remove the first 16 characters:</p>

<pre><code>&gt;&gt;&gt; f_half = open("./half_result.txt", "w+")
&gt;&gt;&gt; for line in sed_content:
&gt;&gt;&gt;     f_half.write(line.replace(line[:16],''))
&gt;&gt;&gt; f_half.close()
</code></pre>

<p>Then the file contains all of the content.</p>

<p>If we want to write into sorted result, then do following:</p>

<pre><code>&gt;&gt;&gt; lines=[]
&gt;&gt;&gt; for line in sed_content:
&gt;&gt;&gt;     lines.append(line.replace(line[:16], ''))
&gt;&gt;&gt; lines.sort()
&gt;&gt;&gt; f_half = open("./half_result.txt", "w+")
&gt;&gt;&gt; for line in lines:
&gt;&gt;&gt;     f_half.write(line)
&gt;&gt;&gt; f_half.close()
</code></pre>

<h3>Remote Acticom machine script</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Quickly Solve Python Problems]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/05/24/how-to-quickly-solve-python-problems/"/>
    <updated>2014-05-24T10:58:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/05/24/how-to-quickly-solve-python-problems</id>
    <content type="html"><![CDATA[<h3>问题</h3>

<p>在txt里面打印1-10里面随机的9个数。</p>

<h3>思路</h3>

<h4>如何生成随机数？</h4>

<p>Google &ldquo;generate  random python&rdquo; , 结果如下：   <br/>
<img src="/images/python1.jpg" alt="/images/python1.jpg" /></p>

<p>挨个看，马上你会发现下面这个网页有答案：  <br/>
<a href="http://stackoverflow.com/questions/5555712/generate-a-random-number-in-python">http://stackoverflow.com/questions/5555712/generate-a-random-number-in-python</a></p>

<p>启动终端试验之：</p>

<pre><code>$ python
Python 2.7.6 (default, Feb 26 2014, 12:07:17) 
[GCC 4.8.2 20140206 (prerelease)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; randint(2,9)
3
&gt;&gt;&gt; randint(1,10)
9
&gt;&gt;&gt; randint(1,10)
4
</code></pre>

<h4>如何循环打印</h4>

<p>照样Google, 搜索关键字" python loop times",结果如下：  <br/>
<img src="/images/python2.jpg" alt="/images/python2.jpg" />  <br/>
随便点点看， 发现python自己的文档里就已经有很详细的关于loop的例子了: <br/>
<a href="https://wiki.python.org/moin/ForLoop">https://wiki.python.org/moin/ForLoop</a></p>

<p>试验之:</p>

<pre><code>&gt;&gt;&gt; for x in range(0,3):
...     print "hello"
... 
hello
hello
hello
</code></pre>

<h3>综合，得出答案</h3>

<p>用for的实现:</p>

<pre><code>&gt;&gt;&gt; for x in range(0,9):
...     print random.randrange(1,10)
... 
2
5
3
7
9
4
7
3
1
</code></pre>

<p>发散到用while的实现(原代码见上面的wiki网页)</p>

<pre><code>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; while x &lt; 10:
...     print random.randrange(1,10)
...     x += 1
... 
4
4
4
5
1
9
1
8
2
</code></pre>

<p>当然你还可以反着弄while:</p>

<pre><code>&gt;&gt;&gt; x = 10
&gt;&gt;&gt; while x &gt; 0:
等等等等，不提示了
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write Python Weather APP on Heroku(12)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/05/13/write-python-weather-app-on-heroku-12/"/>
    <updated>2014-05-13T21:17:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/05/13/write-python-weather-app-on-heroku-12</id>
    <content type="html"><![CDATA[<h3>Final Effect</h3>

<p>Following is the final effect of our own app:</p>

<p><img src="/images/effect_1.jpg" alt="/images/effect_1.jpg" /></p>

<p><img src="/images/effect_2.jpg" alt="/images/effect_2.jpg" /></p>

<p><img src="/images/effect_3.jpg" alt="/images/effect_3.jpg" /></p>

<p>There are lots to be finalize and optimized, but currently It could be ful-fill our requirements which retriving the data and generate the flot.   <br/>
The next series I will try to write some ruby or node.js programs which did the same functionalities, to compare the differencies between app developement.   <br/>
Also to write a web-proxy is a work full of challenge, this will be took as next consideration of developing apps on heroku .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write Python Weather APP on Heroku(11)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/05/13/write-python-weather-app-on-heroku-11/"/>
    <updated>2014-05-13T21:00:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/05/13/write-python-weather-app-on-heroku-11</id>
    <content type="html"><![CDATA[<h3>Draw Flot Picture</h3>

<p>Since the article is mainly on writing apps, I don&rsquo;t want to spend much time on how to use javascript or flot for drawing picture.  <br/>
Simply checkout the code on github, you will see the code which is used for retrieving the data and start drawing plot pictures.</p>

<h3>Fetching 24-hours Data</h3>

<p>Fetching 24 latest records from the postgres database, and then add them into the chart, chart then has been sent to simplejson which used for updating the flot picture locally .</p>

<pre><code class="py genhtm.py">@app.route('/ajax/24hours/')
# ajax updateing for 24-hour data
def TwentyFourHours():
    # Here we will visit postgres for retrieving back the last 24 hours' data
    # Local version
    # engine = create_engine('postgresql+psycopg2://Trusty:@localhost:5432/mylocaldb', echo=True)
    # Heroku Version
    db_conn = os.environ['DATABASE_URL']
    engine = create_engine(db_conn)
    # Engine selection
    metadata=MetaData(bind=engine)
    weather_table=Table('weather',metadata,
        Column('Insert_Time', DateTime(timezone=True),primary_key=True),
        Column('Temperature', Integer),
        Column('Humidity', Integer),
        Column('PmTen', Integer),
        Column('PmTwoFive', Integer),
    )
    s = select([weather_table]).order_by(weather_table.c.Insert_Time.desc()).limit(24)
    conn = engine.connect()
    result = conn.execute(s)
    chart = []
    for row in result:
        # row[0], datetime; 
        # row[1], Temperature;
        # row[2], Humidity;
        # row[3], PM10;
        # row[4], PM2.5; 

        ###  append row[x] into the char ###
        # chart.append({
        chart.insert(0, {
            "label": (row[0] + timedelta(hours = 8)).strftime("%H:%M"),
            "value": row[1],
            "humi_value": row[2],
            "pm25_value": row[4],
            "pm10_value": row[3]
            })

    jsonStr = simplejson.dumps({
        # This is char, will be used in script.js
        "chart" :{
            # tooltip is used by the jQuery chart:
            "tooltip"   : "Temperature at %1: %2 degree",
            # humi_tooltip is used for jQuery chart for humidity:
            "humi_tooltip" : "Humidity at %1: %2 \%",
            "pm25_tooltip" : "PM2.5 at %1: %2 ug/m(3)",
            "pm10_tooltip" : "PM10 at %1: %2 ug/m(3)",
            "data"      : chart
            },
        # This is "downtime" will be used in script.js
             "downtime"  : getDowntime(1)
        })

    return jsonStr;
</code></pre>

<p>The periodic task which runs in <code>tasks.py</code> will fetching the data from the python api and the webpage, then insert them into the postgres database, so here in 24-hours' function we just get them out and fill in the flot picture.</p>

<h3>Daily Data</h3>

<p>Daily data shall be generated via calculating them at the mid-night, that is, at the beginning of a brand new day, we will calculate out the last day&rsquo;s average data.  <br/>
The code is implemented in <code>tasks.py</code> as a crontab task, the code is listed as following:</p>

<pre><code class="py tasks.py"># Every Day we will run a periodly work which will calculate 
# the average temperature/humidity/pm2.5/pm10 task, and store
# it into the daily database, thus we have to define new Database
# here and insert data into.
# Beijing is locate at east 8 zone, thus 16:12 + 8 hour = 24:12
# At every mid-night(24:12) it will caculate the average value for
# the past 24 hours. 
@periodic_task(run_every=crontab(hour=16, minute=12))
def OneDayHandler():
    # First Get the last 24 hours' data set
    # Local Engine
    # engine = create_engine('postgresql+psycopg2://Trusty:@localhost:5432/mylocaldb',echo=True)
    # Heroku Engine
    db_conn = environ['DATABASE_URL']
    engine = create_engine(db_conn)
    metadata=MetaData(bind=engine)
    # Definition of the weather table
    weather_table=Table('weather',metadata,
        Column('Insert_Time', DateTime(timezone=True),primary_key=True),
        Column('Temperature', Integer),
        Column('Humidity', Integer),
        Column('PmTen', Integer),
        Column('PmTwoFive', Integer),
    )
    # Get last 24 records, If we suppose there are truely 24 records in last 24 hours, we can enable this sentense. But sometimes, this will be wrong. 
    s = select([weather_table]).order_by(weather_table.c.Insert_Time.asc()).limit(24)
    conn = engine.connect()
    results = conn.execute(s)

    # Temperature
    totTemperature = 0
    avgTemperature = 0
    # Humidity
    totHumidity = 0
    avgHumidity = 0
    # PM2.5
    totPm25 = 0
    avgPm25 = 0
    # PM10
    totPm10 = 0
    avgPm10 = 0

    records_number = 0 
    for item in results:
        totTemperature += item[1]
        totHumidity += item[2]
        totPm25 += item[4]
        totPm10 += item[3]
        records_number += 1

    if records_number&gt;0:
        avgTemperature = totTemperature/records_number
        avgHumidity = totHumidity/records_number
        avgPm25 = totPm25/records_number
        avgPm10 = totPm10/records_number

    # Definition of the avg_eather table
    avg_metadata = MetaData(bind=engine)
    avg_weather_table=Table('avg_weather',avg_metadata,
        Column('avg_Insert_Time', DateTime(timezone=True),primary_key=True),
        Column('avg_Temperature', Integer),
        Column('avg_Humidity', Integer),
        Column('avg_PmTen', Integer),
        Column('avg_PmTwoFive', Integer),
    )
    # Create table in db
    avg_metadata.create_all(checkfirst=True)
    # Create insert sentense
    avg_ins = avg_weather_table.insert()
    # Really insert
    avg_ins = avg_weather_table.insert().values(avg_Insert_Time=datetime.utcnow(), avg_Temperature = avgTemperature, avg_Humidity = avgHumidity, avg_PmTen = avgPm10, avg_PmTwoFive = av
gPm25)
    # Connect to engine and execute
    avg_conn = engine.connect()
    avg_conn.execute(avg_ins)

    return 1
</code></pre>

<p>We defined a new table named avg_weather, and at the mid-night we will retrieve the latest 24 records, calculating their average value, then insert them into the aver_weather table.</p>

<h3>Displaying Daily Data</h3>

<p>The main procedure is mainly like in 24-hours datas, but notice we are select from avg_weather, and we only select 7 items.   <br/>
30-days data is very simple, change the day from 7 to 30, then you can see the monthly data.</p>

<h3>Write Testing Interface</h3>

<p>We hope we can manually test the functions via web. So we added following testing APIs in genhtml.py:</p>

<pre><code class="py genhtml.py">@app.route('/test/fetch/')
def fetch():
    fetch_and_store_data()
    return "Fetching Test Done!!!";

@app.route('/test/gen/')
def generateOneDay():
    OneDayHandler()
    return "Generate Test Done!!!";
</code></pre>

<p>If we visit <a href="http://Your_app_address/test/fetch,">http://Your_app_address/test/fetch,</a> the program will fetch back the data.  And for <a href="http://Your_app_address/test/gen,">http://Your_app_address/test/gen,</a> the daily average data will be generated.</p>

<p>Next Chapter is the last one. We simply paste the screenshots of the APP.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write Python Weather APP on Heroku(10)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2014/05/13/write-python-weather-app-on-heroku-10/"/>
    <updated>2014-05-13T20:06:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2014/05/13/write-python-weather-app-on-heroku-10</id>
    <content type="html"><![CDATA[<h3>Use Template In Flask</h3>

<p>To use template in flask, we should put the static file under the <code>templates</code> folder under the root directory. Our index page should looks like following:   <br/>
<img src="/images/frontpage.jpg" alt="/images/frontpage.jpg" /></p>

<p>So our html file shall wrote like following:</p>

<p>```html index.html
&lt;!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title></title>
<link rel="stylesheet" type="text/css" href="http://purplepalmdash.github.io/static/assets/css/styles.css" /></p>

<!--[if IE]><script src="assets/js/excanvas.min.js"></script><![endif]-->


<p></head>
<body></p>

<div id="page">
    <div id="header">
        <h1></h1>
        <h2>Nanjing Weather/PM Statistics</h2>

        <div id="periodDropDown">
        
            <span class="left"></span>
            <span class="currentPeriod">Last 24 hours</span>
            <span class="arrow"></span>
            <span class="right"></span>
            
            <ul>
                <li data-action="24hours">Last 24 hours</li>
                <li data-action="7days">Last 7 Days</li>
                <li data-action="30days">Last 30 Days</li>
            </ul>
    </div>
    </div>

    <div class="temperature section">
        <h3>Temperature</h3>
        <div id="plot">
            <span class="preloader"></span>
        </div>
    </div>

    <div class="humidity section">
        <h3>Humidity</h3>
        <div id="humi_plot">
            <span class="preloader"></span>
        </div>
    </div>
    
    <div class="pm2.5 section">
        <h3>PM2.5</h3>
        <div id="pm25_plot">
            <span class="preloader"></span>
        </div>
    </div>

    <div class="pm10 section">
        <h3>PM10</h3>
        <div id="pm10_plot">
            <span class="preloader"></span>
        </div>
    </div>

    

    
</div>




<p id="footer">
 &copy; . Powered by <a href="kkkttt.github.io">Dash</a> UTC: 
</p>


<script src="http://purplepalmdash.github.io/static/assets/js/jquery.min.js"></script>


<script src="http://purplepalmdash.github.io/static/assets/js/script.js"></script>


<script src="http://purplepalmdash.github.io/static/assets/js/jquery.flot.min.js"></script>


<p></body>
</html></p>

<p><code>```
To use CSS file to make sure the vision effect, to use css in flask, put your files into the directory</code>static` under the root directory. Just like following :</p>

<pre><code class="sh run.sh">$ tree static 
static
└── assets
    ├── css
    │   └── styles.css
    ├── img
    │   ├── bg_tile.jpg
    │   ├── bg_vert.jpg
    │   ├── preloader.gif
    │   └── sprite.png
    └── js
        ├── jquery.flot.min.js
        ├── jquery.min.js
        └── script.js
</code></pre>

<h3>Rendering Html</h3>

<p>In genhtml.py, we define the function which rendering the html template like following:</p>

<pre><code class="py genhtml.py"># @app.route('/index')
@app.route('/')
# Generate the index page, for debugging now
def index():
    # Use template for rendering the content
    Current_Year = datetime.now().strftime("%Y::%H:%M ")
    Current_UTC = datetime.utcnow().strftime("%H:%M")
    return render_template('index.html', title="NanJing Weather and PM2.5/10 Statistics", year=Current_Year, utctime=Current_UTC)
</code></pre>

<p>Now open your first page, you will see the rendered effect. But the flot div remains empty, next chapter we will introduce the javascript which used for draw the flot picture and AJAX which used for updating the content.</p>
]]></content>
  </entry>
  
</feed>
