<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dash</title>
    <link>http://purplepalmdash.github.io/post/</link>
    <description>Recent content in Posts on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jul 2016 15:36:43 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using hugo</title>
      <link>http://purplepalmdash.github.io/2016/07/04/using-hugo/</link>
      <pubDate>Mon, 04 Jul 2016 15:36:43 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/07/04/using-hugo/</guid>
      <description>

&lt;p&gt;For switching my blogging engine from octopress to hugo, following are the steps.&lt;/p&gt;

&lt;h3 id=&#34;installing-go&#34;&gt;Installing GO&lt;/h3&gt;

&lt;p&gt;ArchLinux installation is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pacman -S go
$ mkdir -p ~/go/{bin,src}
$ export GOPATH=~/go
$ export PATH=&amp;quot;$PATH:$GOPATH/bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-hugo&#34;&gt;Get Hugo&lt;/h3&gt;

&lt;p&gt;Hugo could be fetched directly from github, install it via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ Notice you have to use redsocks!
$ go get -u -v github.com/spf13/hugo
$ which hugo
/home/vagrant/go/bin/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;first-blog&#34;&gt;First Blog&lt;/h3&gt;

&lt;p&gt;Create a new site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site myblog
$ tree myblog
myblog/
|-- archetypes
|-- config.toml
|-- content
|-- data
|-- layouts
|-- static
`-- themes

6 directories, 1 file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creat a new blog:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/hello.md
$ vim /home/vagrant/Code/myblog/content/post/hello.md
$ cd themes/
    git clone git@github.com:dim0627/hugo_theme_beg.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run preview of the blog:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -w --theme=hugo_theme_beg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open browser for visiting `&lt;a href=&#34;http://localhost:1313&amp;quot;&#34;&gt;http://localhost:1313&amp;quot;&lt;/a&gt;, you could see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_04_16_35_26_464x401.jpg&#34; alt=&#34;/images/2016_07_04_16_35_26_464x401.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;import-from-octopress&#34;&gt;Import From Octopress&lt;/h3&gt;

&lt;p&gt;Import from existing Octopress via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>XenServer Statistics</title>
      <link>http://purplepalmdash.github.io/2016/07/01/xenserver-statistics/</link>
      <pubDate>Fri, 01 Jul 2016 17:45:50 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/07/01/xenserver-statistics/</guid>
      <description>&lt;p&gt;Direct write rrd into graphite, refers to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/jgilmour/XenGraphiteIT.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you get the storage pool information fro xsconsole via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xe vdi-list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice it will contain the hard disk and iso repositories, use harddisk.&lt;/p&gt;

&lt;p&gt;Now edit the .config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[XENAPI]
URL = http://192.168.10.187
USERNAME = root
PASSWORD = xxxxxxx
SR-UUID = 51977c4b-8dc2-bcff-b7ad-de7cc5c7e717

[GRAPHITE]
CARBON_HOST = 192.168.1.79
CARBON_PORT = 2003
CARBON_NAME = collectd.com.IT.servers.xen.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;python2 xengraphite.py&lt;/code&gt; you could get your XenServer statistic data into your
graphite database, enjoy it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>site-to-site VPN</title>
      <link>http://purplepalmdash.github.io/2016/06/29/site-to-site-vpn/</link>
      <pubDate>Wed, 29 Jun 2016 18:51:40 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/29/site-to-site-vpn/</guid>
      <description>

&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;

&lt;p&gt;Refers to:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://clauseriksen.net/2011/02/02/ipsec-on-debianubuntu/&#34;&gt;https://clauseriksen.net/2011/02/02/ipsec-on-debianubuntu/&lt;/a&gt;&lt;br /&gt;
And
&lt;a href=&#34;http://xmodulo.com/create-site-to-site-ipsec-vpn-tunnel-openswan-linux.html&#34;&gt;http://xmodulo.com/create-site-to-site-ipsec-vpn-tunnel-openswan-linux.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;network-topology&#34;&gt;Network Topology&lt;/h3&gt;

&lt;p&gt;The topology is listed as following:&lt;/p&gt;

&lt;p&gt;Host1 &amp;ndash; LAN1 &amp;ndash; Router1 &amp;ndash;[BIG, BAD INTERNET]&amp;ndash; Router2 &amp;ndash; LAN2 &amp;ndash; Host2&lt;/p&gt;

&lt;p&gt;Router1 and Router2 are Ubuntu14.04 machine, which runs in virt-manager,thus you have
to create 2 new networks, each in one physical machine.&lt;/p&gt;

&lt;p&gt;Physical Machine 1: 192.168.1.79&lt;br /&gt;
Router1:&lt;br /&gt;
eth0: bridge to physical machine&amp;rsquo;s networking. 192.168.10.100&lt;br /&gt;
eth1: 10.47.70.2.&lt;br /&gt;
DHCP on eth1.&lt;/p&gt;

&lt;p&gt;Physical Machine 2: 192.168.1.69&lt;br /&gt;
Router2:&lt;br /&gt;
eth0: bridge to physical machine&amp;rsquo;s networking. 192.168.10.200&lt;br /&gt;
eth1: 10.47.67.2.&lt;br /&gt;
DHCP on eth1.&lt;/p&gt;

&lt;h3 id=&#34;router-network-configuration&#34;&gt;Router Network Configuration&lt;/h3&gt;

&lt;p&gt;Router1&amp;rsquo;s networking configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim /etc/network/interfaces
    # The loopback network interface
    auto lo
    iface lo inet loopback
    
    # The primary network interface
    auto eth0
    iface eth0 inet static
    address 192.168.10.100
    netmask 255.255.0.0
    gateway 192.168.0.176
    dns-nameservers 223.5.5.5
    
    auto eth1
    iface eth1 inet static
    address 10.47.70.2
    netmask 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Router2&amp;rsquo;s networking configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim /etc/network/interfaces
    # The loopback network interface
    auto lo
    iface lo inet loopback
    
    # The primary network interface
    auto eth0
    iface eth0 inet static
    address 192.168.10.200
    netmask 255.255.0.0
    gateway 192.168.0.176
    dns-nameservers 223.5.5.5
    auto eth1
    iface eth1 inet static
    address 10.47.67.2
    netmask 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After configuration , restart the Router1 and Router2.&lt;/p&gt;

&lt;h3 id=&#34;ipsec-configuration&#34;&gt;IPSEC Configuration&lt;/h3&gt;

&lt;h4 id=&#34;router1&#34;&gt;Router1&lt;/h4&gt;

&lt;p&gt;Install following package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install -y openswan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Append following lines at the end of &lt;code&gt;/etc/sysctl.conf&lt;/code&gt;,then run &lt;code&gt;sysctl -p
/etc/sysctl.conf&lt;/code&gt; to take effects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim /etc/sysctl.conf
net.ipv4.ip_forward=1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.eth0.send_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.eth0.accept_redirects = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also you have to disable the redirects via following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for vpn in /proc/sys/net/ipv4/conf/*;
do echo 0 &amp;gt; $vpn/accept_redirects;
echo 0 &amp;gt; $vpn/send_redirects;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iptables rules should be done via following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iptables -A INPUT -p udp --dport 500 -j ACCEPT
iptables -A INPUT -p tcp --dport 4500 -j ACCEPT
iptables -A INPUT -p udp --dport 4500 -j ACCEPT
iptables -t nat -A POSTROUTING -s 10.47.70.0/24 -d 10.47.67.0/24 -j SNAT --to 192.168.10.100
#iptables -t nat -A POSTROUTING -s site-A-private-subnet -d site-B-private-subnet -j SNAT --to site-A-Public-IP
iptables -A POSTROUTING -t nat -d 10.47.70.0/24 -o eth1 -m policy --dir out --pol ipsec -j ACCEPT
iptables -A INPUT -m policy --dir in --pol ipsec -j ACCEPT
iptables -A INPUT -p udp -m multiport --dports 500,4500 -j ACCEPT
iptables -A INPUT -p esp -j ACCEPT
iptables -A FORWARD -m policy --dir in --pol ipsec -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now continue to configure the ipsec:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/ipsec.conf
    ## general configuration parameters ##
     
    config setup
            plutodebug=all
            plutostderrlog=/var/log/pluto.log
            protostack=netkey
            nat_traversal=yes
            virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12
            ## disable opportunistic encryption in Red Hat ##
            oe=off
     
    ## disable opportunistic encryption in Debian ##
    ## Note: this is a separate declaration statement ##
    #include /etc/ipsec.d/examples/no_oe.conf 
     
    ## connection definition in Debian ##
    conn demo-connection-debian
            authby=secret
            auto=start
            ## phase 1 ##
            keyexchange=ike
            ## phase 2 ##
            esp=3des-md5
            pfs=yes
            type=tunnel
            left=192.168.10.100
            leftsourceip=192.168.10.100
            leftsubnet=10.47.70.0/24
            ## for direct routing ##
            #leftsubnet=192.168.10.100/32
            #leftnexthop=%defaultroute
            leftnexthop=192.168.10.200
            right=192.168.10.200
            rightsubnet=10.47.67.0/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the left/right configuration, should corresponding the our definition
of the networking.&lt;/p&gt;

&lt;p&gt;Now generate the pre-shared keys via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dd if=/dev/random count=24 bs=1 | xxd -ps
24+0 records in
24+0 records out
24 bytes copied, 4.5529e-05 s, 527 kB/s
cece1b0ffe27f82c27efc94339f08c418abb9e5f5c0d5bf5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;cece1b0ffe27f82c27efc94339f08c418abb9e5f5c0d5bf5&lt;/code&gt; is the keys we want to
fill into the secrets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cat /etc/ipsec.secrets 
    # This file holds shared secrets or RSA private keys for inter-Pluto
    # authentication.  See ipsec_pluto(8) manpage, and HTML documentation.
    
    # RSA private key for this host, authenticating it to any other host
    # which knows the public part.  Suitable public keys, for ipsec.conf, DNS,
    # or configuration of other implementations, can be extracted conveniently
    # with &amp;quot;ipsec showhostkey&amp;quot;.
    
    # this file is managed with debconf and will contain the automatically created RSA keys
    include /var/lib/openswan/ipsec.secrets.inc
    192.168.10.100  192.168.10.200:  PSK  &amp;quot;cece1b0ffe27f82c27efc94339f08c418abb9e5f5c0d5bf5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Router1 is configured, we continue to configure Router2.&lt;/p&gt;

&lt;h4 id=&#34;router2&#34;&gt;Router2&lt;/h4&gt;

&lt;p&gt;Ipsec and sysctl are the same as in Router1, the iptables scripts is listed as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iptables -A INPUT -p udp --dport 500 -j ACCEPT
iptables -A INPUT -p tcp --dport 4500 -j ACCEPT
iptables -A INPUT -p udp --dport 4500 -j ACCEPT
iptables -t nat -A POSTROUTING -s 10.47.67.0/24 -d 10.47.70.0/24 -j SNAT --to 192.168.10.200

#iptables -A POSTROUTING -t nat -d 192.168.1.0/24 -o eth0 -m policy --dir out --pol ipsec -j ACCEPT
iptables -A POSTROUTING -t nat -d 10.47.67.0/24 -o eth1 -m policy --dir out --pol ipsec -j ACCEPT
iptables -A INPUT -m policy --dir in --pol ipsec -j ACCEPT
iptables -A INPUT -p udp -m multiport --dports 500,4500 -j ACCEPT
iptables -A INPUT -p esp -j ACCEPT
iptables -A FORWARD -m policy --dir in --pol ipsec -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now configure the ipsec.conf like following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/ipsec.conf
## general configuration parameters ##
 
config setup
        plutodebug=all
        plutostderrlog=/var/log/pluto.log
        protostack=netkey
        nat_traversal=yes
        virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12
        ## disable opportunistic encryption in Red Hat ##
        oe=off
 
## disable opportunistic encryption in Debian ##
## Note: this is a separate declaration statement ##
#include /etc/ipsec.d/examples/no_oe.conf 
 
## connection definition in Debian ##
conn demo-connection-debian
        authby=secret
        auto=start
        ## phase 1 ##
        keyexchange=ike
        ## phase 2 ##
        esp=3des-md5
        pfs=yes
        type=tunnel
        left=192.168.10.200
        leftsourceip=192.168.10.200
        leftsubnet=10.47.67.0/24
        ## for direct routing ##
        #leftsubnet=192.168.10.200/32
        #leftnexthop=%defaultroute
        leftnexthop=192.168.10.100
        right=192.168.10.100
        rightsubnet=10.47.70.0/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the definition&amp;rsquo;s differences comparing to Router1.&lt;/p&gt;

&lt;p&gt;The ipsec.secrets is the same as Router1, but you have to change like following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/ipsec.secrets
192.168.10.200  192.168.10.100:  PSK  &amp;quot;3030804556207bde9fc5c9a043c6ac13fce136ce41eb98a6&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;examine&#34;&gt;Examine&lt;/h3&gt;

&lt;p&gt;Restart the ipsec services on both Router.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo  /etc/init.d/ipsec restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examine the route via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adminubuntu@vpn1:~$ ip route
default via 192.168.0.176 dev eth0 
10.47.67.0/24 dev eth0  scope link  src 192.168.10.100 
10.47.70.0/24 dev eth1  proto kernel  scope link  src 10.47.70.2 
192.168.0.0/16 dev eth0  proto kernel  scope link  src 192.168.10.100 
adminubuntu@vpn2:~$ ip route
default via 192.168.0.176 dev eth0 
10.47.67.0/24 dev eth1  proto kernel  scope link  src 10.47.67.2 
10.47.70.0/24 dev eth0  scope link  src 192.168.10.200 
192.168.0.0/16 dev eth0  proto kernel  scope link  src 192.168.10.200 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can see the route shows the connection of the vpn.&lt;/p&gt;

&lt;p&gt;Now examine the ipsec status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service ipsec status
IPsec running  - pluto pid: 930
pluto pid 930
1 tunnels up
some eroutes exist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More detailed infos could be examine via: &lt;code&gt;sudo ipsec auto --status&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;dhcp-server&#34;&gt;DHCP Server&lt;/h3&gt;

&lt;p&gt;Install dhcpd and configure it via following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install -y isc-dhcp-server
$ sudo vim /etc/default/isc-dhcp-server
INTERFACES=&amp;quot;eth1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Append following lines to &lt;code&gt;/etc/dhcp/dhcpd.conf&lt;/code&gt;:&lt;br /&gt;
Router1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subnet
10.47.70.0 netmask 255.255.255.0 {
# --- default gateway
option routers
10.47.70.2;
# --- Netmask
option subnet-mask
255.255.255.0;
# --- Broadcast Address
option broadcast-address
10.47.70.255;
# --- Domain name servers, tells the clients which DNS servers to use.
option domain-name-servers
223.5.5.5,180.76.76.76;
option time-offset 0;
range 10.47.70.3 10.47.70.254;
default-lease-time 1209600;
max-lease-time 1814400;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Router2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subnet
10.47.67.0 netmask 255.255.255.0 {
# --- default gateway
option routers
10.47.67.2;
# --- Netmask
option subnet-mask
255.255.255.0;
# --- Broadcast Address
option broadcast-address
10.47.67.255;
# --- Domain name servers, tells the clients which DNS servers to use.
option domain-name-servers
223.5.5.5,180.76.76.76;
option time-offset 0;
range 10.47.67.3 10.47.67.254;
default-lease-time 1209600;
max-lease-time 1814400;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your subnet is ready, restart the Router1 and Router2, next step we will
verify our site-to-site VPN.&lt;/p&gt;

&lt;h3 id=&#34;verification&#34;&gt;Verification&lt;/h3&gt;

&lt;p&gt;Create 2 new vm on 2 physical machine, each of them attached to our Router&amp;rsquo;s
eth1 networking. I use tinycore for experiment.&lt;/p&gt;

&lt;p&gt;Tinycore Attaches to Router1:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_06_29_19_23_50_469x212.jpg&#34; alt=&#34;/images/2016_06_29_19_23_50_469x212.jpg&#34; /&gt;&lt;br /&gt;
Tinycore Attaches to Router2:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_06_29_19_25_18_497x351.jpg&#34; alt=&#34;/images/2016_06_29_19_25_18_497x351.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The picture also shows the ping each other without any problem.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>搭建基于docker的监控系统</title>
      <link>http://purplepalmdash.github.io/2016/06/20/da-jian-ji-yu-dockerde-jian-kong-xi-tong/</link>
      <pubDate>Mon, 20 Jun 2016 09:39:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/20/da-jian-ji-yu-dockerde-jian-kong-xi-tong/</guid>
      <description>

&lt;h3 id=&#34;graphite-grafana&#34;&gt;Graphite/Grafana&lt;/h3&gt;

&lt;p&gt;这两个用于记录和展示监控数据，通过以下命令可以快速搭建:&lt;/p&gt;

&lt;h4 id=&#34;graphite&#34;&gt;Graphite&lt;/h4&gt;

&lt;p&gt;开启容器:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir -p /local/path/to/graphite/storage/whisper/
$ sudo docker run -d \
  --name graphite \
  -p 8080:80 \
  -p 2003:2003 \
  -v /local/path/to/.htpasswd:/etc/nginx/.htpasswd \
  -v /local/path/to/graphite/storage/whisper:/opt/graphite/storage/whisper \
  sitespeedio/graphite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建htpasswd文件的方法可以参阅:&lt;br /&gt;
&lt;a href=&#34;http://httpd.apache.org/docs/2.2/programs/htpasswd.html&#34;&gt;http://httpd.apache.org/docs/2.2/programs/htpasswd.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当然如果你使用默认的密码的话，用户名/密码是:guest/guest.&lt;/p&gt;

&lt;h4 id=&#34;grafana&#34;&gt;Grafana&lt;/h4&gt;

&lt;p&gt;开启容器:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkdir -p /local/path/to/grafana
# docker run -d -p 3000:3000 --name=grafana -v /local/path/to/grafana:/var/lib/grafana  grafana/grafana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认用户名/密码为admin/admin.&lt;/p&gt;

&lt;h3 id=&#34;collectd&#34;&gt;Collectd&lt;/h3&gt;

&lt;p&gt;用于采集节点机上的数据，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# docker run -d --net=host --privileged -v /:/hostfs:ro --name=collectd -e \
HOST_NAME=localhost -e \
GRAPHITE_HOST=192.168.1.79 andreasjansson/collectd-write-graphite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参数说明:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--net=host : 	使用主机上的网络配置
GRAPHITE_HOST:  前面设置的graphite机器的地址
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;systemd-启动方式&#34;&gt;systemd 启动方式&lt;/h3&gt;

&lt;p&gt;collectd启动方式:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vim /usr/lib/systemd/system/collectddocker.service
[Unit]
Description=collectd container
Requires=docker.service
After=docker.service

[Service]
Restart=always
ExecStart=/usr/bin/docker start -a collectd
ExecStop=/usr/bin/docker stop -t 2 collectd

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动并使能服务:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl enable collectddocker.service
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>搭建无盘CentOS桌面环境</title>
      <link>http://purplepalmdash.github.io/2016/06/18/da-jian-wu-pan-centoszhuo-mian-huan-jing/</link>
      <pubDate>Sat, 18 Jun 2016 13:43:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/18/da-jian-wu-pan-centoszhuo-mian-huan-jing/</guid>
      <description>

&lt;h3 id=&#34;网络准备&#34;&gt;网络准备&lt;/h3&gt;

&lt;p&gt;创建一个无DHCP的网络:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_06_18_13_53_06_399x429.jpg&#34; alt=&#34;/images/2016_06_18_13_53_06_399x429.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;DHCP服务器我们将配置在PXE服务器节点上。&lt;/p&gt;

&lt;h3 id=&#34;pxe节点配置&#34;&gt;PXE节点配置&lt;/h3&gt;

&lt;h4 id=&#34;初始化配置&#34;&gt;初始化配置&lt;/h4&gt;

&lt;p&gt;最小化安装CentOS 7 Server。并配置其IP地址为&lt;code&gt;10.19.20.2&lt;/code&gt;.&lt;br /&gt;
关闭selinux和firewalld服务:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/selinux/config 
SELINUX=disabled

# systemctl disable firewalld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;使用dvd作为源&#34;&gt;使用DVD作为源&lt;/h4&gt;

&lt;p&gt;创建挂载目录并挂在DVD：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkdir /cdrom
# mount -t iso9660 -o loop ./CentOS-7-x86_64-Everything-1511.iso /cdrom/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建新的repo文件:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/yum.repos.d/local.repo

[LocalRepo]
name=Local Repository
baseurl=file:///cdrom
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成新的缓存：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkdir back
# mv CentOS-* back
# yum makecache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装一些必要的包:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# yum install -y vim wget
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;tftp-server&#34;&gt;TFTP Server&lt;/h4&gt;

&lt;p&gt;安装必要的包:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# yum -y install syslinux xinetd tftp-server
# mkdir /var/lib/tftpboot/pxelinux.cfg 
# cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置PXE：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vim /etc/xinetd.d/tftp 
disable = no
# systemctl start xinetd
# systemctl enable xinetd
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dhcp服务器&#34;&gt;DHCP服务器&lt;/h4&gt;

&lt;p&gt;安装:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# yum install -y dhcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vim /etc/dhcp/dhcpd.conf
    #
    # DHCP Server Configuration file.
    #   see /usr/share/doc/dhcp*/dhcpd.conf.example
    #   see dhcpd.conf(5) man page
    #
    # create new
    
    # specify domain name
    option domain-name &amp;quot;srv.world&amp;quot;;
    # specify name server&#39;s hostname or IP address
    option domain-name-servers dlp.srv.world;
    # default lease time
    default-lease-time 600;
    # max lease time
    max-lease-time 7200;
    # this DHCP server to be declared valid
    authoritative;
    # specify network address and subnet mask
    subnet 10.19.20.0 netmask 255.255.255.0 {
        # specify the range of lease IP address
        range dynamic-bootp 10.19.20.200 10.19.20.254;
        # specify broadcast address
        option broadcast-address 10.19.20.255;
        # specify default gateway
        option routers 10.19.20.1;
        option domain-name-servers   10.19.20.2;
        filename        &amp;quot;pxelinux.0&amp;quot;;
        next-server     10.19.20.2;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动并使能服务:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# systemctl start dhcpd 
# systemctl enable dhcpd 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;pxe服务器&#34;&gt;PXE服务器&lt;/h4&gt;

&lt;p&gt;安装一些必要的包:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# yum -y install dracut-network nfs-utils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在PXE服务器上构建一个无盘系统用的文件系统&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkdir -p /var/lib/tftpboot/centos7/root 
# yum groups -y install &amp;quot;Server with GUI&amp;quot; --releasever=7 --installroot=/var/lib/tftpboot/centos7/root/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;给出root用户的默认密码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# python -c &#39;import crypt,getpass; \ 
print(crypt.crypt(getpass.getpass(), \
crypt.mksalt(crypt.METHOD_SHA512)))&#39; 
Password:
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;填入root密码到/etc/shadown中:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vim /var/lib/tftpboot/centos7/root/etc/shadow
root:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:16372:0:99999:7:::
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构建&lt;code&gt;/etc/fstab&lt;/code&gt;文件:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /var/lib/tftpboot/centos7/root/etc/fstab
 none    /tmp        tmpfs   defaults   0 0
tmpfs   /dev/shm    tmpfs   defaults   0 0
sysfs   /sys        sysfs   defaults   0 0
proc    /proc       proc    defaults   0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载pxe所需要的vmlinuz和initrd.img文件:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wget -P /var/lib/tftpboot/centos7/ \
http://mirrors.aliyun.com/centos/7/os/x86_64/images/pxeboot/vmlinuz \
http://mirrors.aliyun.com/centos/7/os/x86_64/images/pxeboot/initrd.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建默认的pxe启动项目:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /var/lib/tftpboot/pxelinux.cfg/default
# create new
 default centos7

label centos7
    kernel centos7/vmlinuz
    append initrd=centos7/initrd.img root=nfs:10.19.20.2:/var/lib/tftpboot/centos7/root rw selinux=0 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;映射NFS服务器:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/exports
/var/lib/tftpboot/centos7/root 10.19.20.0/24(rw,no_root_squash)
# systemctl start rpcbind nfs-server 
# systemctl enable rpcbind nfs-server 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在在网络中加入新的机器，从PXE启动后，将直接进入到CentOS7的桌面。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RackHD Worktips</title>
      <link>http://purplepalmdash.github.io/2016/06/07/rackhd-worktips/</link>
      <pubDate>Tue, 07 Jun 2016 17:05:19 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/07/rackhd-worktips/</guid>
      <description>

&lt;h3 id=&#34;vagrant-preparation&#34;&gt;Vagrant Preparation&lt;/h3&gt;

&lt;p&gt;rackhd/rackhd vagrant box could be downloaded from following link:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atlas.hashicorp.com/rackhd/boxes/rackhd&#34;&gt;https://atlas.hashicorp.com/rackhd/boxes/rackhd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clone the repository from the github:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pwd
/home/dash/Code/Jun13
$ git clone https://github.com/RackHD/RackHD
$ cd RackHD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change into the directory example, create config and run the setup command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd example
$ cp config/monorail_rack.cfg.example config/monorail_rack.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edits can be made to this new file to adjust the number of pxe clients created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bin/monorail_rack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;monorail_rack&lt;/code&gt; script will auto-start all of the services by default, but you can also run them manually if you prefer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh
vagrant:~$ sudo nf start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, the vagrant machine won&amp;rsquo;t work due to bad networking.&lt;/p&gt;

&lt;h3 id=&#34;customization-deployment&#34;&gt;Customization Deployment&lt;/h3&gt;

&lt;p&gt;Use a trusty based vagrant box for creating the rackhd node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant init trustyvirtualbox
$ vim Vagrantfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrantfile&amp;rsquo;s configuration modification is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Added more disks
+   file_to_disk = File.realpath( &amp;quot;.&amp;quot; ).to_s + &amp;quot;/disk.vdi&amp;quot;

  # config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.10&amp;quot;
+   config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;172.31.128.1&amp;quot;, virtualbox__intnet:  &amp;quot;closednet&amp;quot;

+  config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
+    if ARGV[0] == &amp;quot;up&amp;quot; &amp;amp;&amp;amp; ! File.exist?(file_to_disk) 
+      puts &amp;quot;Creating 5GB disk #{file_to_disk}.&amp;quot;
+      vb.customize [
+        &#39;createhd&#39;, 
+        &#39;--filename&#39;, file_to_disk, 
+        &#39;--format&#39;, &#39;VDI&#39;, 
+        &#39;--size&#39;, 5000 * 1024 # 5 GB
+      ] 
+      vb.customize [
+        &#39;storageattach&#39;, :id, 
+        &#39;--storagectl&#39;, &#39;IDE Controller&#39;, 
+        &#39;--port&#39;, 1, &#39;--device&#39;, 0, 
+        &#39;--type&#39;, &#39;hdd&#39;, &#39;--medium&#39;, 
+        file_to_disk
+      ] 
+    end
+    vb.memory = &amp;quot;4096&amp;quot;
+    vb.cpus = 2
+    vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--nicpromisc2&amp;quot;, &amp;quot;allow-all&amp;quot;, &amp;quot;--ioapic&amp;quot;, &amp;quot;on&amp;quot;]
+  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then &lt;code&gt;vagrant up&lt;/code&gt; for start up the machine.&lt;/p&gt;

&lt;p&gt;Notice: the controller of the disk should be noticed very carefully, you could choose
&amp;ldquo;IDE Controller&amp;rdquo; Or &amp;ldquo;SATA Controller&amp;rdquo;, depending on your virtualbox configuration.&lt;br /&gt;
Then follow the tips on:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://purplepalmdash.github.io/blog/2016/06/01/use-rakehd-for-deploying-systems/&#34;&gt;http://purplepalmdash.github.io/blog/2016/06/01/use-rakehd-for-deploying-systems/&lt;/a&gt;&lt;br /&gt;
Extend the root partition of vagrant disk via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pvcreate /dev/sdb
$ sudo vgextend vagrant-vg /dev/sdb
$ sudo lvextend -l +100%FREE /dev/vagrant-vg/root
$ sudo resize2fs  /dev/vagrant-vg/root
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-ubuntu-deployment&#34;&gt;Adding Ubuntu Deployment&lt;/h3&gt;

&lt;p&gt;Install &lt;code&gt;apt-mirror&lt;/code&gt; first, then using following mirror configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim /etc/apt/mirror.list
############# config ##################
#
# set base_path    /var/spool/apt-mirror
#
# set mirror_path  $base_path/mirror
# set skel_path    $base_path/skel
# set var_path     $base_path/var
# set cleanscript $var_path/clean.sh
# set defaultarch  &amp;lt;running host architecture&amp;gt;
# set postmirror_script $var_path/postmirror.sh
# set run_postmirror 0
set base_path	/var/mirrors/ubuntu/14.04
set nthreads     20
set _tilde 0
#
############# end config ##############

deb-amd64 http://mirrors.aliyun.com/ubuntu	trusty main main/debian-installers
deb http://mirrors.aliyun.com/ubuntu	trusty main/installer-amd64
deb-amd64 http://mirrors.aliyun.com/ubuntu	trusty-updates main
deb-amd64 http://mirrors.aliyun.com/ubuntu	trusty-security main
clean http://mirrors.aliyun.com/ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also you have to create following script for downloading the debian-installer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim /var/mirrors/ubuntu/14.04/var/postmirror.sh 
#!/bin/sh -x 
# the udebs script gets the actual files we need 
#/mnt/repo/apt-mirror/var/udebs.sh  
# A quick apt directory structure primer: 
# an apt server (e.g. archive.ubuntu.com) contains repositories (e.g. trusty-backports), 
# which contain archives (e.g. multiverse), which contain directories 
# a complete example - http://archive.ubuntu.com/ubuntu/dists/trusty-backports/multiverse/debian-installer/  
# With this in mind, we create bash &#39;arrays&#39; of the structure: 
# server we&#39;re syncing against 
#MIRROR=&amp;quot;cn.archive.ubuntu.com&amp;quot; 
MIRROR=&amp;quot;archive.ubuntu.com&amp;quot; 
# repositories we&#39;re mirroring 
#REPOS=&amp;quot;trusty trusty-updates trusty-security trusty-proposed trusty-backports&amp;quot; 
REPOS=&amp;quot;trusty&amp;quot;
# archives in repositories 
#ARCHIVES=&amp;quot;main multiverse restricted universe&amp;quot; 
ARCHIVES=&amp;quot;main&amp;quot;
# installer location inside archive 
#DIRECTORIES=&amp;quot;debian-installer dist-upgrader-all installer-amd64 installer-i386&amp;quot; 
DIRECTORIES=&amp;quot;debian-installer installer-amd64&amp;quot;
#where we&#39;re storing it locally 
LOCALDIR=&amp;quot;/var/mirrors/ubuntu/14.04/mirror/mirrors.aliyun.com&amp;quot;
#LOCALDIR=&amp;quot;/mnt/repo/apt-mirror/mirror/archive.ubuntu.com&amp;quot;  
for REPO in $REPOS; do 
for ARCHIVE in $ARCHIVES; do 
for DIRECTORY in $DIRECTORIES;do 
# create directory structure 
if [ ! -e &amp;quot;$LOCALDIR/ubuntu/dists/$REPO/$ARCHIVE/$DIRECTORY&amp;quot; ]; then
mkdir -p &amp;quot;$LOCALDIR/ubuntu/dists/$REPO/$ARCHIVE/$DIRECTORY&amp;quot;
fi
# do the sync 
rsync --recursive --times --links --hard-links --delete --delete-after \
rsync://$MIRROR/ubuntu/dists/$REPO/$ARCHIVE/$DIRECTORY/ $LOCALDIR/ubuntu/dists/$REPO/$ARCHIVE/$DIRECTORY
done
done
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;code&gt;sudo apt-mirror&lt;/code&gt; for syncing the repository to local storage.&lt;/p&gt;

&lt;p&gt;Also create a shortcut to the repository in RackHD System:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo ln -s /var/mirrors/ubuntu/14.04/mirror/mirrors.aliyun.com/ubuntu/ /opt/monorail/static/http/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now restart the rackhd node, the ubuntu deployment is ready for use.&lt;/p&gt;

&lt;h3 id=&#34;ubuntu-deployment&#34;&gt;Ubuntu Deployment&lt;/h3&gt;

&lt;p&gt;Add the json file which holds the ubuntu deployment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pwd
/home/vagrant/RackHD/example
$ vim samples/ubuntu_boot.json 
{
    &amp;quot;name&amp;quot;: &amp;quot;Graph.InstallUbuntu&amp;quot;,
    &amp;quot;options&amp;quot;: {
        &amp;quot;defaults&amp;quot;: {
            &amp;quot;obmServiceName&amp;quot;: &amp;quot;noop-obm-service&amp;quot;
        },
        &amp;quot;install-os&amp;quot;: {
            &amp;quot;repo&amp;quot;: &amp;quot;{{api.server}}/ubuntu&amp;quot;,
            &amp;quot;rootPassword&amp;quot;: &amp;quot;ubuntu&amp;quot;,
            &amp;quot;profile&amp;quot;: &amp;quot;install-trusty.ipxe&amp;quot;,
            &amp;quot;completionUri&amp;quot;: &amp;quot;renasar-ansible.pub&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact the &lt;code&gt;rootPassword&lt;/code&gt; is not ready for use, the real password after deployment
 is &lt;code&gt;RackHDRocks!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add one node(first you should make it pxed):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST --data @samples/noop_body.json http://localhost:8080/api/1.1/nodes/575fce38d23ba028051b4711/obm
$ curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST --data @samples/ubuntu_boot.json http://localhost:8080/api/1.1/nodes/575fce38d23ba028051b4711/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then restart the machine, you will get it installing ubuntu.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use RackHD For Deploying Systems</title>
      <link>http://purplepalmdash.github.io/2016/06/01/use-rakehd-for-deploying-systems/</link>
      <pubDate>Wed, 01 Jun 2016 09:14:18 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/01/use-rakehd-for-deploying-systems/</guid>
      <description>

&lt;p&gt;Following are the steps for using the RackHD for deploying systems. Mainly refers to
&lt;a href=&#34;http://dojoblog.emc.com/rackhd-cpi/setting-up-rackhd/&#34;&gt;http://dojoblog.emc.com/rackhd-cpi/setting-up-rackhd/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the tutorial from emc includes lots of mistakes, so I listed all of the steps in
following chapters.&lt;/p&gt;

&lt;h3 id=&#34;vagrant-env-preparation&#34;&gt;Vagrant Env Preparation&lt;/h3&gt;

&lt;p&gt;Initialize the vagrant env via(ubuntu1404 is my box name):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant init ubuntu1404
A `Vagrantfile` has been placed in this directory. 
$ vim Vagrantfile
  config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
    vb.memory = &amp;quot;4096&amp;quot;
    vb.cpus = 4
    vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--nicpromisc2&amp;quot;, &amp;quot;allow-all&amp;quot;, &amp;quot;--ioapic&amp;quot;, &amp;quot;on&amp;quot;]
  end
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;Use following scripts for installing the prerequisites for RackHD(&lt;code&gt;pre_rackhd.sh&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash 
set -­e

sudo apt-get -y update
sudo apt-get -y dist-upgrade
sudo apt-get autoremove
sudo apt-get install -y nodejs nodejs-legacy npm

# Runtime Dependencies
sudo apt-get install -y rabbitmq-server mongodb isc-dhcp-server
sudo apt-get install -y snmp ipmitool ansible amtterm apt-mirror unzip libkrb5-dev

# upstart will be installed after Ubuntu15.04.
# sudo apt-get -y install upstart­sysv
sudo update-initramfs -u

# amttool
wget http://downloads.sourceforge.net/project/amttooltng/1.7/amttool
sudo chmod 777 amttool
sudo mv amttool /usr/bin/amttooltng

# Compile Dependencies
sudo apt-get install -y git openssh-server pbuilder dh-make devscripts ubuntu-dev-tools

# Git clone all of the repositories
RACKHD_INSTALL_DIR=~;cd $RACKHD_INSTALL_DIR
git clone https://github.com/RackHD/RackHD
RACKHD_PROJECT_DIR=${RACKHD_INSTALL_DIR}/RackHD
cd $RACKHD_PROJECT_DIR
git submodule update --init --recursive
git submodule foreach git pull origin master

# Configuration files
sudo touch /etc/default/on-http
sudo touch /etc/default/on-dhcp-proxy
sudo touch /etc/default/on-taskgraph
sudo touch /etc/default/on-syslog
sudo touch /etc/default/on-tftp

# Build And Install
cd ${RACKHD_PROJECT_DIR}/on-http
./HWIMO-BUILD
sudo dpkg -i on-http_*.deb
 
cd ${RACKHD_PROJECT_DIR}/on-dhcp-proxy
./HWIMO-BUILD
sudo dpkg -i on-dhcp-proxy_*.deb

cd ${RACKHD_PROJECT_DIR}/on-taskgraph
./HWIMO-BUILD
sudo dpkg -i on-taskgraph_*.deb

cd ${RACKHD_PROJECT_DIR}/on-syslog
./HWIMO-BUILD
sudo dpkg -i on-syslog_*.deb

cd ${RACKHD_PROJECT_DIR}/on-tftp
./HWIMO-BUILD
sudo dpkg -i on-tftp_*.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now shutdown the vm, add one networking interface, because we want to add PXE in this
network apdater.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim Vagrantfile
config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;172.31.128.1&amp;quot;, virtualbox__intnet: &amp;quot;closednet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now startup the vagrant vm again. continue to configure the PXE.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;Examine the eth1 IP Configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@ubuntu-1404:~$ ifconfig eth1
eth1      Link encap:Ethernet  HWaddr 08:00:27:c2:cf:3e  
          inet addr:172.31.128.1  Bcast:172.31.128.255  Mask:255.255.255.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure the isc-dhcp:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/default/isc-dhcp-server
INTERFACES=&amp;quot;eth1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following configuration into &lt;code&gt;/etc/dhcp/dhcp.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# RackHD Added Lines
deny duplicates;

ignore-client-uids true;

subnet 172.31.128.0 netmask 255.255.252.0 {
    range 172.31.128.2 172.31.131.254;
    # Use this option to signal to the PXE client that we are doing proxy DHCP
    option vendor-class-identifier &amp;quot;PXEClient&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the config.json for monorail usage, and modify its tftpRoot Configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /opt/monorail/
$ sudo wget https://raw.githubusercontent.com/RackHD/RackHD/master/packer/ansible/roles/monorail/files/config.json
$ sudo vim config.json
    &amp;quot;tftpRoot&amp;quot;: &amp;quot;/opt/monorail/static/tftp&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prepare the http and tftp folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir -p /opt/monorail/static/http/common/
$ sudo mkdir -p /opt/monorail/static/tftp/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the tftp and http static files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /opt/monorail/static/tftp
$ sudo wget https://bintray.com/artifact/download/rackhd/binary/ipxe/monorail.ipxe
$ sudo wget https://bintray.com/artifact/download/rackhd/binary/ipxe/monorail-undionly.kpxe
$ sudo wget https://bintray.com/artifact/download/rackhd/binary/ipxe/monorail-efi32-snponly.efi
$ sudo wget https://bintray.com/artifact/download/rackhd/binary/ipxe/monorail-efi64-snponly.efi
$ cd /opt/monorail/static/http/common/
$ sudo wget https://bintray.com/artifact/download/rackhd/binary/builds/discovery.overlay.cpio.gz
$ sudo wget https://bintray.com/artifact/download/rackhd/binary/builds/base.trusty.3.16.0-25-generic.squashfs.img
$ sudo wget https://bintray.com/artifact/download/rackhd/binary/builds/initrd.img-3.16.0-25-generic
$ sudo wget https://bintray.com/artifact/download/rackhd/binary/builds/vmlinuz-3.16.0-25-generic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now reboot the vm again, next step we will test the PXE boot.&lt;/p&gt;

&lt;h3 id=&#34;pxe-clients&#34;&gt;PXE Clients&lt;/h3&gt;

&lt;p&gt;The PXE will be avaiable and after it finishes, the vm will look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_06_01_11_47_57_712x236.jpg&#34; alt=&#34;/images/2016_06_01_11_47_57_712x236.jpg&#34; /&gt;&lt;br /&gt;
Now you could get the node info via following RESTFUL api call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl http://localhost:8080/api/1.1/nodes | python -m json.tool
        &amp;quot;createdAt&amp;quot;: &amp;quot;2016-06-01T03:44:09.064Z&amp;quot;,
        &amp;quot;id&amp;quot;: &amp;quot;574e5a0944ff724a05284005&amp;quot;,
        &amp;quot;identifiers&amp;quot;: [
            &amp;quot;08:00:27:02:5f:7a&amp;quot;
        ],
        &amp;quot;name&amp;quot;: &amp;quot;08:00:27:02:5f:7a&amp;quot;,

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examine the mac correponding node ID &lt;code&gt;574e5a0944ff724a05284005&lt;/code&gt;, later we wil use this id for deploying CentOS.&lt;/p&gt;

&lt;h3 id=&#34;add-centos7-deployment&#34;&gt;Add CentOS7 Deployment&lt;/h3&gt;

&lt;p&gt;Add CentOS7 DVD into the deployment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo python ~/RackHD/on-tools/scripts/setup_iso.py /mnt/CentOS-7-x86_64-Everything-1511.iso  /opt/monorail/static/http --link=/home/vagrant/RackHD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will takes around 10 mins for importing the iso into the RackHD.&lt;/p&gt;

&lt;p&gt;Configure the node:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST --data @samples/noop_body.json http://localhost:8080/api/1.1/nodes/574e5a0944ff724a05284005/obm | python -m json.tool
$ curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST --data @samples/centos_iso_boot.json http://localhost:8080/api/1.1/nodes/574e5a517c6c03440553dd0f/workflows | python -m json.tool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_06_01_14_12_33_449x503.jpg&#34; alt=&#34;/images/2016_06_01_14_12_33_449x503.jpg&#34; /&gt;&lt;br /&gt;
Then added the configuration for deploying CentOS7 via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/RackHD/example/
$ curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST --data @samples/noop_body.json http://localhost:8080/api/1.1/nodes/574e6516224a4449056183e7/obm | python -m json.tool
$ curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST --data @samples/centos_iso_boot.json http://localhost:8080/api/1.1/nodes/574e6516224a4449056183e7/workflows | python -m json.tool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PXE the node, thus you will get a CentOS7 installed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>不同桌面环境占用内存/CPU对比</title>
      <link>http://purplepalmdash.github.io/2016/05/31/bu-tong-zhuo-mian-huan-jing-zhan-yong-nei-cun-slash-cpudui-bi/</link>
      <pubDate>Tue, 31 May 2016 09:25:38 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/31/bu-tong-zhuo-mian-huan-jing-zhan-yong-nei-cun-slash-cpudui-bi/</guid>
      <description>

&lt;p&gt;对比xfce4, lxde, gnome, mate等桌面环境占用内存/CPU对比&lt;/p&gt;

&lt;h3 id=&#34;先决条件&#34;&gt;先决条件&lt;/h3&gt;

&lt;p&gt;使用vagrant的镜像(ubuntu14.04):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box list
ubuntu1404                                   (virtualbox, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每一个桌面环境的验证如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant init ubuntu1404
$ vim Vagrantfile
  config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
    # Display the VirtualBox GUI when booting the machine
  #  vb.gui = true
  
    # Customize the amount of memory on the VM:
    vb.memory = &amp;quot;1024&amp;quot;
  end
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;基础镜像占用内存&#34;&gt;基础镜像占用内存&lt;/h3&gt;

&lt;p&gt;用&lt;code&gt;free -m&lt;/code&gt;来查看系统运行时所占用内存：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_31_09_42_54_688x111.jpg&#34; alt=&#34;/images/2016_05_31_09_42_54_688x111.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;xfce4-xubuntu&#34;&gt;xfce4(xubuntu)&lt;/h3&gt;

&lt;p&gt;安装:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install xubuntu-desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动xfce4桌面后，内存占用结果为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_31_09_57_44_483x164.jpg&#34; alt=&#34;/images/2016_05_31_09_57_44_483x164.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;lxde-lubuntu&#34;&gt;lxde(lubuntu)&lt;/h3&gt;

&lt;p&gt;安装:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install -y lubuntu-desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动lxde后，内存占用为:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_31_10_07_46_458x84.jpg&#34; alt=&#34;/images/2016_05_31_10_07_46_458x84.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;gnome-gnome-session-fallback&#34;&gt;gnome(gnome-session-fallback)&lt;/h3&gt;

&lt;p&gt;安装:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update; sudo apt-get install gnome-session-fallback
$ sudo apt-get install -y gdm xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动gnome-session-fallback后，内存占用为:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_31_10_22_08_490x185.jpg&#34; alt=&#34;/images/2016_05_31_10_22_08_490x185.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;unity&#34;&gt;unity&lt;/h3&gt;

&lt;p&gt;安装:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y ubuntu-desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动unity后，内存占用为:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_31_10_26_22_553x168.jpg&#34; alt=&#34;/images/2016_05_31_10_26_22_553x168.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mate&#34;&gt;mate&lt;/h3&gt;

&lt;p&gt;安装:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-add-repository ppa:ubuntu-mate-dev/ppa
$ sudo apt-add-repository ppa:ubuntu-mate-dev/trusty-mate
$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade
$ sudo apt-get install --no-install-recommends ubuntu-mate-core ubuntu-mate-desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动mate后，内存占用为:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_31_10_50_58_486x148.jpg&#34; alt=&#34;/images/2016_05_31_10_50_58_486x148.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;kde&#34;&gt;KDE&lt;/h3&gt;

&lt;p&gt;安装:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y kubuntu-desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内存占用:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_31_11_06_50_487x108.jpg&#34; alt=&#34;/images/2016_05_31_11_06_50_487x108.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;对比&#34;&gt;对比&lt;/h3&gt;

&lt;p&gt;统计结果:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_31_11_08_35_342x269.jpg&#34; alt=&#34;/images/2016_05_31_11_08_35_342x269.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;图例:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_31_11_10_32_896x593.jpg&#34; alt=&#34;/images/2016_05_31_11_10_32_896x593.jpg&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>羊城漫步(二)</title>
      <link>http://purplepalmdash.github.io/2016/05/29/yang-cheng-man-bu-er/</link>
      <pubDate>Sun, 29 May 2016 22:27:39 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/29/yang-cheng-man-bu-er/</guid>
      <description>

&lt;p&gt;计划不如变化，昨天说要去南越文王博物馆，结果上午下暴雨，中午有饭局，延后。饭局中有
小伙伴说去看广美的毕业设计，想起来几天前在微博上看到一广美学生关于GFW的讽刺毕业设计，
酒足饭饱后一行人即赶赴大学城观展。&lt;/p&gt;

&lt;h3 id=&#34;广美毕业设计展&#34;&gt;广美毕业设计展&lt;/h3&gt;

&lt;p&gt;广美毕业展分五楼，每个展厅都有数百平米，囊括了绘画、动画、建筑设计、服装设计、模型设计、
汽车设计…………内容。一路看来，真是让人大开眼界。&lt;/p&gt;

&lt;p&gt;设计是很重要的，有了好的设计才会有好的产品。在制造业已然日薄西山的当下，往设计转型也许
是个不错的发展方向。好了，以下是一些走马观花的掠影。&lt;/p&gt;

&lt;p&gt;彩陶制作的城堡摆件。笨拙的造型和鲜活的配色让诸多小朋友流连往返:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_30_53_1432x815.jpg&#34; alt=&#34;/images/2016_05_29_22_30_53_1432x815.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这组憨态可掬的作品叫《不减肥挺好的》，一个妹子的本科毕业设计:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_35_13_691x825.jpg&#34; alt=&#34;/images/2016_05_29_22_35_13_691x825.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个屏风摆件很有想象力：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_37_07_658x825.jpg&#34; alt=&#34;/images/2016_05_29_22_37_07_658x825.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果家里有一个温馨如此的阳台:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_38_31_1237x816.jpg&#34; alt=&#34;/images/2016_05_29_22_38_31_1237x816.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;适合培养多肉植物的摆盘:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_39_29_1386x819.jpg&#34; alt=&#34;/images/2016_05_29_22_39_29_1386x819.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;生活在绿色里:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_40_34_1479x831.jpg&#34; alt=&#34;/images/2016_05_29_22_40_34_1479x831.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;破烂狗熊和它的朋友们:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_41_38_624x826.jpg&#34; alt=&#34;/images/2016_05_29_22_41_38_624x826.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这几个皮革的配色相当不错，有手工打造一个键盘皮套的冲动:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_44_15_734x796.jpg&#34; alt=&#34;/images/2016_05_29_22_44_15_734x796.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;喵星人专属的浴室设计, 这个真的要狂赞:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_45_29_468x828.jpg&#34; alt=&#34;/images/2016_05_29_22_45_29_468x828.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;萌爆了的拖鞋！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_46_30_1230x826.jpg&#34; alt=&#34;/images/2016_05_29_22_46_30_1230x826.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;让人马上能安静下来的书桌设计，萌萌的北极熊，蓝+白色调。超赞的设计！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_47_26_1076x831.jpg&#34; alt=&#34;/images/2016_05_29_22_47_26_1076x831.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个家居摆设让人无法抗拒一杯咖啡或者啤酒的诱惑:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_50_25_470x828.jpg&#34; alt=&#34;/images/2016_05_29_22_50_25_470x828.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一位兰州籍学子为家乡设计的兰州珍品包装，也是超级赞哦！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_51_15_466x828.jpg&#34; alt=&#34;/images/2016_05_29_22_51_15_466x828.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这里头的一个吊牌，就是一个被GFW屏蔽的网站, 叹气。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_53_16_1396x834.jpg&#34; alt=&#34;/images/2016_05_29_22_53_16_1396x834.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而吊牌下的小卡片，则是该网站不能访问的起始时间，9个卡片里，有twitter,facebook,google等：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_54_18_1442x829.jpg&#34; alt=&#34;/images/2016_05_29_22_54_18_1442x829.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;视觉跟踪的小黄鸭们，用传感器，实现小黄鸭随着观众的体感而转动，老大哥能从任一方向都看着你:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_55_39_1004x821.jpg&#34; alt=&#34;/images/2016_05_29_22_55_39_1004x821.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;中国人用了太多抗生素，滥用了太多。这幅作品就是指的这个:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_57_17_572x819.jpg&#34; alt=&#34;/images/2016_05_29_22_57_17_572x819.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;水墨展示的乐师们的神态。虽然没有面部表情，但是，那种陶醉的形态已经栩栩如生:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_22_58_38_1092x833.jpg&#34; alt=&#34;/images/2016_05_29_22_58_38_1092x833.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好作品真是太多。限于时间，没法一一展示了。我们只是看了4层，还有一层没看。这次展览
完全出乎我的意料之外，首先我没想到本科生的毕业设计水准已经如此之高；再次我没想到美术学院
的学生，他们所着眼的范围已经覆盖得如此之广，他们涉及了城市设计、环境保护、家居设计、工业
包装等等等等诸多领域。而我们这群技术工人，相比之下，做的只是一点点微小的工作吧。&lt;/p&gt;

&lt;p&gt;Life is long, play more.&lt;/p&gt;

&lt;h3 id=&#34;纯吃货贴&#34;&gt;纯吃货贴&lt;/h3&gt;

&lt;p&gt;本日主打斑鱼，顺祝某位小伙伴生日快乐。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_23_03_30_1385x819.jpg&#34; alt=&#34;/images/2016_05_29_23_03_30_1385x819.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;传说中的斑鱼：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_23_04_13_1366x826.jpg&#34; alt=&#34;/images/2016_05_29_23_04_13_1366x826.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;晚餐呢接着腐败，驴肉:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_23_05_55_1159x650.jpg&#34; alt=&#34;/images/2016_05_29_23_05_55_1159x650.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好烧鹅：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_23_06_36_1149x647.jpg&#34; alt=&#34;/images/2016_05_29_23_06_36_1149x647.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;天上龙肉，地下驴肉:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_29_23_07_34_489x795.jpg&#34; alt=&#34;/images/2016_05_29_23_07_34_489x795.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;酒足饭饱外加精神愉悦的一天！好了，周末再见，周一继续狠狠的上班吧！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>羊城漫步(一)</title>
      <link>http://purplepalmdash.github.io/2016/05/28/yang-cheng-man-bu-yi/</link>
      <pubDate>Sat, 28 May 2016 21:23:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/28/yang-cheng-man-bu-yi/</guid>
      <description>

&lt;h3 id=&#34;题记&#34;&gt;题记&lt;/h3&gt;

&lt;p&gt;近来多了不少个人时间，周末得以在广州和周边自由行走。又鉴于一直以来对朋友圈封闭生态系统的反感
、有限文字带来的表达能力的局限的顾虑，决定把游记整理在blog中。&lt;/p&gt;

&lt;p&gt;2016.05.28，周六，雨，行程：陈家祠，越秀山。&lt;/p&gt;

&lt;h3 id=&#34;陈家祠&#34;&gt;陈家祠&lt;/h3&gt;

&lt;p&gt;陈家祠实在是名声在外得太响，俨然成为岭南建筑的一大地标性建筑，以至于我一个朋友出差路过广州还
专程去访了一次(WMZDBD,说你呢:)哈哈哈)。我想可能和它地处闹市区外加交通便利有很大关系&amp;mdash;-地铁1号线坐到陈家祠站，出D口，
票价10元，好了，陈家祠欢迎你。&lt;/p&gt;

&lt;p&gt;下图是祠堂正门。中国各地的祠堂并无两样，牌坊打先锋，往后两根大旗杆，门口用石狮镇门，对联则用来表示
本宗姓优越感的字句，无非也是诗书耕读勤俭发奋一类的语调。本族子弟一接近这门，心底的自豪感嗖的
一下即提升到爆表。祠堂里供奉的，当是本姓人里的成大器者。从这个意义上讲，宗祠可算得上是某个姓的”靖国神社“。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_21_36_34_1558x817.jpg&#34; alt=&#34;/images/2016_05_28_21_36_34_1558x817.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;陈家祠堂有名的就是它的各种雕刻了。网上说这些雕刻美仑美奂(&amp;ldquo;图案题材广泛，造型生动逼真，雕刻技艺精湛，
用笔简炼粗放却又精雕细琢，与雄伟的厅堂浑然一体&amp;rdquo;)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_21_52_35_1475x827.jpg&#34; alt=&#34;/images/2016_05_28_21_52_35_1475x827.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;讲真，我觉得网上的说法言过其实。来广州一年多，喜欢游走的缘故，看过不少岭南派建筑。砖雕做得好的
我推荐：佛山祖庙和顺德城煌庙。若是以前从没见过岭南雕刻艺术的，到了陈家祠可能觉得“哇噻好漂亮”， 但
若是看得多、有了比较，就会有高下立判之感。陈家祠砖雕的人物造型过于呆板，层次感对比于我提起的两个
地方显得不够分明。而且它们都高高的站在了屋顶上，原谅我的老颈椎实在没法承受仰望星空的45度角。很多砖雕又
太新了，就像是刻意做新的一般。&lt;/p&gt;

&lt;p&gt;还有就是，看各种雕刻一定要慢慢看，干扰越少越好。陈家祠里爱自拍的小姑娘和爱玩单反的大爷大妈太多了，拜托，
我已经抑制住了很多次做V字型手势的冲动。&lt;/p&gt;

&lt;p&gt;据说这是在陈家祠的文物仓库里发现的一个用于祭拜神像的木质建筑，官方介绍说它在仓库里沉睡了数十年后，终于
于2015年被发现而后组装出来展览喽！我比较怀疑这个建筑展览人做策划时的智商及情商，我也可以花几万找文物贩子
做旧一个然后说成是&amp;rdquo;沉睡数十年&amp;rdquo;啊。。。。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_04_17_597x830.jpg&#34; alt=&#34;/images/2016_05_28_22_04_17_597x830.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;陈家祠还有个身份是广东民俗博物馆，因而在它里头有很多民俗藏品，譬如：&lt;/p&gt;

&lt;p&gt;大潮汕剪纸：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_11_36_828x830.jpg&#34; alt=&#34;/images/2016_05_28_22_11_36_828x830.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;特别强调一下”红头船“和”妈祖“, 怡乐路上有家馆子，名字就叫红头船, 鹅肝专卖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_12_39_524x487.jpg&#34; alt=&#34;/images/2016_05_28_22_12_39_524x487.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;做桃粿，潮汕的一种过年用的食物：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_20_55_1010x814.jpg&#34; alt=&#34;/images/2016_05_28_22_20_55_1010x814.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;汕头那边的漆版画，这张是说”李白醉酒应诏答番书“:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_14_46_1038x831.jpg&#34; alt=&#34;/images/2016_05_28_22_14_46_1038x831.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;木雕中的上品，没想到一块木头里即可幻化出人生万象：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_17_31_1343x777.jpg&#34; alt=&#34;/images/2016_05_28_22_17_31_1343x777.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一副刻填彩漆画，50年代创作，浓郁的时代风情，《蔗糖丰收》：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_19_10_1308x809.jpg&#34; alt=&#34;/images/2016_05_28_22_19_10_1308x809.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;此外还有各种绘画/刺绣/雕刻艺术等等，个人喜好问题，我没有完全拍下来。&lt;/p&gt;

&lt;p&gt;个人表示很排斥陈家祠里的象牙雕刻展览及售卖场所，你可以说象牙雕刻出来的东西很精美，富有收藏价值等等。但
如果一件艺术品要建立在一条生命的泯灭上，那这种艺术可以说成是杀戮。从这个意义上讲，那些标价数百万的象牙雕刻作品
，背后站着的都是一头或是数头可怜的惨遭虐杀的大象。&lt;/p&gt;

&lt;p&gt;综上所述, 陈家祠我勉强给它给到60分。我给它的评价是一个岭南派建筑的快餐式消费产品。做新痕迹太重，商业气息太浓，
而且，贩卖象牙制品。有朋友路过想走马观花看一下岭南建筑及民俗的，又不想出市区的话，可以带过来走一走。&lt;/p&gt;

&lt;h3 id=&#34;越秀山&#34;&gt;越秀山&lt;/h3&gt;

&lt;p&gt;基于陈家祠实在没啥好逛的，出门我就上了109,一路坐到越秀山, 电车，很平稳，很舒服。&lt;/p&gt;

&lt;p&gt;越秀山的植被相当好。在市区里来讲，NO.1。 它让我想起南宁的青秀山，青秀山也是个植被很不错的地方，比越秀山要大很多。
雨后的越秀山空气清新，各种热带植物在视野里简直是青翠欲滴，赤裸裸的挑战着你的视觉神经。生态好，所以随处可以看到
小动物，比如:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_33_28_1480x829.jpg&#34; alt=&#34;/images/2016_05_28_22_33_28_1480x829.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;越秀山里残存了一段明城墙，全广州唯一。 一棵开花的树VS明城墙，很奇妙。要知道在南京的明城墙，大部分都是光秃秃的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_35_28_927x804.jpg&#34; alt=&#34;/images/2016_05_28_22_35_28_927x804.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;红花残，满地伤，适合发呆一下午的所在:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_37_46_1411x775.jpg&#34; alt=&#34;/images/2016_05_28_22_37_46_1411x775.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;越秀山里的标志性建筑有两个，先说第一个： 镇海楼, 别名”五层楼“， 广州地标建筑，感兴趣的自行Google之.  见图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_39_51_1478x828.jpg&#34; alt=&#34;/images/2016_05_28_22_39_51_1478x828.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;进到楼里，即是广州博物馆，各种文物古玩众多，值得细细品尝。 当然文物这东西的喜好个人都不一样，这里仅列举几例，
展示一下窝的品味，勾引一下泥的欲望:&lt;/p&gt;

&lt;p&gt;南越国(公元前100多年)时陶器，上塑&amp;rdquo;食官第一&amp;rdquo;。 说人话就是：吃货才是老大:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_43_04_1117x827.jpg&#34; alt=&#34;/images/2016_05_28_22_43_04_1117x827.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;陶制小船，公元前作品:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_48_03_1395x789.jpg&#34; alt=&#34;/images/2016_05_28_22_48_03_1395x789.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;来呀，快活呀，反正有大把时光：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_49_33_1367x805.jpg&#34; alt=&#34;/images/2016_05_28_22_49_33_1367x805.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;各种各样的陶制建筑，东汉作品:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_51_27_1462x822.jpg&#34; alt=&#34;/images/2016_05_28_22_51_27_1462x822.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;特写一个，上层住人，下层养猪的陶屋:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_52_42_1033x790.jpg&#34; alt=&#34;/images/2016_05_28_22_52_42_1033x790.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;把灯放在大脸人的头上真的很好咩, 陶娃娃无辜的表情说明了一切。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_53_53_1192x805.jpg&#34; alt=&#34;/images/2016_05_28_22_53_53_1192x805.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;南朝时的一张地契，刻在石头上的, 买卖双方都以为可以一直如约下去，没想到过了2000年，全TM国有了:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_56_16_1082x812.jpg&#34; alt=&#34;/images/2016_05_28_22_56_16_1082x812.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;元代的计时器，运用滴水的原理，判断时辰：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_58_26_627x828.jpg&#34; alt=&#34;/images/2016_05_28_22_58_26_627x828.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是清代的一套出口丹麦的盘子:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_22_59_57_1477x827.jpg&#34; alt=&#34;/images/2016_05_28_22_59_57_1477x827.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;清朝的西洋钟，非常精美:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_23_01_13_688x834.jpg&#34; alt=&#34;/images/2016_05_28_23_01_13_688x834.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;民国时期的陪嫁，好想在这钢琴上来一首《Somewhere in time》 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_23_02_25_717x833.jpg&#34; alt=&#34;/images/2016_05_28_23_02_25_717x833.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是一份民国时中国基督教徒的结婚证书。&lt;/p&gt;

&lt;p&gt;上写&amp;rdquo;神所配合人不可分”。&lt;br /&gt;
右边新娘位写&amp;rdquo;上帝曰不可使人独处&amp;rdquo;。&lt;br /&gt;
左边新郎位写&amp;rdquo;必须造一相助为理者&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;接下来写新郎新娘的名字、出生年月。结婚日期，秉神的旨意，于某年某月结为连理。再下来，是用中文
书写的家谱，有籍贯、家人姓名等。最后是证婚人的亲笔签名。&lt;/p&gt;

&lt;p&gt;结婚证制作精美，温情、温馨。留意看新郎新娘的面相，会发现他们真的很有夫妻相。照片里的那一对年轻夫妻
如今早已离别人世，然而一份正式、郑重、真诚、温馨的契约，依然在这红尘中流芳百世。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_23_03_58_907x830.jpg&#34; alt=&#34;/images/2016_05_28_23_03_58_907x830.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;镇海楼1～5层就这样从石器时代到近代、当代，展现了整个南粤文化的发展。最后上到5楼，你看到的风景是
这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_23_15_23_1479x821.jpg&#34; alt=&#34;/images/2016_05_28_23_15_23_1479x821.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;没什么卵意思！ 于是下楼，去看五羊雕塑，沿途经过总统纪念碑，拍一张:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_23_16_46_571x785.jpg&#34; alt=&#34;/images/2016_05_28_23_16_46_571x785.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;依然没什么卵意思嘛！国民党最近都失了台湾的总统，英文妹子上台来，搞得风风火火嘛！好了，继续往前走，看
雕塑去。&lt;/p&gt;

&lt;p&gt;羊：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_23_18_39_924x824.jpg&#34; alt=&#34;/images/2016_05_28_23_18_39_924x824.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;羊：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_23_19_31_728x820.jpg&#34; alt=&#34;/images/2016_05_28_23_19_31_728x820.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;羊:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_28_23_20_18_974x826.jpg&#34; alt=&#34;/images/2016_05_28_23_20_18_974x826.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好了，羊羊羊，恒源祥，回家吧。&lt;/p&gt;

&lt;p&gt;小总结一下:&lt;/p&gt;

&lt;p&gt;越秀山我给到90分。越秀，粤秀，果然景色秀美，植被繁茂。山下有湖，可以带情侣或者小朋友来泛舟，价格有点小贵，
不过呢，泡妞这种事，泡熊孩子这种事，忍忍吧，谁让它环境那么好！&lt;/p&gt;

&lt;p&gt;广州博物馆是出乎我意料之外的，我没想到广州这种&amp;rdquo;蛮夷之地&amp;rdquo;居然也有数目如此众多、质量如此精美的文物。所以说大
汉族主义真是要不得哈。&lt;/p&gt;

&lt;p&gt;广州博物馆里还有诸多展品，限于篇幅没法一一列举了，文物这种东西，就是个人喜好。譬如说， 那份结婚证书会让我
想起来在南京紫金山中山纪念馆里看过的的孙中山与宋庆龄的结婚契约。&lt;/p&gt;

&lt;p&gt;2010年我初次看到那份契约，端正抄写在绢上，一丝不苟，三人手印（孙、宋、证婚人）历经近百年依然清晰。
其实吧，我后来又看了很多书，也了解了很多八卦，发现孙和宋之间也没那么简单，有些情节简直狗血。但，怎么说呢？
至少相信他们按手印那一刻是真心吧。人这一世，又能有多少个真心如此的瞬间呢？&lt;/p&gt;

&lt;p&gt;好了闲话不多说，谁看谁知道，广州博物馆10块钱的门票欢迎你！&lt;/p&gt;

&lt;p&gt;越秀山很大，我今天走的大概是50%， 以后可以再找个机会去闲逛、发呆。&lt;/p&gt;

&lt;p&gt;《羊城漫步(一)》完结。明天继续(如果可以的话)，打算把南越文王博物馆给逛了， 谁让哥每次坐地铁经过它都提醒你
”去往南越文王博物馆的乘客请在此站下车“呢？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working Tips on Ansible-cobbler(3)</title>
      <link>http://purplepalmdash.github.io/2016/05/18/working-tips-on-ansible-cobbler-3/</link>
      <pubDate>Wed, 18 May 2016 21:15:10 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/18/working-tips-on-ansible-cobbler-3/</guid>
      <description>

&lt;h3 id=&#34;apt-packages&#34;&gt;APT Packages&lt;/h3&gt;

&lt;p&gt;The downloaded deb files should be under &lt;code&gt;/var/cache/apt&lt;/code&gt;, use following command for copying to
another position:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find . | grep -i deb$ | xargs % cp % ~/Dest_Folder
$ scp -r ~/Dest_Folder Your_Cobbler_Machine
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;repositories&#34;&gt;Repositories&lt;/h3&gt;

&lt;p&gt;Install &lt;code&gt;dpkg-dev&lt;/code&gt; package, so we could generate the dpkg packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install -y dpkg-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new repository:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_18_21_28_37_717x452.jpg&#34; alt=&#34;/images/2016_05_18_21_28_37_717x452.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Edit the advanced options:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_18_21_30_04_508x314.jpg&#34; alt=&#34;/images/2016_05_18_21_30_04_508x314.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Report the repository info via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@cobbler-ubuntu:~# cobbler repo report --name=ubuntu1604Mate
Name                           : ubuntu1604Mate
Apt Components (apt only)      : [&#39;main&#39;]
Apt Dist Names (apt only)      : [&#39;stable&#39;]
Arch                           : x86_64
Breed                          : apt
Comment                        : Ubuntu 16.04 Repository For installing MATE
Createrepo Flags               : &amp;lt;&amp;lt;inherit&amp;gt;&amp;gt;
Environment Variables          : {}
Keep Updated                   : False
Mirror                         : 
Mirror locally                 : True
Owners                         : [&#39;admin&#39;]
Priority                       : 99
External proxy URL             : 
RPM List                       : []
Yum Options                    : {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Repository Structure Creation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir /srv/www/cobbler/repo_mirror/ubuntu1604Mate
$ cd /srv/www/cobbler/repo_mirror/ubuntu1604Mate
$ mkdir -p pool/main dists/stable/main/binary-i386 dists/stable/main/binary-amd64
$ cp ~/apt/debs/*.deb ./pool/main/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable the &lt;code&gt;allow_unauthenticated&lt;/code&gt; options in kickstart file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim /var/lib/cobbler/kickstarts/sample.seed
 d-i debian-installer/allow_unauthenticated boolean true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate the gpg key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# gpg --gen-key
  gpg (GnuPG) 2.0.14; Copyright (C) 2009 Free Software Foundation, Inc.
  This is free software: you are free to change and redistribute it.
  There is NO WARRANTY, to the extent permitted by law.

  gpg: directory `/root/.gnupg&#39; created
  gpg: new configuration file `/root/.gnupg/gpg.conf&#39; created
  gpg: WARNING: options in `/root/.gnupg/gpg.conf&#39; are not yet active during this run
  gpg: keyring `/root/.gnupg/secring.gpg&#39; created
  gpg: keyring `/root/.gnupg/pubring.gpg&#39; created
 Please select what kind of key you want:
    (1) RSA and RSA (default)
    (2) DSA and Elgamal
    (3) DSA (sign only)
    (4) RSA (sign only)
 Your selection? 1
 RSA keys may be between 1024 and 4096 bits long.
 What keysize do you want? (2048)
 Requested keysize is 2048 bits
 Please specify how long the key should be valid.
          0 = key does not expire
       &amp;lt;n&amp;gt;  = key expires in n days
       &amp;lt;n&amp;gt;w = key expires in n weeks
       &amp;lt;n&amp;gt;m = key expires in n months
       &amp;lt;n&amp;gt;y = key expires in n years
 Key is valid for? (0)
 Key does not expire at all
 Is this correct? (y/N) y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For generating the random key, install the &lt;code&gt;haveged&lt;/code&gt; in system:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo aptitude install haveged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List the keys via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# gpg --list-keys
/home/vagrant/.gnupg/pubring.gpg
--------------------------------
pub   2048R/16D87321 2016-05-18
uid                  xxxxx &amp;lt;xxxxxx@gmail.com&amp;gt;
sub   2048R/8C4A318A 2016-05-18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate the pgp signature via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# gpg --export -a 16D87321&amp;gt;~/junk.key
# gpg --no-default-keyring --keyring /srv/www/cobbler/repo_mirror/ubuntu1604Mate/public.pgp --import ~/junk.key
# rm -f ~/junk.key
# chmod a+r /srv/www/cobbler/repo_mirror/ubuntu1604Mate/public.pgp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Re-Generate the repository infos via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /srv/www/cobbler/repo_mirror/ubuntu1604Mate/
$ vim reindex_apt.sh
$ chmod 777 reindex_apt.sh 
$ ./reindex_apt.sh 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The content of &lt;code&gt;reindex_apt.sh&lt;/code&gt; is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

GPG_NAME=16D87321
REPONAME=stable
VERSION=1.0

for bindir in `find dists/${REPONAME} -type d -name &amp;quot;binary*&amp;quot;`; do
    arch=`echo $bindir|cut -d&amp;quot;-&amp;quot; -f 2`
    echo &amp;quot;Processing ${bindir} with arch ${arch}&amp;quot;

    overrides_file=/tmp/overrides
    package_file=$bindir/Packages
    release_file=$bindir/Release

    # Create simple overrides file to stop warnings
    cat /dev/null &amp;gt; $overrides_file
    for pkg in `ls pool/main/ | grep -E &amp;quot;(all|${arch})\.deb&amp;quot;`; do
        pkg_name=`/usr/bin/dpkg-deb -f pool/main/${pkg} Package`
        echo &amp;quot;${pkg_name} Priority extra&amp;quot; &amp;gt;&amp;gt; $overrides_file
    done

    # Index of packages is written to Packages which is also zipped
    dpkg-scanpackages -a ${arch} pool/main $overrides_file &amp;gt; $package_file
    # The line above is also commonly written as:
    # dpkg-scanpackages -a ${arch} pool/main /dev/null &amp;gt; $package_file
    gzip -9c $package_file &amp;gt; ${package_file}.gz
    bzip2 -c $package_file &amp;gt; ${package_file}.bz2

    # Cleanup
    rm $overrides_file
done

# Release info goes into Release &amp;amp; Release.gpg which includes an md5 &amp;amp; sha1 hash of Packages.*
# Generate &amp;amp; sign release file
cd dists/${REPONAME}
cat &amp;gt; Release &amp;lt;&amp;lt;ENDRELEASE
Suite: ${REPONAME}
Version: ${VERSION}
Component: main
Origin: somewhere
Label: ubuntu1604Mate
Architecture: i386 amd64
Date: `date`
ENDRELEASE

# Generate hashes
echo &amp;quot;MD5Sum:&amp;quot; &amp;gt;&amp;gt; Release
for hashme in `find main -type f`; do
    md5=`openssl dgst -md5 ${hashme}|cut -d&amp;quot; &amp;quot; -f 2`
    size=`stat -c %s ${hashme}`
    echo &amp;quot; ${md5} ${size} ${hashme}&amp;quot; &amp;gt;&amp;gt; Release
done
echo &amp;quot;SHA1:&amp;quot; &amp;gt;&amp;gt; Release
for hashme in `find main -type f`; do
    sha1=`openssl dgst -sha1 ${hashme}|cut -d&amp;quot; &amp;quot; -f 2`
    size=`stat -c %s ${hashme}`
    echo &amp;quot; ${sha1} ${size} ${hashme}&amp;quot; &amp;gt;&amp;gt; Release
done

# Sign!
gpg --yes -u $GPG_NAME --sign -bao Release.gpg Release
cd -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now continue to modify the kickstart file for using the generated gpgs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pwd
/var/lib/cobbler/snippets
# cp preseed_apt_repo_config preseed_apt_repo_config_pgpkey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;preseed_apt_repo_config_pgpkey&lt;/code&gt; should be listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Additional repositories, local[0-9] available
#set $cur=1
#set $repo_data = $getVar(&amp;quot;repo_data&amp;quot;,[])
#for $repo in $repo_data
 #for $dist in $repo.apt_dists
 #set $comps = &amp;quot; &amp;quot;.join($repo.apt_components)
d-i apt-setup/local${cur}/repository string \
 #if $repo.mirror_locally
      http://$http_server/cblr/repo_mirror/${repo.name} $dist $comps
 #else
      ${repo.mirror} $dist $comps
 #end if
 #if $repo.comment != &amp;quot;&amp;quot;
d-i apt-setup/local${cur}/comment string ${repo.comment}
 #end if
 #if $repo.breed == &amp;quot;src&amp;quot;
# Enable deb-src lines
d-i apt-setup/local${cur}/source boolean false
 #end if
+++ # Add repo pgp pub key
+++ d-i apt-setup/local${cur}/key string \
+++       http://$http_server/cblr/repo_mirror/${repo.name}/public.pgp
 #set $cur=$cur+1
 #end for
#end for
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the new preseed file, and changint the &lt;code&gt;preseed_apt_repo_config_pgpkey&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pwd
/var/lib/cobbler/kickstarts
# cp sample.seed ubuntu1604.seed
# vim ubuntu1604.seed
-  $SNIPPET(&#39;preseed_apt_repo_config&#39;)
+  $SNIPPET(&#39;preseed_apt_repo_config_pgpkey&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Changing the seed in the &lt;code&gt;cobbler_web&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_18_22_25_48_732x294.jpg&#34; alt=&#34;/images/2016_05_18_22_25_48_732x294.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;cobbler sync&lt;/code&gt; for syncing the configuration.&lt;/p&gt;

&lt;h3 id=&#34;use-the-repository&#34;&gt;Use the Repository&lt;/h3&gt;

&lt;p&gt;Add the &lt;code&gt;ubuntu1604Mate&lt;/code&gt; into the Repos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_18_22_31_42_731x486.jpg&#34; alt=&#34;/images/2016_05_18_22_31_42_731x486.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After added, the configuration should be:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_18_22_33_00_471x149.jpg&#34; alt=&#34;/images/2016_05_18_22_33_00_471x149.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;cobbler sync&lt;/code&gt; for syncing the configuration.&lt;/p&gt;

&lt;p&gt;Bug: you should move the &lt;code&gt;preseed_apt_repo_config&lt;/code&gt; and  then &lt;code&gt;cobbler sync&lt;/code&gt; then your deployment will be OK:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mv /var/lib/cobbler/snippets/preseed_apt_repo_config /root/
$ cobbler sync
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;added-mate-installation&#34;&gt;Added Mate Installation&lt;/h3&gt;

&lt;p&gt;Configure the preseed late:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cp /var/lib/cobbler/scripts/preseed_late_default /var/lib/cobbler/scripts/preseed_late_default_mate
# vim /var/lib/cobbler/scripts/preseed_late_default_mate
# vim preseed_late_default_mate 
$SNIPPET(&#39;post_install_network_config_deb&#39;)
$SNIPPET(&#39;late_apt_repo_config&#39;)
$SNIPPET(&#39;post_run_deb&#39;)
$SNIPPET(&#39;download_config_files&#39;)
+ $SNIPPET(&#39;ubuntumate&#39;)
$SNIPPET(&#39;kickstart_done&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add the snippet of &lt;code&gt;ubuntumate&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat ../snippets/ubuntumate 
echo &amp;quot;debconf debconf/frontend select noninteractive&amp;quot; | sudo debconf-set-selections
apt-get --allow-unauthenticated update -y
apt-get --allow-unauthenticated upgrade -y
apt-get --allow-unauthenticated install -y build-essential
### apt-get --allow-unauthenticated install -y ubuntu-mate-desktop
apt-get --allow-unauthenticated install -y vim
### apt-get --allow-unauthenticated install -y chromium-browser
### apt-get --allow-unauthenticated install -y meld vim-gtk
### apt-get --allow-unauthenticated install -y evince
### sudo apt-get --allow-unauthenticated install -y language-pack-zh-hans language-pack-zh-hans-base language-pack-gnome-zh-hans language-pack-gnome-zh-hans-base
### sudo apt-get --allow-unauthenticated install -y `check-language-support -l zh`
### sudo localectl set-locale LANG=zh_CN.UTF-8
### # TW/HK language support
### sudo apt-get --allow-unauthenticated install -y language-pack-zh-hant language-pack-zh-hant-base language-pack-gnome-zh-hant language-pack-gnome-zh-hant-base
### sudo apt-get --allow-unauthenticated install -y `check-language-support -l zh`
### apt-get --allow-unauthenticated install -y fcitx
### apt-get --allow-unauthenticated install -y fcitx-table-wubi fcitx-table-wubi-large
### apt-get --allow-unauthenticated install -y fcitx-googlepinyin
### apt-get --allow-unauthenticated install -y gimp
### apt-get --allow-unauthenticated install -y ibus-pinyin 
### apt-get --allow-unauthenticated install -y thunderbird-locale-en-us mythes-en-au hunspell-en-gb thunderbird-locale-en-gb fonts-arphic-ukai wbritish fcitx-sunpinyin openoffice.org-hyphenation language-pack-gnome-en hunspell-en-za fcitx-chewing fcitx-table-cangjie gimp-help-en language-pack-en mythes-en-us thunderbird-locale-en fcitx-module-cloudpinyin libreoffice-help-en-us firefox-locale-en libreoffice-help-en-gb fonts-arphic-uming hyphen-en-gb libreoffice-l10n-en-za fcitx-ui-qimpanel hunspell-en-au libreoffice-l10n-en-gb hyphen-en-us hunspell-en-ca 
### apt-get --allow-unauthenticated install -y zsh
### apt-get --allow-unauthenticated install -y fonts-wqy-zenhei fonts-wqy-microhei ttf-wqy-microhei  ttf-wqy-zenhei  xfonts-wqy
### apt-get --allow-unauthenticated install -y eclipse
### apt-get --allow-unauthenticated install -y gpicview
### apt-get --allow-unauthenticated install -y scrot
### apt-get --allow-unauthenticated install -y byobu
### apt-get --allow-unauthenticated install -y subversion git
### apt-get --allow-unauthenticated install -y kdiff3
### apt-get --allow-unauthenticated install -y docker

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;cobbler sync&lt;/code&gt;, and now you could deploy mate desktop via cobbler.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips On Maas 2.0</title>
      <link>http://purplepalmdash.github.io/2016/05/12/tips-on-maas-2-dot-0/</link>
      <pubDate>Thu, 12 May 2016 14:10:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/12/tips-on-maas-2-dot-0/</guid>
      <description>

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Based on Ubuntu16.04, install maas via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install -y maas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After installation, create the default username/password via following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo maas-region createadmin --username=root --email=xxyy@xxyy.com
Password: 
Again: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you could login to the &lt;code&gt;http://YourIP/MAAS&lt;/code&gt; via:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_05_12_14_25_12_456x494.jpg&#34; alt=&#34;/images/2016_05_12_14_25_12_456x494.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;using-api-to-talk&#34;&gt;Using API to talk&lt;/h3&gt;

&lt;p&gt;In maas cli, using following steps for generate the API key and use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# sudo maas-region apikey --username=root
AYnuZY3gWTnpxJb7Kp:AtDG3yUmaDu8tXGzTc:tumR29xsRGL6A7T6M2G7LTETPP5kkDwC
# maas login mymaas http://10.17.17.2/MAAS/api/2.0
AYnuZY3gWTnpxJb7Kp:AtDG3yUmaDu8tXGzTc:tumR29xsRGL6A7T6M2G7LTETPP5kkDwC

You are now logged in to the MAAS server at
http://10.17.17.2/MAAS/api/2.0/ with the profile name &#39;mymaas&#39;.

For help with the available commands, try:

  maas mymaas --help

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later we will use &lt;code&gt;mymaas&lt;/code&gt; for talk to MAAS Controller.&lt;/p&gt;

&lt;h3 id=&#34;add-boot-source&#34;&gt;Add Boot Source&lt;/h3&gt;

&lt;p&gt;Click &lt;code&gt;Images&lt;/code&gt;, you won&amp;rsquo;t see anything because the images are not downloaded. you could
download it manually via following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install simplestreams ubuntu-cloudimage-keyring apache2
$ sudo sstream-mirror --keyring=/usr/share/keyrings/ubuntu-cloudimage-keyring.gpg \
https://images.maas.io/ephemeral-v2/daily/ /var/www/html/maas/images/ephemeral-v2/daily \
&#39;arch=amd64&#39; &#39;subarch~(generic|hwe-t)&#39; &#39;release~(trusty|precise|xenial)&#39; --max=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After downloading, the image content will be available under &lt;code&gt;/var/www/html/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Or, if you downloaded the html files before, do following steps for using your
pre-downloaded packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar xJvf html.tar.bz2 -C /var/www/html/
$ sudo maas mymaas boot-sources create url=http://10.17.17.2/mirror/images/ephemeral-v2/releases/ keyring_filename=/usr/share/keyrings/ubuntu-cloudimage-keyring.gpg 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now there are two boot-sources in maas, delete the default one(Because we are in china,
and its goddamned GFW!)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dash@maascontroller:~$ sudo maas mymaas boot-source delete 1
Success.
Machine-readable output follows:

dash@maascontroller:~$ sudo maas mymaas boot-sources read
Success.
Machine-readable output follows:
[
    {
        &amp;quot;keyring_data&amp;quot;: &amp;quot;&amp;lt;memory at 0x7f4e9478b288&amp;gt;&amp;quot;,
        &amp;quot;resource_uri&amp;quot;: &amp;quot;/MAAS/api/2.0/boot-sources/2/&amp;quot;,
        &amp;quot;id&amp;quot;: 2,
        &amp;quot;url&amp;quot;: &amp;quot;http://10.17.17.2/mirror/images/ephemeral-v2/releases/&amp;quot;,
        &amp;quot;keyring_filename&amp;quot;: &amp;quot;/usr/share/keyrings/ubuntu-cloudimage-keyring.gpg&amp;quot;
    }
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Import boot-sources via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo maas mymaas boot-resources import
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will takes a little bit time for importing the boot images.&lt;/p&gt;

&lt;p&gt;For adding nodes:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://maas.ubuntu.com/docs2.0/nodes.html&#34;&gt;https://maas.ubuntu.com/docs2.0/nodes.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup LXD On Ubuntu1604</title>
      <link>http://purplepalmdash.github.io/2016/05/11/setup-lxd-on-ubuntu1604/</link>
      <pubDate>Wed, 11 May 2016 15:38:23 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/11/setup-lxd-on-ubuntu1604/</guid>
      <description>

&lt;h3 id=&#34;preparation&#34;&gt;Preparation&lt;/h3&gt;

&lt;p&gt;By default the lxd is installed in ubuntu1604.&lt;/p&gt;

&lt;h3 id=&#34;image&#34;&gt;Image&lt;/h3&gt;

&lt;p&gt;The image file are downloaded before we actually install it, install the image via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc image import ubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz ubuntu-16.04-server-cloudimg-amd64-root.tar.xz --alias ubuntu1604
$ lxc image list
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
|    ALIAS     | FINGERPRINT  | PUBLIC |             DESCRIPTION              |  ARCH  |   SIZE   |         UPLOAD DATE          |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
| ubuntu1604   | f4c4c60a6b75 | no     | Ubuntu 16.04 LTS server (20160420.3) | x86_64 | 137.54MB | May 10, 2016 at 2:18pm (UTC) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-container&#34;&gt;Start Container&lt;/h3&gt;

&lt;p&gt;Start the container via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc launch ubuntu1604 first1404
$ lxc list
+------------+---------+------+------+------------+-----------+
|    NAME    |  STATE  | IPV4 | IPV6 |    TYPE    | SNAPSHOTS |
+------------+---------+------+------+------------+-----------+
| first1404  | RUNNING |      |      | PERSISTENT | 0         |
+------------+---------+------+------+------------+-----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attach to the running container via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc exec first1404 /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this container you could do anything, for your customization of the container.&lt;/p&gt;

&lt;h3 id=&#34;more-images&#34;&gt;More Images&lt;/h3&gt;

&lt;p&gt;After your modification is done, shutdown the running container, and submit your
modification to a new container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc publish second1604 --alias my-new-image
$ lxc image list
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
|    ALIAS     | FINGERPRINT  | PUBLIC |             DESCRIPTION              |  ARCH  |   SIZE   |         UPLOAD DATE          |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
| my-new-image | 67de38342bfa | no     |                                      | x86_64 | 192.29MB | May 11, 2016 at 7:07am (UTC) |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
| ubuntu1604   | f4c4c60a6b75 | no     | Ubuntu 16.04 LTS server (20160420.3) | x86_64 | 137.54MB | May 10, 2016 at 2:18pm (UTC) |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;container-networking&#34;&gt;Container Networking&lt;/h3&gt;

&lt;p&gt;The default networking is a seperated network, but we could set the lxd using the hosted
network, via following steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /etc/network/interfaces

auto ens3
iface ens3 inet manual

auto containerbr 
iface containerbr inet static
address 192.168.10.193
netmask 255.255.0.0
gateway 192.168.0.176
dns-nameservers 180.76.76.76
bridge_ports ens3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reboot the machine, you have the running bridge &lt;code&gt;containerbr&lt;/code&gt;, now you could set your bridge to this
newly created bridge:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc profile device set default eth0 parent containerbr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Via this you cuold set the same subnet networking address just as in &lt;code&gt;containerbr&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>tips on lxc</title>
      <link>http://purplepalmdash.github.io/2016/05/10/tips-on-lxc/</link>
      <pubDate>Tue, 10 May 2016 22:17:35 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/10/tips-on-lxc/</guid>
      <description>

&lt;h3 id=&#34;working-tips&#34;&gt;Working Tips&lt;/h3&gt;

&lt;p&gt;Just for importing the images and let it run in lxc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dash@ubuntu:~/may10$ ls
ubuntu-14.04-server-cloudimg-amd64-lxd.tar.xz   ubuntu-15.04-snappy-amd64-generic.img.xz       ubuntu-16.04-server-cloudimg-amd64-root.tar.xz
ubuntu-14.04-server-cloudimg-amd64-root.tar.xz  ubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz
dash@ubuntu:~/may10$ lxc image import ubuntu-14.04-server-cloudimg-amd64-lxd.tar.xz ubuntu-14.04-server-cloudimg-amd64-root.tar.xz --alias ubuntu:14.04
Transferring image: 100%
Image imported with fingerprint: b69c9370446a28c02ad5b0d41f07e028a1756a74bee62b7d59467201a6488fc2
dash@ubuntu:~/may10$ lxc image list
+--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+
|    ALIAS     | FINGERPRINT  | PUBLIC |            DESCRIPTION             |  ARCH  |   SIZE   |         UPLOAD DATE          |
+--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+
| ubuntu:14.04 | b69c9370446a | no     | Ubuntu 14.04 LTS server (20160406) | x86_64 | 118.89MB | May 10, 2016 at 2:16pm (UTC) |
+--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+
dash@ubuntu:~/may10$ lxc launch ubuntu:14.04 first1404
Creating first1404
error: Get https://cloud-images.ubuntu.com/releases/streams/v1/index.json: lookup cloud-images.ubuntu.com on 180.76.76.76:53: read udp 10.47.58.215:44871-&amp;gt;180.76.76.76:53: i/o timeout
dash@ubuntu:~/may10$ lxc launch b69c9370446a first1404
Creating first1404
Starting first1404
dash@ubuntu:~/may10$ lxc image import ubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz ubuntu-16.04-server-cloudimg-amd64-root.tar.xz --alias ubuntu1604
Transferring image: 100%
Transferring image: 100%
Image imported with fingerprint: f4c4c60a6b752a381288ae72a1689a9da00f8e03b732c8d1b8a8fcd1a8890800
dash@ubuntu:~/may10$ lxc image list
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
|    ALIAS     | FINGERPRINT  | PUBLIC |             DESCRIPTION              |  ARCH  |   SIZE   |         UPLOAD DATE          |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
| ubuntu1604   | f4c4c60a6b75 | no     | Ubuntu 16.04 LTS server (20160420.3) | x86_64 | 137.54MB | May 10, 2016 at 2:18pm (UTC) |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
| ubuntu:14.04 | b69c9370446a | no     | Ubuntu 14.04 LTS server (20160406)   | x86_64 | 118.89MB | May 10, 2016 at 2:16pm (UTC) |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
dash@ubuntu:~/may10$ lxc launch ubuntu1604 first1404
Creating first1404
error: The container already exists
dash@ubuntu:~/may10$ lxc launch ubuntu1604 first1604
Creating first1604
Starting first1604
dash@ubuntu:~/may10$ lxc exec first1604 /bin/bash
root@first1604:~# ls
root@first1604:~# ifconfig
eth0      Link encap:Ethernet  HWaddr 00:16:3e:b0:f2:c3  
          inet addr:10.226.147.79  Bcast:10.226.147.255  Mask:255.255.255.0
          inet6 addr: fe80::216:3eff:feb0:f2c3/64 Scope:Link
dash@ubuntu:~/may10$ ls
ubuntu-14.04-server-cloudimg-amd64-lxd.tar.xz   ubuntu-15.04-snappy-amd64-generic.img.xz       ubuntu-16.04-server-cloudimg-amd64-root.tar.xz
ubuntu-14.04-server-cloudimg-amd64-root.tar.xz  ubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz
dash@ubuntu:~/may10$ lxc image import ubuntu-14.04-server-cloudimg-amd64-lxd.tar.xz ubuntu-14.04-server-cloudimg-amd64-root.tar.xz --alias ubuntu:14.04
Transferring image: 100%
Image imported with fingerprint: b69c9370446a28c02ad5b0d41f07e028a1756a74bee62b7d59467201a6488fc2
dash@ubuntu:~/may10$ lxc image list
+--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+
|    ALIAS     | FINGERPRINT  | PUBLIC |            DESCRIPTION             |  ARCH  |   SIZE   |         UPLOAD DATE          |
+--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+
| ubuntu:14.04 | b69c9370446a | no     | Ubuntu 14.04 LTS server (20160406) | x86_64 | 118.89MB | May 10, 2016 at 2:16pm (UTC) |
+--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+
dash@ubuntu:~/may10$ lxc launch ubuntu:14.04 first1404
Creating first1404
error: Get https://cloud-images.ubuntu.com/releases/streams/v1/index.json: lookup cloud-images.ubuntu.com on 180.76.76.76:53: read udp 10.47.58.215:44871-&amp;gt;180.76.76.76:53: i/o timeout
dash@ubuntu:~/may10$ lxc launch b69c9370446a first1404
Creating first1404
Starting first1404
dash@ubuntu:~/may10$ lxc image import ubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz ubuntu-16.04-server-cloudimg-amd64-root.tar.xz --alias ubuntu1604
Transferring image: 100%
Transferring image: 100%
Image imported with fingerprint: f4c4c60a6b752a381288ae72a1689a9da00f8e03b732c8d1b8a8fcd1a8890800
dash@ubuntu:~/may10$ lxc image list
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
|    ALIAS     | FINGERPRINT  | PUBLIC |             DESCRIPTION              |  ARCH  |   SIZE   |         UPLOAD DATE          |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
| ubuntu1604   | f4c4c60a6b75 | no     | Ubuntu 16.04 LTS server (20160420.3) | x86_64 | 137.54MB | May 10, 2016 at 2:18pm (UTC) |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
| ubuntu:14.04 | b69c9370446a | no     | Ubuntu 14.04 LTS server (20160406)   | x86_64 | 118.89MB | May 10, 2016 at 2:16pm (UTC) |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
dash@ubuntu:~/may10$ lxc launch ubuntu1604 first1404
Creating first1404
error: The container already exists
dash@ubuntu:~/may10$ lxc launch ubuntu1604 first1604
Creating first1604
Starting first1604
dash@ubuntu:~/may10$ lxc exec first1604 /bin/bash
root@first1604:~# ls
root@first1604:~# ifconfig
eth0      Link encap:Ethernet  HWaddr 00:16:3e:b0:f2:c3  
          inet addr:10.226.147.79  Bcast:10.226.147.255  Mask:255.255.255.0
          inet6 addr: fe80::216:3eff:feb0:f2c3/64 Scope:Link
dash@ubuntu:~/may10$ ls
ubuntu-14.04-server-cloudimg-amd64-lxd.tar.xz   ubuntu-15.04-snappy-amd64-generic.img.xz       ubuntu-16.04-server-cloudimg-amd64-root.tar.xz
ubuntu-14.04-server-cloudimg-amd64-root.tar.xz  ubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz
dash@ubuntu:~/may10$ lxc image import ubuntu-14.04-server-cloudimg-amd64-lxd.tar.xz ubuntu-14.04-server-cloudimg-amd64-root.tar.xz --alias ubuntu:14.04
Transferring image: 100%
Image imported with fingerprint: b69c9370446a28c02ad5b0d41f07e028a1756a74bee62b7d59467201a6488fc2
dash@ubuntu:~/may10$ lxc image list
+--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+
|    ALIAS     | FINGERPRINT  | PUBLIC |            DESCRIPTION             |  ARCH  |   SIZE   |         UPLOAD DATE          |
+--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+
| ubuntu:14.04 | b69c9370446a | no     | Ubuntu 14.04 LTS server (20160406) | x86_64 | 118.89MB | May 10, 2016 at 2:16pm (UTC) |
+--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+
dash@ubuntu:~/may10$ lxc launch ubuntu:14.04 first1404
Creating first1404
error: Get https://cloud-images.ubuntu.com/releases/streams/v1/index.json: lookup cloud-images.ubuntu.com on 180.76.76.76:53: read udp 10.47.58.215:44871-&amp;gt;180.76.76.76:53: i/o timeout
dash@ubuntu:~/may10$ lxc launch b69c9370446a first1404
Creating first1404
Starting first1404
dash@ubuntu:~/may10$ lxc image import ubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz ubuntu-16.04-server-cloudimg-amd64-root.tar.xz --alias ubuntu1604
Transferring image: 100%
Transferring image: 100%
Image imported with fingerprint: f4c4c60a6b752a381288ae72a1689a9da00f8e03b732c8d1b8a8fcd1a8890800
dash@ubuntu:~/may10$ lxc image list
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
|    ALIAS     | FINGERPRINT  | PUBLIC |             DESCRIPTION              |  ARCH  |   SIZE   |         UPLOAD DATE          |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
| ubuntu1604   | f4c4c60a6b75 | no     | Ubuntu 16.04 LTS server (20160420.3) | x86_64 | 137.54MB | May 10, 2016 at 2:18pm (UTC) |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
| ubuntu:14.04 | b69c9370446a | no     | Ubuntu 14.04 LTS server (20160406)   | x86_64 | 118.89MB | May 10, 2016 at 2:16pm (UTC) |
+--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+
dash@ubuntu:~/may10$ lxc launch ubuntu1604 first1404
Creating first1404
error: The container already exists
dash@ubuntu:~/may10$ lxc launch ubuntu1604 first1604
Creating first1604
Starting first1604
dash@ubuntu:~/may10$ lxc exec first1604 /bin/bash
root@first1604:~# ls
root@first1604:~# ifconfig
eth0      Link encap:Ethernet  HWaddr 00:16:3e:b0:f2:c3  
          inet addr:10.226.147.79  Bcast:10.226.147.255  Mask:255.255.255.0
          inet6 addr: fe80::216:3eff:feb0:f2c3/64 Scope:Link
....
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Working Tips On Mesos/Ansible</title>
      <link>http://purplepalmdash.github.io/2016/05/09/working-tips-on-mesos-slash-ansible/</link>
      <pubDate>Mon, 09 May 2016 12:20:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/09/working-tips-on-mesos-slash-ansible/</guid>
      <description>

&lt;h3 id=&#34;package-prepare&#34;&gt;Package Prepare&lt;/h3&gt;

&lt;p&gt;We have the default vagrant box generated by bento, listed it via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  mesos vagrant box list | grep -i centos | grep -i virtualbox
centos72                                     (virtualbox, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we want to generate a new box from it, and added our own configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant init centos72
$ vagrant up
$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit for keeping the cache:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /etc/yum.conf  | more
[main]
cachedir=/home/vagrant/rpms/$basearch/$releasever
#keepcache=0
keepcache=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now poweroff the machine and export it to the new box:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant package --output centoslocalrpm.box
$ vagrant box add centoslocalrpm centoslocalrpm.box
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the new box, the rpm packages could be saved into the folder
&lt;code&gt;/home/vagrant/rpms&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;deploy-using-ansible&#34;&gt;Deploy Using Ansible&lt;/h3&gt;

&lt;p&gt;Refers to&lt;br /&gt;
&lt;a href=&#34;https://open.mesosphere.com/advanced-course/recreating-the-cluster-using-ansible/&#34;&gt;https://open.mesosphere.com/advanced-course/recreating-the-cluster-using-ansible/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>