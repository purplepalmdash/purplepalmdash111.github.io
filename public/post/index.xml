<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dash</title>
    <link>http://purplepalmdash.github.io/post/</link>
    <description>Recent content in Posts on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Oct 2016 14:40:34 +0800</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MyHugo</title>
      <link>http://purplepalmdash.github.io/blog/2016/10/09/myhugo/</link>
      <pubDate>Sun, 09 Oct 2016 14:40:34 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/10/09/myhugo/</guid>
      <description>&lt;p&gt;Since I switched from octopress to hugo, hugo is wonderful, but I get used to use
Octopress&amp;rsquo;s naming method. For example, if I create a new post in Octopress I&amp;rsquo;d rather
using following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake new_post[&amp;quot;PostName&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the generated post name would be something like following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ ls -lt | more
total 3632
-rw-rw-r--  1 dash dash  5292 Apr  1  2016 2015-11-05-good-material.markdown
-rw-rw-r--  1 dash dash   540 Apr  1  2016 2016-01-04-purge-cloudstack-env.markdown
-rw-rw-r--  1 dash dash 22256 Apr  1  2016 2016-01-15-linux-tips-4.markdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While hugo use the origin name, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/ABC.md
$ ls -lt content/post | more
-rw-rw-r--  1 dash dash  5292 Apr  1  2016 ABC.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I wrote a small script for using the same naming principle of Octopress:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /usr/bin/myhugo 
    #!/bin/sh
    # Create post using hugo.
    hugo new post/$1.md
    # Add current date timestamp.
    mv content/post/$1.md content/post/`date --rfc-3339=date`-$1.md
    # Hint for editing.
    echo &amp;quot;Please Edit&amp;quot; $PWD/content/post/`date --rfc-3339=date`-$1.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now using myhugo for creating the post will be looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ ~/myhugo WriteLeetCode
/home/dash/Code/purplepalmdash.github.io/content/post/WriteLeetCode.md created
Please Edit
/home/dash/Code/purplepalmdash.github.io/content/post/2016-10-09-WriteLeetCode.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enjoy the &lt;code&gt;rake new_post&lt;/code&gt;style post name!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ReadDigestOnPythonAlgorithm2</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/27/readdigestonpythonalgorithm2/</link>
      <pubDate>Tue, 27 Sep 2016 09:41:02 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/27/readdigestonpythonalgorithm2/</guid>
      <description>

&lt;p&gt;第三章笔记。&lt;/p&gt;

&lt;h3 id=&#34;目的&#34;&gt;目的&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;* 理解抽象数据结构，stack,queue,dequeue,list.    
* 使用python lists实现抽象数据结构queue, deque.    
* 理解实现基本线性数据结构的性能.    
* 理解prefix,infix,postfix.    
* 使用stack陪你国家postfix表达式.    
* 使用stack来将表达式从infix到postfix.    
* 使用队列模拟基本计时模拟器
* 何种情况下该使用何种数据结构.
* 使用node/参考模式实现抽象数据结构(链表).    
* 对比我们实现的链表和Python的链表实现的性能.   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;线性数据结构&#34;&gt;线性数据结构&lt;/h3&gt;

&lt;p&gt;线性数据结构包括: 栈，队列，双端队列，列表。&lt;br /&gt;
线性是因为存在两端，左/右，或者前/后，或者顶/底。&lt;br /&gt;
线性数据结构的差别在于数据添加/删除的方式。线性数据结构可以组合来解决很多难题。&lt;/p&gt;

&lt;h3 id=&#34;stack&#34;&gt;Stack&lt;/h3&gt;

&lt;p&gt;LIFO， Last In, First Out. 先进后出，后进先出。&lt;br /&gt;
Stack定义的抽象数据结构，见原文。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Stack:
     def __init__(self):
         self.items = []

     def isEmpty(self):
         return self.items == []

     def push(self, item):
         self.items.append(item)

     def pop(self):
         return self.items.pop()

     def peek(self):
         return self.items[len(self.items)-1]

     def size(self):
         return len(self.items)

s=Stack()

print(s.isEmpty())
s.push(4)
s.push(&#39;dog&#39;)
print(s.peek())
s.push(True)
print(s.size())
print(s.isEmpty())
s.push(8.4)
print(s.pop())
print(s.pop())
print(s.size())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python2 stack.py 
True
dog
3
False
8.4
True
2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ReadDigestOnPythonAlgorithm</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/26/readdigestonpythonalgorithm/</link>
      <pubDate>Mon, 26 Sep 2016 16:28:31 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/26/readdigestonpythonalgorithm/</guid>
      <description>

&lt;h3 id=&#34;目标&#34;&gt;目标&lt;/h3&gt;

&lt;p&gt;本节目标是:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 理解算法分析的重要性
* 能使用&amp;quot;Big-O&amp;quot;描述算法的执行时间
* 理解常用的Python数组和字典的&amp;quot;Big-O&amp;quot;执行时间
* 理解Python数据的实现是如何影响到算法分析的
* 理解如何对简单的Python程序进行性能基准测试
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;算法分析&#34;&gt;算法分析&lt;/h3&gt;

&lt;p&gt;典型问题是: 当两个程序解决了同一个问题，然而看起来有差别的时候，如何得知一种方案确实优
于另一种？&lt;br /&gt;
理解：算法是用于解决针对某种输入的黑盒实现。某种算法可能针对多种不同程序，这取决于程序
的编写者及编程时使用的编程语言。&lt;/p&gt;

&lt;h4 id=&#34;程序对比&#34;&gt;程序对比&lt;/h4&gt;

&lt;p&gt;两种累加器的实现：&lt;/p&gt;

&lt;p&gt;清晰、明了的实现:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def sumOfN(n):
   theSum = 0
   for i in range(1,n+1):
       theSum = theSum + i

   return theSum

print(sumOfN(10))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;糟糕的实现:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def foo(tom):
    fred = 0
    for bill in range(1,tom+1):
       barney = bill
       fred = fred + barney

    return fred

print(foo(10))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么糟糕？ 考虑到程序的可读性。&lt;/p&gt;

&lt;h4 id=&#34;算法分析关注点&#34;&gt;算法分析关注点&lt;/h4&gt;

&lt;p&gt;关注点在于基于对计算资源的量化，以评价算法的好坏。比较两种不同算法，评价出其优劣。譬如
，如果一种算法在解决同一问题时使用了比另一种算法少得多的计算资源时，我们可以说该种算法
较为优秀。&lt;/p&gt;

&lt;p&gt;量化指标: A. 基于该算法在解决问题时所需要用到的内存大小来量化。B. 基于该算法所需的执行
时间来量化。（算法的执行时间/运行时间）.&lt;/p&gt;

&lt;p&gt;用于量化函数&lt;code&gt;sunOfN&lt;/code&gt;的算法优劣，我们可以使用benchmark。该benchmark使用python的time模块
。用于计算该程序的执行时间.&lt;/p&gt;

&lt;h4 id=&#34;benchmark&#34;&gt;BenchMark&lt;/h4&gt;

&lt;p&gt;BenchMark求和程序:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import time

def sumOfN2(n):
   start = time.time()

   theSum = 0
   for i in range(1,n+1):
      theSum = theSum + i

   end = time.time()

   return theSum,end-start

for i in range(5):
   print(&amp;quot;Sum is %d required %10.7f seconds&amp;quot;%sumOfN2(10000))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python2 bench.py
Sum is 50005000 required  0.0014350 seconds
Sum is 50005000 required  0.0013280 seconds
Sum is 50005000 required  0.0012429 seconds
Sum is 50005000 required  0.0012109 seconds
Sum is 50005000 required  0.0012770 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更改累加数的大小(10,10000,1000000?)，可以看出程序执行时间的变化。&lt;/p&gt;

&lt;p&gt;优化过后的算法，可以使用公式: &lt;code&gt;sum = (n)*(n+1)/2&lt;/code&gt;来快速求累加值，代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import time

def sumOfN3(n):
   start = time.time()

   theSum = 0
   theSum = (n*(n+1))/2

   end = time.time()

   return theSum,end-start

print(&amp;quot;Sum is %d required %10.7f seconds&amp;quot;%sumOfN3(10))
print(&amp;quot;Sum is %d required %10.7f seconds&amp;quot;%sumOfN3(10000))
print(&amp;quot;Sum is %d required %10.7f seconds&amp;quot;%sumOfN3(100000))
print(&amp;quot;Sum is %d required %10.7f seconds&amp;quot;%sumOfN3(1000000))
print(&amp;quot;Sum is %d required %10.7f seconds&amp;quot;%sumOfN3(10000000))
print(&amp;quot;Sum is %d required %10.7f seconds&amp;quot;%sumOfN3(100000000))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python2 bench2.py
Sum is 55 required  0.0000019 seconds
Sum is 50005000 required  0.0000000 seconds
Sum is 5000050000 required  0.0000010 seconds
Sum is 500000500000 required  0.0000012 seconds
Sum is 50000005000000 required  0.0000010 seconds
Sum is 5000000050000000 required  0.0000000 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BenchMark告诉我们的：直观的来看，使用迭代干的活更多，因而花费的时间更长。
随着N增大，迭代所需要花费的时间也随之增长。然而，这可能会导致问题，&lt;code&gt;sumOfN3&lt;/code&gt;
在老旧架构的电脑上运行时，可能会花费更长的时间。&lt;/p&gt;

&lt;p&gt;BenchMark提供给我们观察运行时间的方法，然而它取决于实际机器的运行情况、编程
语言、编译器等等诸多要素。而对于算法本身优劣而言，我们需要一种脱离于以上这些
制约要素的衡量方法。这种衡量方法应该仅仅针对于算法本身，在不同算法的实现之间
找寻出其优劣性。&lt;/p&gt;

&lt;h3 id=&#34;big-o表示法&#34;&gt;Big-O表示法&lt;/h3&gt;

&lt;p&gt;如果需要独立于程序或者计算机等制约要素来衡量算法的效率，则需要量化出该种算法
所需要执行的步骤或操作。如果这些步骤被视为计算的基本单元，那么一种算法的执行时间
则可以被表述为解决此问题所需的步骤个数。决定出一种恰当的计算基本单元是衡量算法时
的难点之一，且取决于该算法是如何被实现的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sumOfN&lt;/code&gt;的实现为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theSum = 0
theSum = theSum + i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可被描述为T(n) = 1+n, 可被解读为&amp;rdquo;T(n)是用来解决问题的时间，大小为n，1+n步&amp;rdquo;&lt;/p&gt;

&lt;p&gt;按照上述描述，不难理解累加到100,000的执行时间要大于累加到1,000的时间。&lt;/p&gt;

&lt;p&gt;计算机科学家对分析方法会更进一步，当问题变大时，T(n)的某些部分会主导其他部分。
这种占主导部分的行为将用于算法优劣的比较。量级函数描述了T(n)中随着n增加而
增长最快的部分。量级函数通常被称之为Big-O表示法。O(f(n)).&lt;/p&gt;

&lt;p&gt;T(n)=1+n中，当n增大时，1可以被忽略，因而执行时间就是O(n). 1也是很重要的，然而随着
n的增大，没有1计算结果也会近似于n.&lt;/p&gt;

&lt;p&gt;再比如T(n) = 5n^2 + 27n + 1005, 在n大小为1或2时，1005常量主导，然而随着n的增大
很显然n^2会占主导地位，以至于系数5都可以被忽略，所以T(n)的Big-O表示为O(n^2).&lt;/p&gt;

&lt;p&gt;算法执行时，会有最坏情况和平均情况。算法的表现和特定的数据集有关系。一般情况下
会处于两种极端之间，即处于平均情况。&lt;/p&gt;

&lt;p&gt;截图，常用的Big-O函数列表&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_09_26_20_43_34_574x350.jpg&#34; alt=&#34;/images/2016_09_26_20_43_34_574x350.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;各种函数列表的图示:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_09_26_20_44_32_780x553.jpg&#34; alt=&#34;/images/2016_09_26_20_44_32_780x553.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;n不大时，各种算法优劣相差不大，然而n增大时，很容易看到各自之间的差别。&lt;/p&gt;

&lt;p&gt;实际分析, T(n)=3+3n^2+2n+1=3n^2+2n+4.&lt;/p&gt;

&lt;p&gt;查看指数，我们容易得到n^2处于主导地位，因而算法的复杂度应该用O(n^2)来表示。注意其他部分
包括系数都可以随着n的增大而被忽略。&lt;/p&gt;

&lt;p&gt;图示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_09_26_20_52_24_781x565.jpg&#34; alt=&#34;/images/2016_09_26_20_52_24_781x565.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;字谜检测例子&#34;&gt;字谜检测例子&lt;/h3&gt;

&lt;p&gt;看两个字符串中蕴含的单个字符是否相同，例如&lt;code&gt;heart&lt;/code&gt;和&lt;code&gt;earth&lt;/code&gt;是相同的。具体的代码实现如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def anagramSolution1(s1,s2):
    alist = list(s2)

    pos1 = 0
    stillOK = True

    while pos1 &amp;lt; len(s1) and stillOK:
        pos2 = 0
        found = False
        while pos2 &amp;lt; len(alist) and not found:
            if s1[pos1] == alist[pos2]:
                found = True
            else:
                pos2 = pos2 + 1

        if found:
            alist[pos2] = None
        else:
            stillOK = False

        pos1 = pos1 + 1

    return stillOK

print(anagramSolution1(&#39;abced&#39;,&#39;dcbae&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在s1中的n个字符，将触发对s2中的n个字符的迭代。也就是说，s2中的n个字符将被访问一次，
以匹配s1中的任一字符。O(n^2)为其复杂度。&lt;/p&gt;

&lt;p&gt;改进后的方案，先排序，后比较。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def anagramSolution2(s1,s2):
    alist1 = list(s1)
    alist2 = list(s2)

    alist1.sort()
    alist2.sort()

    pos = 0
    matches = True

    while pos &amp;lt; len(s1) and matches:
        if alist1[pos]==alist2[pos]:
            pos = pos + 1
        else:
            matches = False

    return matches

print(anagramSolution2(&#39;abcde&#39;,&#39;edcba&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看上去n次比较就够了，似乎应该是O(n)，然而排序需要算法复杂度。排序通常有O(n^2)或是
O(nlogn)。因而这个例子由排序的复杂度来决定。&lt;/p&gt;

&lt;p&gt;第三种方法是穷举，Brute Force（蛮力)。我们用s1的字符，生成所有可能的字符串，然后看
s2是否在这些字符串中。则第一个位置有n种可能，紧接着n-1,n-2等等，结果是n的阶乘。&lt;/p&gt;

&lt;p&gt;n!远大于2^n，譬如如果s1有20个字符，那么有20！种可能结果，用普通家用计算机，不太现实。
因而穷举在这里不符合。&lt;/p&gt;

&lt;p&gt;第四种方法，对字符计数，而后对计数后的结果比较。因为仅仅有26个字符，因而用一个26长度
的数组来计算就好了。&lt;/p&gt;

&lt;p&gt;代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def anagramSolution4(s1,s2):
    c1 = [0]*26
    c2 = [0]*26

    for i in range(len(s1)):
        pos = ord(s1[i])-ord(&#39;a&#39;)
        c1[pos] = c1[pos] + 1

    for i in range(len(s2)):
        pos = ord(s2[i])-ord(&#39;a&#39;)
        c2[pos] = c2[pos] + 1

    j = 0
    stillOK = True
    while j&amp;lt;26 and stillOK:
        if c1[j]==c2[j]:
            j = j + 1
        else:
            stillOK = False

    return stillOK

print(anagramSolution4(&#39;apple&#39;,&#39;pleap&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没有嵌套的循环，首先用两个迭代数出字符数。第3个循环则是比较两个数字的列表，看是否
相等。因而最终的次数是2n+26次，则可以判断出是否是字谜。算法的复杂度是O(n)&lt;/p&gt;

&lt;p&gt;对空间的要求，最后的解决方案是线性时间的，但是需要使用到额外的空间来存储两个列表。
牺牲了空间，换来了时间。&lt;/p&gt;

&lt;p&gt;很多时候需要考虑空间和时间，例如，如果比较UTF字符，则需要考虑到是否可以用这种方法。&lt;/p&gt;

&lt;h3 id=&#34;列表&#34;&gt;列表&lt;/h3&gt;

&lt;p&gt;python中列表的算法复杂度:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import timeit
from timeit import Timer
def test1():
    l = []
    for i in range(1000):
        l = l + [i]

def test2():
    l = []
    for i in range(1000):
        l.append(i)

def test3():
    l = [i for i in range(1000)]

def test4():
    l = list(range(1000))

t1 = Timer(&amp;quot;test1()&amp;quot;, &amp;quot;from __main__ import test1&amp;quot;)
print(&amp;quot;concat &amp;quot;,t1.timeit(number=1000), &amp;quot;milliseconds&amp;quot;)
t2 = Timer(&amp;quot;test2()&amp;quot;, &amp;quot;from __main__ import test2&amp;quot;)
print(&amp;quot;append &amp;quot;,t2.timeit(number=1000), &amp;quot;milliseconds&amp;quot;)
t3 = Timer(&amp;quot;test3()&amp;quot;, &amp;quot;from __main__ import test3&amp;quot;)
print(&amp;quot;comprehension &amp;quot;,t3.timeit(number=1000), &amp;quot;milliseconds&amp;quot;)
t4 = Timer(&amp;quot;test4()&amp;quot;, &amp;quot;from __main__ import test4&amp;quot;)
print(&amp;quot;list range &amp;quot;,t4.timeit(number=1000), &amp;quot;milliseconds&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(&#39;concat &#39;, 1.8388030529022217, &#39;milliseconds&#39;)
(&#39;append &#39;, 0.09388995170593262, &#39;milliseconds&#39;)
(&#39;comprehension &#39;, 0.042823076248168945, &#39;milliseconds&#39;)
(&#39;list range &#39;, 0.01230001449584961, &#39;milliseconds&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;concate的结果为O(k)，k为数组的大小。&lt;/p&gt;

&lt;p&gt;算法复杂度:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Operation 	Big-O Efficiency
index [] 	O(1)
index assignment 	O(1)
append 	O(1)
pop() 	O(1)
pop(i) 	O(n)
insert(i,item) 	O(n)
del operator 	O(n)
iteration 	O(n)
contains (in) 	O(n)
get slice [x:y] 	O(k)
del slice 	O(n)
set slice 	O(n+k)
reverse 	O(n)
concatenate 	O(k)
sort 	O(n log n)
multiply 	O(nk)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pop()与pop(n)的例子:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from timeit import Timer
import timeit
popzero = Timer(&amp;quot;x.pop(0)&amp;quot;,
                &amp;quot;from __main__ import x&amp;quot;)
popend = Timer(&amp;quot;x.pop()&amp;quot;,
               &amp;quot;from __main__ import x&amp;quot;)
print(&amp;quot;pop(0)   pop()&amp;quot;)
for i in range(1000000,100000001,1000000):
    x = list(range(i))
    pt = popend.timeit(number=1000)
    x = list(range(i))
    pz = popzero.timeit(number=1000)
    print(&amp;quot;%15.5f, %15.5f&amp;quot; %(pz,pt))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python2 timer.py 
pop(0)   pop()
        1.39908,         0.00019
        2.87106,         0.00018
        4.65139,         0.00018
        6.42484,         0.00018
        7.80698,         0.00018
        9.34029,         0.00016
       10.97498,         0.00017
       12.16070,         0.00018
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;字典&#34;&gt;字典&lt;/h3&gt;

&lt;p&gt;算法复杂度如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;operation 	Big-O Efficiency
copy 	O(n)
get item 	O(1)
set item 	O(1)
delete item 	O(1)
contains (in) 	O(1)
iteration 	O(n)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import timeit
import random

for i in range(10000,1000001,20000):
    t = timeit.Timer(&amp;quot;random.randrange(%d) in x&amp;quot;%i,
                     &amp;quot;from __main__ import random,x&amp;quot;)
    x = list(range(i))
    lst_time = t.timeit(number=1000)
    x = {j:None for j in range(i)}
    d_time = t.timeit(number=1000)
    print(&amp;quot;%d,%10.3f,%10.3f&amp;quot; % (i, lst_time, d_time))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python2 dic.py 
10000,     0.160,     0.001
30000,     0.339,     0.001
50000,     0.570,     0.001
70000,     0.801,     0.001
90000,     1.037,     0.001
110000,     1.273,     0.001
130000,     1.470,     0.001
150000,     1.685,     0.001
170000,     1.961,     0.001
190000,     2.214,     0.001
210000,     2.574,     0.001
230000,     2.781,     0.001
250000,     3.094,     0.001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多算法复杂度，可以参考python官方文章:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.python.org/moin/TimeComplexity&#34;&gt;https://wiki.python.org/moin/TimeComplexity&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OnYoutube dl</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/08/onyoutube-dl/</link>
      <pubDate>Thu, 08 Sep 2016 12:00:39 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/08/onyoutube-dl/</guid>
      <description>

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;If you download a playlist on youtube, your download files would be renamed as
following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l -h /mnt/golang
total 4.8G
-rwxr--r-- 1 dash root  62M Sep  7 18:43 &#39;Aerospike Install Linux-bw0eipI7-4s.mp4&#39;
-rwxr--r-- 1 dash root 9.8M Sep  7 22:48 &#39;App Enginge Domains-rNI_PyNuS2o.mp4&#39;
-rwxr--r-- 1 dash root  28M Sep  7 21:52 &#39;General Overview of Networking &amp;amp; The
Internet-hZ7cX4fpMk4.mp4&#39;
-rwxr--r-- 1 dash root  51M Sep  7 22:25 &#39;Golang Aerospike-symvVMJlC3g.mp4&#39;
-rwxr--r-- 1 dash root 134M Sep  7 20:19 &#39;Golang AJAX-UkEuYXi36o8.mp4&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Manually download the playlist.txt from the webpage, something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /mnt/golang/playlist.txt
Who uses golang
Installing Golang
Golang Webstorm &amp;amp; Golang Atom
Golang Hello World - Part 1 of 2
Golang Hello World - Part 2 of 2
Golang variables and scope
Golang Go Get
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use following shell script for rename all of the downloaded files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat rr.sh
#!/bin/bash
i=0
while IFS=&#39;&#39; read -r line || [[ -n &amp;quot;$line&amp;quot; ]]; do
    let i++
    prefix=`printf &amp;quot;%04d-&amp;quot; $i`
    content=`ls | grep &amp;quot;$line-&amp;quot;`
    cp &amp;quot;$content&amp;quot; ../golang1/&amp;quot;$prefix$line&amp;quot;.mp4
done &amp;lt; ./playlist.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your renamed files will be in the ../golang1 directory, now the name is listed as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l ../golang1   
total 4984936
-rwxr--r-- 1 dash root  28352757 Sep  8 11:52 &#39;0001-Who uses golang.mp4&#39;
-rwxr--r-- 1 dash root  51195540 Sep  8 11:52 &#39;0002-Installing Golang.mp4&#39;
-rwxr--r-- 1 dash root  27507302 Sep  8 11:52 &#39;0003-Golang Webstorm &amp;amp; Golang Atom.mp4&#39;
-rwxr--r-- 1 dash root  22430385 Sep  8 11:52 &#39;0004-Golang Hello World - Part 1 of 2.mp4&#39;
-rwxr--r-- 1 dash root  37552977 Sep  8 11:52 &#39;0005-Golang Hello World - Part 2 of 2.mp4&#39;
-rwxr--r-- 1 dash root  27800500 Sep  8 11:52 &#39;0006-Golang variables and scope.mp4&#39;
-rwxr--r-- 1 dash root  19457050 Sep  8 11:52 &#39;0007-Golang Go Get.mp4&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>RHEL Working Tips</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/05/rhel-working-tips/</link>
      <pubDate>Mon, 05 Sep 2016 10:42:24 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/05/rhel-working-tips/</guid>
      <description>

&lt;h3 id=&#34;subscrition-manager&#34;&gt;Subscrition Manager&lt;/h3&gt;

&lt;p&gt;After install RHEL7, we could register it first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# subscription-manager register
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List and register with the available pools:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# subscription-manager list --available --all
# subscription-manager subscribe --pool=XXXXXXXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After registration, we could see all of the registered repos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ subscription-manager repos --list
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;syncing-repos&#34;&gt;Syncing Repos&lt;/h3&gt;

&lt;p&gt;Because the openstack repo is the paid channel, skip for other options.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WorkTipsOnOpenStackDeployment</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/31/worktipsonopenstackdeployment/</link>
      <pubDate>Wed, 31 Aug 2016 17:29:36 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/31/worktipsonopenstackdeployment/</guid>
      <description>

&lt;h3 id=&#34;repository-sync&#34;&gt;Repository Sync&lt;/h3&gt;

&lt;p&gt;The current version of OpenStack could be found in:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://releases.openstack.org/&#34;&gt;https://releases.openstack.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mitaka is the recent version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Mitaka	Current stable release, security-supported	2016-04-07	2017-04-10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ubuntu repository could be found at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ubuntu-cloud.archive.canonical.com/ubuntu/dists/&#34;&gt;http://ubuntu-cloud.archive.canonical.com/ubuntu/dists/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use apt-mirror for syncing them. Current the ubuntu1404 is well supported.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OnFreeNASAndCloudStack</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/23/onfreenasandcloudstack/</link>
      <pubDate>Tue, 23 Aug 2016 18:06:13 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/23/onfreenasandcloudstack/</guid>
      <description>

&lt;h3 id=&#34;iscsi-service&#34;&gt;iscsi service&lt;/h3&gt;

&lt;p&gt;Enable it via:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_23_18_06_58_278x449.jpg&#34; alt=&#34;/images/2016_08_23_18_06_58_278x449.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Configuration steps could be refers to:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://purplepalmdash.github.io/2015/07/17/iscsi-installed-debian-jessie/&#34;&gt;http://purplepalmdash.github.io/2015/07/17/iscsi-installed-debian-jessie/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;integration&#34;&gt;Integration&lt;/h3&gt;

&lt;p&gt;Discover the iscsi storage via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# iscsiadm -m discovery -t st -p 192.168.10.5:3260
192.168.10.5:3260,-1 iqn.xxxxxx.iscsi:cloudstackiscsi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you could add it into cloudstack via:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_23_20_25_24_433x634.jpg&#34; alt=&#34;/images/2016_08_23_20_25_24_433x634.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add a service offering which tag is &lt;code&gt;iscsi&lt;/code&gt;, then start the instance with this tagged
service offering.&lt;/p&gt;

&lt;h3 id=&#34;test&#34;&gt;Test&lt;/h3&gt;

&lt;p&gt;Find and login with following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# iscsiadm -m discovery -t st -p 192.168.10.5:3260
# iscsiadm -m node -T iqn.xxxxx.iscsi:forlinux -p 192.168.10.5:3260 -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use fio for testing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# fio --ioengine=libaio --direct=1 --gtod_reduce=1 --name=test --filename=/dev/sdb
--bs=4k --iodepth=2 --size=125G --readwrite=randread --runtime=1800
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>OnXenServerBridgeWorkingTips2</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/19/onxenserverbridgeworkingtips2/</link>
      <pubDate>Fri, 19 Aug 2016 14:37:59 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/19/onxenserverbridgeworkingtips2/</guid>
      <description>

&lt;h3 id=&#34;virtualbox-setup&#34;&gt;VirtualBox Setup&lt;/h3&gt;

&lt;p&gt;Define a virtual machine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_19_14_36_05_517x355.jpg&#34; alt=&#34;/images/2016_08_19_14_36_05_517x355.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Use 7G of 8G memory for this VM:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_19_14_36_27_520x358.jpg&#34; alt=&#34;/images/2016_08_19_14_36_27_520x358.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Create a new disk(200G), choose VDI, Dynamically allocated, And specify the location
for storing it.&lt;/p&gt;

&lt;p&gt;Now create the virtual machine, and configure its networking like following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_19_14_45_56_691x410.jpg&#34; alt=&#34;/images/2016_08_19_14_45_56_691x410.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;CPUs, we allocated 4:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_19_14_48_55_532x197.jpg&#34; alt=&#34;/images/2016_08_19_14_48_55_532x197.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And also the acceleration configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_19_14_50_06_380x171.jpg&#34; alt=&#34;/images/2016_08_19_14_50_06_380x171.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Storage Configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_19_14_51_57_544x202.jpg&#34; alt=&#34;/images/2016_08_19_14_51_57_544x202.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For saving the resources, disable USB/Audio.&lt;/p&gt;

&lt;p&gt;Now insert the XenServer Installation CDROM, and install it.&lt;/p&gt;

&lt;h3 id=&#34;xenserver-configuration&#34;&gt;XenServer Configuration&lt;/h3&gt;

&lt;p&gt;IP Address, for bridged networking:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_19_14_56_46_486x268.jpg&#34; alt=&#34;/images/2016_08_19_14_56_46_486x268.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;DNS Configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_19_14_58_02_434x249.jpg&#34; alt=&#34;/images/2016_08_19_14_58_02_434x249.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;NTP Server Configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server 0.cn.pool.ntp.org
server 0.asia.pool.ntp.org
server 2.asia.pool.ntp.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Install the XenServer.&lt;/p&gt;

&lt;p&gt;After installation, apply xs patches.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OnXenServerBridgeWorkingTips</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/18/onxenserverbridgeworkingtips/</link>
      <pubDate>Thu, 18 Aug 2016 19:29:45 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/18/onxenserverbridgeworkingtips/</guid>
      <description>

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;I will use XenServer for testing, while I made a vagrant box of XenServer 6.5, it could
work properly in seperated networking, so following I will try to setup a bridged
&amp;ldquo;XenServer&amp;rdquo; which will acts like a real physical machine.&lt;/p&gt;

&lt;h3 id=&#34;vagrantfile&#34;&gt;Vagrantfile&lt;/h3&gt;

&lt;p&gt;The configuration part is listed as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # csagentxen65 node.
  # Add one networking, modify hostname, define memory, CPU cores.
  config.vm.define :csagentxen65 do |csagentxen65|
    csagentxen65.vm.box = &amp;quot;Xen65Box&amp;quot;
    csagentxen65.vm.boot_timeout = &#39;36000&#39;
    csagentxen65.vm.hostname = CLOUDSTACK_AGENT_HOSTNAME
    csagentxen65.vm.network :public_network, 
	    :dev =&amp;gt; &amp;quot;br0&amp;quot;,
	    :mode =&amp;gt; &amp;quot;bridge&amp;quot;,
	    :type =&amp;gt; &amp;quot;bridge&amp;quot;,
	    :ip =&amp;gt; &amp;quot;192.168.10.3&amp;quot;
    # Disable mounting of vagrant folder as it&#39;s not supported on xenserver
    csagentxen65.vm.synced_folder &amp;quot;.&amp;quot;, &amp;quot;/vagrant&amp;quot;, disabled: true
    csagentxen65.vm.provider :libvirt do |domain|
      domain.memory = 8192
      domain.cpus = 4
      domain.storage_pool_name = &#39;XenStoragePool&#39;
      domain.nested = true
      domain.cpu_mode = &#39;host-passthrough&#39;
      domain.nic_model_type = &#39;e1000&#39;
      domain.management_network_mac = &amp;quot;08:00:27:1D:90:A8&amp;quot;
    end
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we used our newly created storage pool, I use virt-manager for creating a new
storage pool, which is in a seprated disk, could gain much more IOPS.&lt;/p&gt;

&lt;h3 id=&#34;bug-fix&#34;&gt;Bug-Fix&lt;/h3&gt;

&lt;p&gt;vagrant-libvirt will create 2 ethernet port, while the default one is xenbr0, but we
want the xenbr1 be the management port.&lt;/p&gt;

&lt;p&gt;Gain a administration shell:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_18_19_34_41_498x510.jpg&#34; alt=&#34;/images/2016_08_18_19_34_41_498x510.jpg&#34; /&gt;&lt;br /&gt;
Enter following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ifconfig eth1 netmask 255.255.0.0
# route add default gw 192.168.0.xxx eth1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can run ansible-playbook against the XenServer, but it will stuck.&lt;/p&gt;

&lt;p&gt;Now manually configure eth1&amp;rsquo;s netmask and its gateway. ansible-playbook could be run
properly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CloudStackSiteToSiteVPNHowTo</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/10/cloudstacksitetositevpnhowto/</link>
      <pubDate>Wed, 10 Aug 2016 14:29:27 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/10/cloudstacksitetositevpnhowto/</guid>
      <description>

&lt;p&gt;Recently I am investigating the VPN solution on company&amp;rsquo;s private cloud. Some guys
insist on setting up the site-to-site VPN on Juniper&amp;rsquo;s firewall(SR240), but I think
this is a piece of shit. Setting up the VPN on physical firewall will lose the &lt;code&gt;ease of
use&lt;/code&gt; and &lt;code&gt;ease of configuration&lt;/code&gt; of CloudStack&amp;rsquo;s built-in VPN functionality, so
following are the steps for me to investigate the CloudStack&amp;rsquo;s site-to-site VPN among
different vpcs. Follow the guide line you will get two or more geographical independent
sites working as in a big ethernet.&lt;/p&gt;

&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;The environment is pretty simple, you need 2 PCs(Or more) for experiment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_14_45_50_603x334.jpg&#34; alt=&#34;/images/2016_08_10_14_45_50_603x334.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Working Machine 1&amp;rsquo;s configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz
24 G Memory
1000M Ethernet Card
More than 20G Free disk    
ArchLinux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Working Machine 2&amp;rsquo;s configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Intel(R) Core(TM) i3 CPU         540  @ 3.07GHz
8 G Memory
1000M Ethernet Card
More than 20G Free disk    
ArchLinux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure the nested KVM is configurated in both machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ systool -m kvm_intel -v | grep nested
    nested              = &amp;quot;Y&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also make sure you have a Linux Bridge(Not the physical card or OpenVswitch Bridge!).&lt;/p&gt;

&lt;h3 id=&#34;testing-vm&#34;&gt;Testing VM&lt;/h3&gt;

&lt;p&gt;We create two virtual machines for installing cloudstack all in one environment, like
following picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_14_53_23_652x427.jpg&#34; alt=&#34;/images/2016_08_10_14_53_23_652x427.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Virtual Machine 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 core(host-passthrough CPU)
8G Memory
200G Disk
Bridged to br0
CentOS 6.8 X86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Virtual Machine 2(Because working Machine 2 only have 8G memory, we allocated 7G to
it):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 core(host-passthrough CPU)
7G Memory
200G Disk
Bridged to br0
CentOS 6.8 X86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The network configuration is listed as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_14_56_33_689x188.jpg&#34; alt=&#34;/images/2016_08_10_14_56_33_689x188.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Specified &lt;code&gt;shared&lt;/code&gt; is very important, or you won&amp;rsquo;t get networking works.&lt;/p&gt;

&lt;p&gt;We named VirtualMachine1 to &lt;code&gt;vpn1452&lt;/code&gt;, VirtualMachine2 to &lt;code&gt;vpn2452&lt;/code&gt;, because we do the
investigation based on CloudStack 4.5.2 version.&lt;/p&gt;

&lt;h3 id=&#34;vpn1452&#34;&gt;vpn1452&lt;/h3&gt;

&lt;p&gt;vpn1452&amp;rsquo;s IP Address is &lt;code&gt;172.16.0.2&lt;/code&gt;, we started from the CloudStack management
webpage:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_45_14_487x432.jpg&#34; alt=&#34;/images/2016_08_10_15_45_14_487x432.jpg&#34; /&gt;&lt;br /&gt;
Click &lt;code&gt;I have used cloudstack before&lt;/code&gt;, continue to configurate the environment.&lt;/p&gt;

&lt;p&gt;Change the options of following:&lt;/p&gt;

&lt;p&gt;Secondary storage allow(value: 172.16.0.0/16):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_47_49_1140x252.jpg&#34; alt=&#34;/images/2016_08_10_15_47_49_1140x252.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Local Storage, systemvm.use to true:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_49_05_1022x371.jpg&#34; alt=&#34;/images/2016_08_10_15_49_05_1022x371.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Save the configuration via restart the cloudstack-management service &lt;code&gt;service
cloudstack-management restart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a new zone(Select Advanced zone):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_51_37_642x407.jpg&#34; alt=&#34;/images/2016_08_10_15_51_37_642x407.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Zone Name and DNS:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_52_40_417x464.jpg&#34; alt=&#34;/images/2016_08_10_15_52_40_417x464.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Select hypervisor and enable local storages:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_53_32_472x345.jpg&#34; alt=&#34;/images/2016_08_10_15_53_32_472x345.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Public Networking configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_55_01_614x108.jpg&#34; alt=&#34;/images/2016_08_10_15_55_01_614x108.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hit add and hit next:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_55_38_637x132.jpg&#34; alt=&#34;/images/2016_08_10_15_55_38_637x132.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A New pod named &lt;code&gt;pod1452&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_56_46_472x404.jpg&#34; alt=&#34;/images/2016_08_10_15_56_46_472x404.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Guest Traffic :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_57_24_367x202.jpg&#34; alt=&#34;/images/2016_08_10_15_57_24_367x202.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cluster Name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_58_05_495x100.jpg&#34; alt=&#34;/images/2016_08_10_15_58_05_495x100.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add Host(172.16.0.2):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_58_57_428x294.jpg&#34; alt=&#34;/images/2016_08_10_15_58_57_428x294.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Secondary storage:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_15_59_44_433x211.jpg&#34; alt=&#34;/images/2016_08_10_15_59_44_433x211.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hit next and finally enable the zone:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_01_22_508x449.jpg&#34; alt=&#34;/images/2016_08_10_16_01_22_508x449.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Wait for a while to see the infrastucture works properly.&lt;/p&gt;

&lt;h4 id=&#34;create-vpc&#34;&gt;Create VPC&lt;/h4&gt;

&lt;p&gt;Hit Network-&amp;gt; VPC, &lt;code&gt;Add VPC&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_06_21_760x141.jpg&#34; alt=&#34;/images/2016_08_10_16_06_21_760x141.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add a new VPC like following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_07_07_405x442.jpg&#34; alt=&#34;/images/2016_08_10_16_07_07_405x442.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Wait for VR start up, when VR becomes ready, add a new tier via clicking &lt;code&gt;Configure&lt;/code&gt;
button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_08_39_662x145.jpg&#34; alt=&#34;/images/2016_08_10_16_08_39_662x145.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_09_35_377x324.jpg&#34; alt=&#34;/images/2016_08_10_16_09_35_377x324.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Your new vpc and tier will be viewed as following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_10_14_712x412.jpg&#34; alt=&#34;/images/2016_08_10_16_10_14_712x412.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add an instance which in the new tier,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_11_37_638x254.jpg&#34; alt=&#34;/images/2016_08_10_16_11_37_638x254.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Examine the instance&amp;rsquo;s ip configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_13_21_340x313.jpg&#34; alt=&#34;/images/2016_08_10_16_13_21_340x313.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;vpn2452&#34;&gt;vpn2452&lt;/h3&gt;

&lt;p&gt;The steps are mainly the same as in vpn1452, but with the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zone name: zone2452
public: 10.168.72.110~10.168.72.129
podname: pod2452
pod ip: 172.16.0.130~172.16.0.149
host: 172.16.0.3
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;vpc2452&#34;&gt;vpc2452&lt;/h4&gt;

&lt;p&gt;Configuration for vpc2452:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_29_05_383x430.jpg&#34; alt=&#34;/images/2016_08_10_16_29_05_383x430.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;tier 2452:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_30_21_398x340.jpg&#34; alt=&#34;/images/2016_08_10_16_30_21_398x340.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now use a instance for testing the tier2452:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_34_15_456x306.jpg&#34; alt=&#34;/images/2016_08_10_16_34_15_456x306.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Without site-to-site vpn, testing ping:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_35_24_380x180.jpg&#34; alt=&#34;/images/2016_08_10_16_35_24_380x180.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;site-to-site-vpn&#34;&gt;Site-to-Site VPN&lt;/h3&gt;

&lt;p&gt;We will configure both side, first we create vpc1452:&lt;/p&gt;

&lt;h4 id=&#34;vpc1452&#34;&gt;vpc1452&lt;/h4&gt;

&lt;p&gt;Fist use following command for generating the key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# dd if=/dev/random count=16 bs=1 | xxd -ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Record the key, for later on vpc2452 we will use the same key for configurating the
site-to-site VPN.&lt;/p&gt;

&lt;p&gt;Click vpc&amp;rsquo;s configure button, to get the configuration window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_43_48_600x145.jpg&#34; alt=&#34;/images/2016_08_10_16_43_48_600x145.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;code&gt;site-to-site VPNS&lt;/code&gt;, a VPN Gateway will be generated:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_44_51_568x151.jpg&#34; alt=&#34;/images/2016_08_10_16_44_51_568x151.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Create a VPN Customer Gateway, like following configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_46_14_352x511.jpg&#34; alt=&#34;/images/2016_08_10_16_46_14_352x511.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice, the Gateway&lt;code&gt;10.168.72.112&lt;/code&gt; is generated in the same procedure in vpn2452 side.
the CIDR list is the vpn2452 side&amp;rsquo;s tier ip ranges, ipsec preshared-key is gerated via
&lt;code&gt;dd&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;Now a new &lt;code&gt;vpnto2452&lt;/code&gt; vpn customer gateway is generated,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_48_17_661x142.jpg&#34; alt=&#34;/images/2016_08_10_16_48_17_661x142.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Back to vpc window, site-to-site vpn, create a new vpn connection:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_49_18_683x123.jpg&#34; alt=&#34;/images/2016_08_10_16_49_18_683x123.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The configuration for the VPN connection is listed as: notice we must select Passive:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_50_11_341x185.jpg&#34; alt=&#34;/images/2016_08_10_16_50_11_341x185.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now the created VPN Connection is like following, remains state &lt;code&gt;Disconnected&lt;/code&gt; because
it will be triggered via VPN2452&amp;rsquo;s dial-in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_51_16_692x152.jpg&#34; alt=&#34;/images/2016_08_10_16_51_16_692x152.jpg&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;vpc2452-1&#34;&gt;vpc2452&lt;/h4&gt;

&lt;p&gt;The vpc and &lt;code&gt;site-to-site VPNS&lt;/code&gt; configuration is the same as vpc1452, for VPN Customer
Gateway, the configuration is listed :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_57_50_364x533.jpg&#34; alt=&#34;/images/2016_08_10_16_57_50_364x533.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;a new VPN Customer Gateway is created as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_58_45_702x166.jpg&#34; alt=&#34;/images/2016_08_10_16_58_45_702x166.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then back to &lt;code&gt;site-to-site&lt;/code&gt; VPN connection, create a new VPN connection:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_16_59_41_393x216.jpg&#34; alt=&#34;/images/2016_08_10_16_59_41_393x216.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;DO NOT select passive, because this one will be activate the remote(vpc1452)&amp;rsquo;s VPN
connection.&lt;/p&gt;

&lt;p&gt;A new connection will be setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_17_00_48_734x210.jpg&#34; alt=&#34;/images/2016_08_10_17_00_48_734x210.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now the created instance in vpc2452 will get reach with the instance which runs in vpc1452:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_17_02_09_356x288.jpg&#34; alt=&#34;/images/2016_08_10_17_02_09_356x288.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_17_03_02_347x138.jpg&#34; alt=&#34;/images/2016_08_10_17_03_02_347x138.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can login to the VR for examing the ipsec processes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_17_04_17_604x317.jpg&#34; alt=&#34;/images/2016_08_10_17_04_17_604x317.jpg&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;back-to-vpc1452&#34;&gt;Back to vpc1452&lt;/h4&gt;

&lt;p&gt;Now the site-to-site vpn status has changed to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_10_17_05_27_766x177.jpg&#34; alt=&#34;/images/2016_08_10_17_05_27_766x177.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The cloudstack&amp;rsquo;s site-to-site VPN functionality is very easy to use. Use it we could
easily setup the connections between different VPCs across Internet.&lt;/p&gt;

&lt;p&gt;Later I will show how to setup the site-to-site VPN with OpenStack and other platforms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SendMessageToSlack</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/03/sendmessagetoslack/</link>
      <pubDate>Wed, 03 Aug 2016 09:55:58 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/03/sendmessagetoslack/</guid>
      <description>

&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;

&lt;p&gt;Mainly refers to:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://api.slack.com/incoming-webhooks&#34;&gt;https://api.slack.com/incoming-webhooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.pragbits.com/it/2015/02/09/slack-notifications-via-curl/&#34;&gt;http://blog.pragbits.com/it/2015/02/09/slack-notifications-via-curl/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;incomming-webhooks&#34;&gt;Incomming webhooks&lt;/h3&gt;

&lt;p&gt;Create a incoming webhooks in:&lt;br /&gt;
&lt;a href=&#34;https://skyruntime.slack.com/apps/new/A0F7XDUAZ-incoming-webhooks&#34;&gt;https://skyruntime.slack.com/apps/new/A0F7XDUAZ-incoming-webhooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_08_03_09_57_54_920x296.jpg&#34; alt=&#34;/images/2016_08_03_09_57_54_920x296.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After created the webhook use curl for sending out the direct message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -X POST --data-urlencode &#39;payload={&amp;quot;channel&amp;quot;: &amp;quot;#general&amp;quot;, &amp;quot;username&amp;quot;:
&amp;quot;webhookbot&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;This is posted to #general and comes from a bot named
webhookbot.&amp;quot;, &amp;quot;icon_emoji&amp;quot;: &amp;quot;:ghost:&amp;quot;}&#39;
https://hooks.slack.com/services/xxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wrap-the-message&#34;&gt;Wrap the message&lt;/h3&gt;

&lt;p&gt;In Bash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ proxychains4 curl -X POST --data-urlencode &#39;payload={&amp;quot;channel&amp;quot;: &amp;quot;#general&amp;quot;, &amp;quot;username&amp;quot;:
&amp;quot;webhookbot&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&#39;$1&#39;&amp;quot;, &amp;quot;icon_emoji&amp;quot;: &amp;quot;:ghost:&amp;quot;}&#39;
https://hooks.slack.com/services/xxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Turn it into a executable file under &lt;code&gt;bin&lt;/code&gt;, then you could use command like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ command1; sendSlack &#39;fcuk...&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using Packer For Building VM Templates</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/28/using-packer-for-building-vm-templates/</link>
      <pubDate>Thu, 28 Jul 2016 12:08:27 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/28/using-packer-for-building-vm-templates/</guid>
      <description>

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;Recently I am playing the jenkins and VM Templates, so I want to setup the CI(Continous
Integration) environment which could automatically finish the template building,
following are the tips on how to setup these environment and let everything working
together.&lt;/p&gt;

&lt;h3 id=&#34;using-makefile&#34;&gt;Using Makefile&lt;/h3&gt;

&lt;p&gt;boxcutter &lt;a href=&#34;https://github.com/boxcutter&#34;&gt;https://github.com/boxcutter&lt;/a&gt; has lots of
projects for packering the templates, directly clone them to local and run them, you
could get the standard vagrant box, which could be used via virtualbox/vmware/paralles.&lt;/p&gt;

&lt;p&gt;But what I wanna is the qemu images, or vhd files, which could be used under CloudStack/OpenStack, so I have to modify the Makefile and box system.&lt;/p&gt;

&lt;p&gt;Only build virtualbox, because we don&amp;rsquo;t have vmware/parallels hypervisor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#BUILDER_TYPES ?= vmware virtualbox parallels
BUILDER_TYPES := virtualbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add libvirt box definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PARALLELS_BOX_FILES := $(foreach box_filename, $(PARALLELS_BOX_FILENAMES), $(PARALLELS_BOX_DIR)/$(box_filename))
LIBVIRT_BOX_DIR ?= box/libvirt
LIBVIRT_TEMPLATE_FILENAMES = $(TEMPLATE_FILENAMES)
LIBVIRT_BOX_FILENAMES := $(LIBVIRT_TEMPLATE_FILENAMES:.json=$(BOX_SUFFIX))
LIBVIRT_BOX_FILES := $(foreach box_filename, $(LIBVIRT_BOX_FILENAMES), $(LIBVIRT_BOX_DIR)/$(box_filename))
BOX_FILES := $(LIBVIRT_BOX_FILES)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using qemu for building the templates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#box/virtualbox/%$(BOX_SUFFIX): %.json http/preseed.cfg
box/libvirt/%$(BOX_SUFFIX): %.json http/preseed.cfg
	bin/box build $&amp;lt; qemu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#all: build assure deliver
all: build

build: $(BOX_FILES)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now by &lt;code&gt;make&lt;/code&gt; you could make out the vagrant libvirt box.&lt;/p&gt;

&lt;h3 id=&#34;json-preseeding-and-scripts&#34;&gt;JSON, Preseeding and Scripts&lt;/h3&gt;

&lt;p&gt;Just some tips under this chapter during building.&lt;/p&gt;

&lt;h4 id=&#34;using-custom-mirror&#34;&gt;Using Custom Mirror&lt;/h4&gt;

&lt;p&gt;Following use &lt;code&gt;mirrors.aliyun.com/ubuntu&lt;/code&gt; for installation and use a apt-mirror proxy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Use mirror
d-i apt-setup/use_mirror boolean true
d-i     mirror/country          string manual
d-i mirror/protocol	string http
d-i mirror/http/hostname	string mirrors.aliyun.com
d-i mirror/http/directory	string /ubuntu
choose-mirror-bin mirror/http/proxy string http://192.168.1.69:3142/
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;partition-one-partition&#34;&gt;Partition(One Partition)&lt;/h4&gt;

&lt;p&gt;Only one partition which includes all of the filesystem(no swap partition):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Partition
d-i partman-auto/disk string /dev/vda
d-i partman-auto/method string regular
d-i partman-basicfilesystems/no_swap boolean false
d-i partman-auto/expert_recipe string root :: 1000 50 -1 ext4 \
     $primary{ } $bootable{ } method{ format } \
     format{ } use_filesystem{ } filesystem{ ext4 } \
     mountpoint{ / } \
    .
d-i partman-auto/choose_recipe select root
d-i partman/choose_partition select Finish partitioning and write changes to disk
d-i partman/confirm boolean true
d-i partman/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;permit-root-login-in&#34;&gt;Permit Root Login In&lt;/h4&gt;

&lt;p&gt;Change the default configuration of &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d-i preseed/late_command string \
in-target sed -i &#39;s/PermitRootLogin.*/PermitRootLogin yes/g&#39; /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;root-password&#34;&gt;Root Password&lt;/h4&gt;

&lt;p&gt;We can set the encrypted password or plain secret for root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Root password, either in clear text
#d-i passwd/root-password password engine
#d-i passwd/root-password-again password engine
# or encrypted using an MD5 hash.
d-i passwd/root-password-crypted password gowguowueogahwehoehjwouweouhow
d-i user-setup/allow-password-weak boolean true
d-i passwd/make-user boolean true  #Set true so we could make oridinary user. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While the encryted password could be generated via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using openssl passwd:
$ openssl passwd -1 &amp;quot;password here&amp;quot;
Using grub-crypt (you will be prompted to enter a password after running the command):
$ grub-crypt --md5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;packer-s-json-configuration&#34;&gt;Packer&amp;rsquo;s json configuration&lt;/h3&gt;

&lt;p&gt;The json configuration for importing qemu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
      &amp;quot;boot_command&amp;quot;: [
        &amp;quot;{{ user `boot_command_prefix` }}&amp;quot;,
        &amp;quot;/install/vmlinuz noapic &amp;quot;,
        &amp;quot;initrd=/install/initrd.gz &amp;quot;,
        &amp;quot;file=/floppy/{{ user `preseed` }} &amp;quot;,
        &amp;quot;debian-installer=en_US auto locale=en_US kbd-chooser/method=us &amp;quot;,
        &amp;quot;hostname={{ user `hostname` }} &amp;quot;,
        &amp;quot;grub-installer/bootdev=/dev/vda&amp;lt;wait&amp;gt; &amp;quot;,
        &amp;quot;fb=false debconf/frontend=noninteractive &amp;quot;,
        &amp;quot;keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA &amp;quot;,
        &amp;quot;keyboard-configuration/variant=USA console-setup/ask_detect=false &amp;quot;,
        &amp;quot;passwd/user-fullname={{ user `ssh_fullname` }} &amp;quot;,
        &amp;quot;passwd/user-password={{ user `ssh_password` }} &amp;quot;,
        &amp;quot;passwd/user-password-again={{ user `ssh_password` }} &amp;quot;,
        &amp;quot;passwd/username={{ user `ssh_username` }} &amp;quot;,
        &amp;quot;-- &amp;lt;enter&amp;gt;&amp;quot;
      ],
      &amp;quot;disk_size&amp;quot;: &amp;quot;{{ user `disk_size` }}&amp;quot;,
      &amp;quot;floppy_files&amp;quot;: [
        &amp;quot;http/{{ user `preseed` }}&amp;quot;
      ],
      &amp;quot;boot_wait&amp;quot;: &amp;quot;10s&amp;quot;,
      &amp;quot;headless&amp;quot;: &amp;quot;{{ user `headless` }}&amp;quot;,
      &amp;quot;iso_checksum&amp;quot;: &amp;quot;{{ user `iso_checksum` }}&amp;quot;,
      &amp;quot;iso_checksum_type&amp;quot;: &amp;quot;{{ user `iso_checksum_type` }}&amp;quot;,
      &amp;quot;iso_urls&amp;quot;: [
        &amp;quot;{{ user `iso_path` }}/{{ user `iso_name` }}&amp;quot;,
        &amp;quot;{{ user `iso_url` }}&amp;quot;
      ],
      &amp;quot;output_directory&amp;quot;: &amp;quot;output-{{ user `vm_name` }}-qemu-iso&amp;quot;,
      &amp;quot;shutdown_command&amp;quot;: &amp;quot;echo &#39;{{ user `ssh_password` }}&#39;|sudo -S shutdown -P now&amp;quot;,
      &amp;quot;ssh_password&amp;quot;: &amp;quot;{{ user `ssh_password` }}&amp;quot;,
      &amp;quot;ssh_username&amp;quot;: &amp;quot;{{ user `ssh_username` }}&amp;quot;,
      &amp;quot;ssh_wait_timeout&amp;quot;: &amp;quot;10000s&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;qemu&amp;quot;,
      &amp;quot;format&amp;quot;: &amp;quot;qcow2&amp;quot;,
      &amp;quot;disk_interface&amp;quot;: &amp;quot;virtio&amp;quot;,
      &amp;quot;accelerator&amp;quot;: &amp;quot;kvm&amp;quot;,
      &amp;quot;vm_name&amp;quot;: &amp;quot;{{user `vm_name`}}&amp;quot;
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Post-processors for generating vhd:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;post-processors&amp;quot;: [
    {
      &amp;quot;output&amp;quot;: &amp;quot;box/vhd/{{user `vm_name`}}-{{user `cm`}}{{user `cm_version`}}-{{user `version`}}&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;vhd&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Post-postcessors for generating box file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;post-processors&amp;quot;: [
    {
      &amp;quot;keep_input_artifact&amp;quot;: false,
      &amp;quot;output&amp;quot;: &amp;quot;box/{{.Provider}}/{{user `vm_name`}}-{{user `cm`}}{{user `cm_version`}}-{{user `version`}}.box&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;vagrant&amp;quot;,
      &amp;quot;vagrantfile_template&amp;quot;: &amp;quot;{{ user `vagrantfile_template` }}&amp;quot;
    }
  ],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some system which have lower memory, packer building will fail, because it will generating large
file under &lt;code&gt;/tmp&lt;/code&gt; directory, so we have to change the default PAKCER TMP via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir ./tmp
$ export PACKER_TMP=./tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By setting up the TMP file we could do building without any error.&lt;/p&gt;

&lt;h3 id=&#34;scripts&#34;&gt;scripts&lt;/h3&gt;

&lt;h4 id=&#34;network-manager-start-manually&#34;&gt;Network Manager Start Manually&lt;/h4&gt;

&lt;p&gt;By setting following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo echo &amp;quot;manual&amp;quot; | sudo tee /etc/init/network-manager.override
$ sudo /bin/sed -i &amp;quot;\$i sudo start network-manager&amp;quot; /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;upgrade&#34;&gt;Upgrade&lt;/h4&gt;

&lt;p&gt;For avoiding signature error, do following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# avoiding hashchecksum error. 
rm -rf /var/lib/apt/lists/*

# apt-get update does not actually perform updates, it just downloads and indexes the list of packages
apt-get -y update
apt-get -y upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;hvc0-terminal&#34;&gt;hvc0 terminal&lt;/h4&gt;

&lt;p&gt;XenServer use hvc0 for tty, so we have to manually configure its login:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Fix bug, no hvc0, then you won&#39;t get tty1 working under vnc
    echo &#39;start on stopped rc RUNLEVEL=[2345] and (&#39; &amp;gt; /etc/init/hvc0.conf
    echo &#39;not-container or&#39; &amp;gt;&amp;gt; /etc/init/hvc0.conf
    echo &#39;container CONTAINER=lxc or&#39; &amp;gt;&amp;gt; /etc/init/hvc0.conf
    echo &#39;container CONTAINER=lxc-libvirt)&#39; &amp;gt;&amp;gt; /etc/init/hvc0.conf
    echo &#39;stop on runlevel [!2345]&#39; &amp;gt;&amp;gt; /etc/init/hvc0.conf
    echo &#39;respawn&#39; &amp;gt;&amp;gt; /etc/init/hvc0.conf
    echo &#39;exec /sbin/getty -L hvc0 9600 linux&#39; &amp;gt;&amp;gt; /etc/init/hvc0.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After these modifications, now we could generate vhd file or vagrant-libvirt box files using Makefile.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>编译Packer及其插件</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/21/%E7%BC%96%E8%AF%91packer%E5%8F%8A%E5%85%B6%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Thu, 21 Jul 2016 21:12:27 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/21/%E7%BC%96%E8%AF%91packer%E5%8F%8A%E5%85%B6%E6%8F%92%E4%BB%B6/</guid>
      <description>

&lt;h3 id=&#34;install-go&#34;&gt;Install Go&lt;/h3&gt;

&lt;p&gt;In ArchLinux, do following for installing and configurating go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim ~/.bash_profile
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exit the terminal and relogin again, now you could verify your GOPATH and golang System Path.&lt;/p&gt;

&lt;p&gt;Install go in ArchLinux via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pacman -S go
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-dev-packer&#34;&gt;Installing Dev Packer&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>使用Jenkins/PackerIO自动化编译虚拟机镜像</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/18/%E4%BD%BF%E7%94%A8jenkins/packerio%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E8%AF%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%95%9C%E5%83%8F/</link>
      <pubDate>Mon, 18 Jul 2016 14:53:58 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/18/%E4%BD%BF%E7%94%A8jenkins/packerio%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E8%AF%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%95%9C%E5%83%8F/</guid>
      <description>

&lt;h3 id=&#34;gitlab仓库&#34;&gt;GitLab仓库&lt;/h3&gt;

&lt;p&gt;在前面搭建的GitLab里创建一个新仓库，用于存储Packer.io脚本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_18_14_57_26_995x911.jpg&#34; alt=&#34;/images/2016_07_18_14_57_26_995x911.jpg&#34; /&gt;&lt;br /&gt;
在编译机器的仓库里，运行以下命令，添加自己到新创建的仓库里:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd existing_folder
$ git init
$ git remote add origin http://192.168.1.79:10080/root/BuildUbuntu.git
$ git add .
$ git commit
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提交完毕之后，在GitLab服务器上就可以看到新添加的代码了。&lt;/p&gt;

&lt;h3 id=&#34;jenkins配置&#34;&gt;Jenkins配置&lt;/h3&gt;

&lt;p&gt;在Jenkins里创建一个新项目，选择&lt;code&gt;Freestyle Project&lt;/code&gt;， 默认创建完毕。&lt;/p&gt;

&lt;p&gt;在源代码管理的设置中，填入以下的条目:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_18_15_07_28_1366x467.jpg&#34; alt=&#34;/images/2016_07_18_15_07_28_1366x467.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Build Trigger&lt;/code&gt;中我们选择由GitLab触发：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_18_15_13_31_1154x436.jpg&#34; alt=&#34;/images/2016_07_18_15_13_31_1154x436.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在GitLab中我们需要添加相应的钩子(WebHook):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_18_15_15_11_452x602.jpg&#34; alt=&#34;/images/2016_07_18_15_15_11_452x602.jpg&#34; /&gt;&lt;br /&gt;
设置:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_18_15_16_30_1044x427.jpg&#34; alt=&#34;/images/2016_07_18_15_16_30_1044x427.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;添加Build脚本(选择execute shell):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_18_15_24_00_358x581.jpg&#34; alt=&#34;/images/2016_07_18_15_24_00_358x581.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;配置完毕后，就可以通过点击&lt;code&gt;Build Now&lt;/code&gt;来编译Packer.io工程了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SetupJenkinsCI</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/13/setupjenkinsci/</link>
      <pubDate>Wed, 13 Jul 2016 19:28:30 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/13/setupjenkinsci/</guid>
      <description>

&lt;h3 id=&#34;aim&#34;&gt;AIM&lt;/h3&gt;

&lt;p&gt;Jenkins + Packer.io + GitLab + Gogs, for automatically building the virtual machine
images.&lt;/p&gt;

&lt;h3 id=&#34;jenkins-installation-configuration&#34;&gt;Jenkins Installation/Configuration&lt;/h3&gt;

&lt;p&gt;TBD&lt;/p&gt;

&lt;h3 id=&#34;gitlab&#34;&gt;GitLab&lt;/h3&gt;

&lt;p&gt;Refers to:&lt;br /&gt;
&lt;a href=&#34;https://github.com/sameersbn/docker-gitlab&#34;&gt;https://github.com/sameersbn/docker-gitlab&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;image-preparation&#34;&gt;Image Preparation&lt;/h4&gt;

&lt;p&gt;Using docker for installing gitlab. First pull the docker image back via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull sameersbn/gitlab:8.9.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also pull back the postgres and redis images, for we will link to these container&amp;rsquo;s
services:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull sameersbn/postgresql:9.4-22
$ docker pull sameersbn/redis:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;run-gitlab&#34;&gt;Run GitLab&lt;/h4&gt;

&lt;p&gt;Create the data directory for holding the data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir -p /root/data/gitlab
$ cd /root/data/gitlab
$ mkdir redis postgresql gitlab
$ chmod 777 -R /root/data/gitlab/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch a postgresql container via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# docker run --name gitlab-postgresql -d \
     --env &#39;DB_NAME=gitlabhq_production&#39; \
     --env &#39;DB_USER=gitlab&#39; --env &#39;DB_PASS=password&#39; \
     --env &#39;DB_EXTENSION=pg_trgm&#39; \
     --volume /root/data/gitlab/postgresql:/var/lib/postgresql \
     sameersbn/postgresql:9.4-22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch a redis container via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# docker run --name gitlab-redis -d \
     --volume /root/data/gitlab/redis:/var/lib/redis \
     sameersbn/redis:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch the gitlab container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# docker run --name gitlab -d \
     --link gitlab-postgresql:postgresql --link gitlab-redis:redisio \
     --publish 10022:22 --publish 10080:80 \
     --env &#39;GITLAB_PORT=10080&#39; --env &#39;GITLAB_SSH_PORT=10022&#39; \
     --env &#39;GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string&#39; \
     --volume /root/data/gitlab/gitlab:/home/git/data \ 
     sameersbn/gitlab:8.9.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now visit &lt;code&gt;http://127.0.0.1:10080&lt;/code&gt;, for setting up the password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_13_19_49_55_969x420.jpg&#34; alt=&#34;/images/2016_07_13_19_49_55_969x420.jpg&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;systemd-services&#34;&gt;Systemd Services&lt;/h4&gt;

&lt;p&gt;For automatically startup the docker service in system boot, create the service items
in systemd, listed in following:&lt;/p&gt;

&lt;p&gt;Create the gitlab service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim /usr/lib/systemd/system/gitlab.service
[Unit]
Description=gitlab
Requires=docker.service
After=docker.service

[Service]
Restart=always
ExecStart=/usr/bin/docker start -a gitlab
ExecStop=/usr/bin/docker stop -t 2 gitlab

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also create another 2 service named &lt;code&gt;gitlab-redis.service&lt;/code&gt; and
&lt;code&gt;gitlab-postgres.service&lt;/code&gt;, then enable the service via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# systemctl enable gitlabpostgres.service
# systemctl enable gitlabredis.service
# systemctl enable gitlab.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then next time when system reboot, these service will automatically restart.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>