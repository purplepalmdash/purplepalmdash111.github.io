<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pelican on Dash</title>
    <link>http://purplepalmdash.github.io/categories/pelican/</link>
    <description>Recent content in Pelican on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jan 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/pelican/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Set a pelican based blog on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2014/01/26/set-a-pelican-based-blog-on-ubuntu/</link>
      <pubDate>Sun, 26 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/26/set-a-pelican-based-blog-on-ubuntu/</guid>
      <description>&lt;p&gt;Install python-virtualenv:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	sudo apt-get install python-virtualenv

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the virtualenv Wrapper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	sudo apt-get install virtualenvwrapper

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create the directory for holding the virtual environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	mkdir ~/pyv

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the virtualenv resource file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	export WORKON_HOME=&amp;quot;/home/Trusty/pyv&amp;quot;
	export PROJECT_HOME=&amp;quot;/home/Trusty/pyv&amp;quot;
	#source /usr/bin/virtualenvwrapper.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we meet the problem, it says cannot find the /usr/bin/virtualenvwrapper.sh, I got the answer from the stackoverflow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	From /usr/share/doc/virtualenvwrapper/README.Debian:
	
	In contrast to the information in
	/usr/share/doc/virtualenvwrapper/en/html/index.html this package installs
	virtualenvwrapper.sh as /etc/bash_completion.d/virtualenvwrapper.
	
	Virtualenvwrapper is enabled if you install the package bash-completion and
	enable bash completion support in /etc/bash.bashrc or your ~/.bashrc.
	
	If you only want to use virtualenvwrapper you may just add
	
	 source /etc/bash_completion.d/virtualenvwrapper
	
	to your ~/.bashrc.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the right command should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ cat /home/Trusty/.virtualenvrc 
	export WORKON_HOME=&amp;quot;/home/Trusty/pyv&amp;quot;
	export PROJECT_HOME=&amp;quot;/home/Trusty/pyv&amp;quot;
	source /etc/bash_completion.d/virtualenvwrapper

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add this find into .bashrc and source~/.bashrc again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ tail -1 ~/.bashrc 
	source /home/Trusty/.virtualenvrc
	$ source ~/.bashrc	

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good!!! Now you can continue with the following steps, just as we noticed in previous articles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Update Qzone(2)</title>
      <link>http://purplepalmdash.github.io/2014/01/24/update-qzone-2/</link>
      <pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/24/update-qzone-2/</guid>
      <description>&lt;p&gt;Install pinyin for we want to use it for generate the title:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ pip install pinyin

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write a new post:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ python config_blog.py 迁移博客成功
	content/posts/2014/01/2014_01_24_qianyibokechenggong.md

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chinese codec:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	cat ~/.bashrc
	export LANG=&amp;quot;zh_CN.UTF-8&amp;quot;              Or &amp;quot;en_US.UTF-8&amp;quot;
	export LC_ALL=&amp;quot;zh_CN.UTF-8&amp;quot;          Or &amp;quot;en_US.UTF-8&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write the blog:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	vim content/posts/2014/01/2014_01_24_qianyibokechenggong.md

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install BeautifulSoup&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	pip install BeautifulSoup

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new user for updating qzone</title>
      <link>http://purplepalmdash.github.io/2014/01/23/create-a-new-user-for-updating-qzone/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/23/create-a-new-user-for-updating-qzone/</guid>
      <description>&lt;p&gt;###Backgroud
Because github only allow one user to login(trusted key), the error message is listed as &amp;ldquo;Error: Key already in use&amp;rdquo;, I have to try another method for updating the qzone.&lt;br /&gt;
First I have created a new user on github, and created the corresponding repositories, now I have to create the user on my own machine, named &amp;ldquo;qzone&amp;rdquo; for only updating the repository.&lt;br /&gt;
###Create the user
Use following command for create a new user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	useradd -m -g root -G wheel -s /bin/bash qzone
	passwd qzone

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then as another oridinary user, run &amp;ldquo;su qzone&amp;rdquo; then we can switch to the new user&amp;rsquo;s shell.&lt;br /&gt;
###Configure the user
Configure the git tools:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	[qzone@XXXyyy ~]$ git config --global user.name &amp;quot;qzone&amp;quot;
	[qzone@XXXyyy ~]$ git config --global user.email &amp;quot;XXXYYY@qq.com&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add python virtualenv running environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	mkdir ~/pyv
	[qzone@XXXyyy ~]$ cat ~/.virtualenvrc 
	export WORKON_HOME=&amp;quot;/home/qzone/pyv&amp;quot;
	export PROJECT_HOME=&amp;quot;/home/qzone/pyv&amp;quot;
	source /usr/bin/virtualenvwrapper.sh 	

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add following lines for automatically run virtualenv setup&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ tail ~/.bashrc
	source /home/qzone/.virtualenvrc

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create the virtualenv for running python.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	[qzone@XXXyyy ~]$ mkvirtualenv --python=/usr/bin/python2.7 v27
	$ cdvirtualenv

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are in the python 2.7 environment. But notice you have to set http_proxy/https_proxy, etc for you are working under the proxy.&lt;br /&gt;
Install the pelican:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ pip install pelican

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add configuration for git proxy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	export GIT_PROXY_COMMAND=/bin/myproxy

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add workon directory in .bashrc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	export WORKON_HOME=~/pyv

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next time, workon v27 then we can switch to python2.7 shell.&lt;br /&gt;
Make the directory of code, which will store all of the code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ mkdir -p ~/code/XXXYYY

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now clone the existing repository into the local directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git clone https://github.com/XXXYYY/XXXYYY.github.io

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install ghp-import for swiftly deploy your website&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	pip install ghp-import

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now setting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	pelican content -o output -s pelicanconf.py
	ghp-import output
	git push git@github.com:XXXYYY/XXXYYY.github.io.git gh-pages:master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you will failed, because you don&amp;rsquo;t have the correct access rights. So we need to set the ssh access right:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	ssh-keygen -t rsa
	cat ~/.ssh/id_rsa.pub

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in github&amp;rsquo;s accounting management page, add this content.&lt;br /&gt;
Push all of the modifications to the remote repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git push -f git@github.com:XXXYYY/XXXYYY.github.io.git gh-pages:master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install markdown for analyse the markdown based blog:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	pip install markdown

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	make html
	make github
	git push -f git@github.com:XXXYYY/XXXYYY.github.io.git gh-pages:master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now install new themes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	cat pelicanconf.py
	# Use theme for our own
	THEME = &amp;quot;./pelican-themes/waterspill-en&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, now you can enjoy the blog finally.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using pelican for blogging(1)</title>
      <link>http://purplepalmdash.github.io/2014/01/20/using-pelican-for-blogging-1/</link>
      <pubDate>Mon, 20 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/20/using-pelican-for-blogging-1/</guid>
      <description>

&lt;h3 id=&#34;getting-start&#34;&gt;Getting Start&lt;/h3&gt;

&lt;p&gt;Install pelican via pip:
    pip install pelican
Getting started Manual: &lt;a href=&#34;http://docs.getpelican.com/en/3.1.1/getting_started.html&#34;&gt;http://docs.getpelican.com/en/3.1.1/getting_started.html&lt;/a&gt;,  and the command is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# Make sure your pelican is the newest
	$ pip install --upgrade pelican
	$ mkdir ~/code/yoursitename
	$ cd ~/code/yoursitename
	$ pelican-quickstart

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;pelican-quickstart&amp;rdquo; will ask you some questions, after answer all of the questions, you will have a start-up point for the website.&lt;/p&gt;

&lt;p&gt;If your content is OK, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ make html &amp;amp;&amp;amp; make serve

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will generate the html files and preview it on the server.&lt;/p&gt;

&lt;h3 id=&#34;change-the-theme&#34;&gt;Change the Theme&lt;/h3&gt;

&lt;p&gt;Copy the offical themes into your own directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git clone --recursive https://github.com/getpelican/pelican-themes ~/pelican-themes

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set the default theme in your pelicanconf.py:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# Use theme for our own 
	# THEME = &amp;quot;/home/Trusty/pelican-themes/mnmlist&amp;quot;
	# THEME = &amp;quot;/home/Trusty/pelican-themes/storm&amp;quot;
	THEME = &amp;quot;/home/Trusty/pelican-themes/html5-dopetrope&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Regenerate the site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ make html &amp;amp;&amp;amp; make serve

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the pelican is pretty slow for rendering all of the content. For some themes, it may take up to several minutes for generating the whole site!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>