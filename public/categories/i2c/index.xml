<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I2c on Dash</title>
    <link>http://purplepalmdash.github.io/categories/i2c/</link>
    <description>Recent content in I2c on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/i2c/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>I2C between raspberryPI and Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/29/i2c-between-raspberrypi-and-arduino/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/i2c-between-raspberrypi-and-arduino/</guid>
      <description>&lt;p&gt;###连线
Arduino I2C 连线:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/arduino-i2c-pins.jpg&#34; alt=&#34;arduino.jpg&#34; /&gt;&lt;br /&gt;
RaspberryPI I2C 连线:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/raspberry-pi-i2c-pins.jpg&#34; alt=&#34;rasp.jpg&#34; /&gt;&lt;br /&gt;
连线图：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	RPI               Arduino (Uno/Duemillanove)
	--------------------------------------------
	GPIO 0 (SDA) &amp;lt;--&amp;gt; Pin 4 (SDA)
	GPIO 1 (SCL) &amp;lt;--&amp;gt; Pin 5 (SCL)
	Ground       &amp;lt;--&amp;gt; Ground

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/RaspberryPI-I2c-Arduino.png&#34; alt=&#34;rasp-arduino.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;###Arduino端代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Wire.h&amp;gt;

#define SLAVE_ADDRESS 0x04
int number = 0;
int state = 0;

void setup() {
    pinMode(13, OUTPUT);
    Serial.begin(9600);         // start serial for output
    // initialize i2c as slave
    Wire.begin(SLAVE_ADDRESS);

    // define callbacks for i2c communication
    Wire.onReceive(receiveData);
    Wire.onRequest(sendData);

    Serial.println(&amp;quot;Ready!&amp;quot;);
}

void loop() {
    delay(100);
}

// callback for received data
void receiveData(int byteCount){

    while(Wire.available()) {
        number = Wire.read();
        Serial.print(&amp;quot;data received: &amp;quot;);
        Serial.println(number);

        if (number == 1){

            if (state == 0){
                digitalWrite(13, HIGH); // set the LED on
                state = 1;
            }
            else{
                digitalWrite(13, LOW); // set the LED off
                state = 0;
            }
         }
     }
}

// callback for sending data
void sendData(){
    Wire.write(number);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###RaspberryPI端准备
在/etc/modules中增加一行:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	i2c-dev

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释掉黑名单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ cat /etc/modprobe.d/raspi-blacklist.conf
	# blacklist spi and i2c by default (many users don&#39;t need them)
	# blacklist spi-bcm2708
	#blacklist i2c-bcm2708

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装i2c工具：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	apt-get install i2c-tools

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装python库：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	apt-get install python-smbus

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;探测i2c设备&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	i2cdetect -y 0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不是root用户，例如，如果是pi用户，则需要将当前用户增加到i2c组中:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ sudo adduser pi i2c

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###RaspberryPI端代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import smbus
import time
# for RPI version 1, use &amp;quot;bus = smbus.SMBus(0)&amp;quot;
bus = smbus.SMBus(0)

# This is the address we setup in the Arduino Program
address = 0x04

def writeNumber(value):
    bus.write_byte(address, value)
    # bus.write_byte_data(address, 0, value)
    return -1

def readNumber():
    number = bus.read_byte(address)
    # number = bus.read_byte_data(address, 1)
    return number

while True:
    var = input(&amp;quot;Enter 1 - 9: &amp;quot;)
    if not var:
        continue

    writeNumber(var)
    print &amp;quot;RPI: Hi Arduino, I sent you &amp;quot;, var
    # sleep one second
    time.sleep(1)

    number = readNumber()
    print &amp;quot;Arduino: Hey RPI, I received a digit &amp;quot;, number
    print

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行代码时要注意，0～255的数字输入进去，会在arduino i2c slave端收到对应的数据，并原封不动的被返回。超过255的数值将溢出。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>