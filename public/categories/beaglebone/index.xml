<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beaglebone on Dash</title>
    <link>http://purplepalmdash.github.io/categories/beaglebone/</link>
    <description>Recent content in Beaglebone on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Mar 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/beaglebone/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Moving Weather App to BBB</title>
      <link>http://purplepalmdash.github.io/2014/03/18/moving-weather-app-to-bbb/</link>
      <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/18/moving-weather-app-to-bbb/</guid>
      <description>&lt;p&gt;Following is the steps for moving the weather app to BBB(BeagleBone Black)&lt;br /&gt;
###Apache Configuration
Create the site definition file under /etc/apache2/sites-available: &lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ cp default nanjing

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the nanjing file with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ cat nanjing
	&amp;lt;VirtualHost *:7778&amp;gt;
		ServerAdmin webmaster@localhost
	        ServerName nanjing
	        ServerAlias nanjing.weather
	
		DocumentRoot /srv/www1
		&amp;lt;Directory /&amp;gt;
			Options FollowSymLinks
			AllowOverride None
		&amp;lt;/Directory&amp;gt;
		&amp;lt;Directory /srv/www1/&amp;gt;
			Options Indexes FollowSymLinks MultiViews
			AllowOverride None
			Order allow,deny
			Allow from all
		&amp;lt;/Directory&amp;gt;
	
		ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
		&amp;lt;Directory &amp;quot;/usr/lib/cgi-bin&amp;quot;&amp;gt;
			AllowOverride None
			Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
			Order allow,deny
			Allow from all
		&amp;lt;/Directory&amp;gt;
	
		ErrorLog ${APACHE_LOG_DIR}/error.log
	
		# Possible values include: debug, info, notice, warn, error, crit,
		# alert, emerg.
		LogLevel warn
	
		CustomLog ${APACHE_LOG_DIR}/access.log combined
	&amp;lt;/VirtualHost&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we have to edit the /etc/apache2/ports.conf file, to add the newly-added site definition file. &lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ cat ports.conf
	NameVirtualHost *:7777
	Listen 7777
	NameVirtualHost *:7778
	Listen 7778
	NameVirtualHost *:7779
	Listen 7779
	NameVirtualHost *:7780
	Listen 7780

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you already could visit the site of &lt;a href=&#34;http://Your_Ip_Address:7777&#34;&gt;http://Your_Ip_Address:7777&lt;/a&gt; for the nanjing weather infos. &lt;br /&gt;
###Script Moving
Be sure following modules has been installed:&amp;lt; br /&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ pip install django pywapi pinyin
	$ pip install BeautifulSoup

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the crontab tasks:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	0 */1 * * * python /root/code/genhtml.py
	15 */1 * * * python /root/code/genhtml_bj.py
	30 */1 * * * python /root/code/genhtml_changsha.py

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the script will be run every hour at 0/15/30 minutes, enjoy it. &lt;br /&gt;
Notice the timezone should be correctly configured:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$  dpkg-reconfigure tzdata
	# Choose Asia/Shanghai

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up Wordpress on BeagleBone Black</title>
      <link>http://purplepalmdash.github.io/2014/03/13/setting-up-wordpress-on-beaglebone-black/</link>
      <pubDate>Thu, 13 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/13/setting-up-wordpress-on-beaglebone-black/</guid>
      <description>&lt;p&gt;Since BeagleBone Black&amp;rsquo;s hardware configuration is enough for running LAMP, I decide to run wordpress on it. &lt;br /&gt;
###Environment
Hardware Configuration:&lt;br /&gt;
CPU: Generic AM33XX (Flattened Device Tree)&lt;br /&gt;
MEM: MemTotal:         507428 kB&lt;br /&gt;
Disk: 1.8&amp;rdquo; USB Disk, 30 GB&lt;br /&gt;
I also add 512MB swapfile for swapping partition. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Software Configuration:&lt;br /&gt;
Kernel: Linux arm 3.8.13-bone30 #1 SMP Mon Nov 18 14:53:22 CST 2013 armv7l GNU/Linux&lt;br /&gt;
OS:  Debian GNU/Linux 7 \n \l&lt;br /&gt;
###LAMP Configuration
####Install Apache&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ apt-get install apache2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After installation, simply open the browser and visit the &lt;a href=&#34;http://YourIPAddress&#34;&gt;http://YourIPAddress&lt;/a&gt;, if you can find &amp;ldquo;It works!&amp;rdquo;, then this says the apache server is running now. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;####Install MySQL&lt;br /&gt;
MySQL is a powerful database management system which is used for organizing and retrieving data.&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ apt-get install mysql-server libapache2-mod-auth-mysql php5-mysql

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should be asked to provide the MySQL &amp;ldquo;root&amp;rdquo; user password.&lt;br /&gt;
Activate MySQL via following command:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ mysql_install_db
	Change the root password? [Y/n] n 
	Remove anonymous users? [Y/n] Y
	Disallow root login remotely? [Y/n] Y
	Remove test database and access to it? [Y/n] Y
	Reload privilege tables now? [Y/n] Y

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the MySQL is OK, you have to install PHP&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;####Install PHP&lt;br /&gt;
Install following packages:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ apt-get install php5 libapache2-mod-php5 php5-mcrypt

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the directory index file:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# cat /etc/apache2/mods-enabled/dir.conf
	&amp;lt;IfModule mod_dir.c&amp;gt;
	          DirectoryIndex index.php index.html index.cgi index.pl index.php index.xhtml index.htm
	&amp;lt;/IfModule&amp;gt;
Install modules for using the searched result:&amp;lt;br /&amp;gt;
	apt-cache search php5-
Testing PHP on your own apache search:&amp;lt;br /&amp;gt;
	root@arm:/home# cat /var/www/info.php
	&amp;lt;?php
	phpinfo();
	?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart apache server and view the result:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# /etc/init.d/apache2 restart

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View the &lt;a href=&#34;http://YourIpAddress/info.php&#34;&gt;http://YourIpAddress/info.php&lt;/a&gt; you can see the php printed out messages. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Wordpress Setup
Download the latest Wordpress via:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# wget http://wordpress.org/latest.tar.gz

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the ntp server, or you may meet some time and date problem:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# apt-get install ntp

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, the time is really an issue, gonna be discussed later. &lt;br /&gt;
Simply set the time via &amp;ldquo; date -s &amp;ldquo;$timestring&amp;rdquo;&amp;rdquo; is enough.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now uncompress the wordpress. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Create the Wordpress Database and User:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# mysql -u root -p
	mysql&amp;gt; CREATE DATABASE wordpress;
	Query OK, 1 row affected (0.01 sec)
	mysql&amp;gt; CREATE USER wordpressuser@localhost;
	Query OK, 0 rows affected (0.00 sec)
	mysql&amp;gt; SET PASSWORD FOR wordpressuser@localhost= PASSWORD(&amp;quot;xxxxxxxx&amp;quot;);
	Query OK, 0 rows affected (0.00 sec)
	mysql&amp;gt; GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost IDENTIFIED BY &#39;password&#39;;
	Query OK, 0 rows affected (0.00 sec)
	mysql&amp;gt; FLUSH PRIVILEGES;
	Query OK, 0 rows affected (0.00 sec)
	mysql&amp;gt; exit
	Bye

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup the WordPress Configuration:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	cp ~/wordpress/wp-config-sample.php ~/wordpress/wp-config.php

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the configuration file:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	cat ~/wordpress/wp-config.php
	// ** MySQL settings - You can get this info from your web host ** //
	/** The name of the database for WordPress */
	define(&#39;DB_NAME&#39;, &#39;wordpress&#39;);
	
	/** MySQL database username */
	define(&#39;DB_USER&#39;, &#39;wordpressuser&#39;);
	
	/** MySQL database password */
	define(&#39;DB_PASSWORD&#39;, &#39;password&#39;);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install rsync:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# apt-get install rsync

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use rsync for sync to the website&amp;rsquo;s root directory:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# rsync -avP ~/wordpress/ /var/www/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change to the website&amp;rsquo;s root directory and change the ownership to the apache user:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	root@arm:/etc# cd /var/www/
	root@arm:/var/www# chown www-data:www-data /var/www -R 
	root@arm:/# chmod g+w /var/www -R 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To know the username of apache:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	lsof -i 
	Notice the :http part.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install php5-gd , which is the required php module to run wordpress.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	apt-get install php5-gd

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now access the page of  /wp-admin/install.php  is OK. or you can access the &lt;a href=&#34;http://YourIPAddress&#34;&gt;http://YourIPAddress&lt;/a&gt; is ready for install the wordpress on your BeagleBone Black.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrate BeagleBone Black</title>
      <link>http://purplepalmdash.github.io/2014/03/12/migrate-beaglebone-black/</link>
      <pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/12/migrate-beaglebone-black/</guid>
      <description>&lt;p&gt;Since I want to run wordpress at home, while my RaspberryPI got only 256M RAM, it will be hard to run such a heavy application, I use BeagleBone Black to run it, BeagleBone Black has 512M RAM, which will be enough for run wordpress and etc. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Setting up NFS Server
First I have to setup a nfs server in my LAN, I set it on my RaspberryPI, since I got only 1 USB hub which serves RaspberryPI, a 500GB harddisk has been attached to the USB hub, which is quite enough for serving nfs servers. &lt;br /&gt;
My RaspberryPI runs archlinux, then I follow the ArchLinux&amp;rsquo;s Wiki setting up the nfs server&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	pacman -S nfs-utils
	# cat /etc/exports
	/media/debianroot 10.0.0.1/24(rw,sync,no_subtree_check,no_root_squash) 10.0.0.11(rw,sync,no_subtree_check,no_root_squash)
	### Check the result
	root@alarmpi ~]# exportfs -arv
	exporting 10.0.0.11:/media/debianroot
	exporting 10.0.0.1/24:/media/debianroot
	exporting 10.0.0.11:/media/debianroot to kernel
	exportfs: 10.0.0.11:/media/debianroot: Function not implemented
	### Change the domainname to &amp;quot;localhost&amp;quot;
	vim /etc/idmapd.conf 
	### Testing the services
	systemctl start rpc-idmapd.service
	systemctl start rpc-mountd.service
	### Enable the Services at startup
	systemctl enable rpc-mountd.service
	systemctl enable rpc-idmapd.service

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want testing the nfs, simply use following command: &lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	mount -t nfs 10.0.0.230:/media/debianroot /mnt1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you can see the mnt1 directory has the same content as in nfs server, you can use nfs now. &lt;br /&gt;
###Change the BeagleBone Startup file
In SD card, change uEnv.txt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	[root@DashArch mnt]# cat uEnv.txt
	kernel_file=zImage
	initrd_file=uInitrd
	serverip=10.0.0.230
	ipaddr=10.0.0.122
	rootpath=/media/debianroot
	console=ttyO0,115200n8

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Replace Pogoplug
To replace Pogoplug at home, I have to do the following issues:&lt;br /&gt;
1. Use No-ip on BeagleBone, replacing the Pogoplug&amp;rsquo;s No-ip.&lt;br /&gt;
2. Run Apache or nginx instead of Pogoplug&amp;rsquo;s service.&lt;/p&gt;

&lt;p&gt;Use No ip: &lt;br /&gt;
Install no-ip on RaspberryPI:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	pacman -S noip

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure noip on RaspberryPI:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	noip2 -C -Y
	[root@alarmpi ~]# systemctl start noip2
	[root@alarmpi ~]# systemctl enable noip2
	ln -s &#39;/usr/lib/systemd/system/noip2.service&#39; &#39;/etc/systemd/system/multi-user.target.wants/noip2.service&#39;
	[root@alarmpi ~]# ps -ef | grep noip
	nobody     411     1  0 00:40 ?        00:00:00 /usr/bin/noip2 -c /etc/no-ip2.conf

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to replace Pogoplug&amp;rsquo;s service to RaspberryPI:&lt;br /&gt;
First we change the direct port 22 from pogoplug to RasspberryPI on Router. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/redirect.jpg&#34; alt=&#34;/images/redirect.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now your no-ip pointed machine changed from Pogoplug into RaspberryPI. &lt;br /&gt;
###Remote update
Simply replacing the ssh related via setting up the different id_rsa:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	cat .ssh/id_rsa.pub | ssh root@xxx.xx.xx.com &#39;cat &amp;gt;&amp;gt; .ssh/authorized_keys

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Debian on NFS</title>
      <link>http://purplepalmdash.github.io/2013/12/11/debian-on-nfs/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/11/debian-on-nfs/</guid>
      <description>&lt;p&gt;Install some packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ apt-get install usbutils alsa-base

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use lsusb to view the installed usb equipments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Bus 001 Device 006: ID 0e5c:6441 Bitland Information Technology Co., Ltd C-Media Sound Device

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install modules to the filesystem, since our newly-installed filesytem doesn&amp;rsquo;t contains the necessary modules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ pwd
	/media/x/bbBlack/38/linux-dev/deploy

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the firmware tar package and modules tar package to the nfs root directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ tar xzvf 3.8.13-bone30-modules.tar.gz  -C ./
	$ tar xzvf ./3.8.13-bone30-firmware.tar.gz -C  ./lib/firmware/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reboot and Use aplay to view the installed sound card:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	root@arm:/# aplay -l
	**** List of PLAYBACK Hardware Devices ****
	card 0: Black [TI BeagleBone Black], device 0: HDMI nxp-hdmi-hifi-0 []
	  Subdevices: 1/1
	  Subdevice #0: subdevice #0
	card 1: U0xe5c0x6441 [USB Device 0xe5c:0x6441], device 0: USB Audio [USB Audio]
	  Subdevices: 0/1
	  Subdevice #0: subdevice #0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit a new asound.conf, which will enable the system to use the usb audio as the default sound card:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	root@arm:/# cat /etc/asound.conf
	pcm.!default { 
	type hw 
	card 1
	#device 0 
	}
	ctl.!default { 
	type hw 
	card  1
	#device 0 
	}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can use the mplayer to enjoy the sound from the console.&lt;br /&gt;
If you want to grant the right to the ordinary user, Just use acl:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	 setfacl -m u:debian:rw /dev/snd/*

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the user &amp;ldquo;debian&amp;rdquo; could also listen the music from the console.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BeagleBone boot from NFS</title>
      <link>http://purplepalmdash.github.io/2013/12/10/beaglebone-boot-from-nfs/</link>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/10/beaglebone-boot-from-nfs/</guid>
      <description>&lt;p&gt;###Building Preparation
Create a new directory for stroing all of the items related to beaglebone.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	cd /media/nfs/
	mkdir beaglebone
	cd beaglebone/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the cross-compiler from linaro toolchain binary website. And add it to the environment variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	wget -c https://launchpad.net/linaro-toolchain-binaries/trunk/2013.10/+download/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz
	tar xJf gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz
	export CC=`pwd`/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux/bin/arm-linux-gnueabihf-
	# Test the cross-compiler
	${CC}gcc --version

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checkout the U-boot:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git clone git://git.denx.de/u-boot.git
	cd u-boot/
	git checkout v2013.10 -b tmp

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Patching U-boot:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	wget https://raw.github.com/eewiki/u-boot-patches/master/v2013.10/0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch
	patch -p1 &amp;lt; 0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure and compile the U-boot:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	make ARCH=arm CROSS_COMPILE=${CC} distclean
	make ARCH=arm CROSS_COMPILE=${CC} am335x_evm_config
	make ARCH=arm CROSS_COMPILE=${CC}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checkout the kernel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git clone git://github.com/RobertCNelson/linux-dev.git
	cd linux-dev
	git checkout origin/am33x-v3.12 -b tmp

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we got our kernel and U-boot available. The next step is to build a filesystem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	wget -c https://rcn-ee.net/deb/minfs/raring/ubuntu-13.04-minimal-armhf-2013-08-25.tar.xz

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prepare the mmc card.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	export DISK=/dev/mmcblk0
	[Trusty@XXXyyy beaglebone]$ sudo dd if=/dev/zero of=${DISK} bs=1M count=16
	16+0 records in
	16+0 records out
	16777216 bytes (17 MB) copied, 4.84877 s, 3.5 MB/s 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use sfdisk for creating the partition layout.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	sudo sfdisk --in-order --Linux --unit M ${DISK} &amp;lt;&amp;lt;-__EOF__
	1,48,0xE,*
	,,,-
	__EOF__

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Format Partitions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	sudo mkfs.vfat -F 16 ${DISK}p1 -n boot
	sudo mkfs.ext4 ${DISK}p2 -L rootfs

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install Bootloader to the 1st partition of mmc card.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	[Trusty@XXXyyy beaglebone]$ sudo mkdir -p /media/boot/
	[Trusty@XXXyyy beaglebone]$ sudo mkdir -p /media/rootfs/
	[Trusty@XXXyyy beaglebone]$ sudo mount ${DISK}p1 /media/boot/
	[Trusty@XXXyyy beaglebone]$ sudo mount ${DISK}p2 /media/rootfs/
	[Trusty@XXXyyy beaglebone]$ sudo cp -v ./u-boot/MLO /media/boot/
	‘./u-boot/MLO’ -&amp;gt; ‘/media/boot/MLO’
	[Trusty@XXXyyy beaglebone]$ sudo cp -v ./u-boot/u-boot.img /media/boot/
	‘./u-boot/u-boot.img’ -&amp;gt; ‘/media/boot/u-boot.img’

	[Trusty@XXXyyy linux-dev]$ vim uEnv.txt
	[Trusty@XXXyyy linux-dev]$ sudo cp -v ./uEnv.txt /media/boot/
	‘./uEnv.txt’ -&amp;gt; ‘/media/boot/uEnv.txt’

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy Kernel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	[Trusty@XXXyyy beaglebone]$ sudo cp -v ./linux-dev/deploy/3.12.4-bone9.zImage /media/boot/zImage
	‘./linux-dev/deploy/3.12.4-bone9.zImage’ -&amp;gt; ‘/media/boot/zImage’

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy Root File System:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	sudo tar xfvp ./ubuntu-13.04-minimal-armhf-2013-08-25/armhf-rootfs-ubuntu-raring.tar -C /media/rootfs/
Installation of kernel and configuration of the filesystem.
	sudo cp -v ./linux-dev/deploy/3.12.4-bone9.zImage /media/boot/zImage
	sudo mkdir -p /media/boot/dtbs/
	sudo tar xfov ./linux-dev/deploy/3.12.4-bone9-dtbs.tar.gz -C /media/boot/dtbs/
	sudo tar xfv ./linux-dev/deploy/3.12.4-bone9-firmware.tar.gz  -C /media/rootfs/lib/firmware/
	sudo tar xfv ./linux-dev/deploy/3.12.4-bone9-modules.tar.gz -C /media/rootfs/
	sudo vim /media/rootfs/etc/fstab
	sudo vim /media/rootfs/etc/network/interfaces 
	sudo vim /media/rootfs/etc/udev/rules.d/70-persistent-net.rules
	sudo vim /media/rootfs/etc/inittab
	sudo vim /media/rootfs/etc/init/serial.conf
	sudo umount /media/rootfs/
	sudo umount /media/boot/

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Building Poll circuit on EagleBone</title>
      <link>http://purplepalmdash.github.io/2013/11/15/building-poll-circuit-on-eaglebone/</link>
      <pubDate>Fri, 15 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/15/building-poll-circuit-on-eaglebone/</guid>
      <description>&lt;p&gt;###Background Knowledge
三极管（NPN型）的用法很简单（半圆形平的一面朝自己，引脚朝下），左边接电源中间为触发极，右边输出，有点像开关，只要中间的脚有微弱电流触发，就如同开关被打开，电流就会从左边流向右边。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compile Linux kernel for Beaglebone</title>
      <link>http://purplepalmdash.github.io/2013/11/14/compile-linux-kernel-for-beaglebone/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/14/compile-linux-kernel-for-beaglebone/</guid>
      <description>&lt;p&gt;###SourceCode Preparation
1. Get the latest code of beaglebone kernel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git clone git://github.com/RobertCNelson/linux-dev.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. Check for your cross-compiler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ which arm-linux-gnueabi-gcc
	/media/y/embedded/gcc-linaro-arm-linux-gnueabi-2012.02-20120222_linux/bin/arm-linux-gnueabi-gcc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. Start a new branch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git checkout origin/am33x-v3.2 -b am33x-v3.2
	Branch am33x-v3.2 set up to track remote branch am33x-v3.2 from origin.
	Switched to a new branch &#39;am33x-v3.2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the latest kernel has been moved 3.12, we have to checkout am33x-v3.12&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git checkout origin/am33x-v3.12 -b am33x-v3.12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also have to manually download the latest kernel source code from github:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Configure everything before compilation
Edit the system.sh file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ cp system.sh.sample system.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The system.sh should have following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	echo &amp;quot;Using: Cross Compiler&amp;quot;
	CC=arm-linux-gnueabi-
	##For TI: OMAP3/4/AM35xx
	ZRELADDR=0x80008000
	#LINUX_GIT=/home/user/linux-stable/
	LINUX_GIT=/media/x/bbBlack/linux/git/linux-stable/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run ./build_kernel.sh to see your kernel is under compiling, you will be prompted to asked &amp;ldquo;make menuconfig&amp;rdquo;, choose whatever you want.Wait patiently until all of your compilation is done.&lt;br /&gt;
###Install kernel
Edit the destination for your installation, edit the file &amp;ldquo;system.sh&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	MMC=/dev/mmcblk0 
	# or whatever you found in your own system.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you simply input ./tools/install_kernel.sh, you will be asked some questions, answer then and your kernel will be installed to your sd card. Now use the SD card for booting system, you will get a brand-new system.
###Install Filesystem
Download the pre-configured filesystems from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# For example, download the quantal related image, that&#39;s 12.10.
	$ wget http://rcn-ee.net/deb/rootfs/quantal/ubuntu-12.10-console-armhf-2013-07-22.tar.xz
	$ unxz ubuntu-12.10-console-armhf-2013-07-22.tar.xz
	$ tar xvf ubuntu-12.10-console-armhf-2013-07-22.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then insert your SD card, simply input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# take BeagleBoneBlack for example:
	$ sudo ./setup_sdcard.sh --mmc /dev/sdX --uboot bone
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After setup SD card, using the newly configured SD card for booting up the system, you will get the new system running the pre-configured rootfs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Eclipse and C/C&#43;&#43; to develop on Beaglebone</title>
      <link>http://purplepalmdash.github.io/2013/11/14/use-eclipse-and-c-slash-c-plus-plus-to-develop-on-beaglebone/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/14/use-eclipse-and-c-slash-c-plus-plus-to-develop-on-beaglebone/</guid>
      <description>&lt;p&gt;###Local Development on Beaglebone board.
On Beagle to verify local development:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	#include &amp;lt;iostream&amp;gt;
	using namespace std;
	
	
	int main()
	{
		cout&amp;lt;&amp;lt;&amp;quot;Hello Beagle World!&amp;quot;&amp;lt;&amp;lt;endl;
		return 0;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compile and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ g++ -o test test.cpp
	$ ./test
	Hello Beagle World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Using Cross-compiler for developing applications for Beaglebone
Launch eclipse, then install new software via help-&amp;gt; Install new software, make sure installed CDT. then we will install RSE.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ pwd
	/home/Trusty/.eclipse/org.eclipse.platform_4.3.0_1543616141_linux_gtk_x86_64/plugins
	cp -ar /home/Trusty/Downloads/RSE/eclipse/features/* ./
	cd ../plugins/
	cp -ar /home/Trusty/Downloads/RSE/eclipse/plugins/* ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installed the RSE(Remote System Explorer). We can use it for browsing the remote beaglebone board.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>