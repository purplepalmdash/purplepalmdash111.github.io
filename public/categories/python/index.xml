<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Dash</title>
    <link>http://purplepalmdash.github.io/categories/python/</link>
    <description>Recent content in Python on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Oct 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python call system command</title>
      <link>http://purplepalmdash.github.io/2014/10/24/python-call-system-command/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/24/python-call-system-command/</guid>
      <description>

&lt;h3 id=&#34;use-popen-for-running-ls&#34;&gt;Use Popen for running ls&lt;/h3&gt;

&lt;p&gt;We could use following python scripts for running the bash command &lt;code&gt;ls -l&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from subprocess import *
&amp;gt;&amp;gt;&amp;gt; from subprocess import call
&amp;gt;&amp;gt;&amp;gt; from subprocess import Popen
&amp;gt;&amp;gt;&amp;gt; import subprocess
&amp;gt;&amp;gt;&amp;gt; ls_child = Popen([&#39;ls&#39;, &#39;-l&#39;], stdout=subprocess.PIPE, stderr = subprocess.PIPE)
&amp;gt;&amp;gt;&amp;gt; ls_result = ls_child.communicate()
&amp;gt;&amp;gt;&amp;gt; print ls_result
.......

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command I want to call is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sed -n 1~2p File_Name

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will get the half of the file contents.&lt;/p&gt;

&lt;h3 id=&#34;popen-wrapping&#34;&gt;Popen Wrapping&lt;/h3&gt;

&lt;p&gt;The commands for canling sed is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sed_child = Popen([&#39;sed&#39;, &#39;-n&#39;, &#39;1~2p&#39;, &#39;/home/Trusty/code/mybash/rtp02_2014_10_23_03_23_36.txt&#39;], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
&amp;gt;&amp;gt;&amp;gt; sed_content = sed_child.communicate()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Judge the parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; command_line=raw_input()
 sed -n 1~2p /home/Trusty/code/mybash/rtp02_2014_10_23_03_23_36.txt 
&amp;gt;&amp;gt;&amp;gt; args=shlex.split(command_line)
&amp;gt;&amp;gt;&amp;gt; print args

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write the result into the file(half size as the origin input file), notice we remove the first 16 characters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; f_half = open(&amp;quot;./half_result.txt&amp;quot;, &amp;quot;w+&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; for line in sed_content:
&amp;gt;&amp;gt;&amp;gt;     f_half.write(line.replace(line[:16],&#39;&#39;))
&amp;gt;&amp;gt;&amp;gt; f_half.close()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the file contains all of the content.&lt;/p&gt;

&lt;p&gt;If we want to write into sorted result, then do following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; lines=[]
&amp;gt;&amp;gt;&amp;gt; for line in sed_content:
&amp;gt;&amp;gt;&amp;gt;     lines.append(line.replace(line[:16], &#39;&#39;))
&amp;gt;&amp;gt;&amp;gt; lines.sort()
&amp;gt;&amp;gt;&amp;gt; f_half = open(&amp;quot;./half_result.txt&amp;quot;, &amp;quot;w+&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; for line in lines:
&amp;gt;&amp;gt;&amp;gt;     f_half.write(line)
&amp;gt;&amp;gt;&amp;gt; f_half.close()

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remote-acticom-machine-script&#34;&gt;Remote Acticom machine script&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>How to quickly solve python problems</title>
      <link>http://purplepalmdash.github.io/2014/05/24/how-to-quickly-solve-python-problems/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/24/how-to-quickly-solve-python-problems/</guid>
      <description>

&lt;h3 id=&#34;问题&#34;&gt;问题&lt;/h3&gt;

&lt;p&gt;在txt里面打印1-10里面随机的9个数。&lt;/p&gt;

&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;

&lt;h4 id=&#34;如何生成随机数&#34;&gt;如何生成随机数？&lt;/h4&gt;

&lt;p&gt;Google &amp;ldquo;generate  random python&amp;rdquo; , 结果如下：&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/python1.jpg&#34; alt=&#34;/images/python1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;挨个看，马上你会发现下面这个网页有答案：&lt;br /&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/5555712/generate-a-random-number-in-python&#34;&gt;http://stackoverflow.com/questions/5555712/generate-a-random-number-in-python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;启动终端试验之：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python
Python 2.7.6 (default, Feb 26 2014, 12:07:17) 
[GCC 4.8.2 20140206 (prerelease)] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; from random import randint
&amp;gt;&amp;gt;&amp;gt; randint(2,9)
3
&amp;gt;&amp;gt;&amp;gt; randint(1,10)
9
&amp;gt;&amp;gt;&amp;gt; randint(1,10)
4

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;如何循环打印&#34;&gt;如何循环打印&lt;/h4&gt;

&lt;p&gt;照样Google, 搜索关键字&amp;rdquo; python loop times&amp;rdquo;,结果如下：&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/python2.jpg&#34; alt=&#34;/images/python2.jpg&#34; /&gt;&lt;br /&gt;
随便点点看， 发现python自己的文档里就已经有很详细的关于loop的例子了:&lt;br /&gt;
&lt;a href=&#34;https://wiki.python.org/moin/ForLoop&#34;&gt;https://wiki.python.org/moin/ForLoop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;试验之:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; for x in range(0,3):
...     print &amp;quot;hello&amp;quot;
... 
hello
hello
hello

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;综合-得出答案&#34;&gt;综合，得出答案&lt;/h3&gt;

&lt;p&gt;用for的实现:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; for x in range(0,9):
...     print random.randrange(1,10)
... 
2
5
3
7
9
4
7
3
1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发散到用while的实现(原代码见上面的wiki网页)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; x = 1
&amp;gt;&amp;gt;&amp;gt; while x &amp;lt; 10:
...     print random.randrange(1,10)
...     x += 1
... 
4
4
4
5
1
9
1
8
2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然你还可以反着弄while:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; x = 10
&amp;gt;&amp;gt;&amp;gt; while x &amp;gt; 0:
等等等等，不提示了

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(10)</title>
      <link>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-10/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-10/</guid>
      <description>

&lt;h3 id=&#34;use-template-in-flask&#34;&gt;Use Template In Flask&lt;/h3&gt;

&lt;p&gt;To use template in flask, we should put the static file under the &lt;code&gt;templates&lt;/code&gt; folder under the root directory. Our index page should looks like following:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/frontpage.jpg&#34; alt=&#34;/images/frontpage.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So our html file shall wrote like following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;{{title}}&amp;lt;/title&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;/static/assets/css/styles.css&amp;quot; /&amp;gt;

&amp;lt;!--[if IE]&amp;gt;&amp;lt;script src=&amp;quot;assets/js/excanvas.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;![endif]--&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div id=&amp;quot;page&amp;quot;&amp;gt;
	&amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt;
        &amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;Nanjing Weather/PM Statistics&amp;lt;/h2&amp;gt;

        &amp;lt;div id=&amp;quot;periodDropDown&amp;quot;&amp;gt;
        
        	&amp;lt;span class=&amp;quot;left&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
            &amp;lt;span class=&amp;quot;currentPeriod&amp;quot;&amp;gt;Last 24 hours&amp;lt;/span&amp;gt;
            &amp;lt;span class=&amp;quot;arrow&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
            &amp;lt;span class=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
            
        	&amp;lt;ul&amp;gt;
            	&amp;lt;li data-action=&amp;quot;24hours&amp;quot;&amp;gt;Last 24 hours&amp;lt;/li&amp;gt;
                &amp;lt;li data-action=&amp;quot;7days&amp;quot;&amp;gt;Last 7 Days&amp;lt;/li&amp;gt;
                &amp;lt;li data-action=&amp;quot;30days&amp;quot;&amp;gt;Last 30 Days&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
	&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;temperature section&amp;quot;&amp;gt;
    	&amp;lt;h3&amp;gt;Temperature&amp;lt;/h3&amp;gt;
       	&amp;lt;div id=&amp;quot;plot&amp;quot;&amp;gt;
        	&amp;lt;span class=&amp;quot;preloader&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;humidity section&amp;quot;&amp;gt;
	    &amp;lt;h3&amp;gt;Humidity&amp;lt;/h3&amp;gt;
	    &amp;lt;div id=&amp;quot;humi_plot&amp;quot;&amp;gt;
		    &amp;lt;span class=&amp;quot;preloader&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
	    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    
    &amp;lt;div class=&amp;quot;pm2.5 section&amp;quot;&amp;gt;
	    &amp;lt;h3&amp;gt;PM2.5&amp;lt;/h3&amp;gt;
	    &amp;lt;div id=&amp;quot;pm25_plot&amp;quot;&amp;gt;
		    &amp;lt;span class=&amp;quot;preloader&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
	    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;pm10 section&amp;quot;&amp;gt;
	    &amp;lt;h3&amp;gt;PM10&amp;lt;/h3&amp;gt;
	    &amp;lt;div id=&amp;quot;pm10_plot&amp;quot;&amp;gt;
		    &amp;lt;span class=&amp;quot;preloader&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
	    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

	

    
&amp;lt;/div&amp;gt;

&amp;lt;p id=&amp;quot;footer&amp;quot;&amp;gt;
{{year}} &amp;amp;copy; {{title}}. Powered by &amp;lt;a href=&amp;quot;kkkttt.github.io&amp;quot;&amp;gt;Dash&amp;lt;/a&amp;gt; UTC: {{utctime}}
&amp;lt;/p&amp;gt;
&amp;lt;script src=&amp;quot;/static/assets/js/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/static/assets/js/script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/static/assets/js/jquery.flot.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use CSS file to make sure the vision effect, to use css in flask, put your files into the directory &lt;code&gt;static&lt;/code&gt; under the root directory. Just like following :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree static 
static
└── assets
    ├── css
    │   └── styles.css
    ├── img
    │   ├── bg_tile.jpg
    │   ├── bg_vert.jpg
    │   ├── preloader.gif
    │   └── sprite.png
    └── js
        ├── jquery.flot.min.js
        ├── jquery.min.js
        └── script.js


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rendering-html&#34;&gt;Rendering Html&lt;/h3&gt;

&lt;p&gt;In genhtml.py, we define the function which rendering the html template like following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# @app.route(&#39;/index&#39;)
@app.route(&#39;/&#39;)
# Generate the index page, for debugging now
def index():
    # Use template for rendering the content
    Current_Year = datetime.now().strftime(&amp;quot;%Y::%H:%M &amp;quot;)
    Current_UTC = datetime.utcnow().strftime(&amp;quot;%H:%M&amp;quot;)
    return render_template(&#39;index.html&#39;, title=&amp;quot;NanJing Weather and PM2.5/10 Statistics&amp;quot;, year=Current_Year, utctime=Current_UTC)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open your first page, you will see the rendered effect. But the flot div remains empty, next chapter we will introduce the javascript which used for draw the flot picture and AJAX which used for updating the content.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(11)</title>
      <link>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-11/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-11/</guid>
      <description>

&lt;h3 id=&#34;draw-flot-picture&#34;&gt;Draw Flot Picture&lt;/h3&gt;

&lt;p&gt;Since the article is mainly on writing apps, I don&amp;rsquo;t want to spend much time on how to use javascript or flot for drawing picture.&lt;br /&gt;
Simply checkout the code on github, you will see the code which is used for retrieving the data and start drawing plot pictures.&lt;/p&gt;

&lt;h3 id=&#34;fetching-24-hours-data&#34;&gt;Fetching 24-hours Data&lt;/h3&gt;

&lt;p&gt;Fetching 24 latest records from the postgres database, and then add them into the chart, chart then has been sent to simplejson which used for updating the flot picture locally .&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@app.route(&#39;/ajax/24hours/&#39;)
# ajax updateing for 24-hour data
def TwentyFourHours():
    # Here we will visit postgres for retrieving back the last 24 hours&#39; data
    # Local version
    # engine = create_engine(&#39;postgresql+psycopg2://Trusty:@localhost:5432/mylocaldb&#39;, echo=True)
    # Heroku Version
    db_conn = os.environ[&#39;DATABASE_URL&#39;]
    engine = create_engine(db_conn)
    # Engine selection
    metadata=MetaData(bind=engine)
    weather_table=Table(&#39;weather&#39;,metadata,
        Column(&#39;Insert_Time&#39;, DateTime(timezone=True),primary_key=True),
        Column(&#39;Temperature&#39;, Integer),
        Column(&#39;Humidity&#39;, Integer),
        Column(&#39;PmTen&#39;, Integer),
        Column(&#39;PmTwoFive&#39;, Integer),
    )
    s = select([weather_table]).order_by(weather_table.c.Insert_Time.desc()).limit(24)
    conn = engine.connect()
    result = conn.execute(s)
    chart = []
    for row in result:
        # row[0], datetime; 
        # row[1], Temperature;
        # row[2], Humidity;
        # row[3], PM10;
        # row[4], PM2.5; 

        ###  append row[x] into the char ###
        # chart.append({
        chart.insert(0, {
            &amp;quot;label&amp;quot;: (row[0] + timedelta(hours = 8)).strftime(&amp;quot;%H:%M&amp;quot;),
            &amp;quot;value&amp;quot;: row[1],
            &amp;quot;humi_value&amp;quot;: row[2],
            &amp;quot;pm25_value&amp;quot;: row[4],
            &amp;quot;pm10_value&amp;quot;: row[3]
            })

    jsonStr = simplejson.dumps({
        # This is char, will be used in script.js
        &amp;quot;chart&amp;quot; :{
            # tooltip is used by the jQuery chart:
            &amp;quot;tooltip&amp;quot;   : &amp;quot;Temperature at %1: %2 degree&amp;quot;,
            # humi_tooltip is used for jQuery chart for humidity:
            &amp;quot;humi_tooltip&amp;quot; : &amp;quot;Humidity at %1: %2 \%&amp;quot;,
            &amp;quot;pm25_tooltip&amp;quot; : &amp;quot;PM2.5 at %1: %2 ug/m(3)&amp;quot;,
            &amp;quot;pm10_tooltip&amp;quot; : &amp;quot;PM10 at %1: %2 ug/m(3)&amp;quot;,
            &amp;quot;data&amp;quot;      : chart
            },
        # This is &amp;quot;downtime&amp;quot; will be used in script.js
             &amp;quot;downtime&amp;quot;  : getDowntime(1)
        })

    return jsonStr;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The periodic task which runs in &lt;code&gt;tasks.py&lt;/code&gt; will fetching the data from the python api and the webpage, then insert them into the postgres database, so here in 24-hours&amp;rsquo; function we just get them out and fill in the flot picture.&lt;/p&gt;

&lt;h3 id=&#34;daily-data&#34;&gt;Daily Data&lt;/h3&gt;

&lt;p&gt;Daily data shall be generated via calculating them at the mid-night, that is, at the beginning of a brand new day, we will calculate out the last day&amp;rsquo;s average data.&lt;br /&gt;
The code is implemented in &lt;code&gt;tasks.py&lt;/code&gt; as a crontab task, the code is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Every Day we will run a periodly work which will calculate 
# the average temperature/humidity/pm2.5/pm10 task, and store
# it into the daily database, thus we have to define new Database
# here and insert data into.
# Beijing is locate at east 8 zone, thus 16:12 + 8 hour = 24:12
# At every mid-night(24:12) it will caculate the average value for
# the past 24 hours. 
@periodic_task(run_every=crontab(hour=16, minute=12))
def OneDayHandler():
    # First Get the last 24 hours&#39; data set
    # Local Engine
    # engine = create_engine(&#39;postgresql+psycopg2://Trusty:@localhost:5432/mylocaldb&#39;,echo=True)
    # Heroku Engine
    db_conn = environ[&#39;DATABASE_URL&#39;]
    engine = create_engine(db_conn)
    metadata=MetaData(bind=engine)
    # Definition of the weather table
    weather_table=Table(&#39;weather&#39;,metadata,
    	Column(&#39;Insert_Time&#39;, DateTime(timezone=True),primary_key=True),
    	Column(&#39;Temperature&#39;, Integer),
    	Column(&#39;Humidity&#39;, Integer),
    	Column(&#39;PmTen&#39;, Integer),
    	Column(&#39;PmTwoFive&#39;, Integer),
    )
    # Get last 24 records, If we suppose there are truely 24 records in last 24 hours, we can enable this sentense. But sometimes, this will be wrong. 
    s = select([weather_table]).order_by(weather_table.c.Insert_Time.asc()).limit(24)
    conn = engine.connect()
    results = conn.execute(s)

    # Temperature
    totTemperature = 0
    avgTemperature = 0
    # Humidity
    totHumidity = 0
    avgHumidity = 0
    # PM2.5
    totPm25 = 0
    avgPm25 = 0
    # PM10
    totPm10 = 0
    avgPm10 = 0

    records_number = 0 
    for item in results:
        totTemperature += item[1]
        totHumidity += item[2]
        totPm25 += item[4]
        totPm10 += item[3]
        records_number += 1

    if records_number&amp;gt;0:
        avgTemperature = totTemperature/records_number
        avgHumidity = totHumidity/records_number
        avgPm25 = totPm25/records_number
        avgPm10 = totPm10/records_number

    # Definition of the avg_eather table
    avg_metadata = MetaData(bind=engine)
    avg_weather_table=Table(&#39;avg_weather&#39;,avg_metadata,
    	Column(&#39;avg_Insert_Time&#39;, DateTime(timezone=True),primary_key=True),
    	Column(&#39;avg_Temperature&#39;, Integer),
    	Column(&#39;avg_Humidity&#39;, Integer),
    	Column(&#39;avg_PmTen&#39;, Integer),
    	Column(&#39;avg_PmTwoFive&#39;, Integer),
    )
    # Create table in db
    avg_metadata.create_all(checkfirst=True)
    # Create insert sentense
    avg_ins = avg_weather_table.insert()
    # Really insert
    avg_ins = avg_weather_table.insert().values(avg_Insert_Time=datetime.utcnow(), avg_Temperature = avgTemperature, avg_Humidity = avgHumidity, avg_PmTen = avgPm10, avg_PmTwoFive = av
gPm25)
    # Connect to engine and execute
    avg_conn = engine.connect()
    avg_conn.execute(avg_ins)

    return 1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We defined a new table named avg_weather, and at the mid-night we will retrieve the latest 24 records, calculating their average value, then insert them into the aver_weather table.&lt;/p&gt;

&lt;h3 id=&#34;displaying-daily-data&#34;&gt;Displaying Daily Data&lt;/h3&gt;

&lt;p&gt;The main procedure is mainly like in 24-hours datas, but notice we are select from avg_weather, and we only select 7 items.&lt;br /&gt;
30-days data is very simple, change the day from 7 to 30, then you can see the monthly data.&lt;/p&gt;

&lt;h3 id=&#34;write-testing-interface&#34;&gt;Write Testing Interface&lt;/h3&gt;

&lt;p&gt;We hope we can manually test the functions via web. So we added following testing APIs in genhtml.py:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@app.route(&#39;/test/fetch/&#39;)
def fetch():
    fetch_and_store_data()
    return &amp;quot;Fetching Test Done!!!&amp;quot;;

@app.route(&#39;/test/gen/&#39;)
def generateOneDay():
    OneDayHandler()
    return &amp;quot;Generate Test Done!!!&amp;quot;;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we visit &lt;a href=&#34;http://Your_app_address/test/fetch&#34;&gt;http://Your_app_address/test/fetch&lt;/a&gt;, the program will fetch back the data.  And for &lt;a href=&#34;http://Your_app_address/test/gen&#34;&gt;http://Your_app_address/test/gen&lt;/a&gt;, the daily average data will be generated.&lt;/p&gt;

&lt;p&gt;Next Chapter is the last one. We simply paste the screenshots of the APP.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(12)</title>
      <link>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-12/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-12/</guid>
      <description>

&lt;h3 id=&#34;final-effect&#34;&gt;Final Effect&lt;/h3&gt;

&lt;p&gt;Following is the final effect of our own app:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/effect_1.jpg&#34; alt=&#34;/images/effect_1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/effect_2.jpg&#34; alt=&#34;/images/effect_2.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/effect_3.jpg&#34; alt=&#34;/images/effect_3.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are lots to be finalize and optimized, but currently It could be ful-fill our requirements which retriving the data and generate the flot.&lt;br /&gt;
The next series I will try to write some ruby or node.js programs which did the same functionalities, to compare the differencies between app developement.&lt;br /&gt;
Also to write a web-proxy is a work full of challenge, this will be took as next consideration of developing apps on heroku .&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(9)</title>
      <link>http://purplepalmdash.github.io/2014/05/12/write-python-weather-app-on-heroku-9/</link>
      <pubDate>Mon, 12 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/12/write-python-weather-app-on-heroku-9/</guid>
      <description>

&lt;h3 id=&#34;understanding-the-flask-and-jinja&#34;&gt;Understanding the flask and Jinja&lt;/h3&gt;

&lt;h4 id=&#34;flask-example&#34;&gt;Flask Example&lt;/h4&gt;

&lt;p&gt;hello1.py is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import Flask
app = Flask(__name__)

@app.route(&amp;quot;/&amp;quot;)
def index():
    return &#39;Index Page&#39;

@app.route(&#39;/hello&#39;)
def hello():
    return &amp;quot;Hello World!&amp;quot;

@app.route(&#39;/hello1&#39;)
def hello1():
    return &amp;quot;Hello World 1!&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
    app.run()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run this via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python hello1.py

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then use your browser for visiting &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;, &lt;a href=&#34;http://localhost:5000/hello&#34;&gt;http://localhost:5000/hello&lt;/a&gt;, &lt;a href=&#34;http://localhost:5000/hello1&#34;&gt;http://localhost:5000/hello1&lt;/a&gt;. You will view different output result.&lt;/p&gt;

&lt;h4 id=&#34;jinja-example&#34;&gt;Jinja Example&lt;/h4&gt;

&lt;p&gt;The sample.py is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Load the jinja library&#39;s namespace into the current module.
import jinja2

# In this case, we will load templates off the filesystem.
# This means we must construct a FileSystemLoader object.
# 
# The search path can be used to make finding templates by
#   relative paths much easier.  In this case, we are using
#   absolute paths and thus set it to the filesystem root.
templateLoader = jinja2.FileSystemLoader( searchpath=&amp;quot;/&amp;quot; )

# An environment provides the data necessary to read and
#   parse our templates.  We pass in the loader object here.
templateEnv = jinja2.Environment( loader=templateLoader )

# This constant string specifies the template file we will use.
TEMPLATE_FILE = &amp;quot;//home/Trusty/code/python/heroku/Jinja2/example1.jinja&amp;quot;

# Read the template file using the environment object.
# This also constructs our Template object.
template = templateEnv.get_template( TEMPLATE_FILE )

# Specify any input variables to the template as a dictionary.
templateVars = { &amp;quot;title&amp;quot; : &amp;quot;Test Example&amp;quot;,
                 &amp;quot;description&amp;quot; : &amp;quot;A simple inquiry of function.&amp;quot; }

# Finally, process the template to produce our final text.
outputText = template.render( templateVars )
print outputText

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the example1.jinja at the corresponding directory, contains following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;

  &amp;lt;title&amp;gt;{{ title }}&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;{{ description }}&amp;quot; /&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;Why, hello there!&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the result will viewed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;

  &amp;lt;title&amp;gt;Test Example&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;A simple inquiry of function.&amp;quot; /&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;Why, hello there!&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rendering-template-returning&#34;&gt;Rendering Template Returning&lt;/h3&gt;

&lt;p&gt;First create the template file under the directory &amp;lsquo;templates&amp;rsquo;, this is the default position for flask for searching the template files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir templates
$ cat layout.html
&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
.metanav
{
    background-color: yellow;
}
&amp;lt;/style&amp;gt;
&amp;lt;div class=&amp;quot;page&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Flaskr&amp;lt;/h1&amp;gt;
  &amp;lt;div class=&amp;quot;metanav&amp;quot;&amp;gt;
  {{ a_random_string }}
  {{ a_random_list[3] }}
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in the genhtml.py, we add the following lines for let the template system to rendering our pages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import render_template
@app.route(&#39;/index&#39;)
# Generate the index page, for debugging now
def index():
    # Use template for rendering the content
    rand_list= [0, 1, 2, 3, 4, 5]
    return render_template(&#39;layout.html&#39;, a_random_string=&amp;quot;Heey, what&#39;s up!&amp;quot;, a_random_list=rand_list)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now browser you &lt;a href=&#34;http://localhost:5000/index&#34;&gt;http://localhost:5000/index&lt;/a&gt;, you can see the template rendered result.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(7)</title>
      <link>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-7/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-7/</guid>
      <description>

&lt;p&gt;We will continue to deploy our tasks on heroku. In this article we will finish the data retriving and database insertion.&lt;/p&gt;

&lt;h3 id=&#34;honcho&#34;&gt;Honcho&lt;/h3&gt;

&lt;p&gt;Install and Configuration of Honcho:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install honcho
# Regenerate requirement.txt and upload it onto heroku
$ mv Procfile ProcfileHoncho
# Edit the new Procfile: 
$ vim Procfile
web: honcho -f ProcfileHoncho start

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In local, we can also use following command for swiftly verifying our code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Because our user belongs to root group, so set following variable firstly
$ export C_FORCE_ROOT=1
$ foreman start

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can visit &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt; for viewing the result.&lt;/p&gt;

&lt;h3 id=&#34;task-py&#34;&gt;task.py&lt;/h3&gt;

&lt;p&gt;Following is the script for tasks.py:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Set default encoding: utf-8
import sys;
reload(sys);
# Setting the utf-8 format
sys.setdefaultencoding(&amp;quot;utf8&amp;quot;)


import logging
import string
from celery import Celery
from celery.task import periodic_task
from datetime import datetime,timedelta
from os import environ


# For retrieving temperature/humidity
import pywapi
import urllib2
from urllib2 import ProxyHandler
import re
from BeautifulSoup import BeautifulSoup

# For using database(Postgresql)
# from flash.ext.sqlalchemy import SQLAlchemy
from sqlalchemy import create_engine
from sqlalchemy import MetaData, Column, Table, ForeignKey
from sqlalchemy import Integer, String, DateTime


# redis configuration for celery
### Local, should be change to remote when deploying to heroku
REDIS_URL = environ.get(&#39;REDISTOGO_URL&#39;, &#39;redis://localhost&#39;)

celery = Celery(&#39;tasks&#39;, broker=REDIS_URL)

# Fetch 


# Define Periodic Tasks
# @periodic_task(run_every=timedelta(minutes=60))
# Funciton for fetching data and store it in Postgres
def fetch_and_store_data():
    # Fetching the weather information from Yahoo. 
    Yahoo_Result = pywapi.get_weather_from_yahoo(&#39;CHXX0099&#39;)
    Current_Temp = string.lower(Yahoo_Result[&#39;condition&#39;][&#39;temp&#39;])
    Current_Humi = string.lower(Yahoo_Result[&#39;atmosphere&#39;][&#39;humidity&#39;])
    Tomorrow_Forecast = Yahoo_Result[&#39;forecasts&#39;][0]
    Twenty_Four_Hours = Yahoo_Result[&#39;forecasts&#39;][1]
    Fourty_Eight_Hours = Yahoo_Result[&#39;forecasts&#39;][2]
    Seventy_Two_Hours = Yahoo_Result[&#39;forecasts&#39;][3]
    # !!! comment proxy related for deploying to heroku !!! #
    proxy = urllib2.ProxyHandler({&#39;http&#39;: &#39;192.11.236.225:8000&#39;})
    opener = urllib2.build_opener(proxy)
    urllib2.install_opener(opener)
    page = urllib2.urlopen(&amp;quot;http://www.pm25.in/nanjing&amp;quot;)
    soup = BeautifulSoup(page)                      #
    # Find the detailed table from the soup.        #
    table = soup.find(&#39;table&#39;, {&#39;id&#39;:&#39;detail-data&#39;})#
    # Fetch the XuanWuHu, if not, use MaiGaoQiao ins#tead. 
    rows = table.findAll(&#39;tr&#39;)                      #
    for subrows in rows:                            #
        if &amp;quot;玄武湖&amp;quot; in subrows.text:                #
            XuanwuLake = subrows                    #
        else:                                       #
            if &amp;quot;迈皋桥&amp;quot; in subrows.text:            #
                XuanwuLake = subrows                #
    XuanwuLake_subitem = XuanwuLake.findAll(&#39;td&#39;)   #
    # Here we will get an array, fetch out the text #for the content from this array.
    # Fetched origin data, different from cnpm25.cn #
    pm_25_orig = XuanwuLake_subitem[4].text         #
    pm_10_orig = XuanwuLake_subitem[5].text
    # Open the Database
    engine = create_engine(&#39;postgresql+psycopg2://Trusty:@localhost:5432/mylocaldb&#39;,echo=True)
    metadata=MetaData(bind=engine)
    
    # Definition of the weather table
    weather_table=Table(&#39;weather&#39;,metadata,
    	Column(&#39;Insert_Time&#39;, DateTime(timezone=True),primary_key=True),
    	Column(&#39;Temperature&#39;, Integer),
    	Column(&#39;Humidity&#39;, Integer),
    	Column(&#39;PmTen&#39;, Integer),
    	Column(&#39;PmTwoFive&#39;, Integer),
    )

    # Create the table in mylocaldb
    metadata.create_all(checkfirst=True)

    # Record Insertion
    # First generate an insertion sentense:
    ins = weather_table.insert()
    # Really insert into the Database
    # ins = weather_table.insert().values(Insert_Time=datetime.datetime.utcnow(), Temperature=25, Humidity=75, PmTen=100, PmTwoFive=55)   # Example
    ins = weather_table.insert().values(Insert_Time=datetime.utcnow(), Temperature=Current_Temp, Humidity=Current_Humi, PmTen=int(pm_10_orig), PmTwoFive=int(pm_25_orig))
    # Connect to engine and execute.
    conn = engine.connect()
    result = conn.execute(ins)

    #return Current_Temp
    return pm_25_orig



@periodic_task(run_every=timedelta(seconds=10))
def print_fib():
    #logging.info(fib(30))
    logging.info(&amp;quot;This could be viewed in logging!&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice, this version only works in local.&lt;br /&gt;
For updating the real database on heroku, we have to do some modification on redis server and remove the proxy server, these are the works we need to done in next chapter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(8)</title>
      <link>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-8/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-8/</guid>
      <description>

&lt;h3 id=&#34;deploy-on-heroku&#34;&gt;Deploy on Heroku&lt;/h3&gt;

&lt;p&gt;The deployed version is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Set default encoding: utf-8
import sys;
reload(sys);
# Setting the utf-8 format
sys.setdefaultencoding(&amp;quot;utf8&amp;quot;)

import os
import logging
import string
from celery import Celery
from celery.task import periodic_task
from datetime import datetime,timedelta
from os import environ


# For retrieving temperature/humidity
import pywapi
import urllib2
from urllib2 import ProxyHandler
import re
from BeautifulSoup import BeautifulSoup

# For using database(Postgresql)
# from flash.ext.sqlalchemy import SQLAlchemy
from sqlalchemy import create_engine
from sqlalchemy import MetaData, Column, Table, ForeignKey
from sqlalchemy import Integer, String, DateTime


# redis configuration for celery
### Local, should be change to remote when deploying to heroku
# REDIS_URL = environ.get(&#39;REDISTOGO_URL&#39;, &#39;redis://localhost&#39;)
### Heroku Ways
REDIS_URL = environ.get(&#39;REDISCLOUD_URL&#39;)


celery = Celery(&#39;tasks&#39;, broker=REDIS_URL)

# Fetch 


# Define Periodic Tasks
@periodic_task(run_every=timedelta(minutes=60))
# Funciton for fetching data and store it in Postgres
def fetch_and_store_data():
    # Fetching the weather information from Yahoo. 
    Yahoo_Result = pywapi.get_weather_from_yahoo(&#39;CHXX0099&#39;)
    Current_Temp = string.lower(Yahoo_Result[&#39;condition&#39;][&#39;temp&#39;])
    Current_Humi = string.lower(Yahoo_Result[&#39;atmosphere&#39;][&#39;humidity&#39;])
    Tomorrow_Forecast = Yahoo_Result[&#39;forecasts&#39;][0]
    Twenty_Four_Hours = Yahoo_Result[&#39;forecasts&#39;][1]
    Fourty_Eight_Hours = Yahoo_Result[&#39;forecasts&#39;][2]
    Seventy_Two_Hours = Yahoo_Result[&#39;forecasts&#39;][3]
    # !!! comment proxy related for deploying to heroku !!! #
    # proxy = urllib2.ProxyHandler({&#39;http&#39;: &#39;1xx.x.xx.xxx:2xxx&#39;})
    # opener = urllib2.build_opener(proxy)
    # urllib2.install_opener(opener)
    # !!! comment out end #
    page = urllib2.urlopen(&amp;quot;http://www.pm25.in/nanjing&amp;quot;)
    soup = BeautifulSoup(page)                      #
    # Find the detailed table from the soup.        #
    table = soup.find(&#39;table&#39;, {&#39;id&#39;:&#39;detail-data&#39;})#
    # Fetch the XuanWuHu, if not, use MaiGaoQiao ins#tead. 
    rows = table.findAll(&#39;tr&#39;)                      #
    for subrows in rows:                            #
        if &amp;quot;玄武湖&amp;quot; in subrows.text:                #
            XuanwuLake = subrows                    #
        else:                                       #
            if &amp;quot;迈皋桥&amp;quot; in subrows.text:            #
                XuanwuLake = subrows                #
    XuanwuLake_subitem = XuanwuLake.findAll(&#39;td&#39;)   #
    # Here we will get an array, fetch out the text #for the content from this array.
    # Fetched origin data, different from cnpm25.cn #
    pm_25_orig = XuanwuLake_subitem[4].text         #
    pm_10_orig = XuanwuLake_subitem[5].text
    # Open the Database
    # Local Engine
    # engine = create_engine(&#39;postgresql+psycopg2://Trusty:@localhost:5432/mylocaldb&#39;,echo=True)
    # Heroku Engine
    db_conn = environ[&#39;DATABASE_URL&#39;]
    engine = create_engine(db_conn)

    metadata=MetaData(bind=engine)
    
    # Definition of the weather table
    weather_table=Table(&#39;weather&#39;,metadata,
    	Column(&#39;Insert_Time&#39;, DateTime(timezone=True),primary_key=True),
    	Column(&#39;Temperature&#39;, Integer),
    	Column(&#39;Humidity&#39;, Integer),
    	Column(&#39;PmTen&#39;, Integer),
    	Column(&#39;PmTwoFive&#39;, Integer),
    )

    # Create the table in mylocaldb
    metadata.create_all(checkfirst=True)

    # Record Insertion
    # First generate an insertion sentense:
    ins = weather_table.insert()
    # Really insert into the Database
    # ins = weather_table.insert().values(Insert_Time=datetime.datetime.utcnow(), Temperature=25, Humidity=75, PmTen=100, PmTwoFive=55)   # Example
    ins = weather_table.insert().values(Insert_Time=datetime.utcnow(), Temperature=Current_Temp, Humidity=Current_Humi, PmTen=int(pm_10_orig), PmTwoFive=int(pm_25_orig))
    # Connect to engine and execute.
    conn = engine.connect()
    result = conn.execute(ins)

    #return Current_Temp
    return pm_25_orig


# Every 3 minutes we will see debug information, from heroku log
# @periodic_task(run_every=timedelta(minutes=3))
# @periodic_task(run_every=timedelta(seconds=3))
# def print_fib():
#     #logging.info(fib(30))
#     logging.info(&amp;quot;This could be viewed in logging!&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This version use remote service, and it will handle the fetching/updating every 60 minutes.&lt;/p&gt;

&lt;h3 id=&#34;prevent-heroku-from-sleeping&#34;&gt;Prevent Heroku from Sleeping&lt;/h3&gt;

&lt;p&gt;Register a service at &lt;a href=&#34;https://uptimerobot.com/&#34;&gt;https://uptimerobot.com/&lt;/a&gt;, it will automatically ping or get http(s) service from your web apps.&lt;/p&gt;

&lt;p&gt;Until now, almost all of the back-end has been set up. We can fetch the data and periodly insert into the database, and our web app will continue to run(Never sleep).&lt;br /&gt;
Tomorrow we will try to write a beautiful front-end for our webapp.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(5)</title>
      <link>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-5/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-5/</guid>
      <description>

&lt;p&gt;In fact this is a migration from sqlite3 to postgresql.&lt;/p&gt;

&lt;h3 id=&#34;view-the-historical-sqlite3&#34;&gt;View the historical sqlite3&lt;/h3&gt;

&lt;p&gt;We will refer to our own design of database. First fetch the data file, this is a sqlite3 file, so we use sqlite3 to view its structure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sqlite3  
SQLite version 3.8.4.3 2014-04-03 16:53:12
Enter &amp;quot;.help&amp;quot; for usage hints.
Connected to a transient in-memory database.
Use &amp;quot;.open FILENAME&amp;quot; to reopen on a persistent database.
sqlite&amp;gt; .open ./weather.db
sqlite&amp;gt; .tables
foo
sqlite&amp;gt; .schema foo
CREATE TABLE foo (d_temper integer, d_humi integer, d_pm10 integer, d_pm25 real, d_time timestamp);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although sqlite3 is supported on heroku, we&amp;rsquo;d better use heroku&amp;rsquo;s suggestion, to use postgre for storing out database.&lt;/p&gt;

&lt;h3 id=&#34;create-database-in-postgres&#34;&gt;Create Database In Postgres&lt;/h3&gt;

&lt;p&gt;####Datatime selection:&lt;br /&gt;
Postgres provides a very fantanstic way for handling the datatime, it supports the timezone, comparing to GAE&amp;rsquo;s database, this feature will let us get the current time based on timezone. So we did the following tests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# CREATE TABLE my_tbl (
mylocaldb(# my_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
mylocaldb(# CHECK(EXTRACT(TIMEZONE FROM my_timestamp) = &#39;0&#39;)
mylocaldb(# );
CREATE TABLE
mylocaldb=# \dt my_tbl
        List of relations
 Schema |  Name  | Type  | Owner 
--------+--------+-------+-------
 public | my_tbl | table | Trusty
(1 row)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we want to insert the datatime into table &amp;lsquo;my_tbl&amp;rsquo;, simply do following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mylocaldb=# SET timezone = &#39;UTC&#39;;
SET
mylocaldb=# INSERT INTO my_tbl (my_timestamp) VALUES (NOW());
INSERT 0 1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for querying out the inserted records, we do following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mylocaldb=# select * from public.my_tbl
;
         my_timestamp          
-------------------------------
 2014-05-10 01:39:52.87532+00
 2014-05-10 01:42:44.130269+00
(2 rows)

mylocaldb=# SET timezone=&#39;Asia/Shanghai&#39;;
SET
mylocaldb=# select * from public.my_tbl
mylocaldb-# ;
         my_timestamp          
-------------------------------
 2014-05-10 09:39:52.87532+08
 2014-05-10 09:42:44.130269+08
(2 rows)

mylocaldb=# SET timezone=&#39;America/Los_Angeles&#39;;
SET
mylocaldb=# select * from public.my_tbl;
         my_timestamp          
-------------------------------
 2014-05-09 18:39:52.87532-07
 2014-05-09 18:42:44.130269-07
(2 rows)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see the output formats depends on our &amp;ldquo;timezone&amp;rdquo; value.&lt;/p&gt;

&lt;h4 id=&#34;select-other-data-formats&#34;&gt;Select Other Data Formats&lt;/h4&gt;

&lt;p&gt;We listed following table for describing the Data we inserted:&lt;br /&gt;
Timestamp       integer     integer    integer    integer&lt;br /&gt;
Insert_Time     Temperature Humidity   PMTen       PMTwoFive&lt;/p&gt;

&lt;p&gt;Thus the sql sentense is as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mylocaldb=# CREATE TABLE weather (
mylocaldb(# my_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
mylocaldb(# Temperature ^C
mylocaldb=# CREATE TABLE weather (
mylocaldb(# Insert_Time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
mylocaldb(# Temperature integer,
mylocaldb(# Humidity integer,
mylocaldb(# PMTen integer,
mylocaldb(# PMTwoFive integer,
mylocaldb(#  CHECK(EXTRACT(TIMEZONE FROM Insert_Time) = &#39;0&#39;));

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the tables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mylocaldb=# \dt
        List of relations
 Schema |  Name   | Type  | Owner 
--------+---------+-------+-------
 public | my_tbl  | table | Trusty
 public | user    | table | Trusty
 public | weather | table | Trusty
(3 rows)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert one record:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mylocaldb=# INSERT INTO weather (Insert_Time, Temperature, Humidity, PMTen, PMTwoFive) VALUES(NOW(), 25, 80, 150, 75);
INSERT 0 1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Displaying the inserted record:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mylocaldb=# SET timezone=&#39;Asia/Shanghai&#39;;
SET
mylocaldb=# select * from public.weather;
          insert_time          | temperature | humidity | pmten | pmtwofive 
-------------------------------+-------------+----------+-------+-----------
 2014-05-10 10:38:27.276043+08 |          25 |       80 |   150 |        75
(1 row)

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;database-operation&#34;&gt;Database Operation&lt;/h4&gt;

&lt;p&gt;We need to create just once database, So this function should be Check_Or_Create().&lt;br /&gt;
We need to insert records, so Insert_Record() should be written.&lt;br /&gt;
Other Operation, modification or delete shouldn&amp;rsquo;t care at the very beginning.&lt;br /&gt;
We will use a new file for recording all of the function.&lt;/p&gt;

&lt;p&gt;The code for Create and Insert record into weather table is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from sqlalchemy import create_engine
from sqlalchemy import MetaData, Column, Table, ForeignKey
from sqlalchemy import Integer, String, DateTime
import datetime

# Create the engine for connecting the local database
# How to connect the remote engine, heroku postgres? 
# Yes, it&#39;s possible. The DATABASE_URL environment variable provided by heroku fits perfectly as argument for create_engine. Behind the scene, it&#39;s a postgresql database, which is perfectly handled by sqlalchemy.
# 
# The way to do it may vary depending on the framework you use, but there shouldn&#39;t be any difficulty.

engine = create_engine(&#39;postgresql+psycopg2://Trusty:@localhost:5432/mylocaldb&#39;,echo=True)
metadata=MetaData(bind=engine)

# Definition of the weather table
weather_table=Table(&#39;weather&#39;,metadata,
	Column(&#39;Insert_Time&#39;, DateTime(timezone=True),primary_key=True),
	Column(&#39;Temperature&#39;, Integer),
	Column(&#39;Humidity&#39;, Integer),
	Column(&#39;PmTen&#39;, Integer),
	Column(&#39;PmTwoFive&#39;, Integer),
)

# Create the table in mylocaldb
metadata.create_all(checkfirst=True)

# The actual SQL Language
#CREATE TABLE weather (
#	&amp;quot;Insert_Time&amp;quot; TIMESTAMP WITH TIME ZONE NOT NULL, 
#	&amp;quot;Temperature&amp;quot; INTEGER, 
#	&amp;quot;Humidity&amp;quot; INTEGER, 
#	&amp;quot;PmTen&amp;quot; INTEGER, 
#	&amp;quot;PmTwoFive&amp;quot; INTEGER, 
#	PRIMARY KEY (&amp;quot;Insert_Time&amp;quot;)
#)

# mylocaldb=# select * from public.weather;
#  Insert_Time | Temperature | Humidity | PmTen | PmTwoFive 
# -------------+-------------+----------+-------+-----------
# (0 rows)

# Record Insertion
# First generate an insertion sentense:
ins = weather_table.insert()
#&amp;gt;&amp;gt;&amp;gt; str(ins)
#&#39;INSERT INTO weather (&amp;quot;Insert_Time&amp;quot;, &amp;quot;Temperature&amp;quot;, &amp;quot;Humidity&amp;quot;, &amp;quot;PmTen&amp;quot;, &amp;quot;PmTwoFive&amp;quot;) VALUES (%(Insert_Time)s, %(Temperature)s, %(Humidity)s, %(PmTen)s, %(PmTwoFive)s)&#39;

ins = weather_table.insert().values(Insert_Time=datetime.datetime.utcnow(), Temperature=25, Humidity=75, PmTen=100, PmTwoFive=55)

#&amp;gt;&amp;gt;&amp;gt; str(ins)
#&#39;INSERT INTO weather (&amp;quot;Insert_Time&amp;quot;, &amp;quot;Temperature&amp;quot;, &amp;quot;Humidity&amp;quot;, &amp;quot;PmTen&amp;quot;, &amp;quot;PmTwoFive&amp;quot;) VALUES (%(Insert_Time)s, %(Temperature)s, %(Humidity)s, %(PmTen)s, %(PmTwoFive)s)&#39;
#
#&amp;gt;&amp;gt;&amp;gt; ins.compile().params
#{&#39;PmTen&#39;: 100, &#39;PmTwoFive&#39;: 55, &#39;Temperature&#39;: 25, &#39;Insert_Time&#39;: datetime.datetime(2014, 5, 10, 5, 58, 21, 677234), &#39;Humidity&#39;: 75}

# Connect to engine and execute. 
conn = engine.connect()
# &amp;gt;&amp;gt;&amp;gt; conn
# &amp;lt;sqlalchemy.engine.base.Connection object at 0x2715890&amp;gt;
result = conn.execute(ins)
# View result in psql
# mylocaldb=# select * from public.weather;
#           Insert_Time          | Temperature | Humidity | PmTen | PmTwoFive 
# -------------------------------+-------------+----------+-------+-----------
#  2014-05-10 05:58:21.677234+08 |          25 |       75 |   100 |        55

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The critical functions has been pointed out in the above python file. Now we will consider how to run these functions at background. This will lead to next topic, &amp;ldquo;Run multiple process in a single Heroku dyno&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(6)</title>
      <link>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-6/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-6/</guid>
      <description>

&lt;h3 id=&#34;risk&#34;&gt;Risk&lt;/h3&gt;

&lt;p&gt;On Google App Engine it&amp;rsquo;s very convinient to setup a crontab task, while in heroku setting up a crontab task will occupy the material, thus will use another dyno, each dyno will cost $30/month. For avoiding this, we will re-design our Weather App.&lt;br /&gt;
Following is the detailed explanation on heroku&amp;rsquo;s dyno:&lt;br /&gt;
Heroku allows you to run one free dyno (or actually they give you 720 free dyno hours per month, which corresponds to one dyno constantly running). This means that if you choose to run one web dyno and one worker dyno (celery in this case), you&amp;rsquo;ll be charged for 720 dyno hours. However, if you have a very small project, or your&amp;rsquo;re working on a project that hasn&amp;rsquo;t been released yet, you can avoid this cost.&lt;br /&gt;
A heroku dyno is like a process, and in this process you can actually spawn new processes, as long as you stay within the limit of 512 mb ram (the process also only has one CPU core). Heroku suggests that you use foreman when you run your application on your local machine, but you can actually use foreman on heroku, in order to run multiple processes in a single dyno.&lt;br /&gt;
On Heroku, we don’t have physical machines; in fact there isn’t the concept of “machine” at all. Instead, Heroku has Dynos, which are described as “lightweight containers” for UNIX processes. From their documentation:&lt;/p&gt;

&lt;p&gt;[A Dyno] can run any command available in its default environment combined with your app’s slug&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Celery&lt;a href=&#34;www.celeryproject.org&#34;&gt;www.celeryproject.org&lt;/a&gt;&lt;br /&gt;
or&lt;br /&gt;
Honcho&lt;a href=&#34;https://github.com/nickstenning/honcho&#34;&gt;https://github.com/nickstenning/honcho&lt;/a&gt;&lt;br /&gt;
We will try Honcho first, because it&amp;rsquo;s based on python, so won&amp;rsquo;t affect our code format.&lt;/p&gt;

&lt;h4 id=&#34;celery-way&#34;&gt;Celery Way&lt;/h4&gt;

&lt;p&gt;Install redis and celery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install redis celery

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to use &lt;code&gt;pip freeze&lt;/code&gt; to update the requirement.txt file.&lt;br /&gt;
We should also enable the RedisToGo plugin, install it via CLI:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku addons:add rediscloud

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t have a credit card, then your installation of plugin will be fail. We will register an account on &lt;a href=&#34;www.redislabs.com/&#34;&gt;www.redislabs.com&lt;/a&gt;, then we will continue our setting.  ]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku config:set REDISCLOUD_URL=&amp;quot;http://Resouce_Name:Redis_Passwod@pub-redis-xxxx.xxx.xxx..garantiadata.com:1xxx3&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your heroku app will restart, then we can test this redis database via following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku run python
Running `python` attached to terminal... up, run.8246
Python 2.7.6 (default, Jan 16 2014, 02:39:37) 
[GCC 4.4.3] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; import urlparse
&amp;gt;&amp;gt;&amp;gt; import redis
&amp;gt;&amp;gt;&amp;gt; url = urlparse.urlparse(os.environ.get(&#39;REDISCLOUD_URL&#39;))
&amp;gt;&amp;gt;&amp;gt; r = redis.Redis(host=url.hostname, port=url.port, password=url.password)
&amp;gt;&amp;gt;&amp;gt; r.set(&#39;foo&#39;,&#39;bar&#39;)
True
&amp;gt;&amp;gt;&amp;gt; r.get(&#39;foo&#39;)
&#39;bar&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An Article of using celery is right after this article, so we end this article and in next one we will re-design the web app to fit the celery way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku/</guid>
      <description>

&lt;h3 id=&#34;accounting-setting&#34;&gt;Accounting Setting&lt;/h3&gt;

&lt;p&gt;First you should have heroku accounting, then create an app on heroku, write down its repository information, mine is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your app, python-weather-app, has been created.    
App URL:    
http://python-weather-app.herokuapp.com/   
Git URL:    
git@heroku.com:python-weather-app.git      
Use the following code to set up your app for local development:    

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git clone git@heroku.com:python-weather-app.git -o heroku&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Suggested next steps    
 Get started with Heroku.   
 Add some collaborators.    
 Check out some of our great add-ons.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before you continue, make sure you have install heroku tools:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yaourt -S heroku-toolbelt

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-helloworld-app&#34;&gt;Create HelloWorld App&lt;/h3&gt;

&lt;p&gt;Use github for recording all of the source code.&lt;br /&gt;
Create a repository on github, mine is at &amp;ldquo;git@github.com:kkkttt/herokuWeatherApp.git&amp;rdquo;, then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pwd
/home/Trusty/code/herokuWeatherApp
$ touch README.md
$ git init
$ git add README.md
$ git commit -m &amp;quot;first commit&amp;quot;
$ git remote add origin git@github.com:kkkttt/herokuWeatherApp.git
$ git push -u origin master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First login with heroku:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku login
Enter your Heroku credentials.
Email: xxxxxx@gmail.com
Password (typing will be hidden): 
Authentication successful.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create the folder which holds WeatherApp and create the venv, later we will use virtual environment for working:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ virtualenv2 venv
New python executable in venv/bin/python2
Also creating executable in venv/bin/python
Installing setuptools, pip...done.
$ source venv/bin/activate
(venv) $ pip install Flask gunicorn

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we write a very simple python file, name it &amp;ldquo;hello.py&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import os
from flask import Flask

app = Flask(__name__)

@app.route(&#39;/&#39;)
def hello():
    return &#39;Hello World!&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a Procfile in the root directory which holds our own App:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat Procfile 
web: gunicorn hello:app

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use foreman for preview the web app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ foreman start
14:53:37 web.1  | started with pid 30946
14:53:37 web.1  | 2014-05-09 14:53:37 [30946] [INFO] Starting gunicorn 18.0
14:53:37 web.1  | 2014-05-09 14:53:37 [30946] [INFO] Listening at: http://0.0.0.0:5000 (30946)
....

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your browser and visit &amp;ldquo;&lt;a href=&#34;http://127.0.0.1:5000&amp;quot;&#34;&gt;http://127.0.0.1:5000&amp;quot;&lt;/a&gt; and you can see &amp;ldquo;Hello World&amp;rdquo; is in browser.&lt;br /&gt;
Now make the requirement file in the root folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip freeze&amp;gt;requirements.txt
(venv)$ cat requirements.txt 
Flask==0.10.1
Jinja2==2.7.2
MarkupSafe==0.23
Werkzeug==0.9.4
gunicorn==18.0
itsdangerous==0.24
wsgiref==0.1.2

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deploy-it-to-heroku&#34;&gt;Deploy It To Heroku&lt;/h3&gt;

&lt;p&gt;We have to ignore the temp files, so we add following into our .gitignores file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .gitignore
*~
*.pyc
venv/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We add the app into the heroku:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku git:remote -a python-weather-app
Git remote heroku added
(venv)$ git remote -v
heroku	git@heroku.com:python-weather-app.git (fetch)
heroku	git@heroku.com:python-weather-app.git (push)
origin	git@github.com:kkkttt/herokuWeatherApp.git (fetch)
origin	git@github.com:kkkttt/herokuWeatherApp.git (push)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deploy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push heroku master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open your browser and visit &amp;ldquo;&lt;a href=&#34;http://python-weather-app.herokuapp.com/&amp;quot;&#34;&gt;http://python-weather-app.herokuapp.com/&amp;quot;&lt;/a&gt; you will see the webpage displays &amp;ldquo;Hello World!&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(2)</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-2/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-2/</guid>
      <description>

&lt;h3 id=&#34;get-current-weather-data&#34;&gt;Get Current Weather Data&lt;/h3&gt;

&lt;p&gt;Now we begin to change our APP to a real funny staff. First we change the hello.py and begin to write our own &amp;ldquo;genhtml.py&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mv hello.py genhtml.py
$ cat Procfile
web: gunicorn genhtml:app

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We know there is an python library which we could install from pip named &amp;ldquo;pywapi&amp;rdquo;, simply install it via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv2) $ pip install pywapi

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your pip&amp;rsquo;s version is 1.5.1, then notice you have to use following command for installing the pywapi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv2) $ pip install pywapi --allow-external pywapi --allow-unverified pywapi
Downloading/unpacking pywapi
  pywapi is potentially insecure and unverifiable.
  Downloading pywapi-0.3.8.tar.gz
  Running setup.py (path:/home/Trusty/code/herokuWeatherApp/venv/build/pywapi/setup.py) egg_info for package pywapi
    
Installing collected packages: pywapi
  Running setup.py install for pywapi
    
Successfully installed pywapi
Cleaning up...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now change the genhtml.py to following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import os
from flask import Flask

import pywapi
import string

app = Flask(__name__)

@app.route(&#39;/&#39;)

# Generate the Nanjing Weather Data
def genhtml():
    Yahoo_Result = pywapi.get_weather_from_yahoo(&#39;CHXX0099&#39;)
    Current_Temp = string.lower(Yahoo_Result[&#39;condition&#39;][&#39;temp&#39;])
    Current_Humi = string.lower(Yahoo_Result[&#39;atmosphere&#39;][&#39;humidity&#39;])
    Tomorrow_Forecast = Yahoo_Result[&#39;forecasts&#39;][0]
    Twenty_Four_Hours = Yahoo_Result[&#39;forecasts&#39;][1]
    Fourty_Eight_Hours = Yahoo_Result[&#39;forecasts&#39;][2]
    Seventy_Two_Hours = Yahoo_Result[&#39;forecasts&#39;][3]
    return Current_Temp

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After modification, we use &amp;ldquo;foreman start&amp;rdquo; for previewing the result, we can see the webpage returns the current temperature of Nanjing, its value is 25, as in following picture:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/current_temp.jpg&#34; alt=&#34;/images/current_temp.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This shows the pywapi could be work together with other components, we will continue for next step.&lt;br /&gt;
###Deployment On Heroku
You need to change the requirement.txt file like following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat requirements.txt
--allow-all-external
--allow-unverified pywapi
Flask==0.10.1
Jinja2==2.7.2
MarkupSafe==0.23
Werkzeug==0.9.4
gunicorn==18.0
itsdangerous==0.24
pywapi==0.3.8
wsgiref==0.1.2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run &amp;ldquo;git push heroku master&amp;rdquo;, open your browser and visit &lt;a href=&#34;http://python-weather-app.herokuapp.com/&#34;&gt;http://python-weather-app.herokuapp.com/&lt;/a&gt;, the output the same as in local.&lt;/p&gt;

&lt;p&gt;By now, we have created a very simple app on getting the current temperature of nanjing, next chapter we will use database for timely record the data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(3)</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-3/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-3/</guid>
      <description>

&lt;h3 id=&#34;database-introduction&#34;&gt;Database Introduction&lt;/h3&gt;

&lt;h4 id=&#34;heroku-postgres-installation&#34;&gt;Heroku Postgres Installation&lt;/h4&gt;

&lt;p&gt;Before using postgres, we have to install this add-ons, we call this step &amp;ldquo;attach Heroku POSTGRES to heroku application&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku addons
python-weather-app has no add-ons.
$ heroku addons:add heroku-postgresql:dev
Adding heroku-postgresql:dev on python-weather-app... done, v7 (free)
Attached as HEROKU_POSTGRESQL_OLIVE_URL
Database has been created and is available
 ! This database is empty. If upgrading, you can transfer
 ! data from another database with pgbackups:restore.
Use `heroku addons:docs heroku-postgresql` to view documentation.
$ heroku addons | grep POSTGRES
heroku-postgresql:dev  HEROKU_POSTGRESQL_OLIVE

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to refer the documentation of heroku postgres, simply use following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku addons:docs heroku-postgresql
Opening heroku-postgresql docs... done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new browser window will be opened and you can view the help here.&lt;br /&gt;
View the configuration of heroku postgres via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku pg:info
=== HEROKU_POSTGRESQL_OLIVE_URL (DATABASE_URL)
Plan:        Dev
Status:      Available
Connections: 0
PG Version:  9.3.4
Created:     2014-05-09 11:25 UTC
Data Size:   6.4 MB
Tables:      0
Rows:        0/10000 (In compliance)
Fork/Follow: Unsupported
Rollback:    Unsupported

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10000 rows means, if we use 24 rows per day, then around 1 year this database will be fulfilled. But anyway, at the very beginning developing, we won&amp;rsquo;t consider the latter problem.&lt;br /&gt;
After you installed the postgre for around 5 minutes, you can use following commands for displaying your database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku pg:ps
 pid | state | source | running_for | waiting | query 
-----+-------+--------+-------------+---------+-------
(0 rows)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can connect to pg via following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku pg:psql
---&amp;gt; Connecting to HEROKU_POSTGRESQL_OLIVE_URL (DATABASE_URL)
psql (9.3.4)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type &amp;quot;help&amp;quot; for help.

d47ena4men35jn=&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What for next?&lt;/p&gt;

&lt;h4 id=&#34;local-postgres-installation&#34;&gt;Local Postgres Installation&lt;/h4&gt;

&lt;p&gt;Install postgres via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pacamn -S postgre
$ sudo -i -u postgres
[postgres@DashArch ~]$ initdb --locale en_US.UTF-8 -E UTF8 -D &#39;/var/lib/postgres/data&#39;
# In another terminal, enable and start the service
$ sudo systemctl start postgresql
$ sudo systemctl enable postgresql

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add current user into the postgres user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[postgres@DashArch ~]$ createuser --interactive
Enter name of role to add: Trusty
Shall the new role be a superuser? (y/n) y
# Now &#39;Trusty&#39; as postgres user, can create the weatherData database. 
$ createdb weatherData

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basic user of postgres:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ psql -d weatherData   
psql (9.3.4)
Type &amp;quot;help&amp;quot; for help.

weatherData=# \help
......
weatherData=# \q
$ 

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;connect-database-in-python-local-way&#34;&gt;Connect Database In Python(Local Way)&lt;/h4&gt;

&lt;p&gt;Install the python packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install psycopg2
$ pip freeze 
# Add the psycopg2 related line into the requirements.txt

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simple example on how to connect Database and view the content of the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Trusty@~]$ sudo -u postgres createuser jim
[Trusty@~]$ sudo -u postgres createdb testdb -O jim
[Trusty@~/code/herokuWeatherApp]$ source venv/bin/activate
(venv)[Trusty@~/code/herokuWeatherApp]$ python
Python 2.7.6 (default, Feb 26 2014, 12:07:17) 
[GCC 4.8.2 20140206 (prerelease)] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import psycopg2
&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; con = None
&amp;gt;&amp;gt;&amp;gt; con = psycopg2.connect(database=&#39;testdb&#39;, user=&#39;jim&#39;)
&amp;gt;&amp;gt;&amp;gt; cur = con.cursor()
&amp;gt;&amp;gt;&amp;gt; cur.execute(&#39;SELECT version()&#39;)   
&amp;gt;&amp;gt;&amp;gt; ver = cur.fetchone()
&amp;gt;&amp;gt;&amp;gt; print ver
(&#39;PostgreSQL 9.3.4 on x86_64-unknown-linux-gnu, compiled by gcc (GCC) 4.8.2 20140206 (prerelease), 64-bit&#39;,)
&amp;gt;&amp;gt;&amp;gt; con.close()
&amp;gt;&amp;gt;&amp;gt; quit()
(venv)[Trusty@~/code/herokuWeatherApp]$ 

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;connect-heroku-postgres&#34;&gt;Connect Heroku Postgres&lt;/h4&gt;

&lt;p&gt;Now commit our modifications into heroku, and verify to see if we can really do some magic things with postgres:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add .
$ git commit -m &amp;quot;commit for postgres&amp;quot;
$ git push heroku master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install a new library:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install flask-sqlalchemy
$ pip freeze  # grep the line and add it into the requirement.txt

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Promoting the URL to DATABASE_URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku pg:promote HEROKU_POSTGRESQL_OLIVE_URL
Promoting HEROKU_POSTGRESQL_OLIVE_URL (DATABASE_URL) to DATABASE_URL... done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then Add the following lines into genhtml.py:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask.ext.sqlalchemy import SQLAlchemy
app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = os.environ[&#39;DATABASE_URL&#39;]
db = SQLAlchemy(app)

##############FenGe_Line####################
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80))
    email = db.Column(db.String(120), unique=True)

    def __init__(self, name, email):
        self.name = name
        self.email = email

    def __repr__(self):
        return &#39;&amp;lt;Name %r&amp;gt;&#39; % self.name


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit again and begin for verifying the database via CLI:&lt;br /&gt;
Create a python interactive command window via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from genhtml import db
&amp;gt;&amp;gt;&amp;gt; db.create_all()
&amp;gt;&amp;gt;&amp;gt; from genhtml import User
&amp;gt;&amp;gt;&amp;gt; user = User(&#39;John Doe&#39;, &#39;john.doe@example.com&#39;)
&amp;gt;&amp;gt;&amp;gt; db.session.add(user)
&amp;gt;&amp;gt;&amp;gt; db.session.commit()
&amp;gt;&amp;gt;&amp;gt; all_users =User.query.all()
&amp;gt;&amp;gt;&amp;gt; print all_users
[&amp;lt;Name u&#39;John Doe&#39;&amp;gt;]


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can see 1 record has been inserted into the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Trusty@~/code/herokuWeatherApp]$ heroku pg:info
=== HEROKU_POSTGRESQL_OLIVE_URL (DATABASE_URL)
Plan:        Dev
Status:      Available
Connections: 2
PG Version:  9.3.4
Created:     2014-05-09 11:25 UTC
Data Size:   6.5 MB
Tables:      1
Rows:        1/10000 (In compliance)
Fork/Follow: Unsupported
Rollback:    Unsupported

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How to see the inserted data?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku pg:psql
---&amp;gt; Connecting to HEROKU_POSTGRESQL_OLIVE_URL (DATABASE_URL)
psql (9.3.4)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type &amp;quot;help&amp;quot; for help.

d47ena4men35jn=&amp;gt; select current_database();
 current_database 
------------------
 d47ena4men35jn
(1 row)

d47ena4men35jn=&amp;gt; \dt
           List of relations
 Schema | Name | Type  |     Owner      
--------+------+-------+----------------
 public | user | table | yjusdsrpwpplxp
(1 row)

d47ena4men35jn=&amp;gt; \d user;
                                 Table &amp;quot;public.user&amp;quot;
 Column |          Type          |                     Modifiers                     
--------+------------------------+---------------------------------------------------
 id     | integer                | not null default nextval(&#39;user_id_seq&#39;::regclass)
 name   | character varying(80)  | 
 email  | character varying(120) | 
Indexes:
    &amp;quot;user_pkey&amp;quot; PRIMARY KEY, btree (id)
    &amp;quot;user_email_key&amp;quot; UNIQUE CONSTRAINT, btree (email)

d47ena4men35jn=&amp;gt; SELECT * FROM public.user;
 id |   name   |        email         
----+----------+----------------------
  1 | John Doe | john.doe@example.com
(1 row)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use python&amp;rsquo;s interface for add/delete records, drop tables, etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(4)</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-4/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-4/</guid>
      <description>

&lt;h3 id=&#34;local-database-sync&#34;&gt;Local Database Sync&lt;/h3&gt;

&lt;p&gt;First fetch the remote database to localdb via following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku pg:pull DATABASE_URL mylocaldb --app  python-weather-app

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will pull down your database down and create a copy version locally. You can easily view all of the database via psql mylocaldb.&lt;/p&gt;

&lt;p&gt;As root, edit following files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pwd
/var/lib/postgres/data
# vim postgresql.conf
listen_addresses = &#39;localhost&#39;		# what IP address(es) to listen on;
					# comma-separated list of addresses;
					# defaults to &#39;localhost&#39;; use &#39;*&#39; for all
					# (change requires restart)
port = 5432				# (change requires restart)
# vim pb_hba.conf
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
host    all             all             127.0.0.1/32            md5

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After editing, save the file and restart the postgresql service.&lt;/p&gt;

&lt;h3 id=&#34;connecting-to-localdatabase&#34;&gt;Connecting to LocalDatabase&lt;/h3&gt;

&lt;p&gt;Following shows how to add/query the records. Now your environment could be totally debugged locally.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import psycopg2
&amp;gt;&amp;gt;&amp;gt; psycopg2.connect(database=&amp;quot;mylocaldb&amp;quot;,user=&amp;quot;Trusty&amp;quot;,password=&amp;quot;&amp;quot;,host=&amp;quot;127.0.0.1&amp;quot;,port=&amp;quot;5432&amp;quot;)
&amp;lt;connection object at 0x30f0cd0; dsn: &#39;dbname=mylocaldb user=Trusty password=xx host=127.0.0.1 port=5432&#39;, closed: 0&amp;gt;
&amp;gt;&amp;gt;&amp;gt; db_conn = &#39;postgresql+psycopg2://Trusty:@localhost/mylocaldb&#39;
&amp;gt;&amp;gt;&amp;gt; app = Flask(__name__) 
&amp;gt;&amp;gt;&amp;gt; app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = db_conn
&amp;gt;&amp;gt;&amp;gt; db = SQLAlchemy(app)
&amp;gt;&amp;gt;&amp;gt; db.create_all()
&amp;gt;&amp;gt;&amp;gt; class User(db.Model):
...     id = db.Column(db.Integer, primary_key=True)
...     name = db.Column(db.String(80))
...     email = db.Column(db.String(120), unique=True)
...     def __init__(self, name, email):
...         self.name = name
...         self.email = email
...     def __repr__(self):
...         return &#39;&amp;lt;Name %r&amp;gt;&#39; % self.name
... 
&amp;gt;&amp;gt;&amp;gt; user = User(&#39;John Doe&#39;, &#39;john.doe@example.com&#39;)
&amp;gt;&amp;gt;&amp;gt; all_users=User.query.all()
&amp;gt;&amp;gt;&amp;gt; print all_users
[&amp;lt;Name u&#39;John Doe&#39;&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; user1 = User(&#39;Jim Green&#39;, &#39;jim.green@english.com&#39;)
&amp;gt;&amp;gt;&amp;gt; db.session.add(user1)
&amp;gt;&amp;gt;&amp;gt; db.session.commit()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In genhtml.py we need to do corresponding changes in order to enable the local database.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>