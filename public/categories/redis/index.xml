<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Dash</title>
    <link>http://purplepalmdash.github.io/categories/redis/</link>
    <description>Recent content in Redis on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Mar 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/redis/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use Redis For Inter-Communication</title>
      <link>http://purplepalmdash.github.io/2014/03/21/use-redis-for-inter-communication/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/21/use-redis-for-inter-communication/</guid>
      <description>&lt;p&gt;###Play With Redis
On ArchLinux, we install redis via:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ sudo pacman -S redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enalbe and start the redis.service:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ sudo systemctl enable redis.service
	$ sudo systemctl start redis.service
	$ ps -ef | grep redis
	redis     7609     1  0 16:03 ?        00:00:00 /usr/bin/redis-server 127.0.0.1:6379
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Play with redis:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	[Trusty@DashArch queue]$ redis-cli 
	127.0.0.1:6379&amp;gt; set name leezk
	OK
	127.0.0.1:6379&amp;gt; get name
	&amp;quot;leezk&amp;quot;
	127.0.0.1:6379&amp;gt; del name
	(integer) 1
	127.0.0.1:6379&amp;gt; exists name
	(integer) 0
	127.0.0.1:6379&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###RQ: Simple Job Queue For Python
Install redis and rq:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ sudo pip2 install redis
	$ sudo pip2 install rq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install requests for debugging(Not related with RQ and Redis):&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ sudo pip2 install requests
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use following file for RedisQueue:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import redis

class RedisQueue(object):
    &amp;quot;&amp;quot;&amp;quot;Simple Queue with Redis Backend&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, name, namespace=&#39;queue&#39;, **redis_kwargs):
        &amp;quot;&amp;quot;&amp;quot;The default connection parameters are: host=&#39;localhost&#39;, port=6379, db=0&amp;quot;&amp;quot;&amp;quot;
        self.__db= redis.Redis(**redis_kwargs)
        self.key = &#39;%s:%s&#39; %(namespace, name)

    def qsize(self):
        &amp;quot;&amp;quot;&amp;quot;Return the approximate size of the queue.&amp;quot;&amp;quot;&amp;quot;
        return self.__db.llen(self.key)

    def empty(self):
        &amp;quot;&amp;quot;&amp;quot;Return True if the queue is empty, False otherwise.&amp;quot;&amp;quot;&amp;quot;
        return self.qsize() == 0

    def put(self, item):
        &amp;quot;&amp;quot;&amp;quot;Put item into the queue.&amp;quot;&amp;quot;&amp;quot;
        self.__db.rpush(self.key, item)

    def get(self, block=True, timeout=None):
        &amp;quot;&amp;quot;&amp;quot;Remove and return an item from the queue. 

        If optional args block is true and timeout is None (the default), block
        if necessary until an item is available.&amp;quot;&amp;quot;&amp;quot;
        if block:
            item = self.__db.blpop(self.key, timeout=timeout)
        else:
            item = self.__db.lpop(self.key)

        if item:
            item = item[1]
        return item

    def get_nowait(self):
        &amp;quot;&amp;quot;&amp;quot;Equivalent to get(False).&amp;quot;&amp;quot;&amp;quot;
        return self.get(False)


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testing the RedisQueue with following:&lt;br /&gt;
Put something into the RedisQueue:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;gt;&amp;gt;&amp;gt; from RedisQueue import RedisQueue
	&amp;gt;&amp;gt;&amp;gt; q = RedisQueue(&#39;test&#39;)
	&amp;gt;&amp;gt;&amp;gt; q.put(&#39;hello World!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fetch something from the RedisQueue:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;gt;&amp;gt;&amp;gt; from RedisQueue import RedisQueue
	&amp;gt;&amp;gt;&amp;gt; q = RedisQueue(&#39;test&#39;)
	&amp;gt;&amp;gt;&amp;gt; q.get()
	&#39;hello World!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Rewrite Dictionary Program&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>