<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Dash</title>
    <link>http://purplepalmdash.github.io/categories/web/</link>
    <description>Recent content in Web on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Jul 2016 15:26:23 +0800</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>用Flask框架搭建Web App</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/12/%E7%94%A8flask%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BAweb-app/</link>
      <pubDate>Tue, 12 Jul 2016 15:26:23 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/12/%E7%94%A8flask%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BAweb-app/</guid>
      <description>

&lt;p&gt;拥有Web界面的好处是显而易见的，譬如说，我们可能需要下载Youtube上的某一段视频。传统的操
作方式是这样的：登录位于国外的vps-&amp;gt; 下载youtube视频到VPS -&amp;gt; 退出vps登录 -&amp;gt;采用某种手段
(ftp/scp?)传送到本地。这时候如果有一个运行于远端VPS上的Web App，本地输入Youtube视频链接
，下载完毕后直接生成下载链接，这该有多好！这里我们来实现这个功能。&lt;/p&gt;

&lt;h3 id=&#34;flask&#34;&gt;Flask&lt;/h3&gt;

&lt;h4 id=&#34;运行环境&#34;&gt;运行环境&lt;/h4&gt;

&lt;p&gt;远程VPS位于Digital Ocean上，运行Ubuntu14.04。 这里我们基于python virtualenv来构建Flask
开发框架.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install -y python-virtualenv
$ virtualenv myflask
$ source ~/myflask/bin/activate
$ mkdir ~/flask_youtube
$ vim requirements.txt
Flask==0.10.1
$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行完上述命令后，flask运行环境就已经就绪了。&lt;/p&gt;

&lt;h4 id=&#34;flask-app&#34;&gt;Flask App&lt;/h4&gt;

&lt;p&gt;这里我们参考了以下链接（实际上是照搬):&lt;br /&gt;
&lt;a href=&#34;http://charlesleifer.com/blog/a-flask-front-end-and-chrome-extension-for-youtube-dl/&#34;&gt;http://charlesleifer.com/blog/a-flask-front-end-and-chrome-extension-for-youtube-dl/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也参考了(关于virtualenv):&lt;br /&gt;
&lt;a href=&#34;https://realpython.com/blog/python/setting-up-a-simple-ocr-server/&#34;&gt;https://realpython.com/blog/python/setting-up-a-simple-ocr-server/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim youtube.py
import subprocess
import sys

from flask import Flask, flash, redirect, request, render_template, url_for

DEBUG = False
SECRET_KEY = &#39;this is needed for flash messages&#39;

BINARY = &#39;/usr/bin/youtube-dl&#39;
DEST_DIR = &#39;/home/dash/videos&#39;
OUTPUT_TEMPLATE = &#39;%s/%%(title)s-%%(id)s.%%(ext)s&#39; % DEST_DIR

app = Flask(__name__)
app.config.from_object(__name__)

@app.route(&#39;/&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def download():
    if request.method == &#39;POST&#39;:
        url = request.form[&#39;url&#39;]
        p = subprocess.Popen([BINARY, &#39;-o&#39;, OUTPUT_TEMPLATE, &#39;-q&#39;, url])
        p.communicate()
        flash(&#39;Successfully downloaded!&#39;, &#39;success&#39;)
        return redirect(url_for(&#39;download&#39;))
    return render_template(&#39;download.html&#39;)

if __name__ == &#39;__main__&#39;:
    app.run(host=&#39;0.0.0.0&#39;, port=8801)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实例中用到了flask里的模版，为此我们需要创建template目录:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir templates
$ vim templates/download.html
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;youtuber&amp;lt;/title&amp;gt;
    &amp;lt;link rel=stylesheet type=text/css href=&amp;quot;{{ url_for(&#39;static&#39;, filename=&#39;css/youtuber.min.css&#39;) }}&amp;quot; /&amp;gt;
    &amp;lt;script src=&amp;quot;{{ url_for(&#39;static&#39;, filename=&#39;js/jquery-1.11.0.min.js&#39;) }}&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;{{ url_for(&#39;static&#39;, filename=&#39;js/bootstrap.min.js&#39;) }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
      {% for category, message in get_flashed_messages(with_categories=true) %}
        &amp;lt;div class=&amp;quot;alert alert-{{ category }} alert-dismissable&amp;quot;&amp;gt;
          &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;close&amp;quot; data-dismiss=&amp;quot;alert&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;×&amp;lt;/button&amp;gt;
          &amp;lt;p&amp;gt;{{ message }}&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
      {% endfor %}

      &amp;lt;h1&amp;gt;Download&amp;lt;/h1&amp;gt;
      &amp;lt;form action=&amp;quot;{{ url_for(&#39;download&#39;) }}&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
          &amp;lt;label for=&amp;quot;url&amp;quot;&amp;gt;URL&amp;lt;/label&amp;gt;
          &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;url&amp;quot; class=&amp;quot;form-control&amp;quot; id=&amp;quot;url&amp;quot; placeholder=&amp;quot;url&amp;quot; /&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Download&amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为我们这里有指定用&lt;code&gt;static/js&lt;/code&gt;下的静态文件，所以需要手动创建目录并下载文件:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir -p static/js
$ cd static/js
$ wget https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css
$ wget https://code.jquery.com/jquery-1.11.0.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;youtuber.min.css&lt;/code&gt;是样式表文件，这里先不加入，除了效果差一点，没啥副作用。&lt;/p&gt;

&lt;h4 id=&#34;运行&#34;&gt;运行&lt;/h4&gt;

&lt;p&gt;键入&lt;code&gt;python youtube.py&lt;/code&gt;即可运行该Web App. 访问&lt;code&gt;http://YourIPAddress:8801&lt;/code&gt;即可访问到该WebApp的界面:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_12_15_59_39_272x160.jpg&#34; alt=&#34;/images/2016_07_12_15_59_39_272x160.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;输入下载链接后，点击submit按钮后，VPS将自动下载该youtube影片。&lt;/p&gt;

&lt;h3 id=&#34;下载结果页面&#34;&gt;下载结果页面&lt;/h3&gt;

&lt;p&gt;下载结果页面需要在static目录下新建一个用于存放视频的&lt;code&gt;videos/&lt;/code&gt;目录夹. 同时需要添加一个模
板文件.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree
.
└── down
    ├── requirements.txt
    ├── static
    │   ├── js
    │   │   ├── bootstrap-3.0.0.min.js
    │   │   ├── bootstrap.min.js
    │   │   ├── jquery-1.10.2.min.js
    │   │   └── jquery-1.11.0.min.js
    │   └── videos
    │       ├── abc.mp4
    │       └── ccc.mp4
    ├── templates
    │   ├── download.html
    │   └── videos.html
    └── youtube.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;templates/videos.html&lt;/code&gt;文件是用于渲染下载视频文件的模版，内容如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Video download info&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
      &amp;lt;h1&amp;gt;All Downloadable Videos&amp;lt;/h1&amp;gt;
      {% for video in video_url %}
      &amp;lt;a href=&amp;quot;/static/videos/{{ video }}&amp;quot;&amp;gt;{{ video }}&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;
      {% endfor %}
      &amp;lt;h1&amp;gt;Click Following Links For Downloading!&amp;lt;/h1&amp;gt;
      &amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;Go Back To Download Page&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;youtube.py&lt;/code&gt;文件中添加&lt;code&gt;/videos&lt;/code&gt;路由，及相关处理函数:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import subprocess
import sys
import os
from flask import Flask, flash, redirect, request, render_template, url_for

DEBUG = False
SECRET_KEY = &#39;this is needed for flash messages&#39;

BINARY = &#39;/usr/bin/youtube-dl&#39;
DEST_DIR = &#39;/home/dash/down/static/videos/&#39;
OUTPUT_TEMPLATE = &#39;%s/%%(title)s-%%(id)s.%%(ext)s&#39; % DEST_DIR

app = Flask(__name__)
app.config.from_object(__name__)

@app.route(&#39;/&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def download():
    if request.method == &#39;POST&#39;:
        url = request.form[&#39;url&#39;]
        print url
        p = subprocess.Popen([BINARY, &#39;-o&#39;, OUTPUT_TEMPLATE, &#39;-q&#39;, url])
        p.communicate()
        flash(&#39;Successfully downloaded!&#39;, &#39;success&#39;)
        return redirect(url_for(&#39;videos&#39;))
    return render_template(&#39;download.html&#39;)

# For holding all of the videos
@app.route(&#39;/videos&#39;)
def videos():
    names = os.listdir(os.path.abspath(DEST_DIR))
    return render_template(&#39;videos.html&#39;, video_url=names)

if __name__ == &#39;__main__&#39;:
    app.run(host=&#39;0.0.0.0&#39;, port=8801)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;下载流程&#34;&gt;下载流程&lt;/h3&gt;

&lt;p&gt;首先，访问&lt;code&gt;http://YourIpAddress:8801/&lt;/code&gt;, 得到的结果如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_12_19_34_59_309x177.jpg&#34; alt=&#34;/images/2016_07_12_19_34_59_309x177.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;填入youtube上的视频地址以后，下载完毕后，可以看到videos页面变成了:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_12_19_38_03_582x271.jpg&#34; alt=&#34;/images/2016_07_12_19_38_03_582x271.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;删除功能&#34;&gt;删除功能&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;youtube.py&lt;/code&gt;添加一个函数和路由:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# For deleting specified file
@app.route(&#39;/delete/&amp;lt;filename&amp;gt;&#39;)
def remove_file(filename):
    filename_full = os.path.join(DEST_DIR, filename)
    print filename_full
    os.remove(filename_full)
    return redirect(url_for(&#39;videos&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模版文件更改:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim templates/videos.html 
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Video download info&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
      &amp;lt;h1&amp;gt;All Downloadable Videos&amp;lt;/h1&amp;gt;
      {% for video in video_url %}
      &amp;lt;a href=&amp;quot;/static/videos/{{ video }}&amp;quot;&amp;gt;{{ video }}&amp;lt;/a&amp;gt;
      &amp;lt;a href=&amp;quot;/delete/{{ video }}&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/static/img/fuck.png&amp;quot; alt=&amp;quot;FuckYou&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
      &amp;lt;a href=&amp;quot;/delete/{{ video }}&amp;quot;&amp;gt; Delete this video&amp;lt;/a&amp;gt;
      &amp;lt;br /&amp;gt;
      &amp;lt;hr&amp;gt;
      {% endfor %}
...........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fuck.png&lt;/code&gt;是从网上下载的图片，更改完毕后，页面如下:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/2016_07_12_20_27_39_748x382.jpg&#34; alt=&#34;/images/2016_07_12_20_27_39_748x382.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;todo&#34;&gt;ToDo&lt;/h3&gt;

&lt;p&gt;添加权限，只有认证过后的用户才能使用删除功能。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speed-Up the WP website in TianChao</title>
      <link>http://purplepalmdash.github.io/2015/01/30/speed-up-the-wp-website-in-tianchao/</link>
      <pubDate>Fri, 30 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/30/speed-up-the-wp-website-in-tianchao/</guid>
      <description>&lt;p&gt;Since our Great Fire Wall forbidden the google, thus all of the google related service becomes available in china, this leads to access to wordpress based website which uses google online fonts pretty slow. Following is how to speedup your website without too many changes:&lt;br /&gt;
First go to your website&amp;rsquo;s folder, find the files which calls &lt;code&gt;fonts.googleapis.com&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grep -i &amp;quot;fonts.googleapis.com&amp;quot; ./ -r
./wp-content/themes/twentytwelve/functions.php:		$font_url = add_query_arg( $query_args, &amp;quot;$protocol://fonts.googleapis.com/css&amp;quot; );
./wp-content/themes/twentyfifteen/functions.php:		), &#39;//fonts.googleapis.com/css&#39; );
./wp-content/themes/twentyfourteen/functions.php:		$font_url = add_query_arg( &#39;family&#39;, urlencode( &#39;Lato:300,400,700,900,300italic,400italic,700italic&#39; ), &amp;quot;//fonts.googleapis.com/css&amp;quot; );
./wp-content/themes/tdpersona/functions.php:	wp_enqueue_style( &#39;tdpersona-googlefonts&#39;, &#39;//fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700&#39; );
./wp-content/themes/twentythirteen/functions.php:		$fonts_url = add_query_arg( $query_args, &amp;quot;//fonts.googleapis.com/css&amp;quot; );
./wp-includes/script-loader.php:		$open_sans_font_url = &amp;quot;//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,300,400,600&amp;amp;subset=$subsets&amp;quot;;
./wp-includes/js/tinymce/plugins/compat3x/css/dialog.css:@import url(//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,300,400,600&amp;amp;subset=latin-ext,latin);


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace all of the &lt;code&gt;fonts.googleapis.com&lt;/code&gt; with &lt;code&gt;fonts.useso.com&lt;/code&gt;, this could be done via scripts.&lt;br /&gt;
After modification, your website will be much more faster than before.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enable Apache2 Redirect</title>
      <link>http://purplepalmdash.github.io/2015/01/22/enable-apache2-redirect/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/22/enable-apache2-redirect/</guid>
      <description>

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;Want to redirect from &lt;code&gt;http://xxx/&lt;/code&gt; to &lt;code&gt;http://xxx/a/b&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Change the configuration file of the &lt;code&gt;/etc/apache2/sites-enabled/000-default&lt;/code&gt;, enable the  &lt;code&gt;RedirectMatch&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# For forwarding all of the request to &#39;/&#39; TO &#39;/bin/view&#39;
 	RedirectMatch ^/$ /a/b

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart the service of apache2 then everything goes OK.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Switching To Blogging Using DO</title>
      <link>http://purplepalmdash.github.io/2015/01/19/switching-to-blogging-using-do/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/19/switching-to-blogging-using-do/</guid>
      <description>

&lt;p&gt;Since I changed the working PC, so I need to switch from the old machine to the new machine, while the new machine&amp;rsquo;s network speed is pretty slow, that force me to switching from the local side working to vps-side working, following is the steps for Using DigitalOcean for updating my blog.&lt;/p&gt;

&lt;h3 id=&#34;repository&#34;&gt;Repository&lt;/h3&gt;

&lt;p&gt;First using the git for pulling the repository from the github, following this article for setting the whole octopress system:&lt;br /&gt;
&lt;a href=&#34;http://kkkttt.github.io/blog/2014/07/30/zai-githubshang-bu-shu-ni-de-octopressbo-ke/&#34;&gt;http://kkkttt.github.io/blog/2014/07/30/zai-githubshang-bu-shu-ni-de-octopressbo-ke/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;new-tips&#34;&gt;New Tips&lt;/h3&gt;

&lt;p&gt;For the &lt;code&gt;_deploy&lt;/code&gt; directory is the newly generated one, we have to do following changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake setup_github_pages
cd _deploy
rm -f ./index.html
git remove index.html
git pull origin master
cd ..
rake generate &amp;amp;&amp;amp; rake deply

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the above steps, Writing blog in Octopress becomes possible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trouble Shooting On Lost SSH Connection</title>
      <link>http://purplepalmdash.github.io/2014/12/30/trouble-shooting-on-lost-ssh-connection/</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/30/trouble-shooting-on-lost-ssh-connection/</guid>
      <description>

&lt;p&gt;I found lots of ssh connection attack info under the folder of /var/log/btmp, So I decide to change the sshd default listening port, from 22 to xxxx. Following is the steps for doing this:&lt;/p&gt;

&lt;h3 id=&#34;change-sshd-listening-port&#34;&gt;Change SSHD Listening Port&lt;/h3&gt;

&lt;p&gt;Change the default port from 22 to xxxx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vim /etc/ssh/sshd_config
Change the port from 22 to xxxx
# service ssh restart

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, congratulations, you lost all of your connections, since you have enable the iptables and banned all of the other ports.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t worry, we have digitalOcean&amp;rsquo;s terminal service, from it we could reached the console.&lt;br /&gt;
But the problem is: it&amp;rsquo;s pretty slow for us to visit this webpage from China to US!&lt;br /&gt;
Then we should use another machine which runs coreos.&lt;br /&gt;
Create a new lxde based vnc machine simply via following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;core@Trustycore ~ $ docker pull dorowu/ubuntu-desktop-lxde-vnc

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the machine&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -i -t -p 6080:6080 dorowu/ubuntu-desktop-lxde-vnc

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then open your browser and visit:&lt;br /&gt;
&lt;code&gt;http://Your_ip_address:6080/vnc.html&lt;/code&gt; you could reached the vnc machine.&lt;/p&gt;

&lt;h3 id=&#34;memory-problem&#34;&gt;Memory Problem&lt;/h3&gt;

&lt;p&gt;Since the default memory is only 512MB, we have to enable the swapfile, thus we could use firefox for accessing the DigitalOcean terminal.&lt;br /&gt;
Following is the steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dd if=/dev/zero of=/swapfile bs=1M count=1024
$ sudo chmod 600 /swapfile 
$ sudo mkswap /swapfile
$ sudo vim /etc/systemd/system/swap.service
 [Unit]  
 Description=Turn on swap  
 [Service]  
 Type=oneshot  
 Environment=&amp;quot;SWAPFILE=/swapfile&amp;quot;
 RemainAfterExit=true  
 ExecStartPre=/usr/sbin/losetup -f ${SWAPFILE}  
 ExecStart=/usr/bin/sh -c &amp;quot;/sbin/swapon $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)&amp;quot;  
 ExecStop=/usr/bin/sh -c &amp;quot;/sbin/swapoff $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)&amp;quot;  
 ExecStopPost=/usr/bin/sh -c &amp;quot;/usr/sbin/losetup -d $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)&amp;quot;  
 [Install]  
 WantedBy=multi-user.target 
$ sudo  systemctl enable /etc/systemd/system/swap.service  
$ sudo systemctl start swap  

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you could happily use firefox in your vnc window.&lt;br /&gt;
Simply login to the terminal window, and modify the configuration file, restart the ssh service, now you could also change the iptables rules, to open xxxx port.&lt;/p&gt;

&lt;p&gt;Another way is to disable root login, in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;, set&lt;code&gt;#PermitRootLogin yes&lt;/code&gt; to &lt;code&gt;PermitRootLoginno&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You will be safe.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set Tiny Tiny Rss Reader on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/12/29/set-tiny-tiny-rss-reader-on-digitalocean/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/29/set-tiny-tiny-rss-reader-on-digitalocean/</guid>
      <description>

&lt;p&gt;Since Google Reader has been closed, many guys cannot find suitable Rss Reader for personal use. Following is a simple guildeline for setting up the Tiny Tiny Rss Reader on DigitalOcean, using docker, it&amp;rsquo;s pretty simple for setting up .&lt;/p&gt;

&lt;h3 id=&#34;container-setup&#34;&gt;Container Setup&lt;/h3&gt;

&lt;p&gt;Build two containers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd code
mkdir TinyTinyRss
cd TinyTinyRss/
git clone https://github.com/clue/docker-ttrss.git
cd docker-ttrss/
docker run -d --name ttrssdb nornagon/postgres
docker run -d --link ttrssdb:db -p 8078:80 clue/ttrss

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ttrssdb is the dababase name for postgres, while the clue/ttrss is the tinytinyRss Webapp.&lt;/p&gt;

&lt;h3 id=&#34;effect&#34;&gt;Effect&lt;/h3&gt;

&lt;p&gt;Visit the following URL:&lt;br /&gt;
&lt;code&gt;http://Your_IP:8078&lt;/code&gt;&lt;br /&gt;
Then you would see the following picture:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/tinytinyrss.jpg&#34; alt=&#34;/images/tinytinyrss.jpg&#34; /&gt;&lt;br /&gt;
The default username/password is admin/123456&lt;/p&gt;

&lt;h3 id=&#34;commit-changes&#34;&gt;Commit Changes&lt;/h3&gt;

&lt;p&gt;List the running images and commit the changes to the new container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~# docker ps
700c82aa344b        clue/ttrss:latest          /bin/sh -c &#39;php /con   3 days ago          Up 3 days           0.0.0.0:8078-&amp;gt;80/tcp                                             dreamy_davinci 
# docker commit 700c82aa344b wmz_tinyrss
c85a9d1a15b18685ffc3441e18f327059928aca623a39b36780184676f6d0921

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we could stop the running container and changes the listening port.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# docker stop 700c82aa344b
700c82aa344b
# docker run -d --link ttrssdb:db -p 8080:80 wmz_tinyrss
f378197f7a048a02550e9152a44929628cc77ce61ea1c9e223fc3c7a46fb9bb5

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the tinyRss listens on 8080 port.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dockerize Mail Sender</title>
      <link>http://purplepalmdash.github.io/2014/12/24/dockerize-mail-sender/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/24/dockerize-mail-sender/</guid>
      <description>

&lt;p&gt;In DigitalOcean VPS, which runs the Ubuntu 14.04.1 LTS, setup a mail sender server.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Install the docker.io via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# apt-get install docker.io

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git clone the repository from the github, configure it and build the container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pwd
/root/code/docker_mail
# git clone https://github.com/lava/dockermail.git
# ls
 dockermail
# cd dockermail
# cat mail-base/domains 
*******.com.cn
# cat mail-base/passwords 
catch-all@xxxxx.com.cn:{PLAIN}password123
admin@xxxxxx.com.cn:{SHA256-CRYPT}$5$3qaCC/fV65Adtfoy$O20EXoSOcgWKf5NyAZnXAtGPQoSgeYRjLm56M25.H12
# make

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the containers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@lilimarleen:~/code/docker_mail/dockermail# make run-all
docker run -d -p 0.0.0.0:25:25 -p 0.0.0.0:587:587 -p 0.0.0.0:143:143 -v /srv/vmail:/srv/vmail dovecot:2.1.7
4dac1e99be85100d7847fb46976249196b0a970ad4f630136cced4ccdc11ac27
docker run -d -p 127.0.0.1:33100:80 rainloop:1.6.9
e7246bcf39ddee334c45ca41c268eb5ebdc092d069024ff81b70f16a3ab11cb4
docker run -d -p 127.0.0.1:33200:80 -v /srv/owncloud:/var/www/owncloud/data owncloud:7.0.2 
9e62a4f6140cf43caeb5dc096f995649d3a898ffdeb439a7a7c4501c527f3672
root@lilimarleen:~/code/docker_mail/dockermail# docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                                                            NAMES
9e62a4f6140c        owncloud:7.0.2      /bin/sh -c &#39;cp -npr    3 seconds ago       Up 2 seconds        127.0.0.1:33200-&amp;gt;80/tcp                                          backstabbing_sinoussi   
e7246bcf39dd        rainloop:1.6.9      /bin/sh -c &#39;apachect   3 seconds ago       Up 3 seconds        127.0.0.1:33100-&amp;gt;80/tcp                                          sad_sinoussi            
4dac1e99be85        dovecot:2.1.7       /bin/sh -c &#39;chown -R   3 seconds ago       Up 3 seconds        0.0.0.0:25-&amp;gt;25/tcp, 0.0.0.0:143-&amp;gt;143/tcp, 0.0.0.0:587-&amp;gt;587/tcp   evil_ptolemy      

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nsenter&#34;&gt;nsenter&lt;/h3&gt;

&lt;p&gt;Use nsenter for entering the running container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Ubuntu 14.04 don&#39;t have nsenter - the straight forward way required me to install build tools and etc.
# I preferred to keep the system clean and install nsenter in a container and then copy the command to the host
# Note - its also possible to run nsenter from a container (didn&#39;t tried) https://github.com/jpetazzo/nsenter

# start a container
docker run --name nsenter -it ubuntu:14.04 bash

## in the docker
apt-get update
apt-get install git build-essential libncurses5-dev libslang2-dev gettext zlib1g-dev libselinux1-dev debhelper lsb-release pkg-config po-debconf autoconf automake autopoint libtool

git clone git://git.kernel.org/pub/scm/utils/util-linux/util-linux.git util-linux
cd util-linux/

./autogen.sh
./configure --without-python --disable-all-programs --enable-nsenter
make

## from different shell - on the host
docker cp nsenter:/util-linux/nsenter /usr/local/bin/
docker cp nsenter:/util-linux/bash-completion/nsenter /etc/bash_completion.d/nsenter

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus you have the nsenter.&lt;/p&gt;

&lt;h3 id=&#34;enter-the-container&#34;&gt;Enter the container&lt;/h3&gt;

&lt;p&gt;Get the PID via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# docker inspect --format &amp;quot;{{.State.Pid}}&amp;quot; a66adc0e63fc
24740

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter the docker container and view the status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# nsenter --target 24740 --mount --uts --ipc --net --pid -- /bin/bash
root@a66adc0e63fc:/# 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why we want to enter this terminal? Because we want to view the password of the admin. The configuration file says:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat mail-base/passwords 
admin@xxxx.com.cn:{SHA256-CRYPT}$5$3qaCC/fV65Adtfoy$O20EXoSOcgWKf5NyAZnXAtGPQoSgeYRjLm56M25.H12

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you met &amp;ldquo;port has been occupied&amp;rdquo;, you should do like following:&lt;br /&gt;
Remove all of the containers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# docker ps -a | grep &amp;quot;ago&amp;quot; |  awk &#39;{print $1}&#39; |  xargs --no-run-if-empty docker rm

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;trouble-shooting&#34;&gt;Trouble Shooting&lt;/h3&gt;

&lt;p&gt;First you should add corresponding MX record in you domainname service provider.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create Vagrant For JD</title>
      <link>http://purplepalmdash.github.io/2014/12/19/create-vagrant-for-jd/</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/19/create-vagrant-for-jd/</guid>
      <description>

&lt;h3 id=&#34;purpose&#34;&gt;Purpose&lt;/h3&gt;

&lt;p&gt;For deploying the development environment in the Vagrant based environment, choose ubuntu 14.04.&lt;/p&gt;

&lt;h3 id=&#34;create&#34;&gt;Create&lt;/h3&gt;

&lt;p&gt;List the exising Vagrants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box list
panamax-coreos-box-494.4.0 (virtualbox, 0)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now download the vbox file of 14.04 daily Cloud image i386 from &lt;a href=&#34;www.vagrantbox.es&#34;&gt;www.vagrantbox.es&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-i386-vagrant-disk1.box

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though this method could starts the vbox, but it&amp;rsquo;s not clean, it will have problems in our deliveris.  So use the result from &lt;a href=&#34;https://atlas.hashicorp.com/boxes/search&#34;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant init  ubuntu/trusty32
$ vagrant up

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Current we use 32, because we may have windowsxp users, or 32-bit system users.&lt;/p&gt;

&lt;p&gt;After installation, list all of the installed vboxes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box list
panamax-coreos-box-494.4.0 (virtualbox, 0)
ubuntu/trusty32            (virtualbox, 14.04)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;The Bootstrap.sh is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash
sudo debconf-set-selections &amp;lt;&amp;lt;&amp;lt; &#39;mysql-server-5.5 mysql-server/root_password password rootpass&#39;
sudo debconf-set-selections &amp;lt;&amp;lt;&amp;lt; &#39;mysql-server-5.5 mysql-server/root_password_again password rootpass&#39;
apt-get update
apt-get install -y meld
apt-get install -y nginx mysql-server mysql-server-5.5
apt-get install -y nodejs libc-ares2 libv8-3.14.5
apt-get install -y fossil
apt-get install -y git
apt-get install -y php5 php5-fpm
apt-get install -y php5-mysql
apt-get install -y php-pear
apt-get install -y install-info
apt-get install -y php5-dev
apt-get install -y npm
npm install -g pdf.js

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then write the Vagrantfile list like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant.configure(2) do |config|
  config.vm.box = &amp;quot;ubuntu/trusty32&amp;quot;
  config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.50.50&amp;quot;
  config.proxy.http = &amp;quot;http://1xx.x.xx.xxx:xxxx&amp;quot;
  config.proxy.https = &amp;quot;http://1xx.x.xx.xxx:xxxx&amp;quot;
  config.proxy.no_proxy = &amp;quot;localhost&amp;quot;
  config.vm.provision :shell, path: &amp;quot;bootstrap.sh&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;code&gt;vagrant provision&lt;/code&gt; then we could refresh the installation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dockerize Wordpress On DigitalOcean&#39;s CoreOS</title>
      <link>http://purplepalmdash.github.io/2014/12/13/dockerize-wordpress-on-digitaloceans-coreos/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/13/dockerize-wordpress-on-digitaloceans-coreos/</guid>
      <description>

&lt;h3 id=&#34;wordpress&#34;&gt;Wordpress&lt;/h3&gt;

&lt;p&gt;Install it via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull tutum/wordpress

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run it via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -p 80:80 tutum/wordpress &amp;amp;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now configure the backend, and you could directly access &lt;code&gt;http://Your_IP_Address&lt;/code&gt; for this wordpress website.&lt;/p&gt;

&lt;h3 id=&#34;import-database-and-static-files&#34;&gt;Import Database And Static Files&lt;/h3&gt;

&lt;p&gt;Since I have an old website, I want to import it in this container, following is the steps of how-to.&lt;br /&gt;
The exising database runs on Debian 7, and its platform is arm-based, see if we could directly retrieve the wordpress and extract them into it.&lt;/p&gt;

&lt;h4 id=&#34;extract-the-mysql-datafile&#34;&gt;Extract the MYSQL Datafile&lt;/h4&gt;

&lt;p&gt;Use mysqldump for extracting the existing wordpress file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysqldump -u root -p[root-password] wordpress&amp;gt;~/wordpress.mysql

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then copy the &lt;code&gt;wordpress.mysql&lt;/code&gt; to the remote server.&lt;/p&gt;

&lt;h4 id=&#34;replacement&#34;&gt;Replacement&lt;/h4&gt;

&lt;p&gt;Be sure to use gedit for replacing the old &lt;code&gt;fxx***.iiiouge.biz:7777&lt;/code&gt; to &lt;code&gt;1xx.xxx.xxx.xxx&lt;/code&gt; then all of your links will be acts well.&lt;br /&gt;
Then upload the /var/www/ directory to your server&amp;rsquo;s corresponding directory, here ours is &lt;code&gt;/var/www/html&lt;/code&gt;, eg. &lt;code&gt;/app&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;import-the-mysql-datafile&#34;&gt;Import the MYSQL Datafile&lt;/h4&gt;

&lt;p&gt;Attached to running wordpress in DO via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker ps
CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS              PORTS                          NAMES
cfddafcc96f5        tutum/wordpress:latest   &amp;quot;/run.sh&amp;quot;              25 hours ago        Up 25 hours         3306/tcp, 0.0.0.0:80-&amp;gt;80/tcp   drunk_brown         
$ docker exec -it cfddafcc96f5 bash

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give you a terminal for accessing the running container. Examine the wordpress running environments:&lt;br /&gt;
The WP files are located at &lt;code&gt;/var/www/html&lt;/code&gt;, the mysql file locates at &lt;code&gt;/var/lib/mysql/wordpress&lt;/code&gt;, then how to import the old wordpress website is the things we want to solve.&lt;br /&gt;
Install phpMyAdmin for importing the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install phpmyadmin apache-utils
$ sudo vim /etc/apache2/apache2.conf
Include /etc/phpmyadmin/apache.conf
$ sudo service apache2 restart
Include /etc/phpmyadmin/apache.conf
$ sudo service apache2 restart

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you could directly access the phpMyAdmin page with username root and empty password, this is dangerous, but we just for demononstration, needn&amp;rsquo;t care it.&lt;br /&gt;
Use phpMyAdmin for importing the sql file which we extracted from the old wordpress.&lt;/p&gt;

&lt;h4 id=&#34;trouble-shooting&#34;&gt;Trouble shooting&lt;/h4&gt;

&lt;p&gt;When uploading the www file and replaced, the connection shows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;数据库连接错误
您在wp-config.php文件中提供的数据库用户名和密码可能不正确，或者无法连接到localhost上的数据库服务器，这意味着您的主机数据库服务器已停止工作。

您确认您提供的用户名和密码正确么？
您确认您提供的主机名正确么？
您确认数据库服务器运行正常么？

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because we provided the wrong password for the mysql, change it to the username &lt;code&gt;root&lt;/code&gt; and nopassword.&lt;/p&gt;

&lt;p&gt;Restart the apache2 server now your website acts good.&lt;/p&gt;

&lt;h4 id=&#34;hide-phpmyadmin-page-the-username-root-and-nopassword&#34;&gt;Hide phpMyAdmin Page the username &lt;code&gt;root&lt;/code&gt; and nopassword.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nano /etc/phpmyadmin/apache.conf 
&amp;lt;Directory /usr/share/phpmyadmin&amp;gt;
        Options FollowSymLinks
        DirectoryIndex index.php
        AllowOverride All
        [...]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the htaccess method via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nano /usr/share/phpmyadmin/.htaccess
AuthType Basic
AuthName &amp;quot;Restricted Files&amp;quot;
AuthUserFile /etc/apache2/.phpmyadmin.htpasswd
Require valid-user

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then set the password for root via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo htpasswd -c /etc/apache2/.phpmyadmin.htpasswd root

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After doing this, restart the apache2 service, now your phpMyAdmin page is under the protection of the username and the password.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Re-Write WeatherAPP</title>
      <link>http://purplepalmdash.github.io/2014/12/10/re-write-weatherapp/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/10/re-write-weatherapp/</guid>
      <description>

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;h3 id=&#34;building-the-environment&#34;&gt;Building the Environment&lt;/h3&gt;

&lt;p&gt;First clone the Vagrant Repo from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pwd
/media/y/Vagrant/CoreOS
$ git clone https://github.com/coreos/coreos-vagrant.git
$ cd coreos-vagrant
$ cp config.rb.sample config.rb
$ cp user-data.sample user-data

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;cluster-setting&#34;&gt;Cluster Setting&lt;/h4&gt;

&lt;p&gt;Edit the config.rb, for configurating the instance and the official CoreOS channel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Size of the CoreOS cluster created by Vagrant
$num_instances=3
# Official CoreOS channel from which updates should be downloaded
$update_channel=&#39;stable&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now start the vagrant and view its status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant up
$ vagrant status
Current machine states:

core-01                   running (virtualbox)
core-02                   running (virtualbox)
core-03                   running (virtualbox)
$ vagrant ssh core-1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After you login to the coreOS, you could view the status of this virtual machine. Each of the machine have 1 Core, 1G ram, 20G harddisk.&lt;/p&gt;

&lt;h3 id=&#34;single-machine&#34;&gt;Single Machine&lt;/h3&gt;

&lt;p&gt;Just comment the following lines of the config.rb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# $num_instances=3

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will bring one instance of vagrant based CoreOS machine.&lt;/p&gt;

&lt;h3 id=&#34;nodejs&#34;&gt;NodeJS&lt;/h3&gt;

&lt;p&gt;I want to write my APPs using NodeJS, thus I want to setup the NodeJS dev environment on CoreOS based Docker. Following are the steps:&lt;br /&gt;
First configure the proxy of docker:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /etc/systemd/system/docker.service.d
$ sudo vim http-proxy.conf
[Service]
Environment=&amp;quot;HTTP_PROXY=http://proxy.example.com:8080&amp;quot;
To apply the change, reload the unit and restart docker:
$ systemctl daemon-reload
$ systemctl restart docker

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you could use docker for pulling back some container and run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker search base
$ docker pull base
$ docker images
$ docker run base /bin/bash -c &amp;quot;ls /&amp;quot;
$ docker run base /bin/bash -c &amp;quot;cat /etc/issue&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the network is not good, I created the droplet on DigitalOcean, and installed CoreOS.&lt;/p&gt;

&lt;h3 id=&#34;dockerized&#34;&gt;Dockerized&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blogs.aws.amazon.com/application-management/post/Tx1ZLAHMVBEDCOC/Dockerizing-a-Python-Web-App&#34;&gt;http://blogs.aws.amazon.com/application-management/post/Tx1ZLAHMVBEDCOC/Dockerizing-a-Python-Web-App&lt;/a&gt;&lt;br /&gt;
Steps is listed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:awslabs/eb-py-flask-signup.git
$ cd eb-py-flask-signup
$ git checkout master
$ vim Dockerfile
FROM ubuntu:14.04

# Install Python Setuptools
RUN apt-get install -y python-setuptools

# Install pip
RUN easy_install pip

# Add and install Python modules
ADD requirements.txt /src/requirements.txt
RUN cd /src; pip install -r requirements.txt

# Bundle app source
ADD . /src

# Expose
EXPOSE  5000

# Run
CMD [&amp;quot;python&amp;quot;, &amp;quot;/src/application.py&amp;quot;]
$ docker build -t eb-py-sample .
$ docker run -d \
     -e APP_CONFIG=application.config.example \
     -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
     -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
     -p 8080:5000 \
     eb-py-sample

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then open &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt; to see your own app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(5)</title>
      <link>http://purplepalmdash.github.io/2014/12/06/tips-on-30days30skills-5/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/06/tips-on-30days30skills-5/</guid>
      <description>

&lt;p&gt;Since the RESTful API is a little bit hard for setup, I ignore the Day10 and Day11, jump to Day 12, OpenCV.&lt;/p&gt;

&lt;h3 id=&#34;day-12-opencv&#34;&gt;Day 12 - OpenCV&lt;/h3&gt;

&lt;h4 id=&#34;get-the-jar-file&#34;&gt;Get the jar file&lt;/h4&gt;

&lt;p&gt;First download the opencv from:
&lt;a href=&#34;http://sourceforge.net/projects/opencvlibrary/files/latest/download&#34;&gt;http://sourceforge.net/projects/opencvlibrary/files/latest/download&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ unzip *.zip
$ cd opencv-2.4.10
$ cmake -G &amp;quot;Unix Makefiles&amp;quot; -D CMAKE_CXX_COMPILER=/usr/bin/g++ -D CMAKE_C_COMPILER=/usr/bin/gcc -D WITH_CUDA=ON .. 
$ make -j4 &amp;amp;&amp;amp; make install

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trouble shooting when generating openCV jar file:&lt;br /&gt;
Correct output should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--   Java:
--     ant:                         /bin/ant (ver 1.9.4)
--     JNI:                         /usr/lib/jvm/java-7-openjdk/include /usr/lib/jvm/java-7-openjdk/include/linux /usr/lib/jvm/java-7-openjdk/include
--     Java tests:                  YES

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add JNi&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export JAVA_HOME=/usr/lib/jvm/java-7-openjdk/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then build with following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cmake -G &amp;quot;Unix Makefiles&amp;quot; -D CMAKE_CXX_COMPILER=/usr/bin/g++ -D CMAKE_C_COMPILER=/usr/bin/gcc -D WITH_CUDA=ON -D BUILD_SHARED_LIBS=OFF -D BUILD_NEW_PYTHON_SUPPORT=NO .. &amp;amp;&amp;amp; make

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For MACOS, you should install:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install ant
$ export JAVA_HOME=`/usr/libexec/java_home -v 1.6`

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then re-compile and now you could get the jar file under build/bin/.&lt;/p&gt;

&lt;h4 id=&#34;development-on-opencv&#34;&gt;Development on OpenCV&lt;/h4&gt;

&lt;p&gt;Using eclipse LUNA.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv)[Trusty@~/code/30days/Day12OpenCV/opencv-2.4.10/build/bin]$ pwd
/home/Trusty/code/30days/Day12OpenCV/opencv-2.4.10/build/bin
(venv)[Trusty@~/code/30days/Day12OpenCV/opencv-2.4.10/build/bin]$ ls *.jar
opencv-2410.jar

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the new User Libraries:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/addjavalib.jpg&#34; alt=&#34;/images/addjavalib.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The detailed configuration steps could be refered to the &lt;a href=&#34;http://segmentfault.com/a/1190000000358809&#34;&gt;http://segmentfault.com/a/1190000000358809&lt;/a&gt;,  After configuration your User Libraries should be looked like this:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/javalib2.jpg&#34; alt=&#34;/images/javalib2.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add User Libraries thus you could see the configuration of the lib is looked like:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/libconfiguration.jpg&#34; alt=&#34;/images/libconfiguration.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Code is like following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package facedetection;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.highgui.Highgui;
import org.opencv.objdetect.CascadeClassifier;

public class MyFaceDetectionClass {
    public static void main(String[] args) {

        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        System.out.println(&amp;quot;\nRunning FaceDetector&amp;quot;);

        CascadeClassifier faceDetector = new CascadeClassifier(MyFaceDetectionClass.class.getResource(&amp;quot;haarcascade_frontalface_alt.xml&amp;quot;).getPath());
        Mat image = Highgui
                .imread(MyFaceDetectionClass.class.getResource(&amp;quot;shekhar.JPG&amp;quot;).getPath());

        MatOfRect faceDetections = new MatOfRect();
        faceDetector.detectMultiScale(image, faceDetections);

        System.out.println(String.format(&amp;quot;Detected %s faces&amp;quot;, faceDetections.toArray().length));

        for (Rect rect : faceDetections.toArray()) {
            Core.rectangle(image, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height),
                    new Scalar(0, 255, 0));
        }

        String filename = &amp;quot;ouput.png&amp;quot;;
        System.out.println(String.format(&amp;quot;Writing %s&amp;quot;, filename));
        Highgui.imwrite(filename, image);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you should place the xml file and the JPG file under the java class, after doing this, run the application, then you will got the png file generate with face detected.&lt;/p&gt;

&lt;h3 id=&#34;day-13-dropwizard&#34;&gt;Day 13 - Dropwizard&lt;/h3&gt;

&lt;p&gt;First you should install mondb in ArchLinux:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pacman -S mongodb

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in eclipse, create a new Maven project with the template of &amp;ldquo;maven-archetype-quickstart&amp;rdquo;, with the following configuration of Artifact Id and Group id.&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/blogjava.jpg&#34; alt=&#34;/images/blogjava.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The default pom.xml should be modified,&lt;/p&gt;

&lt;p&gt;Since the network environment is not stable, I created a vncserver at the VPS, and use VPS for developing.&lt;br /&gt;
In vps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install eclipse
sudo apt-get install mongodb

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then install the maven from: &lt;a href=&#34;http://download.eclipse.org/technology/m2e/releases/1.3&#34;&gt;http://download.eclipse.org/technology/m2e/releases/1.3&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use VCCW For Deploying WP</title>
      <link>http://purplepalmdash.github.io/2014/12/06/use-vccw-for-deploying-wp/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/06/use-vccw-for-deploying-wp/</guid>
      <description>

&lt;p&gt;For deploying differenet versions of Wordpress, I searched various kinds of solutions, includeing docker and vagrant, finally I found VCCW(A Wordpress development environment) is what I want, because I could freely changes the WP versions, so following is the guideline for installing and configurating the whole virtualmachine.&lt;/p&gt;

&lt;h3 id=&#34;install&#34;&gt;Install&lt;/h3&gt;

&lt;p&gt;The installation steps are listed as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant plugin install vagrant-hostsupdater
$ wget https://github.com/miya0001/vccw/archive/1.9.1.tar.gz
$ tar xzvf 1.9.1.tar.gz
$ cd vccw-1.9.1
$ vagrant up

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will start downloading and configrating the VM, it will cost sometimes. So just drink a coffee and get back.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant plugin install vagrant-omnibus &amp;amp;&amp;amp; vagrant plugin install vagrant-hostsupdater &amp;amp;&amp;amp;  vagrant plugin install vagrant-proxyconf

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure proxy and chef?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim Vagrantfile
Vagrant.configure(2) do |config|
  config.proxy.http     = &amp;quot;http://1xx.xx.xx:xxx:2xxx&amp;quot;
  config.proxy.https    = &amp;quot;http://1xx.xx.xx:xxx:2xxx&amp;quot;
  config.proxy.no_proxy = &amp;quot;localhost,127.0.0.1,.example.com&amp;quot;

config.omnibus.chef_version = :latest
$ VAGRANT_APT_HTTP_PROXY=&amp;quot;http://1xx.xx.xx.xxx:2xxxx vagrant up
$ VAGRANT_APT_HTTP_PROXY=&amp;quot;http://1xx.xx.xx.xxx:2xxxx vagrant provision

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;vagrant halt

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Flask&amp;amp;AngularJS Blog Tips</title>
      <link>http://purplepalmdash.github.io/2014/12/04/flask-and-angularjs-blog-tips/</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/04/flask-and-angularjs-blog-tips/</guid>
      <description>

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;For setup the local blog which used for recording some articles, and provide the RESTful APIs for remote usage.&lt;br /&gt;
The tutorial is located at:&lt;br /&gt;
&lt;a href=&#34;http://blog.john.mayonvolcanosoftware.com/building-a-blog-using-flask-and-angularjs-part-1/&#34;&gt;http://blog.john.mayonvolcanosoftware.com/building-a-blog-using-flask-and-angularjs-part-1/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;installation-of-packages&#34;&gt;Installation of Packages&lt;/h3&gt;

&lt;p&gt;First preapare the environment using virtualenv2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ virtualenv2 flask_blog
$ source flask_blog/bin/activate

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now write a requirements.txt file, under the current folder, the content is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Flask==0.10.1
Flask-Bcrypt==0.6.0
Flask-HTTPAuth==2.2.1
Flask-RESTful==0.2.12
Flask-SQLAlchemy==1.0
Flask-WTF==0.10.0
Jinja2==2.7.3
MarkupSafe==0.23
SQLAlchemy==0.9.7
SQLAlchemy-Utils==0.26.9
WTForms==2.0.1
WTForms-Alchemy==0.12.8
WTForms-Components==0.9.5
Werkzeug==0.9.6
aniso8601==0.83
decorator==3.4.0
infinity==1.3
intervals==0.3.1
itsdangerous==0.24
marshmallow==0.7.0
py-bcrypt==0.4
pytz==2014.4
six==1.7.3
validators==0.6.0
wsgiref==0.1.2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; for installing all of the packages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enable Timestamp In New Octopress Theme</title>
      <link>http://purplepalmdash.github.io/2014/12/03/enable-timestamp-in-new-octopress-theme/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/03/enable-timestamp-in-new-octopress-theme/</guid>
      <description>&lt;p&gt;After installing the flattern theme of octopress, I found the post date missed. Following is the steps for catching it back.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake install[&#39;flatten&#39;]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify the following file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .themes/flatten/source/_includes/post/date.html

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in &lt;code&gt;.themes/flatten/source/_layouts/post.html&lt;/code&gt;, modify the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;p class=&amp;quot;meta&amp;quot;&amp;gt;
    //.....//
    &amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After modification, you would see the time is displayed before the comment numbers.&lt;br /&gt;
Notice, the modification is not visible in codeblocks because the embedded symbol could not be resolved thus will cause build error, so the detailed code would be only fetched from my github repository but remains blank codeblocks here in this article.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用Flask搭建你自己的Restful API</title>
      <link>http://purplepalmdash.github.io/2014/12/03/yong-flaskda-jian-ni-zi-ji-de-restful-api/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/03/yong-flaskda-jian-ni-zi-ji-de-restful-api/</guid>
      <description>

&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;最近在过一个《30天学习30种新技术》，过到第10天用Phonegap开发APP的时候，发现作者提供的API不可用，所以费心研究了一下Restful API, 顺利构建出了环境写完了那个APP，下面是一些摘要。&lt;br /&gt;
我用的Tutorial来自这里：&lt;br /&gt;
&lt;a href=&#34;http://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask&#34;&gt;http://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask&lt;/a&gt;&lt;br /&gt;
开发环境是ArchLinux.&lt;/p&gt;

&lt;h3 id=&#34;hello-flask&#34;&gt;Hello Flask&lt;/h3&gt;

&lt;p&gt;原Tutorial中给出的是一个关于todo-list的实现，我们从最简单的&amp;rdquo;Hello Flask&amp;rdquo;开始：&lt;br /&gt;
首先安装python虚拟环境和flask，注意因为Arch默认的python版本是3，所以这里我们使用了virtualenv2来创建python虚拟运行环境。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir todo-api
$ cd todo-api
$ virtualenv2 flask
$ source flask/bin/activate
(flask) $ pip install flask

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在当前目录下建立&lt;code&gt;app.py&lt;/code&gt;文件， 输入以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!flask/bin/python
from flask import Flask

app = Flask(__name__)

@app.route(&#39;/&#39;)
def index():
    return &amp;quot;Hello, Flask!&amp;quot;

if __name__ == &#39;__main__&#39;:
    app.run(debug=True)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在改变文件属性，运行之:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod a+x app.py
$ ./app.py

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开浏览器访问&lt;code&gt;http://127.0.0.1:5000&lt;/code&gt;,，我们可以看到Hello Flask已经出现在浏览器里了。&lt;/p&gt;

&lt;h3 id=&#34;实现最简单的restful-api&#34;&gt;实现最简单的Restful API&lt;/h3&gt;

&lt;p&gt;Flask本身支持很多插件，可以用于实现Restful API，由于我们这里只是做DEMO使用，需求比较简单，我们抛弃那些繁琐的插件，手动来写。&lt;br /&gt;
这里我们也不会引入数据库等内容，我们将task任务列表直接保存在内存中，所以一旦断电这些数据就将消失。在实际的生产环境中，我们是需要引入不同的数据库来存储这些数据的。&lt;br /&gt;
在上面生成的&lt;code&gt;app.py&lt;/code&gt;中添加以下内容:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!flask/bin/python
from flask import Flask, jsonify

app = Flask(__name__)

tasks = [
    {
        &#39;id&#39;: 1,
        &#39;title&#39;: u&#39;Buy groceries&#39;,
        &#39;description&#39;: u&#39;Milk, Cheese, Pizza, Fruit, Tylenol&#39;, 
        &#39;done&#39;: False
    },
    {
        &#39;id&#39;: 2,
        &#39;title&#39;: u&#39;Learn Python&#39;,
        &#39;description&#39;: u&#39;Need to find a good Python tutorial on the web&#39;, 
        &#39;done&#39;: False
    }
]

@app.route(&#39;/todo/api/v1.0/tasks&#39;, methods=[&#39;GET&#39;])

def get_tasks():
    return jsonify({&#39;tasks&#39;: tasks})

if __name__ == &#39;__main__&#39;:
    app.run(debug=True)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在打开终端，用curl就可以访问到我们新添加的API了:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -i http://127.0.0.1:5000/todo/api/v1.0/tasks
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 316
Server: Werkzeug/0.9.6 Python/2.7.8
Date: Wed, 03 Dec 2014 08:59:55 GMT

{
  &amp;quot;tasks&amp;quot;: [
    {
      &amp;quot;description&amp;quot;: &amp;quot;Milk, Cheese, Pizza, Fruit, Tylenol&amp;quot;, 
      &amp;quot;done&amp;quot;: false, 
      &amp;quot;id&amp;quot;: 1, 
      &amp;quot;title&amp;quot;: &amp;quot;Buy groceries&amp;quot;
    }, 
    {
      &amp;quot;description&amp;quot;: &amp;quot;Need to find a good Python tutorial on the web&amp;quot;, 
      &amp;quot;done&amp;quot;: false, 
      &amp;quot;id&amp;quot;: 2, 
      &amp;quot;title&amp;quot;: &amp;quot;Learn Python&amp;quot;
    }
  ]
}% 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一个Restful的API就这样创建成功了。&lt;/p&gt;

&lt;h3 id=&#34;添加第二个restful-api&#34;&gt;添加第二个RESTful API&lt;/h3&gt;

&lt;p&gt;我们接着来添加第二个RESTful API, 加入下列代码到已有的&lt;code&gt;app.py&lt;/code&gt;中:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import abort

@app.route(&#39;/todo/api/v1.0/tasks/&amp;lt;int:task_id&amp;gt;&#39;, methods=[&#39;GET&#39;])
def get_task(task_id):
    task = filter(lambda t: t[&#39;id&#39;] == task_id, tasks)
    if len(task) == 0:
        abort(404)
    return jsonify({&#39;task&#39;: task[0]})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在用curl来测试，结果应该是这样的:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(flask)[Trusty@~/code/30days/todo-api]$ curl -i http://127.0.0.1:5000/todo/api/v1.0/tasks/2
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 151
Server: Werkzeug/0.9.6 Python/2.7.8
Date: Wed, 03 Dec 2014 09:10:25 GMT

{
  &amp;quot;task&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Need to find a good Python tutorial on the web&amp;quot;, 
    &amp;quot;done&amp;quot;: false, 
    &amp;quot;id&amp;quot;: 2, 
    &amp;quot;title&amp;quot;: &amp;quot;Learn Python&amp;quot;
  }
}%                                                                                                                                                   (flask)[Trusty@~/code/30days/todo-api]$ curl -i http://127.0.0.1:5000/todo/api/v1.0/tasks/3
HTTP/1.0 404 NOT FOUND
Content-Type: text/html
Content-Length: 233
Server: Werkzeug/0.9.6 Python/2.7.8
Date: Wed, 03 Dec 2014 09:10:27 GMT

&amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//W3C//DTD HTML 3.2 Final//EN&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;
&amp;lt;h1&amp;gt;Not Found&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于我们引用了abort方法，所以当我们给出的task id错误时，将弹出404错误。&lt;/p&gt;

&lt;h3 id=&#34;错误提示json化&#34;&gt;错误提示JSON化&lt;/h3&gt;

&lt;p&gt;通过引入&lt;code&gt;make_response&lt;/code&gt;模块我们可以把404返回错误JSON化，添加以下代码到app.py中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import make_response

@app.errorhandler(404)
def not_found(error):
    return make_response(jsonify({&#39;error&#39;: &#39;Not found&#39;}), 404)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在访问一个不存在的task id将返回如下结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(flask)[Trusty@~/code/30days/todo-api]$ curl -i http://127.0.0.1:5000/todo/api/v1.0/tasks/3
HTTP/1.0 404 NOT FOUND
Content-Type: application/json
Content-Length: 26
Server: Werkzeug/0.9.6 Python/2.7.8
Date: Wed, 03 Dec 2014 09:16:50 GMT

{
  &amp;quot;error&amp;quot;: &amp;quot;Not found&amp;quot;
}%             

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;实现post方法&#34;&gt;实现POST方法&lt;/h3&gt;

&lt;p&gt;添加以下代码以实现POST方法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import request

@app.route(&#39;/todo/api/v1.0/tasks&#39;, methods=[&#39;POST&#39;])
def create_task():
    if not request.json or not &#39;title&#39; in request.json:
        abort(400)
    task = {
        &#39;id&#39;: tasks[-1][&#39;id&#39;] + 1,
        &#39;title&#39;: request.json[&#39;title&#39;],
        &#39;description&#39;: request.json.get(&#39;description&#39;, &amp;quot;&amp;quot;),
        &#39;done&#39;: False
    }
    tasks.append(task)
    return jsonify({&#39;task&#39;: task}), 201

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用curl测试的结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(flask)[Trusty@~/code/30days/todo-api]$ curl -i -H &amp;quot;Content-Type: application/json&amp;quot; -X POST -d &#39;{&amp;quot;title&amp;quot;:&amp;quot;Read a book&amp;quot;}&#39; http://127.0.0.1:5000/todo/api/v1.0/tasks
HTTP/1.0 201 CREATED
Content-Type: application/json
Content-Length: 104
Server: Werkzeug/0.9.6 Python/2.7.8
Date: Wed, 03 Dec 2014 09:18:55 GMT

{
  &amp;quot;task&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;, 
    &amp;quot;done&amp;quot;: false, 
    &amp;quot;id&amp;quot;: 3, 
    &amp;quot;title&amp;quot;: &amp;quot;Read a book&amp;quot;
  }
}% 
 (flask)[Trusty@~/code/30days/todo-api]$ curl -i http://127.0.0.1:5000/todo/api/v1.0/tasks 
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 423
Server: Werkzeug/0.9.6 Python/2.7.8
Date: Wed, 03 Dec 2014 09:19:24 GMT

{
  &amp;quot;tasks&amp;quot;: [
    {
      &amp;quot;description&amp;quot;: &amp;quot;Milk, Cheese, Pizza, Fruit, Tylenol&amp;quot;, 
      &amp;quot;done&amp;quot;: false, 
      &amp;quot;id&amp;quot;: 1, 
      &amp;quot;title&amp;quot;: &amp;quot;Buy groceries&amp;quot;
    }, 
    {
      &amp;quot;description&amp;quot;: &amp;quot;Need to find a good Python tutorial on the web&amp;quot;, 
      &amp;quot;done&amp;quot;: false, 
      &amp;quot;id&amp;quot;: 2, 
      &amp;quot;title&amp;quot;: &amp;quot;Learn Python&amp;quot;
    }, 
    {
      &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;, 
      &amp;quot;done&amp;quot;: false, 
      &amp;quot;id&amp;quot;: 3, 
      &amp;quot;title&amp;quot;: &amp;quot;Read a book&amp;quot;
    }
  ]
}%           

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上面的测试中我们可以看到一个新的任务被添加到了task列表中。&lt;/p&gt;

&lt;h3 id=&#34;最后两个restful-api&#34;&gt;最后两个RESTful API&lt;/h3&gt;

&lt;p&gt;最后的两个RESTful API代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@app.route(&#39;/todo/api/v1.0/tasks/&amp;lt;int:task_id&amp;gt;&#39;, methods=[&#39;PUT&#39;])
def update_task(task_id):
    task = filter(lambda t: t[&#39;id&#39;] == task_id, tasks)
    if len(task) == 0:
        abort(404)
    if not request.json:
        abort(400)
    if &#39;title&#39; in request.json and type(request.json[&#39;title&#39;]) != unicode:
        abort(400)
    if &#39;description&#39; in request.json and type(request.json[&#39;description&#39;]) is not unicode:
        abort(400)
    if &#39;done&#39; in request.json and type(request.json[&#39;done&#39;]) is not bool:
        abort(400)
    task[0][&#39;title&#39;] = request.json.get(&#39;title&#39;, task[0][&#39;title&#39;])
    task[0][&#39;description&#39;] = request.json.get(&#39;description&#39;, task[0][&#39;description&#39;])
    task[0][&#39;done&#39;] = request.json.get(&#39;done&#39;, task[0][&#39;done&#39;])
    return jsonify({&#39;task&#39;: task[0]})

@app.route(&#39;/todo/api/v1.0/tasks/&amp;lt;int:task_id&amp;gt;&#39;, methods=[&#39;DELETE&#39;])
def delete_task(task_id):
    task = filter(lambda t: t[&#39;id&#39;] == task_id, tasks)
    if len(task) == 0:
        abort(404)
    tasks.remove(task[0])
    return jsonify({&#39;result&#39;: True})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -i -H &amp;quot;Content-Type: application/json&amp;quot; -X PUT -d &#39;{&amp;quot;done&amp;quot;:true}&#39; http://127.0.0.1:5000/todo/api/v1.0/tasks/2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行上面的命令可以将第2条记录里的done字段由false改成true.&lt;/p&gt;

&lt;h3 id=&#34;改进接口&#34;&gt;改进接口&lt;/h3&gt;

&lt;p&gt;加入以下代码后，我们调用tasks方法将不再返回id,而是返回URIs，这样取回来就能用了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import url_for

def make_public_task(task):
    new_task = {}
    for field in task:
        if field == &#39;id&#39;:
            new_task[&#39;uri&#39;] = url_for(&#39;get_task&#39;, task_id=task[&#39;id&#39;], _external=True)
        else:
            new_task[field] = task[field]
    return new_task

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时我们重写以下方法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@app.route(&#39;/todo/api/v1.0/tasks&#39;, methods=[&#39;GET&#39;])
def get_tasks():
    return jsonify({&#39;tasks&#39;: map(make_public_task, tasks)})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -i http://127.0.0.1:5000/todo/api/v1.0/tasks
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 406
Server: Werkzeug/0.9.6 Python/2.7.8
Date: Wed, 03 Dec 2014 09:32:12 GMT

{
  &amp;quot;tasks&amp;quot;: [
    {
      &amp;quot;description&amp;quot;: &amp;quot;Milk, Cheese, Pizza, Fruit, Tylenol&amp;quot;, 
      &amp;quot;done&amp;quot;: false, 
      &amp;quot;title&amp;quot;: &amp;quot;Buy groceries&amp;quot;, 
      &amp;quot;uri&amp;quot;: &amp;quot;http://127.0.0.1:5000/todo/api/v1.0/tasks/1&amp;quot;
    }, 
    {
      &amp;quot;description&amp;quot;: &amp;quot;Need to find a good Python tutorial on the web&amp;quot;, 
      &amp;quot;done&amp;quot;: false, 
      &amp;quot;title&amp;quot;: &amp;quot;Learn Python&amp;quot;, 
      &amp;quot;uri&amp;quot;: &amp;quot;http://127.0.0.1:5000/todo/api/v1.0/tasks/2&amp;quot;
    }
  ]
}% 

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;加密restful网络接口&#34;&gt;加密RESTful网络接口&lt;/h3&gt;

&lt;p&gt;好了，我们的RESTful接口搭建完毕了，但是由于接口对所有人都是开放的，为了考虑安全因素，我们会采用简单加密。&lt;br /&gt;
首先安装flask-httpauth模块:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install flask-httpauth

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而后添加以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask.ext.httpauth import HTTPBasicAuth
auth = HTTPBasicAuth()

@auth.get_password
def get_password(username):
    if username == &#39;miguel&#39;:
        return &#39;python&#39;
    return None

@auth.error_handler
def unauthorized():
    return make_response(jsonify({&#39;error&#39;: &#39;Unauthorized access&#39;}), 401)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加密路由实现如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@app.route(&#39;/todo/api/v1.0/tasks&#39;, methods=[&#39;GET&#39;])
@auth.login_required
def get_tasks():
    return jsonify({&#39;tasks&#39;: tasks})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试结果如下, 未通过授权时:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -i http://localhost:5000/todo/api/v1.0/tasks                 
HTTP/1.0 401 UNAUTHORIZED
Content-Type: application/json
Content-Length: 36
WWW-Authenticate: Basic realm=&amp;quot;Authentication Required&amp;quot;
Server: Werkzeug/0.9.6 Python/2.7.8
Date: Wed, 03 Dec 2014 09:40:02 GMT

{
  &amp;quot;error&amp;quot;: &amp;quot;Unauthorized access&amp;quot;
}%   

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过授权时:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -u miguel:python -i http://localhost:5000/todo/api/v1.0/tasks
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 406
Server: Werkzeug/0.9.6 Python/2.7.8
Date: Wed, 03 Dec 2014 09:40:24 GMT

{
  &amp;quot;tasks&amp;quot;: [
    {
      &amp;quot;description&amp;quot;: &amp;quot;Milk, Cheese, Pizza, Fruit, Tylenol&amp;quot;, 
      &amp;quot;done&amp;quot;: false, 
      &amp;quot;title&amp;quot;: &amp;quot;Buy groceries&amp;quot;, 
      &amp;quot;uri&amp;quot;: &amp;quot;http://localhost:5000/todo/api/v1.0/tasks/1&amp;quot;
    }, 
.....

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以把出错时返回的错误号从401改变为403,这样返回的就是forbidden错误。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>