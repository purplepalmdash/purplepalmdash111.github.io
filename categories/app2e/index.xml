<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>App2e on Dash</title>
    <link>http://purplepalmdash.github.io/categories/app2e/</link>
    <description>Recent content in App2e on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Apr 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/app2e/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reading Digests for APP2E</title>
      <link>http://purplepalmdash.github.io/2014/04/01/reading-digests-for-app2e/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/01/reading-digests-for-app2e/</guid>
      <description>&lt;p&gt;###Preparation
Download the files from the student&amp;rsquo;s website of app2e via:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	wget http://csapp.cs.cmu.edu/public/ics2/code.tar
	tar xvf code.tar

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start building the static libs and copy it to system library:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	[Trusty@XXXyyy lib]$ pwd
	/home/Trusty/code/app2e/practise/lib
	[Trusty@XXXyyy lib]$ cp /home/Trusty/code/app2e/code/src/csapp.c  .
	[Trusty@XXXyyy lib]$ cp /home/Trusty/code/app2e/code/include/csapp.h  .
	[Trusty@XXXyyy lib]$ gcc -c -o csapp.o csapp.c 
	[Trusty@XXXyyy lib]$ ar rcs libcsapp.a csapp.o
	[Trusty@XXXyyy lib]$ sudo cp libcsapp.a  /usr/lib/
	[Trusty@XXXyyy lib]$ sudo cp csapp.h  /usr/include/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can directly use libcssapp.a in your own files:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;csapp.h&amp;gt;

int main(int argc, char **argv)
{
	int n;
	rio_t rio;
	char buf[MAXLINE];
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compile the file via:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	gcc -o test test.c

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Rio&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;csapp.h&amp;gt;

int main(int argc, char **argv)
{
	int n;
	rio_t rio;
	char buf[MAXLINE];

	Rio_readinitb(&amp;amp;rio, STDIN_FILENO);
	while((n = Rio_readlineb(&amp;amp;rio, buf, MAXLINE)) != 0)
	{
		Rio_writen(STDOUT_FILENO, buf, n);
	}
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compile the file via:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	gcc -o cpfile cpfile.c  -lcsapp -lpthread

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the app via:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	./cpfile&amp;lt;cpfile.c

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will print the cpfile.c content on the stdout screen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>有关并发</title>
      <link>http://purplepalmdash.github.io/2014/04/01/you-guan-bing-fa/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/01/you-guan-bing-fa/</guid>
      <description>&lt;p&gt;app2e中有几个很好的关于并发实现的例子，这里加以详细解析。&lt;br /&gt;
###简单的echo服务器
所谓echo服务器就是将客户端的输入简单的通过socket回送回来。代码实现如下：&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;csapp.h&amp;gt;

void echo(int connfd);

int main(int argc, char **argv)
{
	int listenfd, connfd, port, clientlen;
	struct sockaddr_in clientaddr;
	struct hostent *hp;
	char *haddrp;

	if(argc != 2) {
		fprintf(stderr, &amp;quot;usage: %s &amp;lt;port&amp;gt;\n&amp;quot;, argv[0]);
		return 1;
	}
	port = atoi(argv[1]);

	listenfd = Open_listenfd(port);
	while(1) {
		clientlen = sizeof(clientaddr);
		connfd = Accept(listenfd, (SA *)&amp;amp;clientaddr, &amp;amp;clientlen);

		/* determin the domain name and IP address of the client */
		hp = Gethostbyaddr((const char*)&amp;amp;clientaddr.sin_addr.s_addr, 
				sizeof(clientaddr.sin_addr.s_addr), AF_INET);
		haddrp = inet_ntoa(clientaddr.sin_addr);
		printf(&amp;quot;server conected to %s (%s)\n&amp;quot;, hp-&amp;gt;h_name, haddrp);
		echo(connfd);
		Close(connfd);
	}
	return 0;
}

void echo(int connfd)
{
	size_t n;
	char buf[MAXLINE];
	rio_t rio;

	Rio_readinitb(&amp;amp;rio, connfd);
	while((n = Rio_readlineb(&amp;amp;rio, buf, MAXLINE)) != 0) {
		printf(&amp;quot;server received %d bytes\n&amp;quot;, n);
		Rio_writen(connfd, buf, n);
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从代码来看，这是一个很典型的socket通信的例子。连接一旦建立成功，server段会打印出client端的IP地址，并一直在echo程序中晃荡。因为echo()中有while()函数会一直等着从connfd文件描述符读入输入行。当得到来自socket fd的输入时，会打印出接收到的字符个数，并将其写入到socket文件描述符中，由此client段会得到回显字符。&lt;br /&gt;
###利用进程实现并发
上面的简单echo服务器是没法接受一个以上的连接的。因此我们写出echo服务器的第二版，利用子进程实现echo服务器。&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* 
 * echoserverp.c - A concurrent echo server based on processes
 */
/* $begin echoserverpmain */
#include &amp;quot;csapp.h&amp;quot;
void echo(int connfd);

void sigchld_handler(int sig) //line:conc:echoserverp:handlerstart
{
    while (waitpid(-1, 0, WNOHANG) &amp;gt; 0)
	;
    return;
} //line:conc:echoserverp:handlerend

int main(int argc, char **argv) 
{
    int listenfd, connfd, port;
    socklen_t clientlen=sizeof(struct sockaddr_in);
    struct sockaddr_in clientaddr;

    if (argc != 2) {
	fprintf(stderr, &amp;quot;usage: %s &amp;lt;port&amp;gt;\n&amp;quot;, argv[0]);
	exit(0);
    }
    port = atoi(argv[1]);

    Signal(SIGCHLD, sigchld_handler);
    listenfd = Open_listenfd(port);
    while (1) {
	connfd = Accept(listenfd, (SA *) &amp;amp;clientaddr, &amp;amp;clientlen);
	if (Fork() == 0) { 
	    Close(listenfd); /* Child closes its listening socket */
	    echo(connfd);    /* Child services client */ //line:conc:echoserverp:echofun
	    Close(connfd);   /* Child closes connection with client */ //line:conc:echoserverp:childclose
	    exit(0);         /* Child exits */
	}
	Close(connfd); /* Parent closes connected socket (important!) */ //line:conc:echoserverp:parentclose
    }
} 

void echo(int connfd)
{
	size_t n;
	char buf[MAXLINE];
	rio_t rio;

	Rio_readinitb(&amp;amp;rio, connfd);
	while((n = Rio_readlineb(&amp;amp;rio, buf, MAXLINE)) != 0) {
		printf(&amp;quot;server received %d bytes\n&amp;quot;, n);
		Rio_writen(connfd, buf, n);
	}
}


/* $end echoserverpmain */

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译和运行命令如下：&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ gcc -o echoserverp echoserverp.c -lcsapp -lpthread
	$ ./echoserverp 3344
	$ ./echoclient localhost 3344

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在多个终端上执行完./echoclient localhost 3344后，我们可以用ps -ef | grep echoserverp来检查当前系统中的进程个数:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ ps -ef | grep echoserverp
	Trusty     30404  8497  0 17:19 pts/9    00:00:00 ./echoserverp 3344
	Trusty     30651 30404  0 17:19 pts/9    00:00:00 ./echoserverp 3344
	Trusty     31174 30404  0 17:20 pts/9    00:00:00 ./echoserverp 3344

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里看到，在有3个client端连接时，存在3个echoserverp运行实例。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;实现的关键在于：&lt;br /&gt;
1. 使用信号, SIGCHLD用于回收僵死进程。
2. Fork()函数创建子进程。
3. 创建完子进程后，父进程需要关闭已经建立的socket连接。而子进程则需要关闭它的监听描述符。&lt;/p&gt;

&lt;p&gt;优缺点比较：&lt;br /&gt;
父子进程共享文件表，但是不共享用户地址空间。使得一个进程不可能不小心覆盖到另一个进程的虚拟存储器。但是独立的地址空间使得进程共享状态信息变得困难，它们需要用IPC来显示通信。而且进程通常比较慢，因为进程控制和IPC的开销很高。IPC,进程间通信。&lt;br /&gt;
###基于I/O多路复用的并发编程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* $begin select */
#include &amp;quot;csapp.h&amp;quot;
void echo(int connfd);
void command(void);

int main(int argc, char **argv) 
{
    int listenfd, connfd, port;
    socklen_t clientlen = sizeof(struct sockaddr_in);
    struct sockaddr_in clientaddr;
    fd_set read_set, ready_set;

    if (argc != 2) {
	fprintf(stderr, &amp;quot;usage: %s &amp;lt;port&amp;gt;\n&amp;quot;, argv[0]);
	exit(0);
    }
    port = atoi(argv[1]);
    listenfd = Open_listenfd(port);  //line:conc:select:openlistenfd

    FD_ZERO(&amp;amp;read_set);              /* Clear read set */ //line:conc:select:clearreadset
    FD_SET(STDIN_FILENO, &amp;amp;read_set); /* Add stdin to read set */ //line:conc:select:addstdin
    FD_SET(listenfd, &amp;amp;read_set);     /* Add listenfd to read set */ //line:conc:select:addlistenfd

    while (1) {
	ready_set = read_set;
	Select(listenfd+1, &amp;amp;ready_set, NULL, NULL, NULL); //line:conc:select:select
	if (FD_ISSET(STDIN_FILENO, &amp;amp;ready_set)) //line:conc:select:stdinready
	    command(); /* Read command line from stdin */
	if (FD_ISSET(listenfd, &amp;amp;ready_set)) { //line:conc:select:listenfdready
	    connfd = Accept(listenfd, (SA *)&amp;amp;clientaddr, &amp;amp;clientlen);
	    echo(connfd); /* Echo client input until EOF */
	    Close(connfd);
	}
    }
}

void command(void) {
    char buf[MAXLINE];
    if (!Fgets(buf, MAXLINE, stdin))
	exit(0); /* EOF */
    printf(&amp;quot;%s&amp;quot;, buf); /* Process the input command */
}

void echo(int connfd)
{
	size_t n;
	char buf[MAXLINE];
	rio_t rio;

	Rio_readinitb(&amp;amp;rio, connfd);
	while((n = Rio_readlineb(&amp;amp;rio, buf, MAXLINE)) != 0) {
		printf(&amp;quot;server received %d bytes\n&amp;quot;, n);
		Rio_writen(connfd, buf, n);
	}
}

/* $end select */

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子测试时需要注意的是，当客户端有连接时，终端输入将失效。一个更好的解决方案是使用更细粒度的多路复用，服务器每次循环回送一个文本行。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>