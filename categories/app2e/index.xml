<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>App2e on Dash</title>
    <link>http://purplepalmdash.github.io/categories/app2e/</link>
    <description>Recent content in App2e on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/app2e/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reading Digests for APP2E</title>
      <link>http://purplepalmdash.github.io/2014/04/01/reading-digests-for-app2e/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/01/reading-digests-for-app2e/</guid>
      <description>###Preparation Download the files from the student&amp;rsquo;s website of app2e via:
	wget http://csapp.cs.cmu.edu/public/ics2/code.tar tar xvf code.tar  Start building the static libs and copy it to system library:
	[Trusty@XXXyyy lib]$ pwd /home/Trusty/code/app2e/practise/lib [Trusty@XXXyyy lib]$ cp /home/Trusty/code/app2e/code/src/csapp.c . [Trusty@XXXyyy lib]$ cp /home/Trusty/code/app2e/code/include/csapp.h . [Trusty@XXXyyy lib]$ gcc -c -o csapp.o csapp.c [Trusty@XXXyyy lib]$ ar rcs libcsapp.a csapp.o [Trusty@XXXyyy lib]$ sudo cp libcsapp.a /usr/lib/ [Trusty@XXXyyy lib]$ sudo cp csapp.h /usr/include/  Now you can directly use libcssapp.</description>
    </item>
    
    <item>
      <title>有关并发</title>
      <link>http://purplepalmdash.github.io/2014/04/01/you-guan-bing-fa/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/01/you-guan-bing-fa/</guid>
      <description>app2e中有几个很好的关于并发实现的例子，这里加以详细解析。
###简单的echo服务器 所谓echo服务器就是将客户端的输入简单的通过socket回送回来。代码实现如下：
#include &amp;lt;csapp.h&amp;gt; void echo(int connfd); int main(int argc, char **argv) { int listenfd, connfd, port, clientlen; struct sockaddr_in clientaddr; struct hostent *hp; char *haddrp; if(argc != 2) { fprintf(stderr, &amp;quot;usage: %s &amp;lt;port&amp;gt;\n&amp;quot;, argv[0]); return 1; } port = atoi(argv[1]); listenfd = Open_listenfd(port); while(1) { clientlen = sizeof(clientaddr); connfd = Accept(listenfd, (SA *)&amp;amp;clientaddr, &amp;amp;clientlen); /* determin the domain name and IP address of the client */ hp = Gethostbyaddr((const char*)&amp;amp;clientaddr.</description>
    </item>
    
  </channel>
</rss>