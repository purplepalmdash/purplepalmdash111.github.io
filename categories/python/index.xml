<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Dash</title>
    <link>http://purplepalmdash.github.io/categories/python/</link>
    <description>Recent content in Python on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Oct 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python call system command</title>
      <link>http://purplepalmdash.github.io/2014/10/24/python-call-system-command/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/24/python-call-system-command/</guid>
      <description>Use Popen for running ls We could use following python scripts for running the bash command ls -l:
&amp;gt;&amp;gt;&amp;gt; from subprocess import * &amp;gt;&amp;gt;&amp;gt; from subprocess import call &amp;gt;&amp;gt;&amp;gt; from subprocess import Popen &amp;gt;&amp;gt;&amp;gt; import subprocess &amp;gt;&amp;gt;&amp;gt; ls_child = Popen([&#39;ls&#39;, &#39;-l&#39;], stdout=subprocess.PIPE, stderr = subprocess.PIPE) &amp;gt;&amp;gt;&amp;gt; ls_result = ls_child.communicate() &amp;gt;&amp;gt;&amp;gt; print ls_result .......  The command I want to call is:
sed -n 1~2p File_Name  This command will get the half of the file contents.</description>
    </item>
    
    <item>
      <title>How to quickly solve python problems</title>
      <link>http://purplepalmdash.github.io/2014/05/24/how-to-quickly-solve-python-problems/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/24/how-to-quickly-solve-python-problems/</guid>
      <description>问题 在txt里面打印1-10里面随机的9个数。
思路 如何生成随机数？ Google &amp;ldquo;generate random python&amp;rdquo; , 结果如下：
挨个看，马上你会发现下面这个网页有答案：
http://stackoverflow.com/questions/5555712/generate-a-random-number-in-python
启动终端试验之：
$ python Python 2.7.6 (default, Feb 26 2014, 12:07:17) [GCC 4.8.2 20140206 (prerelease)] on linux2 Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information. &amp;gt;&amp;gt;&amp;gt; from random import randint &amp;gt;&amp;gt;&amp;gt; randint(2,9) 3 &amp;gt;&amp;gt;&amp;gt; randint(1,10) 9 &amp;gt;&amp;gt;&amp;gt; randint(1,10) 4  如何循环打印 照样Google, 搜索关键字&amp;rdquo; python loop times&amp;rdquo;,结果如下：
随便点点看， 发现python自己的文档里就已经有很详细的关于loop的例子了:
https://wiki.python.org/moin/ForLoop
试验之:
&amp;gt;&amp;gt;&amp;gt; for x in range(0,3): ... print &amp;quot;hello&amp;quot; .</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(10)</title>
      <link>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-10/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-10/</guid>
      <description>Use Template In Flask To use template in flask, we should put the static file under the templates folder under the root directory. Our index page should looks like following:
So our html file shall wrote like following:
&amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;{{title}}&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;/static/assets/css/styles.css&amp;quot; /&amp;gt; &amp;lt;!--[if IE]&amp;gt;&amp;lt;script src=&amp;quot;assets/js/excanvas.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;![endif]--&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;page&amp;quot;&amp;gt; &amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;Nanjing Weather/PM Statistics&amp;lt;/h2&amp;gt; &amp;lt;div id=&amp;quot;periodDropDown&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;left&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;currentPeriod&amp;quot;&amp;gt;Last 24 hours&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;arrow&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li data-action=&amp;quot;24hours&amp;quot;&amp;gt;Last 24 hours&amp;lt;/li&amp;gt; &amp;lt;li data-action=&amp;quot;7days&amp;quot;&amp;gt;Last 7 Days&amp;lt;/li&amp;gt; &amp;lt;li data-action=&amp;quot;30days&amp;quot;&amp;gt;Last 30 Days&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;temperature section&amp;quot;&amp;gt; &amp;lt;h3&amp;gt;Temperature&amp;lt;/h3&amp;gt; &amp;lt;div id=&amp;quot;plot&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;preloader&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;humidity section&amp;quot;&amp;gt; &amp;lt;h3&amp;gt;Humidity&amp;lt;/h3&amp;gt; &amp;lt;div id=&amp;quot;humi_plot&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;preloader&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;pm2.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(11)</title>
      <link>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-11/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-11/</guid>
      <description>Draw Flot Picture Since the article is mainly on writing apps, I don&amp;rsquo;t want to spend much time on how to use javascript or flot for drawing picture.
Simply checkout the code on github, you will see the code which is used for retrieving the data and start drawing plot pictures.
Fetching 24-hours Data Fetching 24 latest records from the postgres database, and then add them into the chart, chart then has been sent to simplejson which used for updating the flot picture locally .</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(12)</title>
      <link>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-12/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-12/</guid>
      <description>Final Effect Following is the final effect of our own app:
There are lots to be finalize and optimized, but currently It could be ful-fill our requirements which retriving the data and generate the flot.
The next series I will try to write some ruby or node.js programs which did the same functionalities, to compare the differencies between app developement.
Also to write a web-proxy is a work full of challenge, this will be took as next consideration of developing apps on heroku .</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(9)</title>
      <link>http://purplepalmdash.github.io/2014/05/12/write-python-weather-app-on-heroku-9/</link>
      <pubDate>Mon, 12 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/12/write-python-weather-app-on-heroku-9/</guid>
      <description>Understanding the flask and Jinja Flask Example hello1.py is listed as following:
from flask import Flask app = Flask(__name__) @app.route(&amp;quot;/&amp;quot;) def index(): return &#39;Index Page&#39; @app.route(&#39;/hello&#39;) def hello(): return &amp;quot;Hello World!&amp;quot; @app.route(&#39;/hello1&#39;) def hello1(): return &amp;quot;Hello World 1!&amp;quot; if __name__ == &amp;quot;__main__&amp;quot;: app.run()  Run this via:
$ python hello1.py  Then use your browser for visiting http://localhost:5000, http://localhost:5000/hello, http://localhost:5000/hello1. You will view different output result.
Jinja Example The sample.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(7)</title>
      <link>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-7/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-7/</guid>
      <description>We will continue to deploy our tasks on heroku. In this article we will finish the data retriving and database insertion.
Honcho Install and Configuration of Honcho:
$ pip install honcho # Regenerate requirement.txt and upload it onto heroku $ mv Procfile ProcfileHoncho # Edit the new Procfile: $ vim Procfile web: honcho -f ProcfileHoncho start  In local, we can also use following command for swiftly verifying our code:</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(8)</title>
      <link>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-8/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-8/</guid>
      <description>Deploy on Heroku The deployed version is listed as following:
#!/usr/bin/env python # -*- coding: utf-8 -*- # Set default encoding: utf-8 import sys; reload(sys); # Setting the utf-8 format sys.setdefaultencoding(&amp;quot;utf8&amp;quot;) import os import logging import string from celery import Celery from celery.task import periodic_task from datetime import datetime,timedelta from os import environ # For retrieving temperature/humidity import pywapi import urllib2 from urllib2 import ProxyHandler import re from BeautifulSoup import BeautifulSoup # For using database(Postgresql) # from flash.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(5)</title>
      <link>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-5/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-5/</guid>
      <description>In fact this is a migration from sqlite3 to postgresql.
View the historical sqlite3 We will refer to our own design of database. First fetch the data file, this is a sqlite3 file, so we use sqlite3 to view its structure.
$ sqlite3 SQLite version 3.8.4.3 2014-04-03 16:53:12 Enter &amp;quot;.help&amp;quot; for usage hints. Connected to a transient in-memory database. Use &amp;quot;.open FILENAME&amp;quot; to reopen on a persistent database. sqlite&amp;gt; .</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(6)</title>
      <link>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-6/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-6/</guid>
      <description>Risk On Google App Engine it&amp;rsquo;s very convinient to setup a crontab task, while in heroku setting up a crontab task will occupy the material, thus will use another dyno, each dyno will cost $30/month. For avoiding this, we will re-design our Weather App.
Following is the detailed explanation on heroku&amp;rsquo;s dyno:
Heroku allows you to run one free dyno (or actually they give you 720 free dyno hours per month, which corresponds to one dyno constantly running).</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku/</guid>
      <description>Accounting Setting First you should have heroku accounting, then create an app on heroku, write down its repository information, mine is listed as following:
Your app, python-weather-app, has been created. App URL: http://python-weather-app.herokuapp.com/ Git URL: git@heroku.com:python-weather-app.git Use the following code to set up your app for local development:  git clone git@heroku.com:python-weather-app.git -o heroku
Suggested next steps Get started with Heroku. Add some collaborators. Check out some of our great add-ons.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(2)</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-2/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-2/</guid>
      <description>Get Current Weather Data Now we begin to change our APP to a real funny staff. First we change the hello.py and begin to write our own &amp;ldquo;genhtml.py&amp;rdquo;
$ mv hello.py genhtml.py $ cat Procfile web: gunicorn genhtml:app  We know there is an python library which we could install from pip named &amp;ldquo;pywapi&amp;rdquo;, simply install it via:
(venv2) $ pip install pywapi  If your pip&amp;rsquo;s version is 1.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(3)</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-3/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-3/</guid>
      <description>Database Introduction Heroku Postgres Installation Before using postgres, we have to install this add-ons, we call this step &amp;ldquo;attach Heroku POSTGRES to heroku application&amp;rdquo;:
$ heroku addons python-weather-app has no add-ons. $ heroku addons:add heroku-postgresql:dev Adding heroku-postgresql:dev on python-weather-app... done, v7 (free) Attached as HEROKU_POSTGRESQL_OLIVE_URL Database has been created and is available ! This database is empty. If upgrading, you can transfer ! data from another database with pgbackups:restore. Use `heroku addons:docs heroku-postgresql` to view documentation.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(4)</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-4/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-4/</guid>
      <description>Local Database Sync First fetch the remote database to localdb via following command:
$ heroku pg:pull DATABASE_URL mylocaldb --app python-weather-app  This command will pull down your database down and create a copy version locally. You can easily view all of the database via psql mylocaldb.
As root, edit following files:
# pwd /var/lib/postgres/data # vim postgresql.conf listen_addresses = &#39;localhost&#39;	# what IP address(es) to listen on; # comma-separated list of addresses; # defaults to &#39;localhost&#39;; use &#39;*&#39; for all # (change requires restart) port = 5432	# (change requires restart) # vim pb_hba.</description>
    </item>
    
  </channel>
</rss>