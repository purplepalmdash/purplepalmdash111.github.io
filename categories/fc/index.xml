<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fc on Dash</title>
    <link>http://purplepalmdash.github.io/categories/fc/</link>
    <description>Recent content in Fc on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Apr 2014 16:50:56 +0000</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/fc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Programming in C of FC tutorial 6</title>
      <link>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-6/</link>
      <pubDate>Tue, 08 Apr 2014 16:50:56 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-6/</guid>
      <description>###Full Circle C 8 ####Limitation Fibonacci sequence: normally this program limited by the limitation of unsigned long long
#include &amp;lt;stdio.h&amp;gt; typedef unsigned long long fibo_type; #define FIBO_FORMAT &amp;quot;%10llu&amp;quot; void printFibo(fibo_type num) { printf(FIBO_FORMAT, num); } int main() { int num = 0; fibo_type a = 0, b=1, c; printf(&amp;quot;%4d: &amp;quot;, ++num); printFibo(a); printf(&amp;quot;\n&amp;quot;); printf(&amp;quot;%4d: &amp;quot;,++num); printFibo(b); printf(&amp;quot;\n&amp;quot;); c=a+b; while(c&amp;gt;=b) { printf(&amp;quot;%4d: &amp;quot;,++num); printFibo(c); printf(&amp;quot;\n&amp;quot;); a=b; b=c; c=a+b; } printf(&amp;quot;Stopped after %d digits\n&amp;quot;, num); printFibo(c); printf(&amp;quot;\n&amp;quot;); return 0; }  This program will exit when c reach the limitation of definition of unsigned long long ####Using GMP Using gmp to re-write this program:</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial 5</title>
      <link>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-5/</link>
      <pubDate>Tue, 08 Apr 2014 16:17:22 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-5/</guid>
      <description>###Full Circle C 7 ####Example Following is the origin ifstat.c, this program will list the net-interface payloads, and it will print out the net interface statistics every 2 seconds, but notice this program have several bugs:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; typedef unsigned long long ull; int parseDevFile(const char * iface, ull *bRx, ull *pRx, ull *bTx, ull *pTx); void dumpInterfaceUsage(const char * iface); int parseDevFile(const char * iface, ull *bRx, ull *pRx, ull *bTx, ull *pTx) { FILE * fp = NULL; char * line = NULL; unsigned int len = 0; fp = fopen(&amp;quot;/proc/net/dev&amp;quot;, &amp;quot;r&amp;quot;); if(fp == NULL) { return -1; } while(getline(&amp;amp;line, &amp;amp;len, fp) !</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial 4</title>
      <link>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-4/</link>
      <pubDate>Tue, 08 Apr 2014 16:01:06 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-4/</guid>
      <description>###Full Circle C 6 ####Using valgrid for memory check See www.valgrind.org for more information for using the valgrind available tools.
memcheck is the main topic in this chapter.
this tool override libc calls that deal with handling memory. And it will do some bookkeeping. is all memory given back to the system, and is all the allocated memory still reachable?
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; void leak() { char *ptr = malloc(10); printf(&amp;quot;malloc(10) points to: %p\n&amp;quot;, ptr); } int main() { int i = 0; for(i = 0; i&amp;lt;10; i++) { leak(); } char *ptr = malloc(15); printf(&amp;quot;malloc(15) in main: %p\n&amp;quot;, ptr); while(1){} return 0; }  The result shows:</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial 3</title>
      <link>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-3/</link>
      <pubDate>Tue, 08 Apr 2014 09:41:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-3/</guid>
      <description>###Full Circle C 5 ####Callback Use Call Back function for implementing a calculator:
#include &amp;lt;stdio.h&amp;gt; int minus(int a, int b) { return a-b; } int add(int a, int b) { return a+b; } int multiply(int a, int b) { return a*b; } int divide(int a, int b) { return a/b; } typedef int (*mathFun)(int, int); struct operator { char c; mathFun f; }; int main() { struct operator functs[4]; functs[0].c = &#39;-&#39;; functs[0].</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial 2</title>
      <link>http://purplepalmdash.github.io/2014/04/07/programming-in-c-of-fc-tutorial-2/</link>
      <pubDate>Mon, 07 Apr 2014 17:43:26 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/07/programming-in-c-of-fc-tutorial-2/</guid>
      <description>###Full Circle C 3 ####Exercise 1 Collect all the code snippets on this page and turn them into the working program
Pointer:
#include &amp;lt;stdio.h&amp;gt; int main(void) { int anInt = 5; int *anIntPointer = &amp;amp;anInt; printf(&amp;quot;Address: %p Value: %d \n&amp;quot;, &amp;amp;anInt, anInt); printf(&amp;quot;Address of Pointer: %p Address: %p Value: %d\n&amp;quot;, &amp;amp;anIntPointer, anIntPointer, *anIntPointer); printf(&amp;quot;Size of pointer: %d, size of int: %d\n&amp;quot;, sizeof(anIntPointer), sizeof(anInt)); return 0; }  array.c
#include &amp;lt;stdio.h&amp;gt; int main(void) { int i; int anIntArray[5] = {10, 20, 30, 40, 50}; printf(&amp;quot;Address of Array: %p \n&amp;quot;, &amp;amp;anIntArray); printf(&amp;quot;Size of Array: %d\n&amp;quot;, sizeof(anIntArray)); for(i = 0; i&amp;lt;sizeof(anIntArray)/sizeof(int); i++) { printf(&amp;quot;Index: %x Address: %p Value: %d, Value: %d\n&amp;quot;, i, &amp;amp;anIntArray[i], anIntArray[i], *(anIntArray+i)); } return 0; }  string:</description>
    </item>
    
    <item>
      <title>Programming In C New Words</title>
      <link>http://purplepalmdash.github.io/2014/04/07/programming-in-c-new-words/</link>
      <pubDate>Mon, 07 Apr 2014 16:02:47 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/07/programming-in-c-new-words/</guid>
      <description>###Programming In C intermediate: 中级的
hereby: 特此
scary: 恐慌的，提心吊胆的
de facto (法)，事实上的
span: 跨越
interpreted: 可交互的
fanatic: 狂热者
novice: 新手，入门者
concrete: 实际的
prime number: 素数，质数 ternary: 三重的，三元的
intrusive: 侵入的，打扰的
grind: 磨难，磨碎，折磨
confessed: 坦白的
scary: 提心吊胆的，胆小的
apropos: 恰好的
grasp: 掌握
instalment: 分期付款的
gibberish: 乱语，快速而不清楚的话语
condense: 电容器</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial</title>
      <link>http://purplepalmdash.github.io/2014/04/07/programming-in-c-of-fc-tutorial/</link>
      <pubDate>Mon, 07 Apr 2014 16:02:08 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/07/programming-in-c-of-fc-tutorial/</guid>
      <description>###Programming In C GCC&amp;rsquo;s funcitionality:
gcc command calls a compiler(which transforms a higher level language into assembler), an assembler translates assembler into object files(machine instructions), and a linker, which combines several object files into an executable.
launchpad.net is a unique collaboration and hosting platform for free software. http://www.launchpad.net.
###Programming In C II Example code:
#include &amp;lt;stdio.h&amp;gt; #define VERSION &amp;quot;1.0&amp;quot; /* * Runs a prime check on a given integer, return * 1 when the integer is a prime number, 0 otherwise */ int isPrime(int prime) { int count = 2; // Catch two special cases if(prime == 1) { return 0; } else if(prime == 2) { return 1; } else { while(prime % count !</description>
    </item>
    
    <item>
      <title>Reading Digest of FC3</title>
      <link>http://purplepalmdash.github.io/2014/04/07/reading-digest-of-fc3/</link>
      <pubDate>Mon, 07 Apr 2014 14:50:58 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/07/reading-digest-of-fc3/</guid>
      <description>###Full Circle 3 1. Page 6 of cn version: DSL(Damn Small Linux), http://www.damnsmalllinux.org, which could be run on 16MB memory&amp;rsquo;s 486 computer, try it.
2. Page</description>
    </item>
    
    <item>
      <title>FC3 New Words</title>
      <link>http://purplepalmdash.github.io/2014/04/07/fc3-new-words/</link>
      <pubDate>Mon, 07 Apr 2014 14:45:26 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/07/fc3-new-words/</guid>
      <description>###Full Circle 3 stunning: 令人惊奇的事物
reveal: 揭露
footrest: 搁脚物
fusion: 融化
compiz+beryl = Compiz Fusion
trawl: 用拖网捕鱼</description>
    </item>
    
    <item>
      <title>Reading Digest of FC2</title>
      <link>http://purplepalmdash.github.io/2014/04/06/reading-digest-of-fc2/</link>
      <pubDate>Sun, 06 Apr 2014 20:41:10 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/06/reading-digest-of-fc2/</guid>
      <description>###Full Circle 2 Things to be done:
1. Page 3, Visit linuxgeekery?
2. Page 4, OpenMOKO, its recent status. Try to visit www.linuxinsider.com
3. Page 5, UbuntuHomeServer? www.ubuntuhomeserver.org
4. Page 16, try VPN, use VPN to reach back home.
5. Page 25, What is GEDCOM?
6. Page 27, What is LDS church?
7. Page 28, Still , try Gramps.
8. Page 29, ipod support on Ubuntu, libgpod. amaroK
9. Page 31, try flock, democracy player, songbird, inkscape</description>
    </item>
    
    <item>
      <title>FC2 New Words</title>
      <link>http://purplepalmdash.github.io/2014/04/06/fc2-new-words/</link>
      <pubDate>Sun, 06 Apr 2014 20:34:16 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/06/fc2-new-words/</guid>
      <description>###Full Circle 2 affiliate: 归纳，使附属
endorse: 签署，赞同，认可
mean-machine: 概念机
editorial: 编辑的，社论的
dose: 剂量
sarcasm: 嘲讽，挖苦
slip: 滑动，slipped，被忽略
niggle: 拘泥小节
darter: 飞奔者，投掷者
infringement: 侵犯，违反
speculation: 投机，推荐，思索，投机买卖
litigation: 诉讼，起诉
barrier: 障碍物
sentiment: 观点，情绪
interoperability: 互用性，互操作性
imminent: 即将到来的，迫近的
Venezuelan: 委内瑞拉
Bolivarian: 玻利瓦尔
KDE: K Desktop Environment
GNOME: GNU Object Model Environment
chunk: 块
prerequisite: 先决条件
wobbling: 颤抖的
eyecandy: 视觉糖果
tray: 任务栏
purge: 移除
decorator: 装饰，装修
nerds: 书呆子
pinkie: 小手指
imprint: 加痕迹的，刻上记号的
tattoo: 纹身，刻花样的</description>
    </item>
    
    <item>
      <title>FC1 reading digest</title>
      <link>http://purplepalmdash.github.io/2014/04/06/fc1-reading-digest/</link>
      <pubDate>Sun, 06 Apr 2014 20:10:15 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/06/fc1-reading-digest/</guid>
      <description>Following is the reading digests for reading the FullCircle 1:
1. Page 5, remember visit www.ubuntutribe.com for recent updates for Ubuntu Tribe Movie.
2. Page 6, OLPC&amp;rsquo;s current status?
3. Page 19, Scribus series.
4. Page 18, MythTV on Ubuntu.
5. Page 29, try GRAMPS, and try to read its sourcecode, and its implementation of the relationships. Its relationship could also be applied to the company structure. And the relationship representation, I mean, its images are well described as the relationship.</description>
    </item>
    
  </channel>
</rss>