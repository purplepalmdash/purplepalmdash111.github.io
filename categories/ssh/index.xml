<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ssh on Dash</title>
    <link>http://purplepalmdash.github.io/categories/ssh/</link>
    <description>Recent content in Ssh on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Mar 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Remote SSH and VNC Forwarding</title>
      <link>http://purplepalmdash.github.io/2014/03/30/remote-ssh-and-vnc-forwarding/</link>
      <pubDate>Sun, 30 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/30/remote-ssh-and-vnc-forwarding/</guid>
      <description>&lt;p&gt;因为有中转服务器的存在，我们需要建立ssh端口转发，以便一步到位通过中转服务器登录到远程主机。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###ssh转发
建立ssh转发：&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	ssh -L 2121:192.168.1xx.xxx.xxx 1xx.xxx.xxx.xxx -l Tomcat

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建立以后则可以：&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	ssh root@localhost -p 2121

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Autossh without entering password:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	cat id_rsa.pub | ssh Tomcat@1xx.xxx.xx.xxx &#39;cat &amp;gt;&amp;gt;.ssh/authorized_keys&#39;
	# After login on to 170, run:
	chmod 600 ~/.ssh/authorized_keys

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###VNC设置
配置VNC自动启动:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	vim /etc/init.d/vncserver
	# 添加：
	VNCSERVERS=&amp;quot;1:rohc&amp;quot;
	VNCSERVERARGS[1]=&amp;quot;-geometry 1280x1024&amp;quot;
	$ chkconfig vncserver on

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置VNC转发：&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	ssh -L 2333:192.168.1xx.xxx:5901 1xx.xxx.xxx.xxx -l Tomcat

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后就可以通过:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	vncviewer localhost:5901来访问VNC了。	

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using ssh socket proxy under windows</title>
      <link>http://purplepalmdash.github.io/2013/12/20/using-ssh-socket-proxy-under-windows/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/20/using-ssh-socket-proxy-under-windows/</guid>
      <description>&lt;p&gt;1. Download Putty, it&amp;rsquo;s a green software, click it and then you got its configuration window.&lt;br /&gt;
2. Configure the ssh Tunnel via following&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/putty1.jpg&#34; alt=&#34;putty1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3. Disable the Command line interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/putty15.jpg&#34; alt=&#34;putty1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4. Now using the configuration you can logon to remote server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/putty2.jpg&#34; alt=&#34;putty1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5. Now you can use socket proxy via &amp;ldquo;127.0.0.1&amp;rdquo;,  port is 1395.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Reverse SSH for Across Something(2)</title>
      <link>http://purplepalmdash.github.io/2013/11/19/use-reverse-ssh-for-across-something-2/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/19/use-reverse-ssh-for-across-something-2/</guid>
      <description>&lt;p&gt;###ssh command
Take following command for detailed example of using ssh:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	alias mydaili=&#39;ssh -qTfnN -D &#39;
	-q Quite Mode
	-T Disable pseudo-tty allocation
	-f background the ssh
	-n redirect the stdin from /dev/null
	-N Don&#39;t execute a remote command
	-D Bind address

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Using rsh
rsh could be used for executing the command remotely, thus in my family&amp;rsquo;s debian machine I could write following script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	cat /bin/remoteON 
	#!/bin/sh
	rsh -l root localhost -p 4381  ssh -qTfnN -L 1XX.XXX.XXX.XXX:9004:1XX.XXX.XXX.XXX:8000 USERNAME@remoteserver.com &amp;amp;
	chmod 777 /bin/remoteON

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For killing the remote machines&amp;rsquo;s running ssh tunnel process, write another script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	!#/bin/sh
	#Fetch the ssh id
	sshid=`rsh -l root localhost -p 4381 ps | grep &amp;quot;ssh -qTfnN&amp;quot; | awk &#39;{print $1}&#39;`
	#Kill the selected process
	rsh -l root localhost -p 4381 kill $sshid
	$ chmod 777 /bin/remoteOFF

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Write the local script
Local Scripts is for calling the remoteON and remoteOFF.&lt;br /&gt;
Script for starting the proxy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
#Start the openWRT Tunnel
rsh -l root 10.0.0.111 /bin/remoteON &amp;amp;
#Sleep 3 seconds
sleep 3
#Start the Debian Tunnel
rsh -l root 10.0.0.111 ssh -qTfnN -L 10.0.0.111:9001:1XX.XXX.XXX.XXX:9004 root@localhost -p 4381 &amp;amp;


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Script for stopping the proxy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
# Stop the openWRT Tunnel:
rsh -l root 10.0.0.111 /bin/remoteOFF &amp;amp;
# Sleep 3 seconds
sleep 3
# Stop the Debian Tunnel
sshid=`rsh -l root 10.0.0.111 ps -ef | grep &amp;quot;ssh -qTfnN&amp;quot; | awk &#39;{print $2}&#39;`
rsh -l root 10.0.0.111 kill $sshid &amp;amp;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###How to use it?
If you want to use proxy, simply ./startproxy.sh.&lt;br /&gt;
After using the proxy, you can ./stopproxy.sh for totally release the connection and release the resources.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>