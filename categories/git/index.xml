<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Dash</title>
    <link>http://purplepalmdash.github.io/categories/git/</link>
    <description>Recent content in Git on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Oct 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Verified to github</title>
      <link>http://purplepalmdash.github.io/2014/10/14/verified-to-github/</link>
      <pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/14/verified-to-github/</guid>
      <description>

&lt;h3 id=&#34;general-method&#34;&gt;General Method&lt;/h3&gt;

&lt;p&gt;When you were denied by github, use following method for get through:&lt;br /&gt;
Generate the key-gen&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then Creat the following files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat /home/Trusty/.ssh/config
Host github.com
User xxx@xxx.com
Hostname ssh.github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa
Port 443

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now use following command for setting the connection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -T git@github.com

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;under-firewall&#34;&gt;Under firewall&lt;/h3&gt;

&lt;p&gt;First add the ~/.ssh/id_rsa.pub to the github&amp;rsquo;s &amp;ldquo;SSH keys&amp;rdquo;.&lt;br /&gt;
If your machine runs under the firewall, you have to do things like following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -L 2121:github.com:22 root@1xxx.xxx.xxx.158

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in another terminal, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -T git@localhost -p 2121
Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>My Reading Digest For Git</title>
      <link>http://purplepalmdash.github.io/2014/04/22/my-reading-digest-for-git/</link>
      <pubDate>Tue, 22 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/22/my-reading-digest-for-git/</guid>
      <description>&lt;p&gt;###View Git LOG
git log for view your activities:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --pretty=oneline
1f7ec5eaa8f37c2770dae3b984c55a1531fcc9e7 Added a comment
582495ae59ca91bca156a3372a72f88f6261698b Added a default value
323e28d99a07d404c04f27eb6e415d4b8ab1d615 Using ARGV
94164160adf8faa3119b409fcfcd13d0a0eb8020 First Commit

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git log controlling items:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --pretty=oneline --max-count=2
$ git log --pretty=oneline --since=&#39;5 minutes ago&#39;
$ git log --pretty=oneline --until=&#39;5 minutes ago&#39;
$ git log --pretty=oneline --author=&amp;lt;your name&amp;gt;
$ git log --pretty=oneline --all

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;try man git-log for more details.&lt;br /&gt;
For searching last 7 days&amp;rsquo; modification:&lt;br /&gt;
    $ git log &amp;ndash;all &amp;ndash;pretty=format:&amp;lsquo;%h %cd %s (%an)&amp;rsquo; &amp;ndash;since=&amp;lsquo;7 days ago&amp;rsquo;
Final command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git log --pretty=format:&#39;%h %ad | %s%d [%an]&#39; --graph --date=short&#39;
	$ git log --pretty=format:&#39;%h %ad | %s%d [%an]&#39; --graph --date=short
	* 1f7ec5e 2013-04-13 | Added a comment (HEAD, master) [Jim Weirich]
	* 582495a 2013-04-13 | Added a default value [Jim Weirich]
	* 323e28d 2013-04-13 | Using ARGV [Jim Weirich]
	* 9416416 2013-04-13 | First Commit [Jim Weirich]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	--pretty=&amp;quot;...&amp;quot; 定义输出的格式
	%h 是提交 hash 的缩写
	%d 是提交的装饰（如分支头或标签）
	%ad 是创作日期
	%s 是注释
	%an 是作者姓名
	--graph 使用 ASCII 图形布局显示提交树
	--date=short 保留日期格式更好且更短

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other tools:  gitx (Mac) 和 gitk (任意平台) 在浏览日志历史时十分有用。&lt;br /&gt;
###Add Git TAG
Add tag for the specified release: &amp;ldquo;git tag v1-data&amp;rdquo;, &amp;ldquo;git tag&amp;rdquo; to view all of the tags.&lt;br /&gt;
Revert the change via;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git revert HEAD

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将带你到编辑器中。你可以编辑默认的提交信息，或直接 离开它。保存并关闭文件。Or Using the following with no editing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git revert HEAD --no-edit

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using tag for reverting the changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git tag oops
	$ git reset --hard v1
	$ git tag -d oops

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More than one modification but commit once:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git add hello.rb
	$ git commit --amend -m &amp;quot;Add an author/email comment&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the directory structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git mv hello.rb lib
	git commit -m &amp;quot;Moved hello.rb to lib&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View the directory tree:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git cat-file -p 4ee1119fb7519dc8298fe5d8e9329f52566afaed

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Merge
Merge the branch with master:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git merge master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when conflicts happens, you will manually merge it.&lt;/p&gt;

&lt;p&gt;Revert to specified version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git reset --hard &amp;lt;hash&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clone the remote repository to local, using git clone:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git clone hello cloned_hello
	$ git branch -a
	* master
	  remotes/origin/HEAD -&amp;gt; origin/master
	  remotes/origin/greet
	  remotes/origin/master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git fetch 命令的结果将从远程仓库取得新的提交，但它不会将这些提交合并到本地分支中。If we wnat to sync, then try following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	[Trusty@~/code/git_learn/git_tutorial/cloned_hello]$ git merge origin/master
	Updating 5de15b7..105a3d0
	Fast-forward
	 README | 1 +
	 1 file changed, 1 insertion(+)
	[Trusty@~/code/git_learn/git_tutorial/cloned_hello]$ cat README 
	This is the Hello World example from the git tutorial.
	(Changed in original)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clone the directory structure, mainly for backup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git clone --bare hello hello.git
	Cloning into bare repository hello.git...
	done.
	$ ls hello.git
	HEAD
	config
	description
	hooks
	info
	objects
	packed-refs
	refs

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to push changes to the remote, just git push.&lt;br /&gt;
迅速跳过克隆仓库，且让我们拉下刚才推送到共享仓库的更改。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ cd ../cloned_hello
	$ git remote add shared ../hello.git
	$ git branch --track shared master
	$ git pull shared master
	$ cat README

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###On Daemon
####启动 Git 服务器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# (From the work directory)
	$ git daemon --verbose --export-all --base-path=.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，在分开的终端窗口中，转到你的工作目录。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	# (From the work directory)
	$ git clone git://localhost/hello.git network_hello
	$ cd network_hello
	$ ls

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你应当看到 hello 项目的拷贝。&lt;br /&gt;
####推送到 Git daemon&lt;br /&gt;
如果你想要推送到 Git daemon 仓库，添加 &amp;ndash;enable=receive-pack 到 git daemon 命令。小心，因为此服务器没有授权，任何人 都能推送到你的仓库。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Management of my repository</title>
      <link>http://purplepalmdash.github.io/2014/01/26/git-management-of-my-repository/</link>
      <pubDate>Sun, 26 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/26/git-management-of-my-repository/</guid>
      <description>&lt;p&gt;For create a new branch in the current repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git branch &amp;lt;name_of_your_new_branch&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can push the branch on github&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git push origin &amp;lt;name_of_your_new_branch&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to switch to your new branch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git checkout &amp;lt;name_of_your_new_branch&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See all of the branches via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git branch

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also you can add multiply remote url via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git remote add &amp;lt;name_of_your_remote&amp;gt; &amp;lt;url&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Push all of your changes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	git push origin &amp;lt;name_of_your_remote&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>