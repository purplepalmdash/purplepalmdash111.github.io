<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on Dash</title>
    <link>http://purplepalmdash.github.io/categories/nodejs/</link>
    <description>Recent content in Nodejs on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Jul 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Porting Weather APP Into Node.js(3)</title>
      <link>http://purplepalmdash.github.io/2014/07/12/porting-weather-app-into-node-dot-js-3/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/12/porting-weather-app-into-node-dot-js-3/</guid>
      <description>Get the timstamp of the record ObjectID could automatically store the insert timestamp, see following command:
&amp;gt; db.usercollection.find().pretty() ........ ........ &amp;gt; ObjectId(&amp;quot;53be4e7eb5ca215e38c5f651&amp;quot;).getTimestamp() ISODate(&amp;quot;2014-07-10T08:27:42Z&amp;quot;) &amp;gt; ObjectId(&amp;quot;53be4e7cb5ca215e38c5f650&amp;quot;).getTimestamp() ISODate(&amp;quot;2014-07-10T08:27:40Z&amp;quot;)  Time Format Run following commands to get the timestamp since 1970:
&amp;gt; day=new Date() Sat Jul 12 2014 21:15:10 GMT+0800 (CST) &amp;gt; day Sat Jul 12 2014 21:15:10 GMT+0800 (CST) &amp;gt; day.getTime() 1405170910049  The date which we fetched should be multiply 1000.</description>
    </item>
    
    <item>
      <title>Porting Weather APP Into Node.js(2)</title>
      <link>http://purplepalmdash.github.io/2014/07/09/porting-weather-app-into-node-dot-js-2/</link>
      <pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/09/porting-weather-app-into-node-dot-js-2/</guid>
      <description>Add packages dependencies:
 &amp;quot;dependencies&amp;quot;: { &amp;quot;express&amp;quot;: &amp;quot;^4.5.1&amp;quot;, &amp;quot;logfmt&amp;quot;: &amp;quot;^1.1.2&amp;quot;, &amp;quot;static-favicon&amp;quot;: &amp;quot;~1.0.0&amp;quot;, &amp;quot;morgan&amp;quot;: &amp;quot;~1.0.0&amp;quot;, &amp;quot;cookie-parser&amp;quot;: &amp;quot;~1.0.1&amp;quot;, &amp;quot;body-parser&amp;quot;: &amp;quot;~1.0.0&amp;quot;, &amp;quot;debug&amp;quot;: &amp;quot;~0.7.4&amp;quot;, &amp;quot;jade&amp;quot;: &amp;quot;~1.3.0&amp;quot;, &amp;quot;mongodb&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;monk&amp;quot;: &amp;quot;*&amp;quot; },  Then npm install to install the dependencies.
Install the package and save the version in package.json:
npm install forecast --save npm install cron --save npm install http --save npm install cheerio --save  Merge the TestNanjing.js and web.js file, let the fetch to be a function, or to be module.</description>
    </item>
    
    <item>
      <title>Porting Weather APP Into Node.js</title>
      <link>http://purplepalmdash.github.io/2014/07/07/porting-weather-app-into-node-dot-js/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/07/porting-weather-app-into-node-dot-js/</guid>
      <description>Website Design Use express for generating the whole website.
$ pwd /home/Trusty/code/nodejs/weather [Trusty@~/code/nodejs/weather]$ express weather  The express framework will be generated.
Add following dependencies into the weather/package.json:
 &amp;quot;jade&amp;quot;: &amp;quot;~1.3.0&amp;quot;, &amp;quot;mongodb&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;monk&amp;quot;: &amp;quot;*&amp;quot;  Install packages:
$ cd weather $ npm install  mkdir data, this command will create a directory named data which is used for holding our mongodb.
Now visit http://localhost:3000/ you will see the demo html website.</description>
    </item>
    
    <item>
      <title>Database In Node.js</title>
      <link>http://purplepalmdash.github.io/2014/06/18/database-in-node-dot-js/</link>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/18/database-in-node-dot-js/</guid>
      <description>MongoDB Install MongoDB via:
$ sudo pacman -S mongodb $ sudo systemctl start mongodb $ sudo systemctl enable mongodb $ mongodb  Later I will cover this topic.
MySQL Installation of MySQL The implementation chosen by Arch Linux is called MariaDB, install it via:
$ sudo pacman -S mariadb  Configuration steps:
$ sudo systemctl start mysqld.service [Trusty@~]$ sudo mysql_secure_installation /usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE!</description>
    </item>
    
    <item>
      <title>Node.js Quick Start</title>
      <link>http://purplepalmdash.github.io/2014/05/14/node-dot-js-quick-start/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/14/node-dot-js-quick-start/</guid>
      <description> Installation Via following command
$ yaourt -S nodejs  Quick Start $ node &amp;gt; console.log(&amp;quot;Hello!&amp;quot;) Hello! undefined  Hit twice &amp;ldquo;Ctrl+c&amp;rdquo; you will get out of the terminal.
A simple example is like:
var http = require(&amp;quot;http&amp;quot;); http.createServer(function(request, response) { response.writeHead(200, {&amp;quot;Content-Type&amp;quot;: &amp;quot;text/plain&amp;quot;}); response.write(&amp;quot;Hello World&amp;quot;); response.end(); }).listen(8888); $ node server.js $ curl http://localhost:8888 Hello World%  </description>
    </item>
    
  </channel>
</rss>