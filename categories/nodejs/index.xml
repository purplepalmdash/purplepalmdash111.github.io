<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on Dash</title>
    <link>http://purplepalmdash.github.io/categories/nodejs/</link>
    <description>Recent content in Nodejs on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Jul 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Porting Weather APP Into Node.js(3)</title>
      <link>http://purplepalmdash.github.io/2014/07/12/porting-weather-app-into-node-dot-js-3/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/12/porting-weather-app-into-node-dot-js-3/</guid>
      <description>

&lt;h3 id=&#34;get-the-timstamp-of-the-record&#34;&gt;Get the timstamp of the record&lt;/h3&gt;

&lt;p&gt;ObjectID could automatically store the insert timestamp, see following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.usercollection.find().pretty()
........
........
&amp;gt; ObjectId(&amp;quot;53be4e7eb5ca215e38c5f651&amp;quot;).getTimestamp()
ISODate(&amp;quot;2014-07-10T08:27:42Z&amp;quot;)
&amp;gt; ObjectId(&amp;quot;53be4e7cb5ca215e38c5f650&amp;quot;).getTimestamp()
ISODate(&amp;quot;2014-07-10T08:27:40Z&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;time-format&#34;&gt;Time Format&lt;/h3&gt;

&lt;p&gt;Run following commands to get the timestamp since 1970:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; day=new Date()
Sat Jul 12 2014 21:15:10 GMT+0800 (CST)
&amp;gt; day
Sat Jul 12 2014 21:15:10 GMT+0800 (CST)
&amp;gt; day.getTime()
1405170910049

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The date which we fetched should be multiply 1000.&lt;br /&gt;
And write a for loop for getting out the real date:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      // helper function
      function getDate(d) {
          return new Date(d);
      }
      console.log(&amp;quot;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;quot;);
      // Refers to 1405170910049
      // WhatWeGet 1405170047
      // Should multiply 1000, Print out all of the timestamp
      for ( kk = 1; kk &amp;lt; 24; kk++)
      {
         console.log(getDate(date_data[kk]*1000));
      }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Print the type of the variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log(typeof (#{weatherlist[3].Temperature}));

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Porting Weather APP Into Node.js(2)</title>
      <link>http://purplepalmdash.github.io/2014/07/09/porting-weather-app-into-node-dot-js-2/</link>
      <pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/09/porting-weather-app-into-node-dot-js-2/</guid>
      <description>&lt;p&gt;Add packages dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;express&amp;quot;: &amp;quot;^4.5.1&amp;quot;,
    &amp;quot;logfmt&amp;quot;: &amp;quot;^1.1.2&amp;quot;,
    &amp;quot;static-favicon&amp;quot;: &amp;quot;~1.0.0&amp;quot;,
    &amp;quot;morgan&amp;quot;: &amp;quot;~1.0.0&amp;quot;,
    &amp;quot;cookie-parser&amp;quot;: &amp;quot;~1.0.1&amp;quot;,
    &amp;quot;body-parser&amp;quot;: &amp;quot;~1.0.0&amp;quot;,
    &amp;quot;debug&amp;quot;: &amp;quot;~0.7.4&amp;quot;,
    &amp;quot;jade&amp;quot;: &amp;quot;~1.3.0&amp;quot;, 
    &amp;quot;mongodb&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;monk&amp;quot;: &amp;quot;*&amp;quot;
  },

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then &lt;code&gt;npm install&lt;/code&gt; to install the dependencies.&lt;/p&gt;

&lt;p&gt;Install the package and save the version in package.json:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install forecast --save
npm install cron --save
npm install http --save
npm install cheerio --save

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merge the TestNanjing.js and web.js file, let the fetch to be a function, or to be module.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Porting Weather APP Into Node.js</title>
      <link>http://purplepalmdash.github.io/2014/07/07/porting-weather-app-into-node-dot-js/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/07/porting-weather-app-into-node-dot-js/</guid>
      <description>

&lt;h3 id=&#34;website-design&#34;&gt;Website Design&lt;/h3&gt;

&lt;p&gt;Use express for generating the whole website.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pwd 
/home/Trusty/code/nodejs/weather
[Trusty@~/code/nodejs/weather]$ express weather

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The express framework will be generated.&lt;/p&gt;

&lt;p&gt;Add following dependencies into the weather/package.json:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;jade&amp;quot;: &amp;quot;~1.3.0&amp;quot;, 
    &amp;quot;mongodb&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;monk&amp;quot;: &amp;quot;*&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd weather
$ npm install

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mkdir data&lt;/code&gt;, this command will create a directory named &lt;code&gt;data&lt;/code&gt; which is used for holding our mongodb.&lt;br /&gt;
Now visit &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; you will see the demo html website.&lt;/p&gt;

&lt;p&gt;This website should have the inteface for operating the database(MongoDB), so I will add some sub-pages for handling the request for insert and query the database.&lt;/p&gt;

&lt;h4 id=&#34;insert-records-into-mongodb&#34;&gt;Insert Records Into MongoDB&lt;/h4&gt;

&lt;p&gt;Design database in MongoDB:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo
$ show dbs
admin       (empty)
local       0.078GB
my-website  0.078GB
mydb        0.078GB
nodetest1   0.078GB
test        (empty)
$ use weathertest

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The DataSet should be designed as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;_id&amp;quot; : 1234,
    &amp;quot;AQI&amp;quot; : &amp;quot;70&amp;quot;,
    &amp;quot;Level&amp;quot; : &amp;quot;良&amp;quot;, 
    &amp;quot;FirstPollution&amp;quot; : &amp;quot;臭氧1小时&amp;quot;, 
    &amp;quot;PM2_5&amp;quot; : &amp;quot;51&amp;quot;, 
    &amp;quot;PM10&amp;quot; : &amp;quot;70&amp;quot;, 
    &amp;quot;CO&amp;quot; : &amp;quot;0.148&amp;quot;, 
    &amp;quot;NO2&amp;quot; : &amp;quot;31&amp;quot;, 
    &amp;quot;O3_1hour&amp;quot; : &amp;quot;168&amp;quot;, 
    &amp;quot;O3_8hour&amp;quot; : &amp;quot;68&amp;quot;, 
    &amp;quot;S02&amp;quot; : &amp;quot;13&amp;quot; 
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the insert sentense should be like following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.usercollection.insert({ &amp;quot;AQI&amp;quot; : &amp;quot;70&amp;quot;, &amp;quot;Level&amp;quot; : &amp;quot;良&amp;quot;, &amp;quot;FirstPollution&amp;quot; : &amp;quot;臭氧1小时&amp;quot;, &amp;quot;PM2_5&amp;quot; : &amp;quot;51&amp;quot;, &amp;quot;PM10&amp;quot; : &amp;quot;70&amp;quot;, &amp;quot;CO&amp;quot; : &amp;quot;0.148&amp;quot;, &amp;quot;NO2&amp;quot; : &amp;quot;31&amp;quot;, &amp;quot;O3_1hour&amp;quot; : &amp;quot;168&amp;quot;, &amp;quot;O3_8hour&amp;quot; : &amp;quot;68&amp;quot;, &amp;quot;SO2&amp;quot; :&amp;quot;13&amp;quot;})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify the insert result via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.usercollection.find().pretty()
{
	&amp;quot;_id&amp;quot; : ObjectId(&amp;quot;53ba7e137346b7523d951084&amp;quot;),
	&amp;quot;AQI&amp;quot; : &amp;quot;70&amp;quot;,
	&amp;quot;Level&amp;quot; : &amp;quot;良&amp;quot;,
	&amp;quot;FirstPollution&amp;quot; : &amp;quot;臭氧1小时&amp;quot;,
	&amp;quot;PM2_5&amp;quot; : &amp;quot;51&amp;quot;,
	&amp;quot;PM10&amp;quot; : &amp;quot;70&amp;quot;,
	&amp;quot;CO&amp;quot; : &amp;quot;0.148&amp;quot;,
	&amp;quot;NO2&amp;quot; : &amp;quot;31&amp;quot;,
	&amp;quot;O3_1hour&amp;quot; : &amp;quot;168&amp;quot;,
	&amp;quot;O3_8hour&amp;quot; : &amp;quot;68&amp;quot;,
	&amp;quot;SO2&amp;quot; : &amp;quot;13&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Should add more informations into the database, for example the temperature/humidity, which could also be fetched via npm package.&lt;br /&gt;
First delete the inserted item via following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.usercollection.remove({&amp;quot;_id&amp;quot; : ObjectId(&amp;quot;53ba7e137346b7523d951084&amp;quot;)});
WriteResult({ &amp;quot;nRemoved&amp;quot; : 1 })
&amp;gt; db.usercollection.find().pretty()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then insert a new organized records and verify the insertion :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.usercollection.insert({ &amp;quot;Temperature&amp;quot; : &amp;quot;21.9&amp;quot;, &amp;quot;DewPoint&amp;quot; : &amp;quot;19.93&amp;quot;, &amp;quot;Humidity&amp;quot; : &amp;quot;0.89&amp;quot;, &amp;quot;Pressure&amp;quot; : &amp;quot;1004.85&amp;quot;, &amp;quot;Ozeone&amp;quot; : &amp;quot;289.03&amp;quot;,  &amp;quot;AQI&amp;quot; : &amp;quot;70&amp;quot;, &amp;quot;Level&amp;quot; : &amp;quot;良&amp;quot;, &amp;quot;FirstPollution&amp;quot; : &amp;quot;臭氧1小时&amp;quot;, &amp;quot;PM2_5&amp;quot; : &amp;quot;51&amp;quot;, &amp;quot;PM10&amp;quot; : &amp;quot;70&amp;quot;, &amp;quot;CO&amp;quot; : &amp;quot;0.148&amp;quot;, &amp;quot;NO2&amp;quot; : &amp;quot;31&amp;quot;, &amp;quot;O3_1hour&amp;quot; : &amp;quot;168&amp;quot;, &amp;quot;O3_8hour&amp;quot; : &amp;quot;68&amp;quot;, &amp;quot;SO2&amp;quot; :&amp;quot;13&amp;quot;, &amp;quot;CurrentTime&amp;quot;: &amp;quot;ISODate()&amp;quot;})
&amp;gt; db.usercollection.find().pretty()
{
	&amp;quot;_id&amp;quot; : ObjectId(&amp;quot;53ba82f97346b7523d951085&amp;quot;),
	&amp;quot;Temperature&amp;quot; : &amp;quot;21.9&amp;quot;,
	&amp;quot;DewPoint&amp;quot; : &amp;quot;19.93&amp;quot;,
	&amp;quot;Humidity&amp;quot; : &amp;quot;0.89&amp;quot;,
	&amp;quot;Pressure&amp;quot; : &amp;quot;1004.85&amp;quot;,
	&amp;quot;Ozeone&amp;quot; : &amp;quot;289.03&amp;quot;,
	&amp;quot;AQI&amp;quot; : &amp;quot;70&amp;quot;,
	&amp;quot;Level&amp;quot; : &amp;quot;良&amp;quot;,
	&amp;quot;FirstPollution&amp;quot; : &amp;quot;臭氧1小时&amp;quot;,
	&amp;quot;PM2_5&amp;quot; : &amp;quot;51&amp;quot;,
	&amp;quot;PM10&amp;quot; : &amp;quot;70&amp;quot;,
	&amp;quot;CO&amp;quot; : &amp;quot;0.148&amp;quot;,
	&amp;quot;NO2&amp;quot; : &amp;quot;31&amp;quot;,
	&amp;quot;O3_1hour&amp;quot; : &amp;quot;168&amp;quot;,
	&amp;quot;O3_8hour&amp;quot; : &amp;quot;68&amp;quot;,
	&amp;quot;SO2&amp;quot; : &amp;quot;13&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will insert many many records into the database, how to distinguish them? By Timestamp!!!&lt;/p&gt;

&lt;p&gt;In MongoDB we have the built-in Function Date():&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Date()
Mon Jul 07 2014 19:29:36 GMT+0800 (CST)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each inserted Dataset&amp;rsquo;s timestamp could be fetched out via following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ObjectId(&amp;quot;53ba876d7346b7523d951088&amp;quot;).getTimestamp()
ISODate(&amp;quot;2014-07-07T11:41:33Z&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next step is using node.js api for processing the dataset.&lt;/p&gt;

&lt;h4 id=&#34;display-the-inserted-records&#34;&gt;Display The Inserted Records&lt;/h4&gt;

&lt;p&gt;We want to display the result like following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Temperature: 21.9, DewPoint: 19.93, Humidity: 0.89, Pressure: 1004.85, Ozeone: 289.03, AQI: 70, Level: 良, FirstPollution: 臭氧1小时, PM2.5: 51, PM10: 70, CO: 0.148, NO2: 31, O3一小时： 168, O3八小时： 68, So2: 13。 &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Temperature: 21.9, DewPoint: 19.93, Humidity: 0.89, Pressure: 1004.85, Ozeone: 289.03, AQI: 70, Level: 良, FirstPollution: 臭氧1小时, PM2.5: 51, PM10: 70, CO: 0.148, NO2: 31, O3一小时： 168, O3八小时： 68, So2: 13。 &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Temperature: 21.9, DewPoint: 19.93, Humidity: 0.89, Pressure: 1004.85, Ozeone: 289.03, AQI: 70, Level: 良, FirstPollution: 臭氧1小时, PM2.5: 51, PM10: 70, CO: 0.148, NO2: 31, O3一小时： 168, O3八小时： 68, So2: 13。 &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the router/index.js, add following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* GET weatherlist page. */
router.get(&#39;/weatherlist&#39;, function(req, res) {
    var db = req.db;
    var collection = db.get(&#39;usercollection&#39;);
    collection.find({},{},function(e,docs){
        res.render(&#39;weatherlist&#39;, {
            &amp;quot;weatherlist&amp;quot; : docs
        });
    });
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the new file named &lt;code&gt;weatherlist.jade&lt;/code&gt; under views/ folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;block content
    h1.
        Weather List
    ul
        each weather, i in weatherlist
            li
                首要污染物: #{weather.FirstPollution}, &amp;lt;br /&amp;gt;级别: #{weather.Level},&amp;lt;br /&amp;gt;AQI: #{weather.AQI},&amp;lt;br /&amp;gt;PM2.5: #{weather.PM2_5},&amp;lt;br /&amp;gt;PM10: #{weather.PM10}, &amp;lt;br /&amp;gt;一氧化碳: #{weather.CO}, &amp;lt;br /&amp;gt;二氧化氮: #{weather.NO2}, &amp;lt;br /&amp;gt;臭氧一小时浓度: #{weather.O3_1hour}, &amp;lt;br /&amp;gt;臭氧八小时浓度: #{weather.O3_8hour}, &amp;lt;br /&amp;gt;二氧化硫: #{weather.SO2}, &amp;lt;br /&amp;gt;温度: #{weather.Temperature}, &amp;lt;br /&amp;gt;露点: #{weather.DewPoint}, &amp;lt;br /&amp;gt;湿度: #{weather.Humidity}, &amp;lt;br /&amp;gt;气压: #{weather.Pressure}, &amp;lt;br /&amp;gt;Ozeone: #{weather.Ozeone}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now visit &lt;a href=&#34;http://localhost:3000/weatherlist&#34;&gt;http://localhost:3000/weatherlist&lt;/a&gt; we could see the record has been listed on the page.&lt;/p&gt;

&lt;h4 id=&#34;insert-records-in-nodejs&#34;&gt;Insert Records In Nodejs&lt;/h4&gt;

&lt;p&gt;We should use a crontab task for inserting the record once we fetched the data.&lt;br /&gt;
The fetching process could be seperated from the web frame, or we could put the script into the directory, and let cron run it, it&amp;rsquo;s OK.&lt;/p&gt;

&lt;p&gt;Following is a sample code for inserting record into mongoDB:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* 
* This example uses the node MongoDB module to connect to the local
* mongodb database on this virtual machine
*
* More here: http://mongodb.github.io/node-mongodb-native/markdown-docs/insert.html
*/

//require node modules (see package.json)
var MongoClient = require(&#39;mongodb&#39;).MongoClient
    , format = require(&#39;util&#39;).format;

//connect away
MongoClient.connect(&#39;mongodb://127.0.0.1:27017/test&#39;, function(err, db) {
  if (err) throw err;
  console.log(&amp;quot;Connected to Database&amp;quot;);

  //simple json record
	var document = {name:&amp;quot;David1&amp;quot;, title:&amp;quot;About MongoDB1&amp;quot;};
  
	//insert record
	db.collection(&#39;test&#39;).insert(document, function(err, records) {
		if (err) throw err;
		console.log(&amp;quot;Record added as &amp;quot;+records[0]._id);
		//After insertion, close it.
		db.close();
		return;
	});
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once fetched, insert into the weathertest Database.&lt;/p&gt;

&lt;h4 id=&#34;display-how-many-items&#34;&gt;Display How Many Items&lt;/h4&gt;

&lt;p&gt;It should fetch the latest 24 items from the database, thus we should modify the code for fetching out 24 items.&lt;/p&gt;

&lt;p&gt;Edit routes/index.js:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* GET weatherlist page. */
router.get(&#39;/weatherlist&#39;, function(req, res) {
    var db = req.db;
    var collection = db.get(&#39;usercollection&#39;);

    collection.find({},{limit:24},function(e,docs){
        res.render(&#39;weatherlist&#39;, {
            &amp;quot;weatherlist&amp;quot; : docs
        });
    });

});

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;deploy-it-on-heroku&#34;&gt;Deploy it on heroku&lt;/h4&gt;

&lt;p&gt;Via following commands we could setup a brand new APP on heroku:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku login
$ cat web.js
// web.js
var express = require(&amp;quot;express&amp;quot;);
var logfmt = require(&amp;quot;logfmt&amp;quot;);
var app = express();

app.use(logfmt.requestLogger());

app.get(&#39;/&#39;, function(req, res) {
  res.send(&#39;Hello World!&#39;);
});

var port = Number(process.env.PORT || 5000);
app.listen(port, function() {
  console.log(&amp;quot;Listening on &amp;quot; + port);
});
$ npm init
$ npm install express logfmt --save
$ cat package.json
  &amp;quot;engines&amp;quot;: {
    &amp;quot;node&amp;quot;: &amp;quot;0.10.x&amp;quot;
  }
$ cat Procfile 
web: node web.js
$ foreman start
$ chromium http://localhost:5000
$ git init
$ git add .
$ git commit -m &amp;quot;init&amp;quot;
$ git remote add heroku git@heroku.com:node-weather-app.git
$ git push heroku master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now visit &lt;a href=&#34;http://node-weather-app.herokuapp.com&#34;&gt;http://node-weather-app.herokuapp.com&lt;/a&gt; you can see &amp;ldquo;Hello World!&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;When adding MongoDB add-ons, it says failed with following information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku addons:add mongolab
Adding mongolab on node-weather-app... failed
 !    Please verify your account to install this add-on plan
 !    For more information, see https://devcenter.heroku.com/categories/billing
 !    Verify now at https://heroku.com/verify

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apply the free account at&lt;a href=&#34;https://www.mongosoup.de/&#34;&gt;https://www.mongosoup.de/&lt;/a&gt;, then login and create a new database plan, Next time if you want to view your database, simply open your browser and go to &lt;a href=&#34;https://controlpanel.mongosoup.de/&#34;&gt;https://controlpanel.mongosoup.de/&lt;/a&gt;.&lt;br /&gt;
Click the Databases, and select the database, then &lt;code&gt;show password&lt;/code&gt;, it will shows you with the Database info, something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Connection string:	mongodb://############:###########@dbs004.mongosoup.de/cc_KNoBTXxNbHhS

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems the account failed, so I create a new account using another email, xxxxxxxxxx.&lt;br /&gt;
This time the app&amp;rsquo;s name is named nodeweatherapp
git@heroku.com:nodeweatherapp.git&lt;br /&gt;
And this time we will use root account for uploading.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Git URL: git@heroku.com:nodeweather.gi
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Database In Node.js</title>
      <link>http://purplepalmdash.github.io/2014/06/18/database-in-node-dot-js/</link>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/18/database-in-node-dot-js/</guid>
      <description>

&lt;h3 id=&#34;mongodb&#34;&gt;MongoDB&lt;/h3&gt;

&lt;p&gt;Install MongoDB via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pacman -S mongodb
$ sudo systemctl start mongodb
$ sudo systemctl enable mongodb
$ mongodb

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later I will cover this topic.&lt;/p&gt;

&lt;h3 id=&#34;mysql&#34;&gt;MySQL&lt;/h3&gt;

&lt;h4 id=&#34;installation-of-mysql&#34;&gt;Installation of MySQL&lt;/h4&gt;

&lt;p&gt;The implementation chosen by Arch Linux is called MariaDB, install it via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pacman -S mariadb 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configuration steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl start mysqld.service
[Trusty@~]$ sudo mysql_secure_installation
/usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found

NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

In order to log into MariaDB to secure it, we&#39;ll need the current
password for the root user.  If you&#39;ve just installed MariaDB, and
you haven&#39;t set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none): 
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

Set root password? [Y/n] Y
New password: 
Re-enter new password: 
Password updated successfully!
Reloading privilege tables..
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

Remove anonymous users? [Y/n] Y
 ... Success!

Normally, root should only be allowed to connect from &#39;localhost&#39;.  This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y/n] Y
 ... Success!

By default, MariaDB comes with a database named &#39;test&#39; that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y/n] Y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y/n] Y
 ... Success!

Cleaning up...

All done!  If you&#39;ve completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can login the mariadb via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysql -u root -p
MariaDB [(none)]&amp;gt; SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.00 sec)

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;node-js-of-mariadb&#34;&gt;Node.js of MariaDB&lt;/h4&gt;

&lt;h3 id=&#34;redis&#34;&gt;Redis&lt;/h3&gt;

&lt;p&gt;Running result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SET my.key test
OK
127.0.0.1:6379&amp;gt; KEYS my.key
1) &amp;quot;my.key&amp;quot;
127.0.0.1:6379&amp;gt; VALUES my.key
(error) ERR unknown command &#39;VALUES&#39;
127.0.0.1:6379&amp;gt; GET my.key
&amp;quot;test&amp;quot;
127.0.0.1:6379&amp;gt; keys *
 1) &amp;quot;user:jeff@amazon.com:followers&amp;quot;
 2) &amp;quot;user:jeff@amazon.com:follows&amp;quot;
 3) &amp;quot;user:bill@microsoft.com:followers&amp;quot;
 4) &amp;quot;mykey&amp;quot;
 5) &amp;quot;rq:job:b9b76e04-8bb7-4652-83e9-4453de981554&amp;quot;
 6) &amp;quot;rq:queue:default&amp;quot;
 7) &amp;quot;user:mark@facebook.com:data&amp;quot;
 8) &amp;quot;_kombu.binding.celeryev&amp;quot;
 9) &amp;quot;user:fred@fedex.com:data&amp;quot;
10) &amp;quot;user:jeff@amazon.com:data&amp;quot;
11) &amp;quot;rq:queues&amp;quot;
12) &amp;quot;user:bill@microsoft.com:follows&amp;quot;
13) &amp;quot;_kombu.binding.celery&amp;quot;
14) &amp;quot;my.key&amp;quot;
15) &amp;quot;user:bill@microsoft.com:data&amp;quot;
127.0.0.1:6379&amp;gt; KEYS my.key
1) &amp;quot;my.key&amp;quot;
127.0.0.1:6379&amp;gt; SET online.users 0
OK
127.0.0.1:6379&amp;gt; onlien.users
(error) ERR unknown command &#39;onlien.users&#39;
127.0.0.1:6379&amp;gt; online.users
(error) ERR unknown command &#39;online.users&#39;
127.0.0.1:6379&amp;gt; KEYS online.users
1) &amp;quot;online.users&amp;quot;
127.0.0.1:6379&amp;gt; GET online.users
&amp;quot;0&amp;quot;
127.0.0.1:6379&amp;gt; INCR online.users
(integer) 1
127.0.0.1:6379&amp;gt; INCR onlien.users
(integer) 1
127.0.0.1:6379&amp;gt; INCR online.users
(integer) 2
127.0.0.1:6379&amp;gt; HSET profile.1 name Guillermo
(integer) 1
127.0.0.1:6379&amp;gt; HGETALL profile.1
1) &amp;quot;name&amp;quot;
2) &amp;quot;Guillermo&amp;quot;
127.0.0.1:6379&amp;gt; HSET profile.1 last Rauch
(integer) 1
127.0.0.1:6379&amp;gt; HGETALL profile.1
1) &amp;quot;name&amp;quot;
2) &amp;quot;Guillermo&amp;quot;
3) &amp;quot;last&amp;quot;
4) &amp;quot;Rauch&amp;quot;
127.0.0.1:6379&amp;gt; HSET profile.1 programmer 1
(integer) 1
127.0.0.1:6379&amp;gt; HGETALL profile.1
1) &amp;quot;name&amp;quot;
2) &amp;quot;Guillermo&amp;quot;
3) &amp;quot;last&amp;quot;
4) &amp;quot;Rauch&amp;quot;
5) &amp;quot;programmer&amp;quot;
6) &amp;quot;1&amp;quot;
127.0.0.1:6379&amp;gt; HDEL profile.1 programmer
(integer) 1
127.0.0.1:6379&amp;gt; HGETALL profile.1
1) &amp;quot;name&amp;quot;
2) &amp;quot;Guillermo&amp;quot;
3) &amp;quot;last&amp;quot;
4) &amp;quot;Rauch&amp;quot;
127.0.0.1:6379&amp;gt; RPSH profile.1.jobs &amp;quot;job 1&amp;quot;
(error) ERR unknown command &#39;RPSH&#39;
127.0.0.1:6379&amp;gt; RPUSH profile.1.jobs &amp;quot;job 1&amp;quot;
(integer) 1
127.0.0.1:6379&amp;gt; HGET profile.1
(error) ERR wrong number of arguments for &#39;hget&#39; command
127.0.0.1:6379&amp;gt; HGETALL profile.1
1) &amp;quot;name&amp;quot;
2) &amp;quot;Guillermo&amp;quot;
3) &amp;quot;last&amp;quot;
4) &amp;quot;Rauch&amp;quot;
127.0.0.1:6379&amp;gt; LRANGE profile.1.jobs 0 -1
1) &amp;quot;job 1&amp;quot;
127.0.0.1:6379&amp;gt; 
127.0.0.1:6379&amp;gt; RPUSH profile.1.jobs &amp;quot;job 2&amp;quot;
(integer) 2
127.0.0.1:6379&amp;gt; LRANGE profile.1.jobs 0 -1
1) &amp;quot;job 1&amp;quot;
2) &amp;quot;job 2&amp;quot;
127.0.0.1:6379&amp;gt; RPUSH profile.1.jobs &amp;quot;job 3&amp;quot;
(integer) 3
127.0.0.1:6379&amp;gt; LRANGE profile.1.jobs 0 -1
1) &amp;quot;job 1&amp;quot;
2) &amp;quot;job 2&amp;quot;
3) &amp;quot;job 3&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DataSet in Redis:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SADD myset &amp;quot;a member&amp;quot;
(integer) 1
127.0.0.1:6379&amp;gt; SMEMBERS myset
1) &amp;quot;a member&amp;quot;
127.0.0.1:6379&amp;gt; SADD myset &amp;quot;a second member&amp;quot;
(integer) 1
127.0.0.1:6379&amp;gt; SMEMEBERS myset
(error) ERR unknown command &#39;SMEMEBERS&#39;
127.0.0.1:6379&amp;gt; SMEMBERS myset
1) &amp;quot;a second member&amp;quot;
2) &amp;quot;a member&amp;quot;
127.0.0.1:6379&amp;gt; SREM myset &amp;quot;a second member&amp;quot;
(integer) 1
127.0.0.1:6379&amp;gt; SMEMBERS myset
1) &amp;quot;a member&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Node.js Quick Start</title>
      <link>http://purplepalmdash.github.io/2014/05/14/node-dot-js-quick-start/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/14/node-dot-js-quick-start/</guid>
      <description>

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Via following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yaourt -S nodejs

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ node
&amp;gt; console.log(&amp;quot;Hello!&amp;quot;)
Hello!
undefined

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hit twice &amp;ldquo;Ctrl+c&amp;rdquo; you will get out of the terminal.&lt;br /&gt;
A simple example is like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var http = require(&amp;quot;http&amp;quot;);

http.createServer(function(request, response) {
	  response.writeHead(200, {&amp;quot;Content-Type&amp;quot;: &amp;quot;text/plain&amp;quot;});
	    response.write(&amp;quot;Hello World&amp;quot;);
	      response.end();
}).listen(8888);
$ node server.js

$ curl http://localhost:8888
Hello World%

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>