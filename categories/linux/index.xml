<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Dash</title>
    <link>http://purplepalmdash.github.io/categories/linux/</link>
    <description>Recent content in Linux on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Nov 2017 10:44:15 +0800</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitLabInDocker</title>
      <link>http://purplepalmdash.github.io/blog/2017/11/13/gitlabindocker/</link>
      <pubDate>Mon, 13 Nov 2017 10:44:15 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/11/13/gitlabindocker/</guid>
      <description>Steps Run the docker instance via following steps:
# docker pull gitlab/gitlab-ce # mkdir -p ~/gitlab # mkdir -p ~/gitlab/config # mkdir -p ~/gitlab/logs # mkdir -p ~/gitlab/data # docker run --detach --publish 443:443 --publish 80:80 --publish 2222:22 \ --name gitlab \ --memory 4g \ --restart always \ --volume ~/gitlab/config:/etc/gitlab \ --volume ~/gitlab/logs:/var/log/gitlab \ --volume ~/gitlab/data:/var/opt/gitlab \ gitlab/gitlab-ce:latest  Reconfigure the configuration files:
# vim ~/gitlab/config/gitlab.rb external_url &#39;http://192.192.189.129&#39;  Let the configuration take effect:</description>
    </item>
    
    <item>
      <title>LinuxTips8</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/30/linuxtips8/</link>
      <pubDate>Mon, 30 Oct 2017 09:50:23 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/30/linuxtips8/</guid>
      <description>1. pigz for multi-core compression In case you need multi-core compression for speeding up compression procedure, please do following steps:
# pacman -S pigz # tar -c transfer/ | pigz -c | split -a 5 -d -b 1650m - mysplit # ls -l total 8296652 -rw-r--r-- 1 root root 1730150400 Oct 30 09:20 mysplit00000 -rw-r--r-- 1 root root 1730150400 Oct 30 09:20 mysplit00001 -rw-r--r-- 1 root root 1730150400 Oct 30 09:22 mysplit00002 -rw-r--r-- 1 root root 1730150400 Oct 30 09:23 mysplit00003 -rw-r--r-- 1 root root 1575143431 Oct 30 09:23 mysplit00004 drwxr-xr-x 3 root root 4096 Oct 30 08:59 transfer  Decompression these files:</description>
    </item>
    
    <item>
      <title>ArchLinuxUSBWirelessDongleIsssue</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/24/archlinuxusbwirelessdongleisssue/</link>
      <pubDate>Tue, 24 Oct 2017 08:53:47 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/24/archlinuxusbwirelessdongleisssue/</guid>
      <description>Hardware &amp;amp; Software Tenda u1, rtl8192eu chipset.
Could be found as wireless adaptor, but could not get networking.
# sudo wifi-menu wlp37s0u1 # dmesg .... [42647.461034] wlp37s0u1: send auth to **:xx:xx:xx:xx:xx (try 1/3) [42647.663969] wlp37s0u1: send auth to **:xx:xx:xx:xx:xx (try 2/3) [42647.867339] wlp37s0u1: send auth to **:xx:xx:xx:xx:xx (try 3/3) [42648.070657] wlp37s0u1: authentication with xx:xx:xx:xx:xx:xx timed out  Kernel Version:
$ uname -r 4.13.7-1-ARCH  Trouble-Shooting Install wireless_tools and use iwconfig for detecting the hardware:</description>
    </item>
    
    <item>
      <title>DunstOnArchLinux</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/19/dunstonarchlinux/</link>
      <pubDate>Thu, 19 Oct 2017 11:14:59 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/19/dunstonarchlinux/</guid>
      <description>Installation My desktop environment is awesome, my operating system is ArchLinux.
dunst and dunst-git are both ok for installation, because dunst-git have the systemd file, which would be very convenient for configuration, I install it via:
$ yaourt dunst-git  Configuration Enable the user&amp;rsquo;s systemd configuration via:
$ systemctl --user enable dunst  But your dunst will start-up with errors, calling:
&amp;quot;Name Lost. Is Another notification daemon running?&amp;quot;
This is because awesome has its own desktop notification daemon called naughty, simply comment them out in your ~/.</description>
    </item>
    
    <item>
      <title>vcenterIssue</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/18/vcenterissue/</link>
      <pubDate>Wed, 18 Oct 2017 09:11:27 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/18/vcenterissue/</guid>
      <description>AIM enlarge the disk space
vCenter Password For changing the vCenter password, do following:
First you should get the vCenter vm running on which machine:
Now use vsphere client login to 192.192.192.70, open the terminal window, then edit the grub items for setting the parameter to init=/bin/bash, now you got a window which you could change the passwd of root.
Enlarge disk Enlarge it on vsphere client, then run following command:</description>
    </item>
    
    <item>
      <title>GrafanaTemplateIssue</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/17/grafanatemplateissue/</link>
      <pubDate>Tue, 17 Oct 2017 17:06:46 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/17/grafanatemplateissue/</guid>
      <description>I downloaded some template from grafana.net, but none of them work properly, following are the trouble-shooting of template.
 Change the data source.
View the json file, get its input field:
  { &amp;quot;__inputs&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;DS_BC-GRAPHITE&amp;quot;, &amp;quot;label&amp;quot;: &amp;quot;BC-Graphite&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;datasource&amp;quot;, &amp;quot;pluginId&amp;quot;: &amp;quot;graphite&amp;quot;, &amp;quot;pluginName&amp;quot;: &amp;quot;Graphite&amp;quot; } ],  This means you have to define a datasource named DS_BC-GRAPHITE, like following:
 Change collectd&amp;rsquo;s write_graphite structure.
  The item could not be displayed properly, because the definition for data listed as:</description>
    </item>
    
    <item>
      <title>ipmitips</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/17/ipmitips/</link>
      <pubDate>Tue, 17 Oct 2017 09:52:38 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/17/ipmitips/</guid>
      <description>AIM For managing the servers via ipmitools.
Installation Install ipmitools via yum install -y ipmitool, then you could use ipmitool for managing the servers.
HuaWei Examples Official Website:
http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000055104&amp;amp;partNo=10082
Username/passwd:
Using ipmitool for displaying the lan info:
Setting IP Setting IP Address/Netmask/gateway via following way:
iBMC Huwei using iBMC, so now you could visit its ip address for managing this server:
Now you could using its management URL:
Configure JDK Add new Env Var:</description>
    </item>
    
    <item>
      <title>CollectdDiskIssue</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/11/collectddiskissue/</link>
      <pubDate>Wed, 11 Oct 2017 15:21:56 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/11/collectddiskissue/</guid>
      <description>Installation and Configuration Via collectd you could monitoring the disk statistics, the configuration files is listed as following:
# cat /etc/collectd.conf ..... LoadPlugin disk  No other configuration on disk configuration, then you could see all of the items which listed under /proc/diskstats would be send to graphite database.
Another plugin Located at:
https://github.com/indygreg/collectd-diskstats
Configuration:
[root@LABSERVER127 collectd]# pwd /usr/lib64/collectd [root@LABSERVER127 collectd]# ls diskstats.py diskstats.py # vim /etc/collectd.conf ..... LoadPlugin python .</description>
    </item>
    
    <item>
      <title>云终端虚拟机搬迁操作指南</title>
      <link>http://purplepalmdash.github.io/blog/2017/09/20/%E4%BA%91%E7%BB%88%E7%AB%AF%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AC%E8%BF%81%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 20 Sep 2017 11:22:30 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/09/20/%E4%BA%91%E7%BB%88%E7%AB%AF%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AC%E8%BF%81%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</guid>
      <description>1. 搬迁前操作 注意：此步骤在服务器搬迁前(周三下午三点前)执行。
此步骤执行完后将更改云终端虚拟机IP，由之前的192.168.13段更改为宝地广场使用的192.168.103段。
浏览器访问http://192.192.192.91/c/
如果碰到网页乱码, 则更改浏览器默认编码为UTF-8即可：
在网页中查找自己名字对应的bat文件，右键另存到本地。
用记事本打开该bat文件，用纸笔记下更改后的IP地址。
服务器搬迁到宝地广场后，需要用IP地址配置云终端盒子:
点击鼠标右键，选择以管理员身份运行, 按下鼠标右键以后，该bat文件将自动更改你的云终端虚拟机IP地址/子网掩码/网关地址:
2. 搬迁后配置 宝地服务器就绪后(秘书会通知大家的)，在个人的云终端盒子上配置。
点击配置按钮进入到配置界面：
点击用户配置后再点击编辑：
用第一步记下的IP地址替换原配置的主机地址, 之后点击保存返回:
点击原有的个人配置文件，应该可以进入到原来的桌面了。</description>
    </item>
    
    <item>
      <title>FixedABugOnDockerAndDebian</title>
      <link>http://purplepalmdash.github.io/blog/2017/09/18/fixedabugondockeranddebian/</link>
      <pubDate>Mon, 18 Sep 2017 09:36:59 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/09/18/fixedabugondockeranddebian/</guid>
      <description>When install docker on Debian9, when configured the static ip address mode, then you install docker, you will find the ip address won&amp;rsquo;t be configured as you imagined. It will get the dhcp ip from your dhcpd server. Following are the steps for correct this bug:
# systemctl disable docker.service # systemctl enable rc-local.service  Then in /etc/rc.local file you will add following lines:
#!/bin/sh -e systemctl start docker.service  Then you should chmod a+x /etc/rc.</description>
    </item>
    
    <item>
      <title>EnableBBROnUbuntu1604</title>
      <link>http://purplepalmdash.github.io/blog/2017/09/14/enablebbronubuntu1604/</link>
      <pubDate>Thu, 14 Sep 2017 17:15:49 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/09/14/enablebbronubuntu1604/</guid>
      <description>The kernel should be newer than 4.9, then you could enable BBR algorithm.
Take v4.12 for example, visit http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12/ for getting the daily build kernel:
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12/linux-headers-4.12.0-041200-generic_4.12.0-041200.201707022031_amd64.deb wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12/linux-headers-4.12.0-041200_4.12.0-041200.201707022031_all.deb wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12/linux-image-4.12.0-041200-generic_4.12.0-041200.201707022031_amd64.deb  Install debs via dpkg -i *.deb, reboot the machine.
Change in sysctl:
echo &amp;quot;net.core.default_qdisc=fq&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf echo &amp;quot;net.ipv4.tcp_congestion_control=bbr&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf sysctl -p  Verification:
# sysctl net.ipv4.tcp_available_congestion_control net.ipv4.tcp_available_congestion_control = bbr cubic reno # lsmod | grep bbr tcp_bbr 20480 0  Now the bbr algorithm for tcp is enabled, enjoy the high speed.</description>
    </item>
    
    <item>
      <title>TipsOnPX</title>
      <link>http://purplepalmdash.github.io/blog/2017/09/14/tipsonpx/</link>
      <pubDate>Thu, 14 Sep 2017 09:04:49 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/09/14/tipsonpx/</guid>
      <description>Tips Delete the pods forcely:
// kubectl &amp;gt;= 1.5 # kubectl delete pods &amp;lt;pod&amp;gt; --grace-period=0 --force // kubectl &amp;lt; 1.4 # kubectl delete pods &amp;lt;pod&amp;gt; --grace-period=0  Install jq(Command-line JSON processor) :
wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 chmod +x ./jq cp jq /usr/bin  px volume operation:
# pxctl v l # pxctl v d XXXXXXX  Before you run px on k8s(offline), you have to manually install following packages:</description>
    </item>
    
    <item>
      <title>BuildDebianDockerImageLocally</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/29/builddebiandockerimagelocally/</link>
      <pubDate>Tue, 29 Aug 2017 09:21:07 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/29/builddebiandockerimagelocally/</guid>
      <description>AIM Recently I am working in a network isolated environment, this means, I am unable to connect to internet freely. But I have to finish my working using some specific docker images, how? So I have to build them locally using iso.
Preparation Download debian dvds from internet and tranfer them into the intranet:
# ls -l debian* -rw-r--r-- 1 dash root 3.6G Jul 21 00:59 debian-9.0.0-amd64-DVD-1.iso -rw-r--r-- 1 dash root 4.</description>
    </item>
    
    <item>
      <title>SetupVinoServer</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/24/setupvinoserver/</link>
      <pubDate>Thu, 24 Aug 2017 15:42:39 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/24/setupvinoserver/</guid>
      <description>Background For enable rdp server, but I installed vino server for vncserver, faint.
CentOS Configuration Install Gnome Desktop.
Enable root autologin(This is pretty dangerous):
# vim /etc/gdm/custom.conf [daemon] AutomaticLoginEnable=true AutomaticLogin=username  So next time you will login to the desktop automatically.
Vino Server Vino will be automatically installed for gnome desktop ,config it via:
# gsetting set org.gnome.Vino require-encryption false  Also setting up the password.
Now reboot the machine you could enjoy the vncserver.</description>
    </item>
    
    <item>
      <title>OnAirDetection</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/22/onairdetection/</link>
      <pubDate>Tue, 22 Aug 2017 14:32:51 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/22/onairdetection/</guid>
      <description>Direct Read From Serial Port Arduino mega2560 Code:
void setup() { pinMode(0,INPUT_PULLUP); pinMode(1,INPUT_PULLUP); } void loop() { }  This code will turn mega2560 into a USB-TTL transmitter, thus you could directly read from the serial port and display them in hex mode:
# cat /dev/ttyACM0 | xxd -p -c 9 ffff01270005020534 ffff01270005020534 ffff01270005020534 ffff01270005020534 ....  According to the reference manual,
we know the air is 0.05 mg/m3.</description>
    </item>
    
    <item>
      <title>OnFIOTesting</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/21/onfiotesting/</link>
      <pubDate>Mon, 21 Aug 2017 09:22:57 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/21/onfiotesting/</guid>
      <description>Environment bare metal vs kvm vs docker Testing script:
#!/bin/bash function tgt_r { fio -filename=/root/ioscript/ccc -direct=1 -iodepth 4 -thread -rw=read -ioengine=libaio -bs=$1 -size=120G -runtime=200 -group_reporting -name=mytest &amp;amp;&amp;gt;&amp;gt; s_r_test } function tgt_w { fio -filename=/root/ioscript/ccc -direct=1 -iodepth 4 -thread -rw=write -ioengine=libaio -bs=$1 -size=120G -runtime=200 -group_reporting -name=mytest &amp;amp;&amp;gt;&amp;gt; s_w_test } function tgt_rr { fio -filename=/root/ioscript/ccc -direct=1 -iodepth 4 -thread -rw=randread -ioengine=libaio -bs=$1 -size=120G -runtime=200 -group_reporting -name=mytest &amp;amp;&amp;gt;&amp;gt; r_r_test } function tgt_rw { fio -filename=/root/ioscript/ccc -direct=1 -iodepth 4 -thread -rw=randwrite -ioengine=libaio -bs=$1 -size=120G -runtime=200 -group_reporting -name=mytest &amp;amp;&amp;gt;&amp;gt; r_w_test } mkdir -p /root/ioscript rm -f /root/ioscript/ccc; touch /root/ioscript/ccc tgt_r 128K rm -f /root/ioscript/ccc; touch /root/ioscript/ccc tgt_w 128K rm -f /root/ioscript/ccc; touch /root/ioscript/ccc tgt_rr 4K rm -f /root/ioscript/ccc; touch /root/ioscript/ccc tgt_rw 4K  Sequence read/write, 128K.</description>
    </item>
    
    <item>
      <title>TipsOnTesingFrameWorkForPython</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/11/tipsontesingframeworkforpython/</link>
      <pubDate>Fri, 11 Aug 2017 14:27:43 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/11/tipsontesingframeworkforpython/</guid>
      <description>Code Before you run:
# apt-get install python-pip # pip install nose # pip install python-memcached  Directory Structure:
test@local:~$ tree /tmp/foomodule/ /tmp/foomodule/ |-- foo | |-- a.py | |-- b.py | `-- __init__.py `-- tests |-- test_a.py `-- test_b.py  Module Source Code:
# /tmp/foomodule/foo/a.py def add(a, b): return a + b def double(a): return a * 2 # /tmp/foomodule/foo/b.py import memcache class Cache: def __init__(self, server): self.cache = memcache.</description>
    </item>
    
    <item>
      <title>ThinkingOnCloud</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/10/thinkingoncloud/</link>
      <pubDate>Thu, 10 Aug 2017 16:31:46 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/10/thinkingoncloud/</guid>
      <description>Comparison On Chinese cloud vs Citrix cloud</description>
    </item>
    
    <item>
      <title>MakeCIIn3rdParty</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/02/makeciin3rdparty/</link>
      <pubDate>Wed, 02 Aug 2017 15:00:52 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/02/makeciin3rdparty/</guid>
      <description>Docker Images 需要用到的Docker Image: wgetbuildcs6, 构建的Dockerfile:
FROM centos:centos6 MAINTAINER dash xxx &amp;lt;xxxx@gmail.com&amp;gt; RUN yum -y install curl git gcc make rpm-build python-devel which lrzsz tar gnutls gnutls-devel  将创建好的镜像上传到私有仓库(某台内网主机):
$ sudo docker load&amp;lt;wgetbuildcs6.tar $ sudo docker images | grep wgetbuildcs6 $ sudo docker tag 1020xxxxx 192.168.124.102:5000/xxxxx/wgetbuildcs6:latest $ sudo docker push 192.168.124.102:5000/xxxxx/wgetbuildcs6:latest  Git Repository 在CentOS7.3系统上，安装git daemon:
# yum install -y git-daemon  在源码目录下, 执行以下命令:
# git init # git add .</description>
    </item>
    
    <item>
      <title>TipsOnHA</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/01/tipsonha/</link>
      <pubDate>Tue, 01 Aug 2017 09:32:54 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/01/tipsonha/</guid>
      <description>Network Preparation libvirt network preparation:
$ cat internal.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;internal&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr8&#39;/&amp;gt; &amp;lt;/network&amp;gt; $ cat external.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;external&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr9&#39;/&amp;gt; &amp;lt;/network&amp;gt; $ cat management.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;management&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr7&#39;/&amp;gt; &amp;lt;ip address=&#39;192.168.3.1&#39; netmask=&#39;255.255.255.0&#39;&amp;gt; &amp;lt;/ip&amp;gt; &amp;lt;/network&amp;gt; $ cat heartbeat.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;heartbeat&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr6&#39;/&amp;gt; &amp;lt;/network&amp;gt;  Define all of the networking, take heartbeat networking for example:
$ sudo virsh net-define heartbeat.xml $ sudo virsh net-autostart heartbeat $ sudo virsh net-start heartbeat  iscsi node Create a new machine(192.</description>
    </item>
    
    <item>
      <title>UsingLocalRdesktopForAcrossingSomething</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/31/usinglocalrdesktopforacrossingsomething/</link>
      <pubDate>Mon, 31 Jul 2017 12:23:57 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/31/usinglocalrdesktopforacrossingsomething/</guid>
      <description>MAC Address Spoofing First you have to cheat your remote machine via changing your own MAC address from the origin one to the remote box address.
There are many methods in:
https://wiki.archlinux.org/index.php/MAC_address_spoofing
My method is via changing the systemd-networkd:
$ pwd /etc/systemd/network $ cat 00-default.link [Match] MACAddress=xx:xx:xx:xx:xx [Link] MACAddress=xx:xx:xx:xx:xx NamePolicy=kernel database onboard slot path  After your changing, reboot your system.
Iptables Changing Add following lines into my own iptables rules:</description>
    </item>
    
    <item>
      <title>ReadingTipsOnLinuxSystemArchitecture</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/31/readingtipsonlinuxsystemarchitecture/</link>
      <pubDate>Mon, 31 Jul 2017 09:19:01 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/31/readingtipsonlinuxsystemarchitecture/</guid>
      <description>On This Book Borrowed from lab, written via a janpanese author.
This article will record the reading tips on Chapter 2(libvirtd related).
Network Configuration Edit the netoworking definition xml:
$ cat internal.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;internal&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr8&#39;/&amp;gt; &amp;lt;/network&amp;gt; $ cat external.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;external&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr9&#39;/&amp;gt; &amp;lt;/network&amp;gt;  Define the networking via following commands:
$ sudo virsh net-define external.xml Network external defined from external.xml $ sudo virsh net-autostart external Network external marked as autostarted $ sudo virsh net-start external Network external started $ libvirt sudo virsh net-list Name State Autostart Persistent ---------------------------------------------------------- default active no yes external active yes yes internal active yes yes kubernetes active yes yes  View the configuration in virt-manager:</description>
    </item>
    
    <item>
      <title>CorrectHugoDate</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/27/correcthugodate/</link>
      <pubDate>Thu, 27 Jul 2017 16:28:35 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/27/correcthugodate/</guid>
      <description>Problem Reason This is because hugo upgrade to a new version 0.25.1, while this new version won&amp;rsquo;t give the default value of date in newly created markdown file.
Solution Edit the themes/hyde-a/archetypes/default.md, add following items:
+++ title = &amp;quot;&amp;quot; date = &amp;quot;{{ .Date }}&amp;quot; description = &amp;quot;&amp;quot; keywords = [&amp;quot;Linux&amp;quot;] categories = [&amp;quot;Linux&amp;quot;] +++  Now you could re-new your configuration, and then your blog will acts OK.</description>
    </item>
    
    <item>
      <title>CreateRHEL6CustomizedISO</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/27/createrhel6customizediso/</link>
      <pubDate>Thu, 27 Jul 2017 12:28:35 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/27/createrhel6customizediso/</guid>
      <description>目的 根据用户自定义配置，自动从ISO安装出整个系统。
准备材料 RHEL 6.6安装光盘, x86_64版本。 自定义kickstart文件，用于自定义分区/用户/密码/安装包等
红帽系列操作系统(用于制作光盘镜像，已验证Redhat7.3)
步骤  创建目录用于挂载安装光盘和自定义光盘, 其中/media/bootiso用于挂载安装光盘， /media/bootisoks用于存放自定义光盘内容:
  $ mkdir -p /media/bootiso /media/bootisoks   拷贝安装内容到自定义光盘目录:
  $ sudo mount -t iso9660 -o loop DVD.iso /media/bootiso $ cp -r /media/bootiso/* /media/bootisoks/ $ chmdo -R u+w /media/bootisoks $ cp /media/bootiso/.discinfo /media/bootisoks $ cp /media/bootiso/.discinfo /media/bootisoks/isolinux   拷贝自定义的ks文件到isolinux目录下:
  $ cp YourKickStartFile.ks /media/bootisoks/isolinux   配置引导选项:
  $ vim /media/bootisoks/isolinux.cfg initrd=initrd.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnOracleDatabaseDeployment</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/21/workingtipsonoracledatabasedeployment/</link>
      <pubDate>Fri, 21 Jul 2017 12:28:35 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/21/workingtipsonoracledatabasedeployment/</guid>
      <description>Items Working items on one-click deployment of oracle database.
Ansible-Playbooks Based on:
https://github.com/nkadbi/oracle-db-12c-vagrant-ansible
Refers to:
https://blog.dbi-services.com/vagrant-up-get-your-oracle-infrastructure-up-and-running/
https://blog.dbi-services.com/part2-vagrant-up-get-your-oracle-infrastructure-up-an-running/
Username/Password:
System: oracle/welcome1
Database: sys/oracle
Linux Client Yaourt has the linux client for accessing oracle Db:
https://aur.archlinux.org/packages/oracle-sqldeveloper/
Installing method:
Download the file from oracle.com
Create Database Create database using following command:
[vagrant@dbserver1 ~]$ su - oracle Password: -bash-4.2$ sqlplus &amp;quot;/as sysdba&amp;quot;  Now you got the shell like SQL&amp;gt;, you could input the sql in this shell:</description>
    </item>
    
    <item>
      <title>DockerNetworkPerformanceTest</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/13/dockernetworkperformancetest/</link>
      <pubDate>Thu, 13 Jul 2017 16:51:35 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/13/dockernetworkperformancetest/</guid>
      <description>测试环境 Docker常用的两种网络模式包括Bridge和Host模式，为测试这两种网络模式的性能，我们将创建以下的测试环境:
 192.192.192.89 - 运行Docker容器的服务器， CentOS 7.3.
 192.192.192.88 - 运行客户端的服务器, CentOS 7.3.
  两台服务器之间的物理网络为万兆以太网络。
我们采用Iperfhttp://software.es.net/iperf/来测量网络带宽，iperf非常简单，也拥有足够多的特性用于测试基本的性能指标。 在服务器端，我们需要一个运行iperf3的Docker容器。 Docker的版本为17.05-ce.
测试将基于以下几个场景: * 原始网络吞吐量 * 跨主机物理机到Docker(host模式) * 跨主机物理机到Docker(Bridge模式) * 同主机物理机到Docker(Bridge模式) * 同主机Docker到Docker(Bridge模式-external) * 同主机Docker到Docker(Bridge模式-internal)
原始网络吞吐量 首先，我们需要得到在没有任何Docker容器运行时的原始网络吞吐，在Server端运行:
[root@192.192.192.89 ~]# iperf3 -s -p 5202  Client端运行:
[root@192.192.192.88 ~]# iperf3 -c 192.192.192.89 -p 5202  运行测试后，服务器端和客户端都会返回诊断信息。我们暂时只关心其吞吐量:
----------------------------------------------------------- Server listening on 5202 ----------------------------------------------------------- Accepted connection from 192.192.192.88, port 39682 [ 5] local 192.192.192.89 port 5202 connected to 192.</description>
    </item>
    
    <item>
      <title>MakeDockerImages</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/04/makedockerimages/</link>
      <pubDate>Tue, 04 Jul 2017 16:28:35 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/04/makedockerimages/</guid>
      <description>环境准备 在Virtualbox（已默认安装在虚拟机上）中，创建一台新机器，如下图：
内存为1G:
创建硬盘:
选择VDI:
Dynamically Allocated:
大小为8G：
现在点击Settings, 加载安装盘:
点击OK后，按Start开始安装：
选择Basic Server，
安装完毕后重新启动系统。
点击virtualbox菜单上的Devices-&amp;gt;Optical Devices-&amp;gt; ，加载rhel6.6的ISO到虚拟机。
通过下列命令集合，创建rhel6.6的基础文件系统:
# mkdir -p /mnt/rhel6-repo # mount /dev/sr0 /mnt/rhel6-repo # mkdir /root/rhel6-root # rpm --root /root/rhel6-root/ --initdb # rpm --root /root/rhel6-root/ -ivh /mnt/rhel6-repo/Packages/redhat-release-server-6Server-6.6.0.2.el6.x86_64.rpm # cd /root/rhel6-root/ # cd etc/yum.repos.d # rm -f *.repo # vim rhel6.repo [rhel6] baseurl=file:///mnt/rhel6-repo enabled=1 gpgcheck=0 # rpm --root /root/rhel6-root --import /mnt/rhel6-repo/RPM-GPG-KEY-redhat-* # yum -y --installroot=/root/rhel6-root install yum which vim  这时候如果直接打包成tar.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnDockerDeployment</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/02/workingtipsondockerdeployment/</link>
      <pubDate>Sun, 02 Jul 2017 12:33:39 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/02/workingtipsondockerdeployment/</guid>
      <description>问题背景 针对某公司现有的混乱的发布、部署流程提出的一种基于Docker的应用程序部署方案。
架构 物理机+Docker运行环境+Docker-Compose编排+Docker镜像+Ansible自动化配置框架，达到开箱即用的快速部署目的。
准备 Vagrantbox基础环境 Vagrantbox基于Ubuntu Xenial(16.04), 在其上安装了docker, docker-compose:
# sudo apt-get update -y # curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/test/internet | sh # sudo apt-get install docker-compose  由此构建的vagrant包含了docker运行所需要的最小条件，也就是基于最小条件，我们可以部署预定义好的docker服务。达到&amp;rdquo;开箱即用&amp;rdquo;的目的。
可以通过vagrant package打包我们建立好的vagrant环境, 由此生成的vagrant.box可以用于新建环境的分发.
测试代码 基于docker-haproxy-nginx, 这个工程将建立一个nginx与haproxy协同作用的web集群，haproxy在本机的8080端口创建服务，将服务分别转发到后端的nginx1/nginx2/nginx3服务器，我们基于此测试代码构建我们的服务框架:
# git clone git://github.com/kakakakakku/docker-haproxy-nginx.git  为模拟离线部署，手动pull回对应的docker镜像并保存之:
# sudo docker pull haproxy:1.6.4-alpine # sudo docker pull nginx:stable-alpine # sudo docker save haproxy:1.6.4-alpine&amp;gt;haproxy.tar # sudo docker save nginx:stable-alpine&amp;gt;nginx.tar  ansible部署脚本 ansible部署脚本用于自动执行环境配置，在准备好基础环境和测试代码、对应的docker镜像后，我们将对应撰写相应的ansible-playbook， 用于完成一键部署。
手动部署流程 创建基于我们前面制作好的vagrantbox的虚拟机，给定一个新的IP地址，例如192.168.33.201:
# mkdir testdockerdeployment # cd testdockerdeployment # vagrant init Xenial64DockerCompose # vim Vagrantfile config.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnAnsiblePull</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/30/workingtipsonansiblepull/</link>
      <pubDate>Fri, 30 Jun 2017 08:50:26 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/30/workingtipsonansiblepull/</guid>
      <description>背景 在生产环境中经常面临大量卸载或迁移服务器的操作，这时候必须手动重建配置，这是一项繁琐且容易出错的工作。
部署人员可能会尝试DevOps方式(&amp;ldquo;基础设施作为代码&amp;rdquo;)管理底层设备，在迁移过程中也会尝试像Chef或Puppet这样的流行工具，但是发现它们对于简单的案例来说也是非常复杂的。
本文将介绍一个强大但简单的配置管理工具Ansible, 基于Ansible和GitLab建立出的工作流，我们可以快速对环境进行集中化部署/管理。在实际的生产环境中，基于此工作流将使运维变得更加简单、高效、可靠。
概观 Ansible Ansible是一个用Python编写的自动化和编排工具。它通过SSH连接工作，不需要在主机上安装代理。
如果读者不了解使用公钥的无密码连接，可以参考:
Ansible的配置文件以YAML文档编写，称为&amp;rdquo;Playbook&amp;rdquo;, Playbook中可以包括用户自定义的任务和事件处理程序。举例说，在一个用于配置服务器的Playbook中，我们定义一系列用于更新配置文件的数据库服务器，而事件处理程序则在这些任务完成之后负责重新启动数据库服务。
基于推送的Ansible Ansible用于推送的架构:
Control Host: 通常是用于管理的节点(本机)，在主机上手动运行需要运行的任务，也可以基于crontab定时来做。
Ansible使用inventory文件来包含需配置的机器列表，在上图中，我们包含了两个组: 数据库服务器组和Web服务器组。inventory文件中包含了这些服务器组中的节点IP。
inventory文件也可以是动态生成的，Ansible同样提供了对动态生成的支持。
每个Playbook从inventory文件中选取一个或多个组进行配置。在上一个例子中，我们定义了一个Playbook配置和编排数据库服务器，另一个则作用于Web服务器。Playbook也可以被抽象成更高层次，因此可以将两者中比较共同的任务配置成一个作用于all节点的任务。
基于拉取的Ansible 使用ansible-pull命令可以开启Ansible的拉取工作方式，ansible-pull命令的执行流程如下:
 每个主机都安装了Ansible， 该配置存储在Git仓库中， ansible-pull检出配置库在给定的分支或标记（提示：prod，staging等）， ansible-pull 执行指定的playbook， 使用cronjob自动化ansible-pull进程 最后，针对每次配置的修改，您所要做的就是将配置更改推送到Git仓库。  GitLab GitLab是一个利用 Ruby on Rails 开发的开源应用程序，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。
GitLab可以与诸多CI(持续集成)工具协同工作，且提供了原生的GitLabCI用于持续CI和CD。
GitLab提供完整的单机/集群解决方案。
工作流讲解 环境配置 本工作流示例环境包括如下机器:
192.168.33.2, GitLab VM, 2Core 2G.
192.168.33.10, mgmt VM, 256 M内存。
192.168.33.11, lb VM, 256 M内存。
192.168.33.21, web1 VM, 256 M内存。
192.168.33.22, web2 VM, 256 M内存。
首次部署(推送) 作用范畴如下:</description>
    </item>
    
    <item>
      <title>WorkingTipsOnAnsiblePull</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/28/workingtipsonansiblepull/</link>
      <pubDate>Wed, 28 Jun 2017 15:05:08 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/28/workingtipsonansiblepull/</guid>
      <description>Environment Preparation Create the vagrant environment via following Vagrantfile:
# -*- mode: ruby -*- # vi : set ft=ruby : Vagrant.configure(2) do |config| config.ssh.insert_key = false # Use the same insecure key provided from box for each machine config.vm.box = &amp;quot;UbuntuTrusty3G&amp;quot; config.vm.provision :shell, path: &amp;quot;initial.sh&amp;quot; config.vm.box_check_update = false # do not check for updates ( not recommended , just for demo ) config.vm.boot_timeout = 700 #config.hostmanager.enabled = true config.hostmanager.enabled = false config.</description>
    </item>
    
    <item>
      <title>CreateRHEL6DockerImage</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/22/createrhel6dockerimage/</link>
      <pubDate>Thu, 22 Jun 2017 16:22:37 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/22/createrhel6dockerimage/</guid>
      <description>背景 内网工作环境下，无法联网安装软件，所以需要制作rhel6的docker镜像，用于离线安装、验证、部署等过程。
准备 需要准备一台基于virtualbox的rhel65虚拟机。
一台安装了docker的Centos7或者ubuntu的物理机。
rhel65安装光盘.
步骤 启动rhel65虚拟机，将rhel65的iso挂载到virtualbox虚拟机上.
登录到虚拟机后，执行以下命令:
# mkdir -p /mnt/rhel6-repo # mount /dev/sr0 /mnt/rhel6-repo # mkdir /root/rhel6-root # rpm --root /root/rhel6-root/ --initdb # rpm --root /root/rhel6-root/ -ivh /mnt/rhel6-repo/Packages/redhat-release-server-6Server-6.5.0.1.el6.x86_64.rpm # cd /root/rhel6-root/ # cd etc/yum.repos.d # rm -f *.repo # vim rhel6.repo [rhel6] baseurl=file:///mnt/rhel6-repo enabled=1 gpgcheck=0 # rpm --root /root/rhel6-root --import /mnt/rhel6-repo/RPM-GPG-KEY-redhat-* # yum -y --installroot=/root/rhel6-root install yum which vim  安装完毕后，将/root/rhel6-root目录拷贝到安装好docker的物理机，执行以下命令打包成docker镜像:
# tar -C rhel6-root/ -c .</description>
    </item>
    
    <item>
      <title>WorkingTipsOnRPMBuild</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/21/workingtipsonrpmbuild/</link>
      <pubDate>Wed, 21 Jun 2017 11:33:40 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/21/workingtipsonrpmbuild/</guid>
      <description>Prerequisites From docker images Centos:6.6.
Steps Environment Preparation Start the docker instance:
$ sudo docker run -it centos:6.6 /bin/bash  Install the dev environment&amp;copy;:
# yum install -y rpm-build rpmdevtools vim gcc tar openssh-clients  Create the macro for rpmbuild, and setup the rpm build tree:
# vim /root/.rpmmacros %_topdir /root/rpmbuild # rpmdev-setuptree  C Project Refers to:
https://blog.packagecloud.io/rpm/rpmbuild/packaging/2015/06/29/building-rpm-packages-with-rpmbuild/
Verification Using a new docker instance, then you could verify your rpm installation and uninstallation.</description>
    </item>
    
    <item>
      <title>创建RHELVagrantBox</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/20/%E5%88%9B%E5%BB%BArhelvagrantbox/</link>
      <pubDate>Tue, 20 Jun 2017 14:41:41 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/20/%E5%88%9B%E5%BB%BArhelvagrantbox/</guid>
      <description>背景 调研RHEL6.5, 为了在vagrant环境中验证我们的修改，故创建该系统的vagrant box
准备 Virtualbox 5.1.22 r115126, vagrant 1.9.1, CentOS 7.3(host机器)
创建一台虚拟机，配置如下:
内存: 512 m 网卡: NAT, port forward: 2223 -&amp;gt; 22 硬盘: 40 G 声卡: 禁用  用RHEL 6.5的ISO安装系统，安装完毕之后，将自动重启。
配置 激活网络，通过配置/etc/sysconfig/network-scripts/ifcfg-eth0, 设置为boot=yes.
安装完毕后，依然插入RHEL 6.5 ISO, 将其挂载到/mnt目录，并配置本地安装源:
# mount /dev/sr0 /mnt # vim /etc/yum.repos.d/local.repo [local] name=local baseurl=file:///mnt enabled=1 gpgcheck=0 # yum makecache&amp;amp;&amp;amp;yum install -y vim kernel-devel gcc bzip2  添加vagrant用户:
# useradd -m vagrant # passwd vagrant  添加vagrant用户到visudo:</description>
    </item>
    
    <item>
      <title>WorkingTipsOnGitLabCI</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/14/workingtipsongitlabci/</link>
      <pubDate>Wed, 14 Jun 2017 08:30:37 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/14/workingtipsongitlabci/</guid>
      <description>背景 设置GitLabCI的流程。
使用两台虚拟机节点来实现GitLab服务器/GitLabCI节点, CI工作节点。
硬件配置:
GitLab服务器及CI节点: 2核3G内存。
CI工作节点: 2核2G内存。
运行系统: CentOS 7.3 X86_64
GitLab节点配置 gitlab-ce 配置gitlab-ce库及安装gitlab-ce:
# vim /etc/yum.repos.d/gitlab-ce.repo [gitlab-ce] name=gitlab-ce baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7 repo_gpgcheck=0 gpgcheck=0 enabled=1 gpgkey=https://packages.gitlab.com/gpg.key # yum makecache &amp;amp;&amp;amp; yum install -y gitlab-ce  配置gitlab-ce并使能服务:
# gitlab-ctl reconfigure # firewall-cmd --permanent --add-service=http  如果你的机器没有开启firewalld, 则firewalld这条命令则无需键入。
gitlab-ci-multi-runner 配置gitlab-ci-multi-runner库:
# vim /etc/yum.repos.d/gitlab-ce.repo [gitlab-ci-multi-runner] name=gitlab-ci-multi-runner baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ci-multi-runner/yum/el7 repo_gpgcheck=0 gpgcheck=0 enabled=1 gpgkey=https://packages.gitlab.com/gpg.key  安装gitlab-ci：
# yum makecache &amp;amp;&amp;amp; yum install -y gitlab-ci-multi-runner  现在访问http://192.</description>
    </item>
    
    <item>
      <title>Ansible Tips on register and so on</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/12/ansible-tips-on-register-and-so-on/</link>
      <pubDate>Fri, 12 May 2017 12:25:17 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/12/ansible-tips-on-register-and-so-on/</guid>
      <description>处理用户输入  vars_prompt, 设置KVMPassword的值为多少 - name: apply CloudStack configuration to all nodes hosts: cloudstackmanagement sudo: yes ######################################################################################### # Vars and vars_prompt # vars_prompt: - name: &amp;quot;KVMPassword&amp;quot; prompt: &amp;quot;KVM host root password&amp;quot; private: yes   可以使用when来界定用户输入值的有效   - name: Validate input - KVMServer host password fail: msg=&amp;quot;Missing or incorrect KVM Host password.&amp;quot; when: KVMPassword is not defined or ( KVMPassword is defined and KVMPassword == &amp;quot;&amp;quot; )  when 针对不同的返回值采取不同的行动（举某个安装命令yum/apt差别为例）</description>
    </item>
    
    <item>
      <title>OnVRTest</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/03/onvrtest/</link>
      <pubDate>Wed, 03 May 2017 14:09:10 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/03/onvrtest/</guid>
      <description>Preparation Ubuntu14.04, KVM(cpu host-passthrough), 16G memory, 8-Core CPU, 200G Disk.
Update/upgrade to newest version of ubuntu:
# apt-get update # apt-get upgrade -y  Enable root login with the password set as engine123.
# sed -i &#39;/PermitRootLogin without-password/PermitRootLogin yes&#39; /etc/ssh/sshd_config # service ssh restart  Networking Using bridged networking in ubuntu:
/etc/network/interfaces content:
# The loopback network interface auto lo iface lo inet loopback # The primary network interface auto eth0 iface eth0 inet manual auto cloudbr0 iface cloudbr0 inet static address 10.</description>
    </item>
    
    <item>
      <title>CS49OnUbuntu1404</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/03/cs49onubuntu1404/</link>
      <pubDate>Wed, 03 May 2017 11:18:34 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/03/cs49onubuntu1404/</guid>
      <description>MySql Configuration Configuration for mysql:
# cat &amp;gt;&amp;gt;/etc/mysql/conf.d/cloudstack.cnf &amp;lt;&amp;lt;EOM &amp;gt; [mysqld] &amp;gt; innodb_rollback_on_timeout=1 &amp;gt; innodb_lock_wait_timeout=600 &amp;gt; max_connections=350 &amp;gt; log-bin=mysql-bin &amp;gt; binlog-format = &#39;ROW&#39; &amp;gt; EOM # service mysql restart  Configuration:
# cloudstack-setup-databases cloud:engine123@localhost --deploy-as=root:engine123 -e file -m mymskey44 -k mydbkey00  NFS Server # mkdir -p /export/primary /export/secondary # apt-get install nfs-kernel-server # vim /etc/exports /export *(rw,async,no_root_squash,no_subtree_check) # service nfs-kernel-server start # exportfs -a # showmount -e 127.0.0.1 Export list for 127.</description>
    </item>
    
    <item>
      <title>XenServer Windows NTP时间配置</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/17/xenserver-windows-ntp%E6%97%B6%E9%97%B4%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 17 Mar 2017 16:58:26 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/17/xenserver-windows-ntp%E6%97%B6%E9%97%B4%E9%85%8D%E7%BD%AE/</guid>
      <description>ntp server Configure an ntp server in ubuntu16.04, IP address is 192.168.0.221:
$ sudo apt-get install -y openntp $ sudo vim /etc/ntp.conf  The reference configuration file is listed as following:
# /etc/ntp.conf, configuration for ntpd; see ntp.conf(5) for help driftfile /var/lib/ntp/ntp.drift # Enable this if you want statistics to be logged. #statsdir /var/log/ntpstats/ statistics loopstats peerstats clockstats filegen loopstats file loopstats type day enable filegen peerstats file peerstats type day enable filegen clockstats file clockstats type day enable # Specify one or more NTP servers.</description>
    </item>
    
    <item>
      <title>Wordpress Migration Tips</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/15/wordpress-migration-tips/</link>
      <pubDate>Wed, 15 Mar 2017 10:58:52 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/15/wordpress-migration-tips/</guid>
      <description>Background Moving a friend&amp;rsquo;s wordpress blog from DigitalOcean to a new cheap vps, here are all of the tips and steps.
MySQL Password recovery I forget the mysql password, recover it via following ways(Ubuntu14.04 Version):
Stop the mysql instance via:
$ sudo /etc/init.d/mysql stop  Start the mysqld daemon process use --skip-grant-tables options:
$ sudo /usr/sbin/mysqld --skip-grant-tables --skip-networking &amp;amp;  Mysql steps are listed as:
$ mysql -u root &amp;gt; FLUSH PRIVILEGES; &amp;gt; SET PASSWORD FOR root@&#39;localhost&#39; = PASSWORD(&#39;password&#39;); &amp;gt; FLUSH PRIVILEGES; &amp;gt; \q  Now better you reboot the machine, thus you could login to the mysql using the newly changed passwd.</description>
    </item>
    
    <item>
      <title>Reading Digest On Programming Interview</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/09/reading-digest-on-programming-interview/</link>
      <pubDate>Thu, 09 Mar 2017 15:55:10 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/09/reading-digest-on-programming-interview/</guid>
      <description>最近扫了扫一本知名书《程序员面试宝典》。众所周知国内的面试都得要靠扫书来的嘛。
然而这本书上的有些习题，答案也未必为对，这里列举一个:
CPU架构导致的sizeof 原题目如下:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; struct { short a1; short a2; short a3; }A; struct { long a1; short a2; }B; int main(void) { char *ss1= &amp;quot;0123456789&amp;quot;; char ss2[]= &amp;quot;0123456789&amp;quot;; char ss3[100] = &amp;quot;0123456789&amp;quot;; int ss4[100]; char q1[]=&amp;quot;abc&amp;quot;; char q2[]=&amp;quot;a\n&amp;quot;; char *str1= (char*)malloc(100); void *str2= (void*)malloc(100); printf(&amp;quot;Sizeof ss1 is %d\n&amp;quot;, sizeof(ss1)); printf(&amp;quot;Sizeof ss2 is %d\n&amp;quot;, sizeof(ss2)); printf(&amp;quot;Sizeof ss3 is %d\n&amp;quot;, sizeof(ss3)); printf(&amp;quot;Sizeof ss4 is %d\n&amp;quot;, sizeof(ss4)); printf(&amp;quot;Sizeof q1 is %d\n&amp;quot;, sizeof(q1)); printf(&amp;quot;Sizeof q2 is %d\n&amp;quot;, sizeof(q2)); printf(&amp;quot;Sizeof str1 is %d\n&amp;quot;, sizeof(str1)); printf(&amp;quot;Sizeof str2 is %d\n&amp;quot;, sizeof(str2)); printf(&amp;quot;Sizeof A is %d\n&amp;quot;, sizeof(A)); printf(&amp;quot;Sizeof B is %d\n&amp;quot;, sizeof(B)); return 0; }  在我的机器上的答案是:</description>
    </item>
    
    <item>
      <title>Vue.js Learning</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/08/vue.js-learning/</link>
      <pubDate>Wed, 08 Mar 2017 09:25:54 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/08/vue.js-learning/</guid>
      <description>Question What is ES6? ES6的语法? What is MVVM框架?  Tips 介绍 Website: cn.vuejs.org
三种组建组合到一个vue文件里:
.vue是 vue.js中特有的一种文件，在打包中会被打包成浏览器可理解的html.
开发环境建立 Ubuntu为例:
$ sudo apt-get install -y npm $ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org $ sudo cnpm install -g vue-cli $ vue init webpack my-project $ cd my-project $ cnpm install  前端项目的依赖很多，所以需要用cnpm install所有依赖
-g 代表安装到系统目录下
Understanding Code First example. ### Html &amp;lt;div id=&amp;quot;demo&amp;quot;&amp;gt; &amp;lt;p&amp;gt;{{ message }}&amp;lt;/p&amp;gt; //常用的模板渲染的方式, 此message对应的是 // 新建的Vue对象里的data里的mesage字段 &amp;lt;input v-model=&amp;quot;message&amp;quot;&amp;gt; // Vue.</description>
    </item>
    
    <item>
      <title>Android Mount</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/07/android-mount/</link>
      <pubDate>Tue, 07 Mar 2017 23:28:15 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/07/android-mount/</guid>
      <description>The steps in Ubuntu includes:
$ sudo pacman -S pcmanfm mtpfs gvfs-mtp gvfs-gphoto2 libmtp  Edit the fuse configuration via:
$ sudo vim /etc/fuse.conf user_allow_other  Mount the equipment to ~/mnt:
$ mkdir -p ~/mnt $ mtpfs -o allow_other ~/mnt  Now open pcmanfm you will see the attached new android equipment.
Or now if you insert the android phone, the pcmanfm will automatically mount the equipment&amp;rsquo;s file system.</description>
    </item>
    
    <item>
      <title>Linux Tips(7)</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/03/linux-tips7/</link>
      <pubDate>Fri, 03 Mar 2017 11:14:34 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/03/linux-tips7/</guid>
      <description>1. CloudStack Issue On ubuntu1404/1604, the template should enable HVM.
Its partition size should less than the primary storage size.
Password reset issue: Ubuntu1604, failed.
Ubuntu14.04 startup too slow, because of ntp, remove it sudo update-rc.d -f ntp remove 
2. Ubuntu16.04 cloudstack-pass issue The reset-password script is located as /etc/init.d/cloud-set-guest-password, then we could do following configurations:
Remove the services via:
# update-rc.d -f cloud-set-guest-password remove # cp /etc/init.d/cloud-setup-guest-password /usr/bin/ # chmod 777 /usr/bin/cloud-setup-guest-password  Before because you set update-rc.</description>
    </item>
    
    <item>
      <title>Migration Docker Based WordPress</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/02/migration-docker-based-wordpress/</link>
      <pubDate>Thu, 02 Mar 2017 14:22:31 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/02/migration-docker-based-wordpress/</guid>
      <description>AIM For last 3 days I was busy designing the website for a company, I run everything in docker, and finish the design very fast. Now I want to migrate it from the old vps to a new vps, following records all of the steps.
Data Volume Migration Examine the data volume via following commands:
# docker volume ls | grep db local makeclean_db_data # docker volume ls | grep html local makeclean_html  Get the volume mount point:</description>
    </item>
    
    <item>
      <title>DockerizedWordpressQuickStart</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/27/dockerizedwordpressquickstart/</link>
      <pubDate>Mon, 27 Feb 2017 16:01:30 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/27/dockerizedwordpressquickstart/</guid>
      <description>AIM Recently I want to setup a wordpress based website and quickly adjust the content, since the time is so limted, I choose docker for development and finish the task soonly, this article records all of the detailed steps.
Docker-compose the wordpress We use docker-compose for composing the wordpress based apps, the commands listed as following:
$ mkdir -p ~/code/wordpress $ vim docker-compose.yml  The docker-compose.yml file is listed as following:</description>
    </item>
    
    <item>
      <title>用Git和Docker快速部署应用程序</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/23/%E7%94%A8git%E5%92%8Cdocker%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 23 Feb 2017 11:06:30 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/23/%E7%94%A8git%E5%92%8Cdocker%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>参考资料 《Docker基础与实战》第八章 (韩) 李在弘。
环境 本机, ArchLinux.
服务器, DigitalOcean, Ubuntu14.04.
之所以选择DO的主机，是因为它位于墙外，不会有防火墙的阻挡，每次都能编译成功。
本机配置 Git ArchLinux上安装sudo pacman -S git， 之后可以配置global:
$ git config --global user.name xxxx $ git config --global user.email xxxx@gamil.com  app.js 用Node.js编写一个简单的Web服务器，返回Hello Docker:
var express = require(&#39;express&#39;); var app = express(); app.get([&#39;/&#39;, &#39;/index.html&#39;], function (req, res) { res.send(&#39;Hello Docker1&#39;); }); app.listen(80);  package.json 用于描述运行该程序的依赖关系:
{ &amp;quot;name&amp;quot;: &amp;quot;exampleapp&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Hello Docker&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;, &amp;quot;dependencies&amp;quot;: { &amp;quot;express&amp;quot;: &amp;quot;4.4.x&amp;quot; } }  Dockerfile 用于运行该APP的Docker容器定义如下:</description>
    </item>
    
    <item>
      <title>应用框架加密</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/22/%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Wed, 22 Feb 2017 09:35:12 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/22/%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%8A%A0%E5%AF%86/</guid>
      <description>目的 在诸如OpenSuse 11.1这一类的古老系统上，对组建系统的加密可能会比较繁琐，首先全盘加密的实现并不容易(几乎不可能，因为内核太古老)。
测试用框架 为了简单起见，我们将使用一个非常简单的基于C语言的网页服务器，来将我们的静态网站导出，静态网站也没什么内容，大体截图如下:
框架目录结构如下:
. ├── images │ └── 2017_02_22_09_41_24_1599x874.jpg ├── index.html └── index.md 1 directory, 3 files  网页服务器 为了测试的方便，我们用一个基于C实现的静态网页服务器:
$ wget https://gist.githubusercontent.com/sumpygump/9908417/raw/5fa991fda103d0b7a0c38512394a83ccada9ad6c/nweb23.c $ gcc -O -DLINUX nweb32.c -o nweb $ ./nweb 8848 ./  加入到启动项中:
$ sudo vim /etc/rc.d/boot.local /home/dash/Code/nweb 8848 /home/dash/testwebsite/ &amp;amp;  现在打开浏览器访问该机器的8848端口，可以看到我们的框架已经正确运行:
加密问题 现在的问题在于：一旦用户登入到系统，对我们框架的结构即可一目了然。
因而首先要解决的是：禁止用户登入进LINUX系统，这个步骤很简单，设置用户名/密码更加复杂就可以，理论上可以防止用户暴力破解并登入系统。
但是一旦用户拔下硬盘，将此机器上的硬盘插入到另一台机器上，则框架的所有结构同样一览无余，接下来我们来解决框架的加密问题.
虚拟加密盘 创建一个大小为1G的虚拟加密盘raw文件:
# dd if=/dev/zero of=/root/luks.vol bs=1M count=1024 1024+0 records in 1024+0 records out 1073741824 bytes (1.</description>
    </item>
    
    <item>
      <title>创建Vagrant Box</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/20/%E5%88%9B%E5%BB%BAvagrant-box/</link>
      <pubDate>Mon, 20 Feb 2017 10:59:17 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/20/%E5%88%9B%E5%BB%BAvagrant-box/</guid>
      <description>Aims Recently I am frequently using vagrant for verification, so quickly creating the vagrant box becomes the essential tasks. Previsouly I am suing packer for building vagrant box, but it requires you for writing the complex configuration files. How to quickly generate the vagrant box using virtualbox, following lists the steps
Virtual Machine Create a new virtual machine in virtualbox, make sure you locate your disk file in /tmp folder!</description>
    </item>
    
    <item>
      <title>Configuraiton For Vagrant</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/17/configuraiton-for-vagrant/</link>
      <pubDate>Fri, 17 Feb 2017 11:09:33 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/17/configuraiton-for-vagrant/</guid>
      <description>Vagrantfile Configuration for setting Ubuntu14.04, bridged networking, and setting its routing to specified node.
# -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.box = &amp;quot;minimum/ubuntu-trusty64-docker&amp;quot; # Networking config.vm.network &amp;quot;public_network&amp;quot;, ip:&amp;quot;192.168.10.217&amp;quot;, netmask: &amp;quot;16&amp;quot;,bridge:&amp;quot;xenbr0&amp;quot; # default router config.vm.provision &amp;quot;shell&amp;quot;, run: &amp;quot;always&amp;quot;, inline: &amp;quot;route add default gw 192.168.0.176&amp;quot; # delete default gw on eth0 config.vm.provision &amp;quot;shell&amp;quot;, run: &amp;quot;always&amp;quot;, inline: &amp;quot;eval `route -n | awk &#39;{ if ($8 ==\&amp;quot;eth0\&amp;quot; &amp;amp;&amp;amp; $2 !</description>
    </item>
    
    <item>
      <title>OpenSuSE全盘加密</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/14/opensuse%E5%85%A8%E7%9B%98%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Tue, 14 Feb 2017 11:08:07 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/14/opensuse%E5%85%A8%E7%9B%98%E5%8A%A0%E5%AF%86/</guid>
      <description>系统准备 OpenSuse 13.2 DVD, Libvirt.
磁盘分区 在初始化磁盘配置的时候，点击Edit Proposal Settings:
点击Create LVM-based Proposal并勾选Encrypt Volume Group:
输入两次密码：
可以选择ext4为默认的文件系统:
磁盘分区格局如下:
点击Next按钮，继续完成安装.
安装完毕后，需要手动输入密码才能进入系统:
免密码登录 OpenSuse的免密码登录与CentOS相同, 都是通过修改dracut来实现免密码登录.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnEncryption</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/10/workingtipsonencryption/</link>
      <pubDate>Fri, 10 Feb 2017 18:08:48 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/10/workingtipsonencryption/</guid>
      <description>Refers to:
https://blog.tinned-software.net/automount-a-luks-encrypted-volume-on-system-start/
Disk Partition Encryption Steps for encryption of vdb1:
# dd if=/dev/urandom of=/root/vdb_secret_key bs=512 count=8 # cryptsetup -v luksAddKey /dev/vdb1 /root/vdb_secret_key # cryptsetup luksDump /dev/vdb1 | grep &amp;quot;Key Slot&amp;quot; # cryptsetup -v luksOpen /dev/vdb1 vdb1_crypt --key-file=/root/vdb_secret_key # cryptsetup -v luksClose vdb1_crypt  Add following line for auto decryption:
# vim /etc/crypttab vdb1_crypt UUID=43740d4f-df91-492e-8d06-b32f461a633e /root/vdb_secret_key luks  While UUID is generated via following command:
# cryptsetup luksDump /dev/vdb1 | grep &amp;quot;UUID&amp;quot;  Add lines into /etc/fstab:</description>
    </item>
    
    <item>
      <title>CentOS全盘加密</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/09/centos%E5%85%A8%E7%9B%98%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Thu, 09 Feb 2017 14:37:24 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/09/centos%E5%85%A8%E7%9B%98%E5%8A%A0%E5%AF%86/</guid>
      <description>以下记录安装好加密磁盘后，免密码登录配置。
keyfile生成及配置 生成加密keyfile:
# dd if=/dev/urandom of=/boot/keyfile bs=1024 count=4  用加密的keyfile解锁加密盘:
# cryptsetup luksAddKey /dev/vda2 /boot/keyfile --key-slot 1 Enter any existing passphrase:  dracut配置 更改/usr/lib/dracut/modules.d/90crypt/cryptroot-ask.sh文件:
info &amp;quot;luksOpen $device $luksname $luksfile $luksoptions&amp;quot; +++ # Unlock with USB key +++ sleep 3 +++ udevsettle +++ usbkey=/dev/disk/by-uuid/8cc8c3fe-8b6d-4adf-aab5-e3b9e758b622 +++ if [ -e $usbkey ]; then +++ ask_passphrase=0 +++ echo &amp;quot;USB Key detected - unlocking partition $device ...&amp;quot; +++ echo &amp;quot;mkdir&amp;quot; +++ mkdir -p /mnt +++ echo &amp;quot;mount&amp;quot; +++ mount $usbkey /mnt +++ echo &amp;quot;unlock&amp;quot; +++ cat /mnt/keyfile | cryptsetup luksOpen $device $luksname --key-file=- +++ fi  因为我们使用了几条命令，所以需要将可执行文件打包进去:</description>
    </item>
    
    <item>
      <title>Ubuntu磁盘加密测试</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/08/ubuntu%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 08 Feb 2017 16:25:34 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/08/ubuntu%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/</guid>
      <description>准备 三台虚拟机，Ubuntu16.04 安装盘，virt-manager.
角色配置 虚拟机A：未加密，Ubuntu16.04安装。
虚拟机B: encrypted LVM, 安装Ubuntu16.04.
虚拟机C：Test Machine.
加密配置 每次启动时避免输入密码的配置， 在虚拟机B上作如下配置:
首先备份initrd.img:
# cp /boot/initrd.img-4.4.0-31-generic /boot/initrd.img-4.4.0-31-generic.safe  在未经加密的/boot分区生成加密的key文件:
# dd if=/dev/urandom of=/boot/keyfile bs=1024 count=4  查看加密分区情况:
$ sudo blkid | grep -i crypto /dev/vda5: UUID=&amp;quot;a255260b-30eb-4630-b9c9-a6b7f75b236e&amp;quot; TYPE=&amp;quot;crypto_LUKS&amp;quot; PARTUUID=&amp;quot;2a203ff6-05&amp;quot;  从上面可以看出vda5是我们的加密风趣，现在将新创建的keyfile作为加密卷的解锁文件:
# cryptsetup -v luksAddKey /dev/vda5 /boot/keyfile Enter any passphrase:  输入你以前创建的密码，看到以下输出时代表解锁文件添加成功:
Key slot 0 unlocked. Command successful.  现在更改/etc/crypttab文件:
# cp /etc/crypttab /root/ # vim /etc/crypttab vda5_crypt UUID=a255260b-30eb-4630-b9c9-a6b7f75b236e /dev/disk/by-uuid/36747581-1841-47de-9ce2-b1262e1eb167:/keyfile luks,keyscript=/lib/cryptsetup/scripts/passdev  其中/ev/disk/by-uuid的字段可以通过blkid来获得，即/boot的uuid值。</description>
    </item>
    
    <item>
      <title>EnableUSBCameraOnArchLinux</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/04/enableusbcameraonarchlinux/</link>
      <pubDate>Sat, 04 Feb 2017 20:14:50 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/04/enableusbcameraonarchlinux/</guid>
      <description>WebCam Detection Detect the USB equipment via:
# lsusb Bus 002 Device 002: ID 0b95:772b ASIX Electronics Corp. AX88772B Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 008 Device 002: ID 0c45:0011 Microdia EBUDDY Bus 008 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub Bus 007 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub Bus 006 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub Bus 001 Device 002: ID 046d:0829 Logitech, Inc.</description>
    </item>
    
    <item>
      <title>CentOS Encryption</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/24/centos-encryption/</link>
      <pubDate>Tue, 24 Jan 2017 15:35:05 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/24/centos-encryption/</guid>
      <description>Disk Configuration Specify the disk like following, notice we don&amp;rsquo;t activate the swap partition.
Select the disk and do the following configuration:
Boot partition, should be 400MiB:
Root partition, should contains all of the left space:
Cryption Refers to:
http://www.gaztronics.net/howtos/luks.php
Generate the secret key file:
# dd if=/dev/sdb of=luks-secret.key bs=1 count=4096 # cryptsetup luksAddKey /dev/sda2 luks-secret.key --key-slot 1  Modify Dracut:
# ls /dev/disk/by-id | grep usb usb-SanDisk_Cruzer_Orbit_4C532000050606114400-0:0 -&amp;gt; .</description>
    </item>
    
    <item>
      <title>使用USB磁盘无密码登录加密分区的LINUX</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/22/%E4%BD%BF%E7%94%A8usb%E7%A3%81%E7%9B%98%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E5%8A%A0%E5%AF%86%E5%88%86%E5%8C%BA%E7%9A%84linux/</link>
      <pubDate>Sun, 22 Jan 2017 18:31:43 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/22/%E4%BD%BF%E7%94%A8usb%E7%A3%81%E7%9B%98%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E5%8A%A0%E5%AF%86%E5%88%86%E5%8C%BA%E7%9A%84linux/</guid>
      <description>背景 最近一直在看关于LINUX磁盘加密的东西，也尝试了文件加密、扇区加密、全盘加密等方面。 然而每次都需要输入密码这种事情对一个追求速度的人来说似乎有点浪费时间，而且每次重新 都需要输入密码也无法适用于自动化运维的场合。因而我根据网上提到的方法制作了一个 从USB磁盘读取密钥以解密加密全盘的方法。下面是对应的实现过程。
Debian系统安装 从镜像网站下载Debian 8(jessie)的DVD安装源，在Virtualbox中创建一台虚拟机，插入 ISO后，光盘启动系统进入到以下界面:
选择Install后，继续安装，因为篇幅的关系，这里省略掉关于用户名/密码/主机名/语言/区域设置等配置， 直接进入到磁盘分区的步骤:
选择手动对磁盘进行分区:
选择我们添加的磁盘:
选择接受上面的提示，创建一个新的空白分区表:
可以看到当前没有任何磁盘分区，选择到红色光标所在的行，按回车:
创建一个新的分区:
/boot分区大小我们设置为400MB：
选择为主分区:
Location选择，从Beginning开始:
配置为我们以下截图里所示的内容:
接着创建一个大小为1GB的交换分区:
接着创建主分区，步骤不再重复，充分利用剩下的磁盘空间:
在上面的高亮区内按回车，改变磁盘类型为physical volume for encryption:
注意我们配置的参数，这里配置了默认的加密方式为device-mapper(dm-crypt)， 加密算法为256键字节大小的AES加密:
成功创建后的磁盘分区情况如下图:
接下来对加密卷作高阶配置，选择如下图中的条目:
出现警告信息，告知我们当前的分区方案将被写入到磁盘，我们是否开始配置加密卷？
选择yes后，选择Create encrypted volumes:
我们选择sda2和sda3，对交换分区和主分区进行加密。如果只选择主分区加密，安装程序会 报出错误，所以一开始我们就选中这两块分区，进入到下一步:
分区完毕，选择Done Setting up the partition， 结束手动分区步骤:
确定写入磁盘:
写入过程:
此时需要定义密码:
成功配置完加密卷的磁盘分区表如下所示:
选择4G大小的主分区，改变其Mount point为/:
同样改变swap分区:
确定写入磁盘:
接下来继续安装，并在安装的最后一步将BootLoad写入MBR。
安装完毕后，重新启动机器后，需要输入密码才能进入系统:
配置passwordless 接下来我们创建无需输入密码的根文件系统，使用一个USB优盘来记录密码信息，位于USB优盘 上的secret key将用于解密加密磁盘。 将USB盘插入到虚拟机，可以使用dmesg来获取其卷标，这里可以看到我们的卷表为/dev/sdb:
使用dd命令，从优盘读取8192字节大小的随机字节 ，作为我们要使用的secret key:
# dd if=/dev/sdb of=/root/secret.key bs=512 skip=4 count=16  上面生成的secret.key文件将被加入到加密卷中，通过cryptsetup命令加入。默认的密码被保存 在slot 0, 而slot 1将被用作第二个secret key。</description>
    </item>
    
    <item>
      <title>Awesome4.0 配置</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/20/awesome4.0-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 20 Jan 2017 14:07:37 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/20/awesome4.0-%E9%85%8D%E7%BD%AE/</guid>
      <description>Aim For Awesome is upgrading to 4.0 version, the configuration file has changed a lot comparing to Awesome 3.5, I have to rewrite the configuration files, following records all of the steps for customize Awesome 4.0.
Configure File Simply copy the configuration file from xdg:
$ cp /etc/xdg/awesome/rc.lua ~/.config/awesome/  Customization default terminal Change default terminal from xterm to gnome-terminal:
-- terminal = &amp;quot;xterm&amp;quot; terminal = &amp;quot;gnome-terminal&amp;quot;  Run Once Programs Add one function then call it:</description>
    </item>
    
    <item>
      <title>Linux下的磁盘加密</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/19/linux%E4%B8%8B%E7%9A%84%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Thu, 19 Jan 2017 10:26:41 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/19/linux%E4%B8%8B%E7%9A%84%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86/</guid>
      <description>目的 调研Linux虚拟机磁盘加密
环境 Ubuntu16.04 LTS/Libvirt.
全盘加密 选择磁盘全盘加密，需要在系统安装时指定encrypted LVM:
指定加密的密码:
效果 每次启动时，需要在以下界面手动输入加密时密码，以继续系统启动:
如果输入失败，会提示密码错误，无法继续启动:
只有输入正确密码，才可以继续系统启动并进入到登录界面:
Packer.io制作加密系统 UBUNTU系统，对于加密LVM系统的构建，需要改动相应的preseed文件。
CentOS需要改动KickStart中对应的定义.
磁盘格局 通过命令sudo fdisk -l查看磁盘格局:
Disk /dev/ram0 ~ /dev/ram14, 64 MiB, 67108864 bytes, 131072 sectors Disk /dev/mapper/sda5_crypt: 7.5 GiB, 8074035200 bytes, 15769600 sectors Disk /dev/mapper/ubuntu--vg-root: 6.5 GiB, 6996099072 bytes, 13664256 sectors Disk /dev/mapper/ubuntu--vg-swap_1: 1 GiB, 1073741824 bytes, 2097152 sectors Disk /dev/mapper/cryptswap1: 1023.5 MiB, 1073217536 bytes, 2096128 sectors  通过df -h查看分区格式:
$ df -h Filesystem Size Used Avail Use% Mounted on udev 478M 0 478M 0% /dev tmpfs 100M 3.</description>
    </item>
    
    <item>
      <title>Wordpress长图片功能实现</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/12/wordpress%E9%95%BF%E5%9B%BE%E7%89%87%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 12 Jan 2017 12:06:15 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/12/wordpress%E9%95%BF%E5%9B%BE%E7%89%87%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</guid>
      <description>目标 在Wordpress的每篇文章添加TurnToJPG功能，点击该按钮以后，由博文直接生成长文字图片。
搭建测试环境 为了及时测试我们的博客，快速搭建一个基于docker的开发环境:
$ sudo docker pull wordpress $ sudo docker pull mariadb $ sudo docker pull corbinu/docker-phpmyadmin  创建一个docker-compose的yml文件，启动之:
$ vim docker-compose.yml wordpress: image: wordpress links: - wordpress_db:mysql ports: - 8080:80 wordpress_db: image: mariadb environment: MYSQL_ROOT_PASSWORD: examplepass phpmyadmin: image: corbinu/docker-phpmyadmin links: - wordpress_db:mysql ports: - 8181:80 environment: MYSQL_USERNAME: root MYSQL_ROOT_PASSWORD: examplepass  现在启动服务:
$ sudo docker-compose up -d Creating mywordpress_wordpress_db_1 Creating mywordpress_wordpress_1 Creating mywordpress_phpmyadmin_1  打开http://127.0.0.1:8080即可访问到我们的测试站点。在wordpress后台 查找并安装tdPersona主题.</description>
    </item>
    
    <item>
      <title>Hugo And TravisCI Issue</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/07/hugo-and-travisci-issue/</link>
      <pubDate>Sat, 07 Jan 2017 10:25:59 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/07/hugo-and-travisci-issue/</guid>
      <description>Problem In this morning when I get up and try to write something in my blog, I found the blog won&amp;rsquo;t upate. In travisCI website I got something very strange like following picture shows:
Error info:
Failed to normalize URL string. Returning in = &amp;quot;/&amp;quot;  Reason As discussed in this post:
https://discuss.gohugo.io/t/started-getting-failed-to-normalize-url-string-returning-in/5034
This is because hugo now holds its own dependencies using govendor, you could view from its repository:</description>
    </item>
    
    <item>
      <title>RSSToPdf</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/29/rsstopdf/</link>
      <pubDate>Thu, 29 Dec 2016 16:24:38 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/29/rsstopdf/</guid>
      <description>AIM Using python for fetching back some blog articles and convert them into pdf files, send it to some specified mailbox.
Preparation The script depends on python library:
 feedparser pdfkit  Install them via:
$ sudo pip install feedparser $ sudo pip install pdfkit  pdfkit depends on wkhtmltopdf, install it on ubuntu via:
$ sudo apt-get install -y wkhtmltopdf  Configure wkhtmltopdf, because in vps we don&amp;rsquo;t have X Window:</description>
    </item>
    
    <item>
      <title>OfflineInstallJavaOnUbuntu1404</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/11/offlineinstalljavaonubuntu1404/</link>
      <pubDate>Sun, 11 Dec 2016 11:23:06 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/11/offlineinstalljavaonubuntu1404/</guid>
      <description>在ubuntu14.04上搭建mesos时，需要安装jdk8或jdk9，然而官方仓库中没有类似的选项， 因而有两种work-around，第一种是手动安装jdk， 第二种是使用第三方库安装.
手动安装 下载安装包:
$ wget --header &amp;quot;Cookie: oraclelicense=accept-securebackup-cookie&amp;quot; http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz  如果是jdk9，则下载安装包为:
$ wget http://www.java.net/download/java/jdk9/archive/140/binaries/jdk-9-ea+140_linux-x64_bin.tar.gz  下载完毕后，安装步骤如下:
$ sudo bash # tar -zxf jdk-9-ea+140_linux-x64_bin.tar.gz -C /opt/jdk/ # update-alternatives --install /usr/bin/java java /opt/jdk/jdk-9/bin/java 100 # update-alternatives --install /usr/bin/javac javac /opt/jdk/jdk-9/bin/javac 100 # update-alternatives --display java # update-alternatives --display javac  第三方库 激活ppa库如下:
$ sudo add-apt-repository ppa:webupd8team/java $ sudo apt-get update $ sudo apt-get install oracle-java8-installer $ sudo apt-get install oracle-java8-set-default  在安装过程中需要从oracle官方网站下载安装包，为了避免重复下载过程，可以将安装包直接拷贝到 /var/cache/oracle-jdk9-installer目录或者/var/cache/oracle-jdk8-installer目录。</description>
    </item>
    
    <item>
      <title>vagrantpluginissue</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/07/vagrantpluginissue/</link>
      <pubDate>Wed, 07 Dec 2016 22:00:18 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/07/vagrantpluginissue/</guid>
      <description>After updating vagrant, my vagrant could use, the error msg are listed as following:
$ vagrant box list Vagrant failed to initialize at a very early stage: The plugins failed to initialize correctly. This may be due to manual modifications made within the Vagrant home directory. Vagrant can attempt to automatically correct this issue by running: vagrant plugin repair If Vagrant was recently updated, this error may be due to incompatible versions of dependencies.</description>
    </item>
    
    <item>
      <title>DownloadXenServer62Patches</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/07/downloadxenserver62patches/</link>
      <pubDate>Wed, 07 Dec 2016 18:03:31 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/07/downloadxenserver62patches/</guid>
      <description>The script is listed as following, use python2 for running it:
from bs4 import BeautifulSoup import urllib2 import re ## Pages contains the download page url url_list = [ &amp;quot;https://support.citrix.com/search?searchQuery=%3F&amp;amp;lang=en&amp;amp;sort=cr_date_desc&amp;amp;ct=Hotfixes&amp;amp;ctcf=Recommended&amp;amp;prod=XenServer&amp;amp;pver=XenServer+6.2.0&amp;amp;st=0&amp;quot;, &amp;quot;https://support.citrix.com/search?searchQuery=%3F&amp;amp;lang=en&amp;amp;sort=cr_date_desc&amp;amp;ct=Hotfixes&amp;amp;ctcf=Recommended&amp;amp;prod=XenServer&amp;amp;pver=XenServer+6.2.0&amp;amp;st=10&amp;quot;, &amp;quot;https://support.citrix.com/search?searchQuery=%3F&amp;amp;lang=en&amp;amp;sort=cr_date_desc&amp;amp;ct=Hotfixes&amp;amp;ctcf=Recommended&amp;amp;prod=XenServer&amp;amp;pver=XenServer+6.2.0&amp;amp;st=20&amp;quot;, &amp;quot;https://support.citrix.com/search?searchQuery=%3F&amp;amp;lang=en&amp;amp;sort=cr_date_desc&amp;amp;ct=Hotfixes&amp;amp;ctcf=Recommended&amp;amp;prod=XenServer&amp;amp;pver=XenServer+6.2.0&amp;amp;st=30&amp;quot;, ] for url in url_list: #response = urllib2.urlopen(&#39;https://support.citrix.com/search?searchQuery=%3F&amp;amp;lang=en&amp;amp;sort=cr_date_desc&amp;amp;ct=Hotfixes&amp;amp;ctcf=Recommended&amp;amp;prod=XenServer&amp;amp;pver=XenServer+6.2.0&amp;amp;st=0&#39;) response = urllib2.urlopen(url) ### Fetch the urllib2 result. html = response.read() # print len(html) ### Make soup of the html. soup = BeautifulSoup(html, &#39;html.parser&#39;) # print soup.prettify() ### Get all of the download page link: for i in soup.</description>
    </item>
    
    <item>
      <title>SomeTipsOnAnsible</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/19/sometipsonansible/</link>
      <pubDate>Sat, 19 Nov 2016 08:57:36 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/19/sometipsonansible/</guid>
      <description>In this series I will collect some of the tips in using ansible for playing automation deployment.
co-operation with vagrant ssh Method: In inventory file, add vagrant&amp;rsquo;s ssh key.
First you should get the ssh indentity file via:
$ vagrant ssh-config | grep IdentityFile # result should be your private key and not # .vagrant/machines/default/virtualbox/private_key  Add these file definition into your inventory file:
[master] 192.168.33.17 ansible_ssh_port=22 ansible_ssh_user=vagrant ansible_ssh_private_key_file=/var1/Nov14/test/.vagrant/machines/master/virtualbox/private_key [node1] 192.</description>
    </item>
    
    <item>
      <title>为Blog添加保存为图片功能</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/05/%E4%B8%BAblog%E6%B7%BB%E5%8A%A0%E4%BF%9D%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 05 Nov 2016 18:28:54 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/05/%E4%B8%BAblog%E6%B7%BB%E5%8A%A0%E4%BF%9D%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87%E5%8A%9F%E8%83%BD/</guid>
      <description>背景 众所周知疼讯其实一直是一个很封闭傻逼的企业，早年QZONE的代码就层层加密， 惟恐互联网爬虫爬到它上面取内容。进入到移动互联网时代，就更加变本加厉，盆友 圈里的诸多内容，恐怕诸位都是没办法弄出来的。
早年曾在Blog上添加过分享到朋友圈或分享到微信好友按钮，由于github.io未 被疼讯认可，共享出来的链接通常只有自己能看到，这又是一个拿用户当SB的典型 案例。
还好，对于用户上传图片，疼讯是没法限制的。所以有了以下的开发。
功能参考 在博文里添加按钮一键保存为图片,即可将该篇文章生成为长图片。
参考设计： 锤子便签。顺便吐槽一下锤子便签，添加了关键词过滤，关键词嘛，这也是 党国拿来折腾屁民的一个傻逼玩意，例如有一首歌是这么唱的:
我爱北京关键词， 关键词上太阳升。。 伟大得领袖关键词， 带领我们向前进…  ╮〔╯ε╰〕╭ &amp;mdash;太多的关键词，容易让写博文的人心情不好。
可选方案 A. wkhtmltoimage.
这个转换起来是全屏转换，所以最初想到的是对网页做再加工，抠取出其中含有内容的一部分。 好处是，真的是所见即所得。
$ wkhtmltoimage http://www.google.com google.jpg  B. html2canvas.
这种方案直接在html页面上做文章，添加按钮后直接用画布来生成对象。缺点是有些格式显示出来 有少量阴影。
暂时基于方案B实现。
Code 参考资料:
https://www.youtube.com/watch?v=-d2FeFiBvEo
https://html2canvas.hertzen.com/
因为本博客基于hugo构建，直接修改hugo使用的主题即可添加html2canvas。
目录结构:
$ ls config.toml content id_rsa.enc scripts static themes $ themes/hyde-a $ ls archetypes images layouts LICENSE README.md static theme.toml  下载html2canvas.js到主题的static/js目录:
$ cd static/js $ wget https://github.com/niklasvh/html2canvas/releases/download/0.4.1/html2canvas.js  在主题的.</description>
    </item>
    
    <item>
      <title>SetupARegistryProxyCacheForDocker</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/04/setuparegistryproxycachefordocker/</link>
      <pubDate>Fri, 04 Nov 2016 17:14:21 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/04/setuparegistryproxycachefordocker/</guid>
      <description>准备 首先需要准备以下Docker image:
$ sudo docker pull registry:latest $ sudo docker pull registry:2  在/etc/hosts里加一条记录，接下来我们将用这条记录生成签名(注意修改IP地址和域名）:
# echo &#39;192.168.0.121 xxx.xxx.xxx.com&#39;&amp;gt;&amp;gt;/etc/hosts  准备所需要的自签名文件(用于tls连接)
mkdir -p certs &amp;amp;&amp;amp; openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -x509 -days 365 -out certs/domain.crt Generating a 4096 bit RSA private key ....................................................................................................++ ......++ writing new private key to &#39;certs/domain.key&#39; ----- You are about to be asked to enter information that will be incorporated into your certificate request.</description>
    </item>
    
    <item>
      <title>DockerSpeedUp</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/03/dockerspeedup/</link>
      <pubDate>Thu, 03 Nov 2016 17:23:23 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/03/dockerspeedup/</guid>
      <description>Docker Registry 因为众所周知的原因，在国内下载Docker镜像会很慢，所以我们更改docker的配置，让它使用 daocloud的加速服务:
ArchLinux下，编辑以下文件，或者你可以通过sudo systemctl edit docker.service来配置以下 文件:
# vim /etc/systemd/system/docker.service.d/override.conf [Service] ExecStart= ExecStart=/usr/bin/dockerd --registry-mirror=http://1a653205.m.daocloud.io -H fd://  现在重新加载服务并重新启动docker.service：
# systemctl daemon-reload # systemctl restart docker.service  从此以后，每一次docker pull都会使用到daocloud提供的加速服务。
本地私有registry 首先pull下来如下镜像(这两个其实是一个镜像):
# docker pull registry:latest # docker pull registry:2  运行registry实例(注意更改volumn映射):
# docker run -d -p 5000:5000 --restart=always --name registry -v /root/DockerRegistry:/var/lib/registry registry:2  检查实例运行情况:
➜ ~ sudo docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b16b27933709 registry:2 &amp;quot;/entrypoint.</description>
    </item>
    
    <item>
      <title>VRMonitoringViaCollectd</title>
      <link>http://purplepalmdash.github.io/blog/2016/10/24/vrmonitoringviacollectd/</link>
      <pubDate>Mon, 24 Oct 2016 16:36:24 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/10/24/vrmonitoringviacollectd/</guid>
      <description>Environment The VR&amp;rsquo;s information is listed as following:
Now login the VR in CloudStack Agent Node via:
# ssh -i /root/.ssh/id_rsa.cloud -p3922 169.254.0.129  Modify its /etc/apt/sources.list like following:
# cat /etc/apt/sources.list # # deb cdrom:[Debian GNU/Linux 7.8.0 _Wheezy_ - Official amd64 NETINST Binary-1 20150110-14:41]/ wheezy main #deb cdrom:[Debian GNU/Linux 7.8.0 _Wheezy_ - Official amd64 NETINST Binary-1 20150110-14:41]/ wheezy main deb http://mirrors.aliyun.com/debian wheezy main deb-src http://mirrors.aliyun.com/debian wheezy main deb http://mirrors.</description>
    </item>
    
    <item>
      <title>LinuxTips6</title>
      <link>http://purplepalmdash.github.io/blog/2016/10/09/linuxtips6/</link>
      <pubDate>Sun, 09 Oct 2016 17:24:03 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/10/09/linuxtips6/</guid>
      <description>1. Working tips for remove dulipcate chars http://codereview.stackexchange.com/questions/5441/removing-any-duplicate-characters-in-a-string
2. pip reinstallation Uninstall all of the pip installed packages:
# pip freeze | xargs pip uninstall -y  3. ipython notebook Install on ArchLinux via:
$ sudo pip install &amp;quot;ipython[all]&amp;quot;  Be sure to make your internet connection stable.
Run it via:
$ ipython notebook  ipython2 installation issue:
$ python2 -m pip install ipykernel $ python2 -m ipykernel install --user $ python2 -m pip install &amp;quot;ipython[all]&amp;quot; $ ipython3 notebook  Now you could create python2&amp;amp;python3 notebooks.</description>
    </item>
    
    <item>
      <title>MyHugo</title>
      <link>http://purplepalmdash.github.io/blog/2016/10/09/myhugo/</link>
      <pubDate>Sun, 09 Oct 2016 14:40:34 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/10/09/myhugo/</guid>
      <description>MyHugo Since I switched from octopress to hugo, hugo is wonderful, but I get used to use Octopress&amp;rsquo;s naming method. For example, if I create a new post in Octopress I&amp;rsquo;d rather using following command:
$ rake new_post[&amp;quot;PostName&amp;quot;]  Then the generated post name would be something like following:
 $ ls -lt | more total 3632 -rw-rw-r-- 1 dash dash 5292 Apr 1 2016 2015-11-05-good-material.markdown -rw-rw-r-- 1 dash dash 540 Apr 1 2016 2016-01-04-purge-cloudstack-env.</description>
    </item>
    
    <item>
      <title>OnYoutube dl</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/08/onyoutube-dl/</link>
      <pubDate>Thu, 08 Sep 2016 12:00:39 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/08/onyoutube-dl/</guid>
      <description>Background If you download a playlist on youtube, your download files would be renamed as following:
$ ls -l -h /mnt/golang total 4.8G -rwxr--r-- 1 dash root 62M Sep 7 18:43 &#39;Aerospike Install Linux-bw0eipI7-4s.mp4&#39; -rwxr--r-- 1 dash root 9.8M Sep 7 22:48 &#39;App Enginge Domains-rNI_PyNuS2o.mp4&#39; -rwxr--r-- 1 dash root 28M Sep 7 21:52 &#39;General Overview of Networking &amp;amp; The Internet-hZ7cX4fpMk4.mp4&#39; -rwxr--r-- 1 dash root 51M Sep 7 22:25 &#39;Golang Aerospike-symvVMJlC3g.</description>
    </item>
    
    <item>
      <title>RHEL Working Tips</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/05/rhel-working-tips/</link>
      <pubDate>Mon, 05 Sep 2016 10:42:24 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/05/rhel-working-tips/</guid>
      <description>Subscrition Manager After install RHEL7, we could register it first:
# subscription-manager register  List and register with the available pools:
# subscription-manager list --available --all # subscription-manager subscribe --pool=XXXXXXXXX  After registration, we could see all of the registered repos:
$ subscription-manager repos --list  Syncing Repos Because the openstack repo is the paid channel, skip for other options.</description>
    </item>
    
    <item>
      <title>SendMessageToSlack</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/03/sendmessagetoslack/</link>
      <pubDate>Wed, 03 Aug 2016 09:55:58 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/03/sendmessagetoslack/</guid>
      <description>Reference Mainly refers to:
https://api.slack.com/incoming-webhooks
http://blog.pragbits.com/it/2015/02/09/slack-notifications-via-curl/
Incomming webhooks Create a incoming webhooks in:
https://skyruntime.slack.com/apps/new/A0F7XDUAZ-incoming-webhooks
After created the webhook use curl for sending out the direct message:
$ curl -X POST --data-urlencode &#39;payload={&amp;quot;channel&amp;quot;: &amp;quot;#general&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;webhookbot&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;This is posted to #general and comes from a bot named webhookbot.&amp;quot;, &amp;quot;icon_emoji&amp;quot;: &amp;quot;:ghost:&amp;quot;}&#39; https://hooks.slack.com/services/xxxxxxxxxxxxxxxxxxxxxxxxxx  Wrap the message In Bash:
$ proxychains4 curl -X POST --data-urlencode &#39;payload={&amp;quot;channel&amp;quot;: &amp;quot;#general&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;webhookbot&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&#39;$1&#39;&amp;quot;, &amp;quot;icon_emoji&amp;quot;: &amp;quot;:ghost:&amp;quot;}&#39; https://hooks.</description>
    </item>
    
    <item>
      <title>Using Packer For Building VM Templates</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/28/using-packer-for-building-vm-templates/</link>
      <pubDate>Thu, 28 Jul 2016 12:08:27 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/28/using-packer-for-building-vm-templates/</guid>
      <description>Background Recently I am playing the jenkins and VM Templates, so I want to setup the CI(Continous Integration) environment which could automatically finish the template building, following are the tips on how to setup these environment and let everything working together.
Using Makefile boxcutter https://github.com/boxcutter has lots of projects for packering the templates, directly clone them to local and run them, you could get the standard vagrant box, which could be used via virtualbox/vmware/paralles.</description>
    </item>
    
    <item>
      <title>编译Packer及其插件</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/21/%E7%BC%96%E8%AF%91packer%E5%8F%8A%E5%85%B6%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Thu, 21 Jul 2016 21:12:27 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/21/%E7%BC%96%E8%AF%91packer%E5%8F%8A%E5%85%B6%E6%8F%92%E4%BB%B6/</guid>
      <description> Install Go In ArchLinux, do following for installing and configurating go:
$ vim ~/.bash_profile export GOPATH=$HOME/go export PATH=$PATH:$GOPATH/bin  Exit the terminal and relogin again, now you could verify your GOPATH and golang System Path.
Install go in ArchLinux via:
$ sudo pacman -S go  Installing Dev Packer </description>
    </item>
    
    <item>
      <title>使用Jenkins/PackerIO自动化编译虚拟机镜像</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/18/%E4%BD%BF%E7%94%A8jenkins/packerio%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E8%AF%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%95%9C%E5%83%8F/</link>
      <pubDate>Mon, 18 Jul 2016 14:53:58 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/18/%E4%BD%BF%E7%94%A8jenkins/packerio%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E8%AF%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%95%9C%E5%83%8F/</guid>
      <description>GitLab仓库 在前面搭建的GitLab里创建一个新仓库，用于存储Packer.io脚本。
在编译机器的仓库里，运行以下命令，添加自己到新创建的仓库里:
$ cd existing_folder $ git init $ git remote add origin http://192.168.1.79:10080/root/BuildUbuntu.git $ git add . $ git commit $ git push -u origin master  提交完毕之后，在GitLab服务器上就可以看到新添加的代码了。
Jenkins配置 在Jenkins里创建一个新项目，选择Freestyle Project， 默认创建完毕。
在源代码管理的设置中，填入以下的条目:
Build Trigger中我们选择由GitLab触发：
在GitLab中我们需要添加相应的钩子(WebHook):
设置:
添加Build脚本(选择execute shell):
配置完毕后，就可以通过点击Build Now来编译Packer.io工程了。</description>
    </item>
    
    <item>
      <title>用Travis CI发布Hugo博客</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/07/%E7%94%A8travis-ci%E5%8F%91%E5%B8%83hugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 07 Jul 2016 15:59:09 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/07/%E7%94%A8travis-ci%E5%8F%91%E5%B8%83hugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>背景 在前面的文章 Using hugo中我已经完成了从 Octopress到Hugo博客构建引擎的迁移，这篇文章将讲述如何进一步简化博客从撰写到发布的流程。 主要使用了Travis CI和Github Page.
如果没有Travis帐号的，可以到Travis-ci注册一个，也可以使用 github帐号连接使用。
github pages Github的pages遵循的命名原则非常简单，如果github在用户的账户下发现一个名字为 &amp;lt;username&amp;gt;.github.io的仓库，那它会将这个仓库的master分支里的内容映射到 http://&amp;lt;username&amp;gt;.github.io.
以下创建出了一个名字为purplepalmdash.github.io的github仓库, 并将hugo生成的public/目 录下的所有内容(即整个静态网站)上传到了github。
$ git clone git@github.com:purplepalmdash/purplepalmdash.github.io.git $ cp -r public/* purplepalmdash.github.io/ $ cd purplepalmdash.github.io $ git add --all $ git commit -m &amp;quot;First commit under hugo&amp;quot; $ git push  这时打开浏览器，访问http://purplepalmdash.github.io就可以看到上传后的静态网站。
github pages代码分支 仅仅拥有master分支用来存储静态网站是不够的，我们还需要创建一个用于存放网站源代码的 source分支。以下命令创建出source分支，并上传了hugo源代码内容.
$ cd purplepalmdash.github.io $ git checkout -b source $ rm -rf * $ cp -r ~/blog_source/* ./ $ git add --all $ git commit -m &amp;quot;First commit for source code&amp;quot; $ git push --set-upstream origin source  现在我们已经把源代码和生成的网站放在同一个仓库的不同分支了。</description>
    </item>
    
    <item>
      <title>Using hugo</title>
      <link>http://purplepalmdash.github.io/2016/07/04/using-hugo/</link>
      <pubDate>Mon, 04 Jul 2016 15:36:43 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/07/04/using-hugo/</guid>
      <description>For switching my blogging engine from octopress to hugo, following are the steps.
Installing GO ArchLinux installation is:
$ sudo pacman -S go $ mkdir -p ~/go/{bin,src} $ export GOPATH=~/go $ export PATH=&amp;quot;$PATH:$GOPATH/bin&amp;quot;  Get Hugo Hugo could be fetched directly from github, install it via:
$ Notice you have to use redsocks! $ go get -u -v github.com/spf13/hugo $ which hugo /home/vagrant/go/bin/hugo  First Blog Create a new site:</description>
    </item>
    
    <item>
      <title>搭建基于docker的监控系统</title>
      <link>http://purplepalmdash.github.io/2016/06/20/da-jian-ji-yu-dockerde-jian-kong-xi-tong/</link>
      <pubDate>Mon, 20 Jun 2016 09:39:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/20/da-jian-ji-yu-dockerde-jian-kong-xi-tong/</guid>
      <description>Graphite/Grafana 这两个用于记录和展示监控数据，通过以下命令可以快速搭建:
Graphite 开启容器:
$ mkdir -p /local/path/to/graphite/storage/whisper/ $ sudo docker run -d \ --name graphite \ -p 8080:80 \ -p 2003:2003 \ -v /local/path/to/.htpasswd:/etc/nginx/.htpasswd \ -v /local/path/to/graphite/storage/whisper:/opt/graphite/storage/whisper \ sitespeedio/graphite  创建htpasswd文件的方法可以参阅:
http://httpd.apache.org/docs/2.2/programs/htpasswd.html
当然如果你使用默认的密码的话，用户名/密码是:guest/guest.
Grafana 开启容器:
# mkdir -p /local/path/to/grafana # docker run -d -p 3000:3000 --name=grafana -v /local/path/to/grafana:/var/lib/grafana grafana/grafana  默认用户名/密码为admin/admin.
Collectd 用于采集节点机上的数据，
# docker run -d --net=host --privileged -v /:/hostfs:ro --name=collectd -e \ HOST_NAME=localhost -e \ GRAPHITE_HOST=192.168.1.79 andreasjansson/collectd-write-graphite  参数说明:</description>
    </item>
    
    <item>
      <title>搭建无盘CentOS桌面环境</title>
      <link>http://purplepalmdash.github.io/2016/06/18/da-jian-wu-pan-centoszhuo-mian-huan-jing/</link>
      <pubDate>Sat, 18 Jun 2016 13:43:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/18/da-jian-wu-pan-centoszhuo-mian-huan-jing/</guid>
      <description>网络准备 创建一个无DHCP的网络:
DHCP服务器我们将配置在PXE服务器节点上。
PXE节点配置 初始化配置 最小化安装CentOS 7 Server。并配置其IP地址为10.19.20.2.
关闭selinux和firewalld服务:
# vi /etc/selinux/config SELINUX=disabled # systemctl disable firewalld.service  使用DVD作为源 创建挂载目录并挂在DVD：
# mkdir /cdrom # mount -t iso9660 -o loop ./CentOS-7-x86_64-Everything-1511.iso /cdrom/  创建新的repo文件:
# vi /etc/yum.repos.d/local.repo [LocalRepo] name=Local Repository baseurl=file:///cdrom enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7  生成新的缓存：
# mkdir back # mv CentOS-* back # yum makecache  安装一些必要的包:
# yum install -y vim wget  TFTP Server 安装必要的包:
# yum -y install syslinux xinetd tftp-server # mkdir /var/lib/tftpboot/pxelinux.</description>
    </item>
    
    <item>
      <title>不同桌面环境占用内存/CPU对比</title>
      <link>http://purplepalmdash.github.io/2016/05/31/bu-tong-zhuo-mian-huan-jing-zhan-yong-nei-cun-slash-cpudui-bi/</link>
      <pubDate>Tue, 31 May 2016 09:25:38 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/31/bu-tong-zhuo-mian-huan-jing-zhan-yong-nei-cun-slash-cpudui-bi/</guid>
      <description>对比xfce4, lxde, gnome, mate等桌面环境占用内存/CPU对比
先决条件 使用vagrant的镜像(ubuntu14.04):
$ vagrant box list ubuntu1404 (virtualbox, 0)  每一个桌面环境的验证如下:
$ vagrant init ubuntu1404 $ vim Vagrantfile config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb| # Display the VirtualBox GUI when booting the machine # vb.gui = true # Customize the amount of memory on the VM: vb.memory = &amp;quot;1024&amp;quot; end $ vagrant up  基础镜像占用内存 用free -m来查看系统运行时所占用内存：
xfce4(xubuntu) 安装:
$ sudo apt-get update $ sudo apt-get install xubuntu-desktop  启动xfce4桌面后，内存占用结果为：</description>
    </item>
    
    <item>
      <title>Working Tips on Ansible-cobbler(3)</title>
      <link>http://purplepalmdash.github.io/2016/05/18/working-tips-on-ansible-cobbler-3/</link>
      <pubDate>Wed, 18 May 2016 21:15:10 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/18/working-tips-on-ansible-cobbler-3/</guid>
      <description>APT Packages The downloaded deb files should be under /var/cache/apt, use following command for copying to another position:
$ find . | grep -i deb$ | xargs % cp % ~/Dest_Folder $ scp -r ~/Dest_Folder Your_Cobbler_Machine  Repositories Install dpkg-dev package, so we could generate the dpkg packages:
$ sudo apt-get install -y dpkg-dev  Create a new repository:
Edit the advanced options:
Report the repository info via:
root@cobbler-ubuntu:~# cobbler repo report --name=ubuntu1604Mate Name : ubuntu1604Mate Apt Components (apt only) : [&#39;main&#39;] Apt Dist Names (apt only) : [&#39;stable&#39;] Arch : x86_64 Breed : apt Comment : Ubuntu 16.</description>
    </item>
    
    <item>
      <title>Tips On Maas 2.0</title>
      <link>http://purplepalmdash.github.io/2016/05/12/tips-on-maas-2-dot-0/</link>
      <pubDate>Thu, 12 May 2016 14:10:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/12/tips-on-maas-2-dot-0/</guid>
      <description>Installation Based on Ubuntu16.04, install maas via:
$ sudo apt-get install -y maas  After installation, create the default username/password via following command:
$ sudo maas-region createadmin --username=root --email=xxyy@xxyy.com Password: Again:  Now you could login to the http://YourIP/MAAS via:
Using API to talk In maas cli, using following steps for generate the API key and use:
# sudo maas-region apikey --username=root AYnuZY3gWTnpxJb7Kp:AtDG3yUmaDu8tXGzTc:tumR29xsRGL6A7T6M2G7LTETPP5kkDwC # maas login mymaas http://10.17.17.2/MAAS/api/2.0 AYnuZY3gWTnpxJb7Kp:AtDG3yUmaDu8tXGzTc:tumR29xsRGL6A7T6M2G7LTETPP5kkDwC You are now logged in to the MAAS server at http://10.</description>
    </item>
    
    <item>
      <title>Linux Tips(5)</title>
      <link>http://purplepalmdash.github.io/2016/05/04/linux-tips-5/</link>
      <pubDate>Wed, 04 May 2016 20:03:21 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/04/linux-tips-5/</guid>
      <description>1. Detach Running Tasks Ctrl+Z for suspend the tasks, then bg it, now you could use disown %1 for detaching the running process.
Next time you login, you will see this background task is also running.
2. Installation of Cobbler Shell Scripts:
https://gist.github.com/luisbolson/1d0dc42976d2468171d0
3. yum groups http://ramblings.narrabilis.com/creating-a-yum-repository-repo-and-creating-a-yum-group-to-install-kickstart
4. rvm issue rvm met openssl.so (LoadError), could be solved via following steps.
$ curl https://github.com/ruby/ruby/commit/801e1fe46d83c856844ba18ae4751478c59af0d1.diff &amp;gt; openssl.patch\n $ rvm install 1.9.3 --with-openssl-dir=$HOME/.</description>
    </item>
    
    <item>
      <title>Switching to Win10</title>
      <link>http://purplepalmdash.github.io/2016/04/21/switching-to-win10/</link>
      <pubDate>Thu, 21 Apr 2016 10:06:44 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/21/switching-to-win10/</guid>
      <description>Background Since the monitor in my company are so ba&amp;hellip;&amp;hellip;..d, I have to change my working environment from PC to SurfacePro, thus I have some tools changes, following are the records.
Tool List Terminal: XShell4, Make sure you have change the screen-size issue.
purplepalmdash.github.io/blog/2015/11/13/win10-tips-for-using-xshell/
Screen-Shot:
I use picPick for replacing the scrot, the scrot is so convenient thus I found many tools for replacing it.
picPick Configuration: the main purpose is for selecting the rectangle and save it automatically to the folder with the timestamp.</description>
    </item>
    
    <item>
      <title>把玩ebuddy(4)</title>
      <link>http://purplepalmdash.github.io/2016/03/15/ba-wan-ebuddy-4/</link>
      <pubDate>Tue, 15 Mar 2016 14:25:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/15/ba-wan-ebuddy-4/</guid>
      <description>总结了一下ebuddy的玩法，最近加了点玩法，就是用ebuddy作为Bash运行脚本后的提示部件。譬如 ，当完成了某个编译任务后，用ebuddy来告知任务的运行成功。
$ Task A ; NOTIFY EBUDDY  /bin/ebuddy 创建一个/bin/ebuddy的文件，内容如下:
#!/bin/bash FILE=/tmp/ebuddy while true do # if exists the file, then blinking the ebuddy. if [ -f $FILE ]; then # Exists the file, shining the ebuddy echo 07 &amp;gt; /dev/udp/127.0.0.1/8888 else # Now clear the status of the ebuddy echo 17 &amp;gt; /dev/udp/127.0.0.1/8888 fi #echo 07 &amp;gt; /dev/udp/127.0.0.1/8888 sleep 3 done  这个文件的意思是，如果存在/tmp/ebuddy文件，ebuddy的头会亮起，否则，清除ebuddy的状态。
notifyebuddy &amp;amp;&amp;amp; clearebuddy 这两个命令是做在.zshrc里的两个alias:</description>
    </item>
    
    <item>
      <title>使用squid缓存所有rpm/deb安装包</title>
      <link>http://purplepalmdash.github.io/2016/03/15/shi-yong-squidhuan-cun-suo-you-rpm-slash-deban-zhuang-bao/</link>
      <pubDate>Tue, 15 Mar 2016 10:23:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/15/shi-yong-squidhuan-cun-suo-you-rpm-slash-deban-zhuang-bao/</guid>
      <description>在进行自动化部署的时候，需要频繁安装系统，鉴于工作环境的带宽有限，我需要设置一个代理服 务器，用于缓存所有的RPM/DEB安装包，以便自动化部署可以在瞬间完成。
以下示例运行在ArchLinux上。
Squid搭建 Squid介绍:
Squid 是一个 Web 缓存代理，支持 HTTP, HTTPS, FTP, 以及更多。它通过缓存与重用经常请求的 web页面，减少带宽使用同时提升了响应时间。Squid 具有可扩展的访问控制功能，同时可以使服务 器加速。它运行在 Unix 和 Windows 中，采用 GNU GPL 协议发布。
安装squid:
$ sudo pacman -S squid  我们需要配置squid以便它能适配我们的环境，我的环境里主要需要做以下几个事情：
1. 更改squid缓存目录到/home分区。
2. 更改squid缓存目录大小为30G以上。
3. 更改缓存文件大小，以便它支持大的RPM/DEB包。
更改缓存目录， 找到以下的行，在其下添加我们自定义的缓存目录:
$ sudo vim /etc/squid/squid.conf # Uncomment and adjust the following to add a disk cache directory. #cache_dir ufs /var/cache/squid 100 16 256 cache_dir ufs /home/dash/squid 30000 16 256  我们将在指定目录下创建目录， 第一层数为16, 每个文件夹下最多包含256个子文件夹。</description>
    </item>
    
    <item>
      <title>配置Qemu的VDE网络</title>
      <link>http://purplepalmdash.github.io/2016/03/10/pei-zhi-qemude-vdewang-luo/</link>
      <pubDate>Thu, 10 Mar 2016 14:18:43 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/10/pei-zhi-qemude-vdewang-luo/</guid>
      <description>为了快速验证镜像，配置出一个在本机上的tap0端口，虚拟机则通过VDE虚拟交换机连接到此端口后 ，DHCP获得IP地址，从而得到网络连接， 以下是步骤。
安装VDE ArchLinux下安装命令为sudo pacman -S vde2.
配置 贴出配置文件如下, 摘录自ArchLinux的Wiki. 值得注意的是，在Systemd的配置文件中，需要先把 tun驱动装载上，才能使得VDE启动成功。
配置qemu网络环境配置脚本:
$ vim /etc/systemd/scripts/qemu-network-env #!/bin/sh # QEMU/VDE network environment preparation script # The IP configuration for the tap device that will be used for # the virtual machine network: TAP_DEV=tap0 TAP_IP=10.33.34.254 TAP_MASK=24 TAP_NETWORK=10.33.34.0 # Host interface NIC=enp2s0 case &amp;quot;$1&amp;quot; in start) echo -n &amp;quot;Starting VDE network for QEMU: &amp;quot; # If you want tun kernel module to be loaded by script uncomment here modprobe tun 2&amp;gt;/dev/null # Wait for the module to be loaded while !</description>
    </item>
    
    <item>
      <title>把玩ebuddy(3)</title>
      <link>http://purplepalmdash.github.io/2016/03/05/ba-wan-ebuddy-3/</link>
      <pubDate>Sat, 05 Mar 2016 21:39:41 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/05/ba-wan-ebuddy-3/</guid>
      <description>早上起来刷微信, 觉得网页版微信的提示信息大可用ebuddy来响应. 说干就干,以下是解 决方案.
gnotifier 写作时,我的firefox版本是44.0.2, 需要安装gnotifier这个插件,从而把firefox的提示 消息转为系统提示信息, 下载地址在:
https://addons.mozilla.org/en-US/firefox/addon/gnotifier/
点击Add to Firefox即完成安装:
查看dbus消息 gnotifier将网页版微信的提示消息转为了系统提示消息, 那么只需要获取到系统消息总 线里的提示信息, 筛选出我们要的类型后, 给ebuddy发送相应的指令即可.
dbus-monitor工具可用于侦听dbus总线里的消息, 我们来运行一下,如下:
$ dbus-monitor --session interface=&#39;org.freedesktop.Notifications&#39;,member=&#39;Notify&#39; signal time=1457186062.137082 sender=org.freedesktop.DBus -&amp;gt; destination=:1.163 serial=2 path=/org/freedesktop/DBus; interface=org.freedesktop.DBus; member=NameAcquired string &amp;quot;:1.163&amp;quot; signal time=1457186062.137154 sender=org.freedesktop.DBus -&amp;gt; destination=:1.163 serial=4 path=/org/freedesktop/DBus; interface=org.freedesktop.DBus; member=NameLost string &amp;quot;:1.163&amp;quot; method call time=1457186083.405690 sender=:1.39 -&amp;gt; destination=:1.14 serial=220 path=/org/freedesktop/Notifications; interface=org.freedesktop.Notifications; member=Notify string &amp;quot;Firefox&amp;quot; uint32 0 string &amp;quot;/tmp/gnotifier-3Fh5Sa&amp;quot; string &amp;quot;yfp&amp;quot; string &amp;quot;[Sticker][Sticker][Sticker]&amp;quot; array [ ] array [ ] int32 -1 method call time=1457186086.</description>
    </item>
    
    <item>
      <title>conntrack-tools usage</title>
      <link>http://purplepalmdash.github.io/2016/03/02/conntrack-tools-usage/</link>
      <pubDate>Wed, 02 Mar 2016 17:30:31 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/02/conntrack-tools-usage/</guid>
      <description> 参考 https://blogs.it.ox.ac.uk/networks/2014/09/30/linux-and-eduroam-nat-logging-perl-and-regular-expressions/
安装 ArchLinux下:
$ sudo pacman -S conntrack-tools  使用 记录新建/销毁连接数至文件:
$ sudo touch /var/log/conntrack-data.log $ sudo chmod 777 /var/log/conntrack-data.log $ sudo conntrack -E -eNEW,DESTROY --src-nat -otimestamp,extended --buffer-size=104857600 &amp;gt; /var/log/conntrack-data.log  </description>
    </item>
    
    <item>
      <title>OpenVswitch bonding</title>
      <link>http://purplepalmdash.github.io/2016/02/25/openvswitch-bonding/</link>
      <pubDate>Thu, 25 Feb 2016 15:02:24 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/25/openvswitch-bonding/</guid>
      <description>Before Add 2 NICs, and show their ip infos via:
[root@localhost ~]# ifconfig eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 inet 10.47.58.207 netmask 255.255.255.0 broadcast 10.47.58.255 inet6 fe80::5054:ff:feae:f2be prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt; ether 52:54:00:ae:f2:be txqueuelen 1000 (Ethernet) RX packets 75 bytes 10924 (10.6 KiB) RX errors 0 dropped 5 overruns 0 frame 0 TX packets 15 bytes 1668 (1.6 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 eth1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 inet 10.</description>
    </item>
    
    <item>
      <title>Using python for checking imap mailbox unread message</title>
      <link>http://purplepalmdash.github.io/2016/02/23/using-python-for-checking-imap-mailbox-unread-message/</link>
      <pubDate>Tue, 23 Feb 2016 19:52:57 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/23/using-python-for-checking-imap-mailbox-unread-message/</guid>
      <description>Just paste some python scripts:
&amp;gt;&amp;gt;&amp;gt; import imaplib &amp;gt;&amp;gt;&amp;gt; obj=imaplib.IMAP4_SSL(&#39;imap.163.com&#39;,&#39;993&#39;) &amp;gt;&amp;gt;&amp;gt; obj.login(&#39;XXXXX&#39;,&#39;XXXXXXXX&#39;) (&#39;OK&#39;, [b&#39;LOGIN completed&#39;]) &amp;gt;&amp;gt;&amp;gt; obj.select() (&#39;OK&#39;, [b&#39;49&#39;]) &amp;gt;&amp;gt;&amp;gt; obj.search(None,&#39;Unseen&#39;) (&#39;OK&#39;, [b&#39;&#39;]) &amp;gt;&amp;gt;&amp;gt; len(obj.search(None, &#39;UnSeen&#39;)[1][0].split()) 0 &amp;gt;&amp;gt;&amp;gt; len(obj.search(None, &#39;UnSeen&#39;)[1][0].split()) 1 &amp;gt;&amp;gt;&amp;gt; len(obj.search(None, &#39;UnSeen&#39;)[1][0].split()) 2 &amp;gt;&amp;gt;&amp;gt; len(obj.search(None, &#39;UnSeen&#39;)[1][0].split()) 2 &amp;gt;&amp;gt;&amp;gt; len(obj.search(None, &#39;UnSeen&#39;)[1][0].split()) 1 &amp;gt;&amp;gt;&amp;gt;  Using the unread counts, you could easily interact with some other programs, for example shining LEDs.</description>
    </item>
    
    <item>
      <title>Mutt Configuration On DO</title>
      <link>http://purplepalmdash.github.io/2016/02/19/mutt-configuration-on-do/</link>
      <pubDate>Fri, 19 Feb 2016 07:11:24 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/19/mutt-configuration-on-do/</guid>
      <description>For sending back the daily fetched items into China Great LAN, I have to setup the smtp configuration for mutt on DO&amp;rsquo;s ubuntu machine. Following are the steps.
Install the mutt and msmtp:
$ sudo apt-get install -y mutt msmtp  Edit following files:
$ cat ~/.muttrc set mbox_type=Maildir set folder=$HOME/.mail set spoolfile=~/.mail set header_cache=~/.mail/.hcache set sendmail=&amp;quot;/usr/bin/msmtp&amp;quot; set use_from=yes set realname=&amp;quot;YourRealName&amp;quot; set from=YourUserNameHere@163.com set envelope_from=yes  msmtp rc config file:</description>
    </item>
    
    <item>
      <title>Linux Tips(4)</title>
      <link>http://purplepalmdash.github.io/2016/01/15/linux-tips-4/</link>
      <pubDate>Fri, 15 Jan 2016 18:37:03 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/01/15/linux-tips-4/</guid>
      <description>1. Run ansible commands Run commands in all hosts:
# ansible all -i inventory.ini -m command -u root --args &amp;quot;uptime&amp;quot;  2. mesos introduction http://www.infoq.com/cn/articles/analyse-mesos-part-02
3. Limit ansible run hosts # ansible-playbook -i inventory_mesos_cluster changehostname.yml -u root -k -vvvv --list-hosts playbook: changehostname.yml play #1 (master1): host count=1 10.47.58.31 # ansible-playbook -i inventory_mesos_cluster changehostname.yml -u root -k -vvvv --limit=&amp;quot;master1&amp;quot;  4. Configure the dhcp configuration of libvirtd First edit the net configuration:</description>
    </item>
    
    <item>
      <title>Tips on Veewee and Vagrant</title>
      <link>http://purplepalmdash.github.io/2016/01/03/tips-on-veewee-and-vagrant/</link>
      <pubDate>Sun, 03 Jan 2016 15:56:09 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/01/03/tips-on-veewee-and-vagrant/</guid>
      <description>Install Veewee First you should get rvm avaiable, then use rvm for install ruby-2.2.1:
Note: you should import gpg signature via commandline.
$ proxychains4 curl -k --insecure -L https://get.rvm.io | bash -s stable --ruby $ proxychains4 rvm install ruby-2.2.1  Install the veewee via:
$ proxychains4 gem install bundler $ git clone https://github.com/jedi4ever/veewee.git $ cd veewee $ proxychains4 gem install i18n -v &#39;0.7.0&#39; $ proxychains4 bundle install  After installation createing an alias for quickly refers to veewee:</description>
    </item>
    
    <item>
      <title>Rundeck Tips</title>
      <link>http://purplepalmdash.github.io/2015/12/07/rundeck-tips/</link>
      <pubDate>Mon, 07 Dec 2015 11:58:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/07/rundeck-tips/</guid>
      <description>Installation Install the rundeck under CentOS 7:
# rpm -Uvh http://repo.rundeck.org/latest.rpm # yum install rundeck  Configuration Configure some properties:
# vim /etc/rundeck/framework.properties framework.server.name = 192.168.0.79 framework.server.hostname = 192.168.0.79 framework.server.port = 4440 framework.server.url = http://192.168.0.79:4440 # vim /etc/rundeck/rundeck-config.properties grails.serverURL=http://192.168.0.79:4440  Start the service:
# service rundeckd start Starting rundeckd (via systemctl): [ OK ]  You could check the status via # systemctl status rundeckd.
Now visit the server via http://192.</description>
    </item>
    
    <item>
      <title>On Bluetooth PAN</title>
      <link>http://purplepalmdash.github.io/2015/12/04/on-bluetooth-pan/</link>
      <pubDate>Fri, 04 Dec 2015 10:51:10 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/04/on-bluetooth-pan/</guid>
      <description>AIM For sharing the internet connection from working PC to Surface Pro.
Setup And Configuration SurfacePro Install bluez/bluez-libs/bluez-utils:
$ sudo pacman -S bluez bluez-utils bluez-libs  Modprobe the bnep kernel module:
[root@surfacepro ~]# modprobe bnep [root@surfacepro ~]# lsmod | grep bnep bnep 20480 0 bluetooth 450560 6 bnep,btbcm,btrtl,btusb,btintel [root@surfacepro ~]# modprobe btusb  Start the bluetooth.service via:
$ sudo systemctl start bluetooth.service  bluetoothctl will give access for configurating bluetooth equipment, following steps shows how to connect to a bluetooth keyboard:</description>
    </item>
    
    <item>
      <title>Awesome&#39;s Battery Indicator</title>
      <link>http://purplepalmdash.github.io/2015/11/25/awesomes-battery-indicator/</link>
      <pubDate>Wed, 25 Nov 2015 12:18:29 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/11/25/awesomes-battery-indicator/</guid>
      <description>Background I installed ArchLinux+Awesome On my SurfacePro, while the charger of Surface Pro is not so tight to the pad. Thus I have to use a battery indicator in Awesome.
Software Refers to:
http://www.everythingisvoid.com/uncategorized/simple-battery-status-indicator-awesome-window-manager
Install steps on ArchLinux:
$ sudo pacman -S luarocks5.1 gobject-introspection acpi $ sudo luarocks-5.1 install battery_status  You could manually run show_battery_status or add it into your own rc.lua file:
$ vim ~/.config/awesome/rc.lua ----..................... autorunApps = { --.</description>
    </item>
    
    <item>
      <title>Tips On ArchLinux On SSD For SurfacePro</title>
      <link>http://purplepalmdash.github.io/2015/11/18/tips-on-archlinux-on-ssd-for-surfacepro/</link>
      <pubDate>Wed, 18 Nov 2015 16:59:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/11/18/tips-on-archlinux-on-ssd-for-surfacepro/</guid>
      <description>Hardware Surface Pro, KingShare 128G SSD(USB).
Picture will be updated after successfully installed.
Virtualbox Way Make a vmdk file which actually points to the USB Disk:
$ sudo VBoxManage internalcommands createrawvmdk -filename ./rawusb1.vmdk -rawdisk \ /dev/disk/by-id/usb-KINGSHAR_KS-CUTS25W_123456789010-0:0 $ sudo chown -R YourName rawusb1.vmdk  Now using this rawdisk for starting the VirtualBox based machine.
Installation The system installation is refers to following links:
https://wiki.archlinux.org/index.php/Microsoft_Surface_Pro_3
https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_a_USB_key
Updated Configuration Finally I installed the surface pro by using a usb dongle which burned the archlinux installation iso, put it into the surface pro and startup the machine pressing power key and volume down key, it will goes into the installtion steps.</description>
    </item>
    
    <item>
      <title>Variety</title>
      <link>http://purplepalmdash.github.io/2015/11/13/variety/</link>
      <pubDate>Fri, 13 Nov 2015 11:05:05 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/11/13/variety/</guid>
      <description>参考 http://peterlevi.com/variety/how-to-install/
安装 Ubuntu上，从ppa安装:
$ sudo add-apt-repository ppa:peterlevi/ppa $ sudo apt-get update $ sudo apt-get install variety  配置 安装完毕后，在终端下键入variety即可开始配置该软件，第一次会询问是否创建一个用于多终端 主机之间同步桌面壁纸的账户:
这一步是可选的，我们在这里先注册上. 需要注意的是，用翻墙后的浏览器完成注册.
一般情况下这里就能使用了，但是awesome桌面环境下需要增加一下这行:
$ vim /home/XXXXXXX/.config/variety/scripts/set_wallpaper ### Finally we comes to awesome! awsetbg &amp;quot;$WP&amp;quot; 2&amp;gt; /dev/null  Or: if you use newer version of awesome, awsetbg won&amp;rsquo;t take effect, use feh instead:
feh --bg-scale &amp;quot;$WP&amp;quot; 2&amp;gt;/dev/null  进一步美化 Awesome下就只能换换壁纸，本身终端也不支持透明度的配置，如果是gnome之类的桌面环境，可以 把terminal emulator的透明度打开，能获得很好的视觉效果。
默认的更新频率是5分钟更新一次，当然在配置界面下可以更改为更短/更长的时限。</description>
    </item>
    
    <item>
      <title>Use OpenWRT Router For Lan Forwarding</title>
      <link>http://purplepalmdash.github.io/2015/10/15/use-openwrt-router-for-lan-forwarding/</link>
      <pubDate>Thu, 15 Oct 2015 11:50:28 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/15/use-openwrt-router-for-lan-forwarding/</guid>
      <description>USB Ethernet Insert the USB Ethernet Dongle into the Ubuntu14.04, it will be automatically recognized and initialized.
$ dmesg | tail [10323.307662] asix 2-2.2:1.0 eth1: register &#39;asix&#39; at usb-0000:00:1d.7-2.2, ASIX AX88772B USB 2.0 Ethernet, 84:xx:xx:xx:xx [10323.307704] usbcore: registered new interface driver asix [10324.285425] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready $ ifconfig eth1 eth1 Link encap:Ethernet HWaddr 84:xx:xx:xx:  Be care to see the udev rules definition:
$ cat /etc/udev/rules.</description>
    </item>
    
    <item>
      <title>Linux Tips 3</title>
      <link>http://purplepalmdash.github.io/2015/10/13/linux-tips-3/</link>
      <pubDate>Tue, 13 Oct 2015 10:43:51 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/13/linux-tips-3/</guid>
      <description>1. Tips on Cloud-Init http://www.cnblogs.com/smallcoderhujin/p/4238609.html
2. Access CloudStack VR Get the VR IP address from the CloudStack Web Interface:
Then get the ssh connection via(On Agent Node):
[root@csmgmt ~]# ssh -i .ssh/id_rsa.cloud -p3922 169.254.1.177 Linux r-9-VM 3.2.0-4-amd64 #1 SMP Debian 3.2.65-1+deb7u2 x86_64 ....... root@r-9-VM:~#  3. Cloudmonkey issue Couldnot start cloudmonkey, use virtualenv for starting:
$ yum install -y python-virtualenv $ virtualenv venv --python=python2.6 $ . venv/bin/activate $ pip install cloudmonkey  Then you could start cloudmonkey in venv environment.</description>
    </item>
    
    <item>
      <title>20151009备注</title>
      <link>http://purplepalmdash.github.io/2015/10/09/20151009bei-zhu/</link>
      <pubDate>Fri, 09 Oct 2015 22:21:11 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/09/20151009bei-zhu/</guid>
      <description>Mirantis 定时任务，更新Mirantis镜像
Autossh Issue 取远端服务器上的某个值，若该值为真，则临时建立反向链接。</description>
    </item>
    
    <item>
      <title>Dockerize Markdown Written CV</title>
      <link>http://purplepalmdash.github.io/2015/10/08/dockerize-markdown-written-cv/</link>
      <pubDate>Thu, 08 Oct 2015 10:08:02 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/08/dockerize-markdown-written-cv/</guid>
      <description>Tips Manually run the commands for generating the CVs.
$ sudo apt-get install -y build-essential $ sudo apt-get install -y pandoc $ sudo apt-get install -y wkhtmltopdf $ sudo apt-get install xvfb $ echo &#39;xvfb-run --server-args=&amp;quot;-screen 0, 1024x768x24&amp;quot; /usr/bin/wkhtmltopdf $*&#39; &amp;gt; \ /usr/bin/wkhtmltopdf.sh $ chmod a+x /usr/bin/wkhtmltopdf $ chmod a+x /usr/bin/wkhtmltopdf.sh $ ln -s /usr/bin/wkhtmltopdf.sh /usr/local/bin/wkhtmltopdf $ apt-get install -y ttf-wqy-zenhei $ apt-get install -y git $ apt-get install -y rubygems-integration ruby-dev $ apt-get install -y libimage-exiftool-perl $ gem install compass $ gem install susy $ git clone https://github.</description>
    </item>
    
    <item>
      <title>Sharing Mouse/Keyboard among 3 Nodes</title>
      <link>http://purplepalmdash.github.io/2015/09/22/sharing-mouse-slash-keyboard-among-3-nodes/</link>
      <pubDate>Tue, 22 Sep 2015 20:42:04 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/09/22/sharing-mouse-slash-keyboard-among-3-nodes/</guid>
      <description>I have 3 computers which runs ArchLinux/Ubuntu15.04 Mate, they both connected to the same ethernet, I&amp;rsquo;d like to use only one mouse/keyboard for controlling them, following are the steps for how-to.
Network Configuration The 3 computer are listed as following:
* 192.168.1.11/dashArch/ArchLinux * 192.168.1.13/dash32G/Ubuntu15.04 * 192.168.1.10/dashMate/Ubuntu15.04
Edit the /etc/hosts in 192.168.1.11:
$ sudo vim /etc/hosts 192.168.1.13 dash32G 192.168.1.14 dashMate  In 192.168.1.13, Edit /etc/hosts:
$ sudo vim /etc/hosts 192.168.1.11 dashArch  Synergy Server I use ArchLinux for Synergy Server, install it simply via:</description>
    </item>
    
    <item>
      <title>Trouble-Shooting On ChromeOS&#39;s crouton Updating</title>
      <link>http://purplepalmdash.github.io/2015/09/10/trouble-shooting-on-chromeoss-crouton-updating/</link>
      <pubDate>Thu, 10 Sep 2015 10:17:17 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/09/10/trouble-shooting-on-chromeoss-crouton-updating/</guid>
      <description>Problem After updating of ChromeOS itself, the crouton failed to start with following message:
Entering /mnt/stateful_partition/crouton/chroots/xxxxxx... ERROR: ld.so: object &#39;/usr/local/lib/croutonfreon.so&#39; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. _XSERVTransmkdir: Owner of /tmp/.X11-unix should be set to root  Solution First setup the proxy for acrossing the Fucking Great Fire Wall.
In another PC which have the socket proxy, install privoxy:
$ sudo apt-get install -y privoxy  Oh sorry I have to delete the whole chroot environment, delete it via:</description>
    </item>
    
    <item>
      <title>Tips On Remove maas-dhcp</title>
      <link>http://purplepalmdash.github.io/2015/08/31/tips-on-remove-maas-dhcp/</link>
      <pubDate>Mon, 31 Aug 2015 12:07:37 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/31/tips-on-remove-maas-dhcp/</guid>
      <description>Solution Previous I always encounter problems in removing maas-dhcp, so I checked some materials show the result is because I disabled apparmor, the solution is:
$ vim /etc/default/grub GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;security=selinux selinux=1 apparmor=1 security=apparmor&amp;quot;  Add apparmor related, and reboot the computer.
Now you could remove the maas-dhcp and install new softwares.
TIPS apparmor status View apparmor status:
sudo apparmor_status  Track Reason Via restart you could know the exact reason:</description>
    </item>
    
    <item>
      <title>Tips For SSD Installation</title>
      <link>http://purplepalmdash.github.io/2015/08/30/tips-for-ssd-installation/</link>
      <pubDate>Sun, 30 Aug 2015 14:45:24 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/30/tips-for-ssd-installation/</guid>
      <description>Refers to:
https://wiki.archlinux.org/index.php/Beginners&amp;rsquo;guide%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29
Partition Check if you are in efi mode:
# efivar -l  Then format your disk using parted:
# parted /dev/sda (parted) mkpart ESP fat32 1M 513M (parted) set 1 boot on (parted) mkpart primary ext4 513M 100%  Check if your partition is aligned:
# blockdev --getalignoff /dev/sda 0  I have 2 disks, one for ssd, the other for hdd, so I want to share the swap partition, and locate the /var directory in the hdd, modify it via:</description>
    </item>
    
    <item>
      <title>GPT/SSD on ArchLinux Installation</title>
      <link>http://purplepalmdash.github.io/2015/08/30/gpt-slash-ssd-on-archlinux-installation/</link>
      <pubDate>Sun, 30 Aug 2015 09:18:15 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/30/gpt-slash-ssd-on-archlinux-installation/</guid>
      <description>Since I met so many problems in archlinux installation on SSD, plus UEFI issues, I use following virt machine for re-produce the problem and try to find out the solution.
Prepare Prepare two disk, one for SSD, the second is the oridinary one.
$ qemu-img create -f qcow2 -o cluster_size=4k ArchSSD.qcow2 100G $ qemu-img create -f qcow2 ArchHDD.qcow2 80G $ virt-manage  UEFI Support In Virt-Manager Follow the tips in https://fedoraproject.</description>
    </item>
    
    <item>
      <title>Enable Trusty KickStart For SpaceWalk</title>
      <link>http://purplepalmdash.github.io/2015/08/25/enable-trusty-kickstart-for-spacewalk/</link>
      <pubDate>Tue, 25 Aug 2015 16:06:17 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/25/enable-trusty-kickstart-for-spacewalk/</guid>
      <description>Import distro-tree Copy iso content into the distro-tree:
# mount -t iso9660 -o loop /mnt/iso/ubuntu-14.04.3-server-amd64.iso /mnt1/ # mkdir /var/distro-trees/ubuntu-14.04.3-amd64 # chmod 755 /var/distro-trees/ubuntu-14.04.3-amd64/ # cp -ar /mnt1/* /var/distro-trees/ubuntu-14.04.3-amd64/  We will copy the pxeboot startup file from CentOS7 into ubuntu14.04 distro tree for cheating the spacewalk:
# mount -t iso9660 -o loop /mnt/iso/CentOS-7-x86_64-Everything-1503-01.iso /mnt2/ # mkdir -p /var/distro-trees/ubuntu-14.04.3-amd64/images/pxeboot/ # cp /mnt2/images/pxeboot/{initrd.img,vmlinuz} /var/distro-trees/ubuntu-14.04.3-amd64/images/pxeboot/ # ls /var/distro-trees/ubuntu-14.04.3-amd64/images/pxeboot/ -l -h ....  Kickstarting Now in spacewalk go to Systems-&amp;gt;Kickstart-&amp;gt;Distributions, with the parameters like following picture:</description>
    </item>
    
    <item>
      <title>Add CentOS Client into SpaceWalk</title>
      <link>http://purplepalmdash.github.io/2015/08/25/add-centos-client-into-spacewalk/</link>
      <pubDate>Tue, 25 Aug 2015 14:30:44 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/25/add-centos-client-into-spacewalk/</guid>
      <description>Installation Take i386 architecture for example, first download the rpm package then install it:
$ wget /yum.spacewalkproject.org/2.3-client/RHEL/6/i386/spacewalk-client-repo-2.3-2.el6.noarch.rpm $ rpm -ivh spacewalk-client-repo-2.3-2.el6.noarch.rpm  If your architecture is x86_64, then select x86_64 corresponding rpm and install it.
Enable EPEL:
# BASEARCH=$(uname -i) # rpm -Uvh http://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm  Now install the spacewalk client via:
# yum install -y rhn-client-tools rhn-check rhn-setup rhnsd m2crypto yum-rhn-plugin  Configuration Install Spacewalk server&amp;rsquo;s CA certificate on the server to enable SSL communication:</description>
    </item>
    
    <item>
      <title>Enable Game-KeyBoard Rapoo V5 Pro In Ubuntu Trusty</title>
      <link>http://purplepalmdash.github.io/2015/08/24/enable-game-keyboard-rapoo-v5-pro-in-ubuntu-trusty/</link>
      <pubDate>Mon, 24 Aug 2015 12:13:42 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/24/enable-game-keyboard-rapoo-v5-pro-in-ubuntu-trusty/</guid>
      <description>Problem A Game KeyBoard Rapoo V5 Pro could work propery under windows, but in Ubuntu 14.04(Trusty) it could not be identified. Following are the steps for enable it.
The dmesg shows following message(similar message):
[ 272.865245] hid-generic 0003:04D9:A04A.0007: input,hidraw4: USB HID v1.10 Keyboard [xxxxxxxxxxxxxx] on usb-0000:00:1d.0-1/input0 [ 272.874127] hid-generic 0003:04D9:A04A.0008: usage index exceeded [ 272.874142] hid-generic 0003:04D9:A04A.0008: item 0 2 2 2 parsing failed [ 272.874187] hid-generic: probe of 0003:04D9:A04A.</description>
    </item>
    
    <item>
      <title>Move SpaceWalk Server Into A New Network</title>
      <link>http://purplepalmdash.github.io/2015/08/22/move-spacewalk-server-into-a-new-network/</link>
      <pubDate>Sat, 22 Aug 2015 16:49:19 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/22/move-spacewalk-server-into-a-new-network/</guid>
      <description>Env Move from one isolated network to another isolated network. Experiment is done on virt-manager, from 10.9.10.0/24 to 10.47.58.0/24 network. Following are the steps for migration.
Steps First shutdown the machine and connect the existing network card to new network, boot on the computer.
Modify the ip address(static IP Address):
$ sudo vim /etc/sysconfig/network-scripts/ifcfg-eth0 - IPADDR=10.9.10.13 - GATEWAY=10.9.10.1 + IPADDR=10.47.58.3 + GATEWAY=10.47.58.1  Modify the hostname:
# vim /etc/hosts - 10.</description>
    </item>
    
    <item>
      <title>mrepo tips for syncing CentOS repositories</title>
      <link>http://purplepalmdash.github.io/2015/08/21/mrepo-tips-for-syncing-centos-repositories/</link>
      <pubDate>Fri, 21 Aug 2015 14:48:30 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/21/mrepo-tips-for-syncing-centos-repositories/</guid>
      <description>Refers to the mirrorlist website, don&amp;rsquo;t use aliyun, cause their webserver will forbidden lftp from fetching the infos. I switches to 163.com and ustc.edu.cn for different repositories, following are the configuration file.
CentOS6 An example is listed as:
# cat /etc/mrepo.conf.d/centos6.conf [centos6] name = CentOS $release ($arch) release = 6 arch = x86_64 metadata = yum repomd #iso = http://mirrors.163.com/centos/$release/isos/$arch/CentOS-6.6-x86_64-bin-DVD?.iso # os = http://mirrors.163.com/centos/$release/os/$arch/Packages/ # updates = http://mirrors.163.com/centos/$release/updates/$arch/Packages/ # extras = http://mirrors.</description>
    </item>
    
    <item>
      <title>Setup Squid</title>
      <link>http://purplepalmdash.github.io/2015/08/21/setup-squid/</link>
      <pubDate>Fri, 21 Aug 2015 11:33:13 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/21/setup-squid/</guid>
      <description>Installation And Configuration # yum install -y squid # vim /etc/squid/squid.conf http_port 3072 #acl localnet src 192.168.0.0/16 # RFC1918 possible internal network # Squid normally listens to port 3128 http_port 3072 cache_mem 64 MB maximum_object_size 4 MB # Cache 3GB cache_dir ufs /home/juju/SquidCache 3072 16 256 access_log /var/log/squid/access.log auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd auth_param basic children 5 auth_param basic kspc-01 proxy auth_param basic credentialsttl 2 hours acl myacl proxy_auth REQUIRED http_access allow myacl http_access deny all visible_hostname squid.</description>
    </item>
    
    <item>
      <title>Build nbd Kernel Module On CentOS7</title>
      <link>http://purplepalmdash.github.io/2015/08/13/build-nbd-kernel-module-on-centos7/</link>
      <pubDate>Thu, 13 Aug 2015 17:02:53 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/13/build-nbd-kernel-module-on-centos7/</guid>
      <description>Get Source Code First check your kernel version via:
$ uname -r 3.10.0-229.7.2.el7.x86_64  Then find the corresponding kernel source rpm under vault.centos.org, download its rpm and install it.
$ wget http://vault.centos.org/7.1.1503/updates/Source/SPackages/kernel-3.10.0-229.7.2.el7.src.rpm # useradd builder # groupadd builder $ rpm -ivh kernel-3.10.0-229.7.2.el7.src.rpm  Build Preparation As a normal user, do following:
$ mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS} $ echo &#39;%_topdir %(echo $HOME)/rpmbuild&#39; &amp;gt; ~/.rpmmacros $ cd ~/rpmbuild/SPECS $ rpmbuild -bp --target=$(uname -m) kernel.</description>
    </item>
    
    <item>
      <title>Chromebook Kernel Issue</title>
      <link>http://purplepalmdash.github.io/2015/07/25/chromebook-kernel-issue/</link>
      <pubDate>Sat, 25 Jul 2015 11:34:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/25/chromebook-kernel-issue/</guid>
      <description> Issues Chromebook could not support:
* bluetooth LAN * NFS
* ETC
So I re-compile the Chromebook kernel for soving these issue.
Kernel Version # uname -r 3.10.18  Get The SourceCode # git clone --branch v3.10.18 https://chromium.googlesource.com/chromiumos/third_party/kernel  </description>
    </item>
    
    <item>
      <title>Try raid0 installation on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2015/07/03/try-raid0-installation-on-ubuntu/</link>
      <pubDate>Fri, 03 Jul 2015 10:58:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/03/try-raid0-installation-on-ubuntu/</guid>
      <description>Preparation Prepare the disks:
[root:/home/juju/img]# mkdir Raid0 [root:/home/juju/img]# cd Raid0/ [root:/home/juju/img/Raid0]# ls [root:/home/juju/img/Raid0]# qemu-img create -f qcow2 disk0.qcow2 10G Formatting &#39;disk0.qcow2&#39;, fmt=qcow2 size=10737418240 encryption=off cluster_size=65536 [root:/home/juju/img/Raid0]# qemu-img create -f qcow2 disk1.qcow2 10G Formatting &#39;disk1.qcow2&#39;, fmt=qcow2 size=10737418240 encryption=off cluster_size=65536 [root:/home/juju/img/Raid0]# qemu-img create -f qcow2 disk2.qcow2 10G Formatting &#39;disk2.qcow2&#39;, fmt=qcow2 size=10737418240 encryption=off cluster_size=65536  Prepare the Virtual Machine:
Partition Raid Configure the Software Raid0:
After Configuration of SoftRaid1, the screen displayed like:</description>
    </item>
    
    <item>
      <title>Linux Tips(2)</title>
      <link>http://purplepalmdash.github.io/2015/06/29/linux-tips-2/</link>
      <pubDate>Mon, 29 Jun 2015 09:27:17 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/29/linux-tips-2/</guid>
      <description>1. XenCenter Installation Just use your windows&amp;rsquo;s browser point to your XenServer IP Address, Download the XenCenter, and install it.
Update Some tools on XenServer:
$ vim /etc/yum.repos.d/CentOS-Base.repo ... enabled=1 ... $ yum install -y lm_sensors  After installation of lm_sensors you could see more detailed information on XenServer.
2. Disable Specified Repository Since citrix have no data in its repository, simply disable it.
$ yum update --disablerepo=citrix  3.</description>
    </item>
    
    <item>
      <title>Use 8188eu and Hostapd For Setting Soft-AP Router</title>
      <link>http://purplepalmdash.github.io/2015/06/11/use-8188eu-and-hostapd-for-setting-soft-ap-router/</link>
      <pubDate>Thu, 11 Jun 2015 16:25:51 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/11/use-8188eu-and-hostapd-for-setting-soft-ap-router/</guid>
      <description>HostAPD Install HostAPD via following commands:
$ sudo apt-get autoremove hostapd $ wget https://github.com/jenssegers/RTL8188-hostapd/archive/v2.0.tar.gz $ tar -zxvf v2.0.tar.gz $ cd RTL8188-hostapd-2.0/hostapd $ sudo make $ sudo make install $ sudo service hostapd restart [ ok ] Stopping advanced IEEE 802.11 management: hostapd. [ ok ] Starting advanced IEEE 802.11 management: hostapd.  dhcpd We need a dhcp server for assigning a new IP address to the clients who joins the ap:</description>
    </item>
    
    <item>
      <title>Chef TroubleShooting 2</title>
      <link>http://purplepalmdash.github.io/2015/06/08/chef-troubleshooting-2/</link>
      <pubDate>Mon, 08 Jun 2015 19:43:13 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/08/chef-troubleshooting-2/</guid>
      <description>The ssl checking for adding new nodes is still a horrible procedure, following shows the correct steps for adding new node:
On Chef Workstation, add node via its ip address rather than via its hostname:
$ knife bootstrap 172.16.0.12 -x username_on_12 -P password_on_12 --sudo  The example knife.rb file should be written like following:
current_dir = File.dirname(__FILE__) log_level :info log_location STDOUT node_name &amp;quot;nodename&amp;quot; client_key &amp;quot;#{current_dir}/node.pem&amp;quot; validation_client_name &amp;quot;nodename&amp;quot; validation_key &amp;quot;#{current_dir}/node_org.pem&amp;quot; chef_server_url &amp;quot;https://tmpChefServer/organizations/nodename&amp;quot; syntax_check_cache_path &amp;quot;#{ENV[&#39;HOME&#39;]}/.</description>
    </item>
    
    <item>
      <title>Quickly Change CentOS Networking</title>
      <link>http://purplepalmdash.github.io/2015/06/07/quickly-change-centos-networking/</link>
      <pubDate>Sun, 07 Jun 2015 14:44:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/07/quickly-change-centos-networking/</guid>
      <description>When adding the existing qcow2 files to a new machine, following steps needs to be done to enable the new configuration for the networking:
Change udev rules Change the eth1 to eth0, and disable the previous defined eth0:
[root@CentOSVM1 ~]# cat /etc/udev/rules.d/70-persistent-net.rules # This file was automatically generated by the /lib/udev/write_net_rules # program, run by the persistent-net-generator.rules rules file. # # You can modify it, as long as you keep each rule on a single # line, and change only the value of the NAME= key.</description>
    </item>
    
    <item>
      <title>Chef For Deploying OpenStack</title>
      <link>http://purplepalmdash.github.io/2015/06/01/chef-for-deploying-openstack/</link>
      <pubDate>Mon, 01 Jun 2015 11:19:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/01/chef-for-deploying-openstack/</guid>
      <description>Following article records all of the steps for using chef for deploying OpenStack.
Refers to:
http://ehaselwanter.com/en/blog/2014/10/15/deploying-openstack-with-stackforge-chef-zero-style/
Change vbox files Edit the Vagrantfile for bring up the vbox, then startup the machine, modify its content , save it.
$ vim Vagrantfile # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant::Config.run do |config| config.vm.box = &amp;quot;Trusy64&amp;quot; config.vm.box_url = &amp;quot;http://xxx.xxx.xxx.xxx/opscode_ubuntu-14.04_chef-provisionerless.box&amp;quot; config.vm.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, 1024] end  Login to the running machine and modify its default repository from official to local repository.</description>
    </item>
    
    <item>
      <title>Use apt-cacher For Speeding Up Deployment</title>
      <link>http://purplepalmdash.github.io/2015/05/23/use-apt-cacher-for-speeding-up-deployment/</link>
      <pubDate>Sat, 23 May 2015 08:27:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/23/use-apt-cacher-for-speeding-up-deployment/</guid>
      <description>Installation Install apt-cacher via following command:
$ sudo apt-get install apt-cacher  Choose &amp;ldquo;Daemon&amp;rdquo; When you see following picture:
Configuration Make sure the configuration AUTOSTART=1 in /etc/default/apt-cacher.
Enable allowed_hosts=* in /etc/apt-cacher/apt-cacher.conf.
Now restart the machine, and check the apt-cacher service via following command:
$ ps -ef | grep apt www-data 825 1 0 20:34 ? 00:00:00 /usr/bin/perl /usr/sbin/apt-cacher -R 3 -d -p /var/run/apt-cacher.pid $ sudo netstat -anp | grep 3142 tcp6 0 0 :::3142 :::* LISTEN 825/perl  Now when you setup the machines, point the http-proxy into this machine, it will automatically cache the packages.</description>
    </item>
    
    <item>
      <title>Setup CentOS6/7 Local Repository</title>
      <link>http://purplepalmdash.github.io/2015/05/20/setup-centos6-slash-7-local-repository/</link>
      <pubDate>Wed, 20 May 2015 11:32:56 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/20/setup-centos6-slash-7-local-repository/</guid>
      <description>For speeding up the deployment, I have to setup the local repository for CentOS6/7, following is the steps for setting up such two repositories.
The steps are followed by following URL:
https://support.opennodecloud.com/wiki/doku.php?id=usrdoc:os:repomirror
# cd /etc/yum.repos.d/ # curl -O https://copr.fedoraproject.org/coprs/baurzhanm/mrepo/repo/epel-6/baurzhanm-mrepo-epel-6.repo # vim baurzhanm-mrepo-epel-6.repo # yum update # yum -y install screen lftp httpd mrepo # vim mrepo.conf ### Configuration file for mrepo ### The [main] section allows to override mrepo&#39;s default settings ### The mrepo-example.</description>
    </item>
    
    <item>
      <title>Setup Local Repository</title>
      <link>http://purplepalmdash.github.io/2015/05/19/setup-local-repository/</link>
      <pubDate>Tue, 19 May 2015 11:57:19 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/19/setup-local-repository/</guid>
      <description>Ubuntu After using apt-mirror syncing all of the packages from the repository website, setup a ftp site:
# apt-get install -y proftpd # cat conf.d/anonymous.conf &amp;lt;Anonymous ~ftp&amp;gt; User ftp Group nogroup UserAlias anonymous ftp RequireValidShell off # MaxClients 10 &amp;lt;Directory *&amp;gt; &amp;lt;Limit WRITE&amp;gt; DenyAll &amp;lt;/Limit&amp;gt; &amp;lt;/Directory&amp;gt; &amp;lt;/Anonymous&amp;gt; # mount --bind /mnt/myrepo/mirror/mirrors.aliyun.com/ /srv/ftp/ # service proftpd restart  Now Open your browser to ftp://Your_URL/, you will find the repository available.</description>
    </item>
    
    <item>
      <title>Setup the Cobbler Server</title>
      <link>http://purplepalmdash.github.io/2015/05/14/setup-the-cobbler-server/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/14/setup-the-cobbler-server/</guid>
      <description>The reference material is mainly from:
http://www.cobblerd.org/manuals/quickstart/
Prepartion First install the CentOS6.6, choose the basic server.
After installation, update to the latest system via yum -y update.
Disable the SELinux via:
# vim /etc/selinux/config #SELINUX=enforcing │ SELINUX=disabled  Then restart the compute.
Add epel repository:
# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo # yum update # yum install -y cobbler cobbler-web  Configuration Change the default password:
# openssl passwd -1 │ Password: │ Verifying - Password: │ igaowugoauwgoueougo [root@CobblerServer ~]# vim /etc/cobbler/settings default_password_crypted: &amp;quot;agowuoguwoawoguwoe&amp;quot;  Set the Server and Next_Server to the specified IP Address, DO NOT use 0.</description>
    </item>
    
    <item>
      <title>Automatically Recover SSH Connection</title>
      <link>http://purplepalmdash.github.io/2015/05/11/automatically-recover-ssh-connection/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/11/automatically-recover-ssh-connection/</guid>
      <description>Thanks for the Great File Wall, my ssh connection to my vps is not stable, so I use following scripts for automatically maintain the ssh conneciton, once the connection down, it will restart immediately.
$ vim autokeepssh.sh #!/bin/bash while [ &#39;&#39; == &#39;&#39; ] do # Use ssh -R for reverse ssh ssh_d_process_num=`ps aux|grep -E &#39;ssh -NfR&#39; |grep -v grep |wc -l` if [ &amp;quot;$ssh_d_process_num&amp;quot; == &amp;quot;0&amp;quot; ]; then # Automatically start the ssh proxy echo &amp;quot;Autostart!</description>
    </item>
    
    <item>
      <title>Setup PXE Server</title>
      <link>http://purplepalmdash.github.io/2015/05/11/setup-pxe-server/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/11/setup-pxe-server/</guid>
      <description>This article record how to setup the pxe server and setup the CentOS quick installation repository, using it we could quickly setup the CentOS on new machine.
Installation To install following packages for preparing the environment:
$ sudo apt-get install dnsmasq tftpd-hpa apache2 system-config-kickstart  Configure the apache2&amp;rsquo;s default configuration file:
$ sudo vim /etc/apache2/sites-enabled/000-default.conf DocumentRoot /var/www/  Configure the dnsmasq via following command:
$ sudo vim /etc/dnsmasq.conf bogus-priv filterwin2k interface=eth0 domain=nova.</description>
    </item>
    
    <item>
      <title>Tips For Setting Up CentOS Local Repository</title>
      <link>http://purplepalmdash.github.io/2015/05/11/tips-for-setting-up-centos-local-repository/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/11/tips-for-setting-up-centos-local-repository/</guid>
      <description>The material is learned from:
http://paulcodr.co/blog/2015/yumrepo-server-local/
Steps Local ISO Preparation:
[root@localhost ~]# mkdir isos bin [root@localhost ~]# ls isos CentOS-6.6-x86_64-bin-DVD1.iso CentOS-6.6-x86_64-bin-DVD2.iso  Download the scripts:
# cd bin # wget http://paulcodr.co/download/yum-scripts.zip # unzip yum-scripts.zip Archive: yum-scripts.zip creating: yum-scripts/ inflating: yum-scripts/yum-create-server-centos6.6.sh inflating: yum-scripts/yum-rsync-minimal-centos6.6.sh  Change the priviledges:
[root@localhost bin]# chown -R root:root /root/isos [root@localhost bin]# chmod 750 -R /root/bin  Execute the script:
[root@localhost bin]# mv yum-scripts/* ./ [root@localhost bin]# ls yum-create-server-centos6.</description>
    </item>
    
    <item>
      <title>Building ChromeOS Steps</title>
      <link>http://purplepalmdash.github.io/2015/05/05/building-chromeos-steps/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/05/building-chromeos-steps/</guid>
      <description>My aim is for enable the bluetooth Networking in my Chromebook, AKA BNEP, so first I have to build out some experimentation platforms for investigation, following is the steps for building out the ChromeOS Images and let it run under kvm based virtual machine.
Prerequistites I use a 6-Giga-Byte memory machine for building, first install following packages:
$ sudo apt-get install git-core gitk git-gui subversion curl  Since I am in china mainland, the connection to googlesourcecode is blocked by Great Fire Wall(Fuck you!</description>
    </item>
    
    <item>
      <title>Use reave for testing wireless security</title>
      <link>http://purplepalmdash.github.io/2015/04/28/use-reave-for-testing-wireless-security/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/28/use-reave-for-testing-wireless-security/</guid>
      <description> For those who want to test the wireless security(Wireless Router), following is a serial of tools for automatically scan the WIFI and try to find the entrance to inner network.
Preparation Install following packages:
$ sudo apt-get install macchanger aircrack-ng reaver  Testing Suppose the wireless port in our equipment is mlan0, following are the detailed steps:
# macchanger -m 00:11:22:33:44:55 mlan0 # airmon-ng start mlan0 # ifconfig mlan0mon down # macchanger -m 00:11:22:33:44:55 mlan0mon # ifconfig mlan0mon up # airodump-ng mlan0mon # reaver -i mlan0mon -b xx:xx:xx:xx:xx -vv -dh-small  </description>
    </item>
    
    <item>
      <title>Add SBH BlueTooth to Linux</title>
      <link>http://purplepalmdash.github.io/2015/03/27/add-sbh-bluetooth-to-linux/</link>
      <pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/27/add-sbh-bluetooth-to-linux/</guid>
      <description>I bought a SBH Sony Bluetooth headset, following is the steps for adding it to system.
Ubuntu Installation Install bluetooth related software:
$ sudo apt-get install -y blueman-manager bluetooth $ vim ~/.config/awesome/rc.lua autorunApps = { --......... &amp;quot;blueman-manager&amp;quot;, &amp;quot;fcitx&amp;quot;,  Add Device Use Blueman for adding the equiment, first click the SBH headset to let it enter discover mode, also in blueman we enable the discover mode too, when setup the equipment, the code you have to enter is 0000.</description>
    </item>
    
    <item>
      <title>Build SS for WJ</title>
      <link>http://purplepalmdash.github.io/2015/03/08/build-ss-for-wj/</link>
      <pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/08/build-ss-for-wj/</guid>
      <description>For I have a CentOS host machine on DO, I started to build a SS server which could make use of the freedom network in DO, following is the steps.
Python-pip Python-pip located in epel repository, so first we have to enable epel repository:
# rpm -iUvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm # vim /etc/yum.repos.d/epel.repo enable=1 # yum -y update  Install python-pip via:
# yum install python-pip  SS Install ShadowSocks via:</description>
    </item>
    
    <item>
      <title>Switch Back To Arch</title>
      <link>http://purplepalmdash.github.io/2015/02/16/switch-back-to-arch/</link>
      <pubDate>Mon, 16 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/16/switch-back-to-arch/</guid>
      <description>Since I Moved the city and changed the job, my laptop had to be returned to company, so I bought another HP 8460P which is almost the same as my old one. But this one got i7 4 core CPU and more powerful.
First I installed Ubuntu and start playing virtualization on it, after successfully installed OpenStack and OpenContrail I started to think change back to my archLinux, so following is the steps.</description>
    </item>
    
    <item>
      <title>Tips for building opencontrail on Ubuntu14.04</title>
      <link>http://purplepalmdash.github.io/2015/02/09/tips-for-building-opencontrail-on-ubuntu14-dot-04/</link>
      <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/09/tips-for-building-opencontrail-on-ubuntu14-dot-04/</guid>
      <description>Dependencies Install the following packages to make scons getting through:
$ sudo apt-get install -y scons git python-lxml wget gcc patch make unzip flex bison g++ libssl-dev autoconf automake libtool pkg-config vim python-dev python-setuptools libprotobuf-dev protobuf-compiler libsnmp-python libboost-dev libboost-chrono-dev libboost-date-time-dev libboost-filesystem-dev libboost-program-options-dev libboost-python-dev libboost-regex-dev libboost-system-dev libcurl4-openssl-dev google-mock libgoogle-perftools-dev liblog4cplus-dev libtbb-dev libhttp-parser-dev libxml2-dev libicu-dev $ sudo apt-get install libxml2-dev $ sudo apt-get install libboost-dev $ sudo apt-get install libboost-filesystem-dev $ sudo apt-get install libboost-program-options-dev $ sudo apt-get install libboost-system-dev libboost-regex-dev libboost-python-dev libboost-chrono-dev libtbb-dev  Then the linking should be OK.</description>
    </item>
    
    <item>
      <title>Build Pidgin And WebQQ</title>
      <link>http://purplepalmdash.github.io/2015/02/06/build-pidgin-and-webqq/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/06/build-pidgin-and-webqq/</guid>
      <description>Strangely my OpenSuse&amp;rsquo;s official installation version&amp;rsquo;s pidgin doesn&amp;rsquo;t support webqq plugins. So I have to build from source and let it run as a webQQ&amp;rsquo;s version of pidgin.
Getting Source. First download the source code from:
http://sourceforge.net/projects/pidgin/files/Pidgin/2.10.11/pidgin-2.10.11.tar.bz2/download?accel_key=62%3A1423272982%3Ahttp%253A//www.pidgin.im/download/source/%3A20b420a2%24f93cd8a6095e965a3448df4a97a1c4786bf0a085&amp;amp;click_id=b8d33c98-ae69-11e4-8d6d-0200ac1d1d8d&amp;amp;source=accel
Install related packages:
$ sudo zypper in intltool $ sudo zypper in gtk3-devel $ sudo zypper in gtk2-devel $ sudo zypper in gstreamer-devel $ sudo zypper in libidn-devel $ sudo zypper in meanwhile-devel $ sudo zypepr in libavahi-devel $ sudo zypper in libavahi-glib-devel $ sudo zypper in libgnutls-openssl-devel $ sudo zypper in tcl-devel $ sudo zypper in tk-devel $ sudo zypper in gtkspell-devel  Configure pidign via:</description>
    </item>
    
    <item>
      <title>Install GitLab And Gogs</title>
      <link>http://purplepalmdash.github.io/2015/02/03/install-gitlab-and-gogs/</link>
      <pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/03/install-gitlab-and-gogs/</guid>
      <description>For sharing the git managed codes, we need setup the online repositories, we got two options, one is for gitlab, the other is for gogs.
Gitlab The reference URL is listed as in:
https://www.digitalocean.com/community/tutorials/how-to-set-up-gitlab-as-your-very-own-private-github-clone
But following the tutorial you will met the problem, following records the solution:
$ sudo -u git -H bundle install --deployment --without development test postgres Could not find modernizr-2.6.2 in any of the sources $ cd /home/git/gitlab $ wget http://rubygems.</description>
    </item>
    
    <item>
      <title>Prison-Break For Something</title>
      <link>http://purplepalmdash.github.io/2015/02/03/prison-break-for-something/</link>
      <pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/03/prison-break-for-something/</guid>
      <description>I&amp;rsquo;ve worked two days on prison-break something, this will greatly improve my working efficiency. There are so many steps for recording, so I will detailed described them in following parts.
Single MOde In Single Mode you could get an terminal with root then you could do anything you want, simply pass init=/bin/bash in Grub then you could do anything.
Question: why Unix-like system enable this command?
Answer: In Unix-like systems, init is the first process to be run, and the ultimate ancestor of all processes ever run.</description>
    </item>
    
    <item>
      <title>Using Teamviewer</title>
      <link>http://purplepalmdash.github.io/2015/01/28/using-teamviewer/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/28/using-teamviewer/</guid>
      <description>Installation CentOS Download the corresponding rpm files, install it via sudo yum install ******.rpm, this will automatically install the dependencies and also install the teamviewer for your centos system.
Ubuntu Only working for 14.04:
First you have to add i686(i386) supporting:
$ dpkg --add-architecture i386 $ apt-get update  Then you have to downloaded the following packages rather than the offcial packages(x64 or i386):
http://download.teamviewer.com/download/teamviewer_linux.deb
Install this teamviewer_linux.deb, and you got teamviewer running on your system.</description>
    </item>
    
    <item>
      <title>Trying Docker In Company</title>
      <link>http://purplepalmdash.github.io/2015/01/26/trying-docker-in-company/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/26/trying-docker-in-company/</guid>
      <description>Installation Install docker via:
$ sh -c &amp;quot;wget -qO- https://get.docker.io/gpg | apt-key add -&amp;quot; $ sh -c &amp;quot;echo deb http://get.docker.io/ubuntu docker main\ &amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot; $ apt-get update $ apt-get install lxc-docker $ which docker /usr/bin/docker  Very Beginning Docker pull the docker.cn packages back, the speed is around 500K/
$ docker pull docker.cn/docker/ubuntu  Run into an instance:
# docker run -i -t docker.cn/docker/ubuntu /bin/bash root@3ad7689e600a:/# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 06:27 ?</description>
    </item>
    
    <item>
      <title>Using New DO System</title>
      <link>http://purplepalmdash.github.io/2015/01/26/using-new-do-system/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/26/using-new-do-system/</guid>
      <description>Since the coreOS met some critical errors, I have to re-construct the DO System using CentOS. So I destroyed the old CoreOS machine, runs CentOS.
Configure Install packages Update and install vim
$ yum update $ yum install vim  Add Swap 512M is not enough for playing, enlarge the swapfile.
# dd if=/dev/zero of=/swapfile bs=1M count=1024 # chmod 600 /swapfile # mkswap /swapfile $ sudo vim /etc/systemd/system/swap.service [Unit] Description=Turn on swap [Service] Type=oneshot Environment=&amp;quot;SWAPFILE=/swapfile&amp;quot; RemainAfterExit=true ExecStartPre=/usr/sbin/losetup -f ${SWAPFILE} ExecStart=/usr/bin/sh -c &amp;quot;/sbin/swapon $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)&amp;quot; ExecStop=/usr/bin/sh -c &amp;quot;/sbin/swapoff $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)&amp;quot; ExecStopPost=/usr/bin/sh -c &amp;quot;/usr/sbin/losetup -d $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)&amp;quot; [Install] WantedBy=multi-user.</description>
    </item>
    
    <item>
      <title>Install OpenFire For LAN Chat</title>
      <link>http://purplepalmdash.github.io/2015/01/23/install-openfire-for-lan-chat/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/23/install-openfire-for-lan-chat/</guid>
      <description>In order to support chat in LAN, install Openfire, following are the steps for installing and configurating.
Local Machine $ wget $ apt-get update &amp;amp;&amp;amp; apt-get install default-jre  Since another people is also installing this. Change it to DigitalOcean.
Dockerize Openfire Get the image via:
docker pull sameersbn/openfire  Since the installation is already done, docker ignored&amp;hellip;</description>
    </item>
    
    <item>
      <title>Install Chrome On CentOS</title>
      <link>http://purplepalmdash.github.io/2015/01/21/install-chrome-on-centos/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/21/install-chrome-on-centos/</guid>
      <description>Until now I failed in installing chrome on CentOS, for the libstdc++ version is too old in the machine, but record the steps here, later I will continue to work on this issue.
Repository Preparation Add following file in to your /etc/yum.repos.d:
~% cat /etc/yum.repos.d/google-chrome.repo [google-chrome] name=google-chrome baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch enabled=1 gpgcheck=1 gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub  Now install the chrome via:
$ sudo yum install google-chrome-stable Processing Dependency: libstdc++.so.6(GLIBCXX_3.4.15)(64bit) for package: google-chrome-stable-40.0.2214.91-1.x86_64 --&amp;gt; Finished Dependency Resolution Error: Package: google-chrome-stable-40.</description>
    </item>
    
    <item>
      <title>Using iMacros For Automatically Access Mail And OA</title>
      <link>http://purplepalmdash.github.io/2015/01/21/using-imacros-for-automatically-access-mail-and-oa/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/21/using-imacros-for-automatically-access-mail-and-oa/</guid>
      <description>First we should install imacros from firefox&amp;rsquo;s Add-Ons, after installation, we will restart the firefox and let it run.
Click the icon of imacros, the window will be available at the left side of the browser.
Rec-&amp;gt; Record for recording the steps
Then do what you want to do in browser.
Save the current macros into another name, next time if you want to re-do the operations, simply click this saved imacros, then everything is OK.</description>
    </item>
    
    <item>
      <title>Trouble-Shooting On Building Awesome</title>
      <link>http://purplepalmdash.github.io/2015/01/20/trouble-shooting-on-building-awesome/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/20/trouble-shooting-on-building-awesome/</guid>
      <description>When building Awesome following the tutorial of following URL, I met following error:
I installed xcb-proto, but libxcb all the same print &amp;quot;No package &#39;xcb-proto&#39; found&amp;quot;  So the trouble shooting should be done like following, first we found the directory which contains xcb-proto.pc via:
$ cd /usr/ $ find . -name &amp;quot;xcb-proto.pc&amp;quot;  The result indicates this file locates in the /usr/lib/pkgconfig.
Easily we add this directory into our PKG_CONFIG_PATH, via following commands:</description>
    </item>
    
    <item>
      <title>Get Alive Machine In LAN</title>
      <link>http://purplepalmdash.github.io/2014/12/29/get-alive-machine-in-lan/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/29/get-alive-machine-in-lan/</guid>
      <description>For searching all of the alive machine in the LAN, we could use nmap for searching.
Install the nmap via:
sudo pacman -S nmap  Scan the lan for living host:
# nmap -sP 10.0.0.* Starting Nmap 6.47 ( http://nmap.org ) at 2014-12-29 14:25 CST Nmap scan report for www.routerlogin.com (10.0.0.1) Host is up (0.00040s latency). MAC Address: xxx.xxx.xxx.xxx(xxx), Nmap scan report for 10.0.0.20 Host is up (0.00019s latency). MAC Address: xxx.</description>
    </item>
    
    <item>
      <title>Trouble Shooting On Wicd Wireless Connection</title>
      <link>http://purplepalmdash.github.io/2014/12/04/trouble-shooting-on-wicd-wireless-connection/</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/04/trouble-shooting-on-wicd-wireless-connection/</guid>
      <description>Problem Could see the SSID, but could not connect to it.
Trouble Shooting First check the log in /var/log/wicd:
[root@TrustyArch wicd]# cat wicd.log 2014/12/04 20:32:02 :: DHCP connection successful 2014/12/04 20:32:02 :: not verifying 2014/12/04 20:32:02 :: Connecting thread exiting. 2014/12/04 20:32:03 :: Sending connection attempt result success 2014/12/04 20:34:20 :: trying to load backend external 2014/12/04 20:34:20 :: trying to load backend ioctl 2014/12/04 20:34:20 :: WARNING: python-iwscan not found, falling back to using iwlist scan.</description>
    </item>
    
    <item>
      <title>Setup Dev Env On DO</title>
      <link>http://purplepalmdash.github.io/2014/11/28/setup-dev-env-on-do/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/28/setup-dev-env-on-do/</guid>
      <description> Prepare Install the following packages:
$ sudo apt-get install python-virtualenv $ sudo apt-get install ruby-full ruby $ sudo gem install rhc  Since DO&amp;rsquo;s network is pretty good, so it&amp;rsquo;s very swift for developing on it.
TextBlob $ virtualenv venv --python=python2.7 $ . venv/bin/activate $ pip install textblob $ python -m textblob.download_corpora $ pip install flask  </description>
    </item>
    
    <item>
      <title>Moving System on 1T Harddisk(3)</title>
      <link>http://purplepalmdash.github.io/2014/11/22/moving-system-on-1t-harddisk-3/</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/22/moving-system-on-1t-harddisk-3/</guid>
      <description>In fact this series is not only for customization of the surface pro, it becomes the written-tips for what I&amp;rsquo;ve installed on my ArchLinux. So later all of the necessary packages installation I will record them here.
1. postgres
Install via:
sudo pacman -S postgresql  Start postgresql service:
$ sudo systemctl start postgresql  Now begin to configurate the postgres:
$ sudo -i -u postgres [postgres@kkkttt ~]$ initdb --locale en_US.</description>
    </item>
    
    <item>
      <title>GitLab Installation and Configuration</title>
      <link>http://purplepalmdash.github.io/2014/11/21/gitlab-installation-and-configuration/</link>
      <pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/21/gitlab-installation-and-configuration/</guid>
      <description>For sharing the project and holding the status of developing Rohc project, I set this gitlab project.
Installation The detailed guildeline is from following URL:
https://www.digitalocean.com/community/tutorials/how-to-set-up-gitlab-as-your-very-own-private-github-clone
But have some modifications.
Modification Write permission problem:
ERROR: While executing gem ... (Gem::FilePermissionError) You don&#39;t have write permissions for the /usr/local/rvm/gems/ruby  Solved via:
$ sudo chmod -R 777 /usr/local/bin $ sudo chmod -R 777 /usr/local/rvm  We met modernizr missing problem, do following for avoiding this:</description>
    </item>
    
    <item>
      <title>Share Mouse between ArchLinux &amp;amp; Yosemite</title>
      <link>http://purplepalmdash.github.io/2014/11/20/share-mouse-between-archlinux-and-yosemite/</link>
      <pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/20/share-mouse-between-archlinux-and-yosemite/</guid>
      <description>Fixed IP First configure the IP for Yosemite on router, since the Archlinux takes the 221, Yosemite may use 220 for its fixed ip.
ArchLinux Setting I use ArchLinux as the synergy server, so first install synergy via:
$ sudo pacman -S synergy  I want to place Yosemite at the right of the ArchLinux, So just configure the /etc/hosts like following.
$ tail /etc/hosts # For setting Synergy 10.</description>
    </item>
    
    <item>
      <title>Enable Light-Weighted WebServer</title>
      <link>http://purplepalmdash.github.io/2014/11/18/enable-light-weighted-webserver/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/18/enable-light-weighted-webserver/</guid>
      <description>TOP Result Via top we saw:
 2615 mysql 20 0 949.7m 450.7m 0.0 5.7 0:02.62 S mysqld  This caused too much memory be wasted while my blog uses the static pages.
Solution: I will use a light-weighted web-server.
Disable xampp Disble and remove the service of xampp via following command:
[root@kkkktt kkk]# systemctl stop xampp.service [root@kkkktt kkk]# systemctl disable xampp.service Removed symlink /etc/systemd/system/multi-user.target.wants/xampp.service.  lighttpd Install via following command and test its configuration:</description>
    </item>
    
    <item>
      <title>Forward x11 via ssh</title>
      <link>http://purplepalmdash.github.io/2014/11/17/forward-x11-via-ssh/</link>
      <pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/17/forward-x11-via-ssh/</guid>
      <description>Since the 5901 port is forbiddended via administrator of the switch, we have to forward the traffic to remote machine via ssh:
First in our machine type following command:
ssh -L 2333:A:5901 A -l Trusty  This will forward the A machines&amp;rsquo; 5901 to local&amp;rsquo;s 2333 port.
Then use a vncviewer software for accessing local machine&amp;rsquo;s 2333 port:
vncviewer localhost:2333  Notice, the virtualbox&amp;rsquo;s is named to vboxgtk in opensuse.</description>
    </item>
    
    <item>
      <title>Server Performance</title>
      <link>http://purplepalmdash.github.io/2014/11/12/server-performance/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/12/server-performance/</guid>
      <description>Get the UnixBench and run
wget http://byte-unixbench.googlecode.com/files/UnixBench5.1.3.tgz tar xvf UnixBench5.1.3.tgz cd UnixBench ./Run  Result:</description>
    </item>
    
    <item>
      <title>Enable Bluetooth Headset On ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/11/10/enable-bluetooth-headset-on-archlinux/</link>
      <pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/10/enable-bluetooth-headset-on-archlinux/</guid>
      <description>Since my operating system upgraded, I have to re-set my bluetooth headset. I use A2DP via Bluez5/Pulseaudio.
Installation First install following packages:
# pacman -S pulseaudio-alsa bluez bluez-libs bluez-utils  Then start the service via systemd:
# systemctl start bluetooth  Configuration I use an expect script for automatically connect to my MW600 and play:
#!/usr/bin/expect # This script is for automatically scan my bluetooth headset, which is Sony-Errison mw-600 # Timeout should be very short in local # set timeout 3 spawn ssh Trusty@localhost -Y expect { &amp;quot;yes/no&amp;quot; { send &amp;quot;yes\n&amp;quot; exp_continue } &amp;quot;assword&amp;quot; { send &amp;quot;xxxxxxx!</description>
    </item>
    
    <item>
      <title>Setting NFS Server on Ubuntu Container</title>
      <link>http://purplepalmdash.github.io/2014/11/08/setting-nfs-server-on-ubuntu-container/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/08/setting-nfs-server-on-ubuntu-container/</guid>
      <description>Since there are some strange problems in my ArchLinux(Physical Machine), its nfs server will be ignored by the embedded board, while my joggler which runs ubuntu12.04 acts OK. So I try to find a sufficient way for dealing with this issue.
Container Configuration I&amp;rsquo;ve installed Ubuntu_Container which holds 12.04 in my physical machine. So the nfs server would be configured in this container.
$ sudo apt-get update $ sudo apt-get install nfs-kernel-server portmap nfs-common  Then edit the /srv/nfs4, and export its configuration in /etc/exports:</description>
    </item>
    
    <item>
      <title>Automatically Filter SpamBot on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/11/06/automatically-filter-spambot-on-digitalocean/</link>
      <pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/06/automatically-filter-spambot-on-digitalocean/</guid>
      <description>Setup iptables Install iptables-persistent, so that the iptables rules will be saved even reboot the machine:
# apt-get update # apt-get install iptables-persistent  Script for manually add iptables Use following scritp for manually add iptables items:
#!/bin/sh # This script runs once per hour, Directly remove the ips which post comments # more than 4 times per hour. And who comments less than 3 times we should sent # its ip to old ips file.</description>
    </item>
    
    <item>
      <title>Manually delete spam comments for WP</title>
      <link>http://purplepalmdash.github.io/2014/11/06/manually-delete-spam-comments-for-wp/</link>
      <pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/06/manually-delete-spam-comments-for-wp/</guid>
      <description>Login to mysql commandline via:
# mysql -uroot -p mysql&amp;gt; use wordpress ......... Database changed  Display the COLUMNS of wp_comments:
mysql&amp;gt; SHOW COLUMNS FROM wp_comments; +----------------------+---------------------+------+-----+---------------------+----------------+ | Field | Type | Null | Key | Default | Extra | +----------------------+---------------------+------+-----+---------------------+----------------+ | comment_ID | bigint(20) unsigned | NO | PRI | NULL | auto_increment | | comment_post_ID | bigint(20) unsigned | NO | MUL | 0 | | | comment_author | tinytext | NO | | NULL | | | comment_author_email | varchar(100) | NO | MUL | | | | comment_author_url | varchar(200) | NO | | | | | comment_author_IP | varchar(100) | NO | | | | | comment_date | datetime | NO | | 0000-00-00 00:00:00 | | | comment_date_gmt | datetime | NO | MUL | 0000-00-00 00:00:00 | | | comment_content | text | NO | | NULL | | | comment_karma | int(11) | NO | | 0 | | | comment_approved | varchar(20) | NO | MUL | 1 | | | comment_agent | varchar(255) | NO | | | | | comment_type | varchar(20) | NO | | | | | comment_parent | bigint(20) unsigned | NO | MUL | 0 | | | user_id | bigint(20) unsigned | NO | | 0 | | | comment_mail_notify | tinyint(4) | NO | | 0 | | +----------------------+---------------------+------+-----+---------------------+----------------+ 16 rows in set (0.</description>
    </item>
    
    <item>
      <title>Build ChromiumOS</title>
      <link>http://purplepalmdash.github.io/2014/11/05/build-chromiumos/</link>
      <pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/05/build-chromiumos/</guid>
      <description>First Time Build This build failed for I could not get the repository sync.
I setup the environment on 159&amp;rsquo;s /media/nfs:
$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $ export PATH=&amp;quot;$PATH&amp;quot;:`pwd`/depot_tools $ echo $PATH /home/ubuntu/bin:/home/ubuntu/bin:/home/ubuntu/bin:/home/ubuntu/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/media/nfs/ChromiumOS/depot_tools $ cat script.sh #!/bin/sh cat &amp;gt;./sudo_editor&amp;lt;&amp;lt;EOF #!/bin/sh echo Defaults !tty_tickets &amp;gt; $1 echo Defaults timestamp_timeout=180 &amp;gt;&amp;gt; $1 EOF chmod +x ./sudo_editor sudo EDITOR=./sudo_editor visudo -f /etc/sudoers.d/relax_requirements $ export BOARD=x86-generic $ repo init -u https://git.chromium.org/chromiumos/manifest.git $ repo sync  Second Time Build Trusty@Linux59:~/Code/ChromiumOS&amp;gt; pwd /home/Trusty/Code/ChromiumOS Trusty@Linux59:~/Code/ChromiumOS&amp;gt; git clone https://chromium.</description>
    </item>
    
    <item>
      <title>MySQL creashes on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/11/05/mysql-creashes-on-digitalocean/</link>
      <pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/05/mysql-creashes-on-digitalocean/</guid>
      <description>Problem The mysql server always keep crash, with following log under /var/log/mysql/error.log:
141104 23:06:46 InnoDB: Fatal error: cannot allocate memory for the buffer pool  So this is the memory problem, we should allocate more memory for our VPS.
Solution Add swap partition:
First check the swap partition:
root@xxx:/var/log# free -m total used free shared buffers cached Mem: 490 464 25 28 61 172 -/+ buffers/cache: 230 259 Swap: 0 0 0 root@xxx:/var/log# swapon -s Filename Type Size Used Priority  Now create a swapfile:</description>
    </item>
    
    <item>
      <title>Expand storage in 59</title>
      <link>http://purplepalmdash.github.io/2014/10/28/expand-storage-in-59/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/28/expand-storage-in-59/</guid>
      <description>I have 2 Servers in LAB, one had only 120G Harddisk, but with powerful CPU/Memory, the other have larger disk, but CPU/mem are not power enough, thus I use samba for sharing its storage.
The samba server runs:
# cat /etc/issue Red Hat Enterprise Linux Server release 6.3 (Santiago) Kernel \r on an \m  Query if samba installed:
# rpm -qa samba samba-3.5.10-125.el6.i686  Then configure it.
# df -h .</description>
    </item>
    
    <item>
      <title>ShadowSocks on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/10/27/shadowsocks-on-digitalocean/</link>
      <pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/27/shadowsocks-on-digitalocean/</guid>
      <description>Mainly recorded the steps for installation:
# apt-get install python-pip # pip install shadowsocks # vim /etc/shadowsocks.json { &amp;quot;server&amp;quot;:&amp;quot;1xx.xxx.xxx.xxx&amp;quot;, &amp;quot;server_port&amp;quot;:xxxx, &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &amp;quot;local_port&amp;quot;:1080, &amp;quot;password&amp;quot;:&amp;quot;Pass!Pass!Pass&amp;quot;, &amp;quot;timeout&amp;quot;:300, &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;, &amp;quot;fast_open&amp;quot;: false, &amp;quot;workers&amp;quot;: 1 } # apt-get install supervisor # vim /etc/supervisor/conf.d/shadowsocks.conf [program:shadowsocks] command=ssserver -c /etc/shadowsocks.json autorestart=true user=nobody # vim /etc/default/supervisor ulimit -n 51200 # service supervisor start  Then in client you could use a shadownsocks client for connecting to remote servers and enjoy the free internet.</description>
    </item>
    
    <item>
      <title>Install OpenVPN in RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2014/10/21/install-openvpn-in-raspberrypi/</link>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/21/install-openvpn-in-raspberrypi/</guid>
      <description>Packages Raspberry PI runs ArchLinux, first install related packages.
$ sudo pacman -S openvpn $ sudo pacman -S easy-rsa $ sudo pacman -S dnsmasq  openvpn is the OpenVPN&amp;rsquo;s Kernel.
easy-rsa is used for manage the keys.
dnsmasq will acts like the domain name server.
Configuration First Make the directory and copy the easy-rsa&amp;rsquo;s files:
# mkdir /etc/openvpn/easy-rsa [root@alarmpi ~]# cp -r /usr/share/easy-rsa/* /etc/openvpn/easy-rsa [root@alarmpi ~]# ls /etc/openvpn/easy-rsa/ build-ca	build-key-pkcs12 inherit-inter sign-req build-dh	build-key-server list-crl	vars build-inter	build-req	openssl-1.</description>
    </item>
    
    <item>
      <title>Make Videos in Linux</title>
      <link>http://purplepalmdash.github.io/2014/10/21/make-videos-in-linux/</link>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/21/make-videos-in-linux/</guid>
      <description>Capture Window Sometimes we want to record the window operation, we could use gtk-recordMyDesktop for doing this. Open the gtk-recordMyDesktop then select the window, start and it will automatically capture all of your input, and save it to ogg file.
Add Background Music use Mencoder to add a mp3 file as the background of the captured video:
$ mencoder output.ogv -o video_final.ogv -ovc copy -oac copy -audiofile xxx.mp3  Convert Video Formats Using mencoder for convert the ogv to mp4 file:</description>
    </item>
    
    <item>
      <title>Quick-start for setting up WP and VPN Server on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/10/20/quick-start-for-setting-up-wp-and-vpn-server-on-digitalocean/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/20/quick-start-for-setting-up-wp-and-vpn-server-on-digitalocean/</guid>
      <description>Prerequisite First you should check your Linux Version, for this tutorial is only works for ubuntu, that means, if you run archlinux/centos/debian on DigitalOcean, this tutorial won&amp;rsquo;t be fit for your need.
root@justfordemo:~# cat /etc/issue Ubuntu 14.04.1 LTS \n \l  Upgrade to the newest system via:
root@justfordemo:~# apt-get update &amp;amp;&amp;amp; apt-get upgrade  Enter Y if system asks you to confirm.
NGINX and PHP Following commands refers to:</description>
    </item>
    
    <item>
      <title>AutoRestart autrace</title>
      <link>http://purplepalmdash.github.io/2014/10/18/autorestart-autrace/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/autorestart-autrace/</guid>
      <description>autrace is a proxy tool which I used for auto-converting the proxy for cross the firewall, it runs in remote server but sometimes it will runs into crash condition. Following is the command for auto-restart this proxy tool.
$ cat autrace.sh #!/bin/sh while true; do /home/xxxxxxxx/code/autrace -s done  Everytime we run autrace.sh like following:
/home/xxxxx/code/autrace.sh &amp;amp;  thus autrace will automatically be restart if it crashes.</description>
    </item>
    
    <item>
      <title>Ethernet Wakeup</title>
      <link>http://purplepalmdash.github.io/2014/10/18/ethernet-wakeup/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/ethernet-wakeup/</guid>
      <description>Purpose I want to wake up my laotop via RaspberryPi, since Rpi&amp;rsquo;s power consumption is extremely low, so this will greatly save the power for laptop.
Check Status On laptop, type following command to see whether your ethernet card support Wake-On-LAN or not:
[Trusty@~]$ sudo ethtool enp0s25 | grep Wake-on Supports Wake-on: pumbg Wake-on: g  The values define what activity to wake on: p (PHY activity), u (unicast activity), m (multicast activity), b (broadcast activity), a (ARP activity), and g (magic packet activity).</description>
    </item>
    
    <item>
      <title>Linux Tips</title>
      <link>http://purplepalmdash.github.io/2014/10/18/linux-tips/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/linux-tips/</guid>
      <description>1. Know the System Installation Date You can use tune2fs to know the installation date of your Linux System, be ware the /dev/sda[] should be the root partition of your disk. See my following example:
tune2fs -l /dev/sda1 or /dev/sdb1* | grep &#39;Filesystem created:&#39; $ sudo tune2fs -l /dev/sda2 | grep &#39;Filesystem created:&#39; Filesystem created: Mon May 5 17:31:40 2014  2. View Thread Status View the thread status via proc filesystem.</description>
    </item>
    
    <item>
      <title>tftpd on ubuntu</title>
      <link>http://purplepalmdash.github.io/2014/10/18/tftpd-on-ubuntu/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/tftpd-on-ubuntu/</guid>
      <description>For updating the kernel on s3c2440 board, I have to setup the tftpd server.
tftpd server Install tfpd-hpa:
sudo apt-get install tftpd-hpa  Setup the directory name and edit the /etc/default/tftpd-hpa:
root@joggler:/etc# cat /etc/default/tftpd-hpa # /etc/default/tftpd-hpa TFTP_USERNAME=&amp;quot;tftp&amp;quot; TFTP_DIRECTORY=&amp;quot;/media/nfs/rootfs&amp;quot; TFTP_ADDRESS=&amp;quot;0.0.0.0:69&amp;quot; TFTP_OPTIONS=&amp;quot;--secure&amp;quot;  Then restart the server:
service tftpd-hpa restart  Other commands:
service tftpd-hpa status service tftpd-hpa stop service tftpd-hpa start service tftpd-hpa restart service tftpd-hpa force-reload  Testing In the same machine, use following commands for testing the tftpd server(Make sure you have the get.</description>
    </item>
    
    <item>
      <title>Building Android On Server</title>
      <link>http://purplepalmdash.github.io/2014/10/15/building-android-on-server/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/15/building-android-on-server/</guid>
      <description>New LXC Machine Building Android need a Ubuntu machine, so I created the LXC machine which runs Ubuntu.
Install the bootstrap:
zypper in bootstrap  Then create the Ubuntu LXC via:
export LANG=en_US.UTF-8 Linux59:~ # lxc-create -n Ubuntu_Container -t /usr/share/lxc/templates/lxc-ubuntu  Start the container, username and password are ubuntu:
lxc-start -n Ubuntu_Container  Configure the LXC Machine Better we have the static IP, and let the Container startup when machine boot.</description>
    </item>
    
    <item>
      <title>Compare pkg content</title>
      <link>http://purplepalmdash.github.io/2014/09/03/compare-pkg-content/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/09/03/compare-pkg-content/</guid>
      <description>Use dpkg for reading the content and compare with the official ones:
 dpkg -c ../../xxxxx_name.deb | awk &#39;{print $3 $6}&#39; | sort -n  Scripts for listing all of the content in the directory:
for i in `ls *.deb` do echo $i dpkg -c $i done  </description>
    </item>
    
    <item>
      <title>Configure Network in rc.local</title>
      <link>http://purplepalmdash.github.io/2014/08/08/configure-network-in-rc-dot-local/</link>
      <pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/08/08/configure-network-in-rc-dot-local/</guid>
      <description>Following is the configuration of the vlan and whole network:
In rc.local, RHEL.
#!/bin/sh # # This script will be executed *after* all the other init scripts. # You can put your own initialization stuff in here if you don&#39;t # want to do the full Sys V style init stuff. touch /var/lock/subsys/local echo VLAN=yes &amp;gt; /etc/sysconfig/network /sbin/vconfig add eth1 10 /sbin/vconfig add eth1 11 /sbin/vconfig add eth1 12 /sbin/vconfig add eth1 13 /sbin/vconfig add eth1 30 /sbin/vconfig add eth1 40 /sbin/vconfig add eth1 100 /sbin/vconfig add eth1 110 /sbin/vconfig add eth1 120 /sbin/vconfig add eth1 130 /sbin/vconfig add eth1 200 /sbin/ifconfig eth1.</description>
    </item>
    
    <item>
      <title>Moving System on 1T Harddisk(2)</title>
      <link>http://purplepalmdash.github.io/2014/08/08/moving-system-on-1t-harddisk-2/</link>
      <pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/08/08/moving-system-on-1t-harddisk-2/</guid>
      <description>Tips Here are some tips for customize the existing system.
1. Add octopress directory to heroku repository.
Install heroku client tools:
$ yaourt -S heroku-client $ heroku keys:add Found existing public key: /home/Trusty/.ssh/id_rsa.pub Uploading SSH public key /home/Trusty/.ssh/id_rsa.pub... done  Now in the copied octopress directory we could use git push command for pushing our website onto herokuapp.
2. MTP Device
sudo pacman -S libmtp  3. libvirt
sudo pacman -S libvirt  4.</description>
    </item>
    
    <item>
      <title>Moving System On 1T Harddisk </title>
      <link>http://purplepalmdash.github.io/2014/07/31/moving-system-on-1t-harddisk/</link>
      <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/31/moving-system-on-1t-harddisk/</guid>
      <description>Preparation View the newly added harddisk via:
$ fdisk -l Disk /dev/sdb: 931.5 GiB, 1000204886016 bytes, 1953525168 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 4096 bytes I/O size (minimum/optimal): 4096 bytes / 4096 bytes [Trusty@/dev/disk/by-uuid]$ ls -l /dev/disk/by-id total 0 lrwxrwxrwx 1 root root 9 Jul 31 14:50 ata-WDC_WD10JPVX-00JC3T0_WD-WX31A54D4529 -&amp;gt; ../../sdb  Now we know the id of the harddisk, Create a vmdk file which links to this physical disk.</description>
    </item>
    
    <item>
      <title>Writing Style Under Linux</title>
      <link>http://purplepalmdash.github.io/2014/07/31/writing-style-under-linux/</link>
      <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/31/writing-style-under-linux/</guid>
      <description>Writing Use rake new_post for generate a new blog.
Use vim for editing the article:
Building Building the blogs:
Now build successful:
Browsing View the result in browser:</description>
    </item>
    
    <item>
      <title>Upgrade Pidgin For Using Microsoft Lync</title>
      <link>http://purplepalmdash.github.io/2014/06/10/upgrade-pidgin-for-using-microsoft-lync/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/10/upgrade-pidgin-for-using-microsoft-lync/</guid>
      <description>Since company has upgrade the IM tools from office communicator into Lync, thus I have to upgrade the pidgin&amp;rsquo;s plugins for using lynx. Folloing is the tips:
Upgrade SIPE Sipe is installed via yaourt:
# yaourt -S pidgin-sipe  Configure Pidgin Edit the existing account via: Edit-&amp;gt;Preference-&amp;gt;Advanced.
The connection type is auto, the authentication scheme is TLS-DSK.
In the &amp;ldquo;User Agent&amp;rdquo;, insert following:
UCCAPI/15.0.4481.1000 OC/15.0.4481.1000  The detailed &amp;ldquo;User Agent&amp;rdquo; descriptions could be refered to following links:</description>
    </item>
    
    <item>
      <title>Moving From Working PC to Own USB-Disk Based 6</title>
      <link>http://purplepalmdash.github.io/2014/05/26/moving-from-working-pc-to-own-usb-disk-based-6/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/26/moving-from-working-pc-to-own-usb-disk-based-6/</guid>
      <description>Kernel As for i686 only support 4GB at most memory, we have to change the existing memory into a new one. PAE based kernel will support up to 64GB memory, so we upgrade our kernel to this one:
yaourt -S linux-pae  Building will take for a while, two tips is:
1. Change the building directory from TMPDIR=&amp;quot;/tmp&amp;quot; to TMPDIR=/real_file_system, this configuration file is /etc/makepkg.conf.
2. Add the MAKEFLAGS=&amp;quot;-j6&amp;quot;, this will speed-up the building procedure.</description>
    </item>
    
    <item>
      <title>Moving From Working PC to Own USB-Disk Based 5</title>
      <link>http://purplepalmdash.github.io/2014/05/24/moving-from-working-pc-to-own-usb-disk-based-5/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/24/moving-from-working-pc-to-own-usb-disk-based-5/</guid>
      <description>Font Customization Install following fonts:
$ sudo pacman -S wqy-bitmapfont wqy-zenhei ttf-arphic-ukai ttf-arphic-uming ttf-fireflysung  And then for more beautiful font, refer to:
http://kkkttt.github.io/blog/2013/12/25/archlinuxzhong-wen-hua-wen-ti/
VIM Customization Vim is my favorite editor, so maintain a configuration file is necessary for deploying it on various machines.
$ sudo pacman -S ctags  Then copy the default vimrc file from /usr/share/vim74/vimrc_example to your own directory, named it into .vimrc. Add folllowing lines into .</description>
    </item>
    
    <item>
      <title>Moving From Working PC to Own USB-Disk Based 4</title>
      <link>http://purplepalmdash.github.io/2014/05/23/moving-from-working-pc-to-own-usb-disk-based-4/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/23/moving-from-working-pc-to-own-usb-disk-based-4/</guid>
      <description>Writing Blog I use octopress for writing blog, so this time in USB system I also want to enable it.
Edit the /etc/hostname and name my computer into &amp;ldquo;USBArch&amp;rdquo;, because we want to setup the id_rsa.pub in next step.
$ ssh-keygen $ cat ~/.ssh/id_rsa.pub  Copy the content and add it into the [&amp;ldquo;https://github.com/settings/ssh&amp;quot;](&amp;quot;https://github.com/settings/ssh&amp;quot;), Then use command ssh -T git@github.com to verify if you can successfully be authenticated.
$ git clone git@github.</description>
    </item>
    
    <item>
      <title>Moving From Working PC to Own USB-Disk Based 3</title>
      <link>http://purplepalmdash.github.io/2014/05/22/moving-from-working-pc-to-own-usb-disk-based-3/</link>
      <pubDate>Thu, 22 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/22/moving-from-working-pc-to-own-usb-disk-based-3/</guid>
      <description>Trouble Shooting Unfortuately the qemu based pysical disk can&amp;rsquo;t bootup the machine correctly, so I re-intall the sytem on USB-Disk from the scratch. This time the problem appears as another: It can startup the machine, but failed to boot-up in qemu.
So I have to changed to use VirtualBox for booting the system.
Get the disk id via:
$ ls -l /dev/disk/by-id lrwxrwxrwx 1 root root 9 May 22 14:45 usb-ATA_ST980811AS_xxxxxxxx-0:0 -&amp;gt; .</description>
    </item>
    
    <item>
      <title>Moving From Working PC To Own USB-Disk Based</title>
      <link>http://purplepalmdash.github.io/2014/05/21/moving-from-working-pc-to-own-usb-disk-based/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/21/moving-from-working-pc-to-own-usb-disk-based/</guid>
      <description>Background Since I want to hava a usb-based OS which could easily be taken by hand, I took this series for resarching how to finish this aim.
Preparation ArchLinux iso file, USB-3.0 HardDisk, 80GB, later I will use a bigger one.
Qemu Script I use qemu firstly to install the system. following is the configuraton file for qemu-i386:
#!/bin/bash USERID=$(whoami) # Get name of newly created TAP device; see https://bbs.</description>
    </item>
    
    <item>
      <title>Moving From Working PC To Own USB-Disk Based 2</title>
      <link>http://purplepalmdash.github.io/2014/05/21/moving-from-working-pc-to-own-usb-disk-based-2/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/21/moving-from-working-pc-to-own-usb-disk-based-2/</guid>
      <description>Install Software Internet Chromium, we need this browser absolutesly:
$ sudo pacman -S chromium Select 1/8  Oh, we forget install X, so first we will install X:
X Window Install xorg first:
$ sudo pacman -S xorg xorg-xinit  Awesome Window Manager;
$ sudo pacman -S awesome  Edit the .xinitrc file, add following lines:
exec awesome  Necessary video driver:
$ sudo pacman -S xf86-video-intel xf86-video-ati  Continue Internet Firefox, another browser, pidgin, for chatting, thunderbird for email, wget for downloading:</description>
    </item>
    
    <item>
      <title>Using HardDisk For Booting RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2014/05/19/using-harddisk-for-booting-raspberrypi/</link>
      <pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/19/using-harddisk-for-booting-raspberrypi/</guid>
      <description>准备 RaspberryPI, SD卡（4G以上), 移动硬盘，操作系统镜像文件，最好有一个外接供电带电路隔离的USB HUB。 鼠标、键盘等。
用SD卡启动 将SD卡插入电脑，将镜像文件写入到SD卡后，将写好的SD卡插入RaspberryPI，加电开机。各种配置（譬如显存大小，是否启动到X等等）完成之后，进入到Linux桌面。
准备硬盘 将硬盘插入USB口，如果之前有分好区的，可以略过这一节，直接到拷贝至硬盘一节。
在RaspberryPI系统里(wheezy or archLinux)，搜索gparted, 这个工具可以在图形化界面下对硬盘进行分区。
命令行下你可以通过下列命令查看已挂载的存储设备信息：
[root@alarmpi ~]# fdisk -l Disk /dev/mmcblk0: 7.3 GiB, 7822376960 bytes, 15278080 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x00047c7a Device Boot Start End Blocks Id System /dev/mmcblk0p1 8192 122879 57344 c W95 FAT32 (LBA) /dev/mmcblk0p2 122880 15278079 7577600 83 Linux Disk /dev/sda: 465.</description>
    </item>
    
    <item>
      <title>Celery and RabbitMQ on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/05/10/celery-and-rabbitmq-on-archlinux/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/10/celery-and-rabbitmq-on-archlinux/</guid>
      <description>Installation Install and run rabbitmq server via:
$ yaourt rabbitmq $ rabbitmq-server  Install celery in python virtual enviroment:
$ workon venv2 (venv2) $ pip install celery  Run Simple Tasks Following python file, named &amp;ldquo;tasks.py&amp;rdquo; defines two tasks:
from celery import Celery app = Celery(&#39;tasks&#39;, backend=&#39;amqp&#39;, broker=&#39;amqp://&#39;) @app.task(ignore_result=True) def print_hello(): print &#39;hello there&#39; @app.task def gen_prime(x): multiples = [] results = [] for i in xrange(2, x+1): if i not in multiples: results.</description>
    </item>
    
    <item>
      <title>Wake On LAN</title>
      <link>http://purplepalmdash.github.io/2014/05/08/wake-on-lan/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/08/wake-on-lan/</guid>
      <description>See if your equipment support &amp;ldquo;Wake On LAN&amp;rdquo; feature:
$ ethtool enp0s25 | grep &amp;quot;Wake&amp;quot; Cannot get wake-on-lan settings: Operation not permitted  If you got this feature, then install wol:
$ pacman -S wol  Record the mac address of your equipment which you want to wake up, in a living machine, if you want to wake it, simply use following command:
# wol -i HOSTNAME_OR_IP MACADDRESS  The next consideration is, how to keep a wake-up equipment 24-hours, I suggest you use BeagleBone or Raspberry PI, or you can research how to use arduino and write your own applications.</description>
    </item>
    
    <item>
      <title>SD Card Migration</title>
      <link>http://purplepalmdash.github.io/2014/05/02/sd-card-migration/</link>
      <pubDate>Fri, 02 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/02/sd-card-migration/</guid>
      <description>Following are the tips for operating a SD card under Linux.
###Backup SD Card We can use dd for backup sd card into an image file.
dd if=/dev/mmcblk0 of=Your_Image_Name.img bs=1M  You need to wait for a moment until all of the data dump working done.
###Write Into SD Card Also use dd for writing the image file into the SD card:
dd if=Your_Image_Name.img os=/dev/mmcblk0 bs=1M  Make sure your SD Card&amp;rsquo;s volumn is bigger than the image file.</description>
    </item>
    
    <item>
      <title>Deploy XAMPP On ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/04/23/deploy-xampp-on-archlinux/</link>
      <pubDate>Wed, 23 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/23/deploy-xampp-on-archlinux/</guid>
      <description>###Installation On ArchLinux, Install xampp via Yaourt:
yaourt xampp  After installation, you will find the default xampp located in &amp;ldquo;/opt/lampp&amp;rdquo;. Start/Stop/Restart the xampp via:
/opt/lampp/lampp start/stop/restart  ###Adjustment Enable the security via:
/opt/lampp/lampp security  Then you have to use username and password for accessing &amp;ldquo;http://localhost&amp;quot;, the default username is lampp, password is what you selected.
If you want to add your own Directory, add following lines into &amp;ldquo;/opt/lampp/etc/httpd.</description>
    </item>
    
    <item>
      <title>Automatically Mount in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/04/16/automatically-mount-in-archlinux/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/16/automatically-mount-in-archlinux/</guid>
      <description>Use udisk/udisk2/udiskie for automatically mount usb disks.
	pacman -S udisk udisk2 udiskie  Add following line into the .xinitrc:
	udiskie -2 --tray &amp;amp;  If you want to umount all media with the command:
	udiskie-umount -a  umount speicified disk partition:
	udiskie-umount /media/MY_USB_DRIVE  </description>
    </item>
    
    <item>
      <title>Switch To ZSH</title>
      <link>http://purplepalmdash.github.io/2014/04/14/switch-to-zsh/</link>
      <pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/14/switch-to-zsh/</guid>
      <description>###Installation In ArchLinux, install zsh via:
	pacman -S zsh zsh-doc  Duplicate the .bashrc to .zshrc
	cp ~/.bashrc ~/.zshrc  But notice, when using zsh, we should use following command under zshh:
	rake new_post[&amp;quot;Switch To ZSH&amp;quot;] to rake new_post\[&amp;quot;Switch To ZSH&amp;quot;\]  Or, we can use noglob in zsh specified file .zshrc
	alias rake=&#39;noglob rake&#39;  ###Setting More settings on .zshrc:
# Use prompt -l you will see all of the prompt.</description>
    </item>
    
    <item>
      <title>Updating apache configuration</title>
      <link>http://purplepalmdash.github.io/2014/03/11/updating-apache-configuration/</link>
      <pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/11/updating-apache-configuration/</guid>
      <description>Due to ArchLinux&amp;rsquo;s &amp;ldquo;pacman -Syu &amp;ndash;noconfirm&amp;rdquo;, My apache upgraded from 2.2 to 2.4, thus the configuration file won&amp;rsquo;t work for the new version. When using &amp;ldquo;systemctl restart httpd.service&amp;rdquo;, it complains some module won&amp;rsquo;t be loaded. For solving this problem, first make sure you upgraded to the newest version, then go to directory of &amp;ldquo;/etc/httpd/conf&amp;rdquo;, backup your own httpd.conf, then move the httpd.conf.pacnew into httpd.conf, then restart the httpd.service. The configuration of the httpd.</description>
    </item>
    
    <item>
      <title>Linux Container on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/03/07/linux-container-on-archlinux/</link>
      <pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/07/linux-container-on-archlinux/</guid>
      <description>Install lxc on ArchLinux:
	$ sudo pacman -S lxc  After installation, we can check Linux distribution&amp;rsquo;s kernel support for LXC, use lxc-checkconfig to view: 	all of the configurations will be listed here  Create a Ubuntu Server LXC Virtual Computer System: </description>
    </item>
    
    <item>
      <title>rip mp3 under ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/02/25/rip-mp3-under-archlinux/</link>
      <pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/02/25/rip-mp3-under-archlinux/</guid>
      <description>First you have to install sound-juicer, by:
	sudo pacman -S sound-juicer  Run &amp;ldquo;sound-juicer&amp;rdquo; will call the sound-juicer out, remember the pulse-audio should be started before the sound-juicer is called.
On start, sound juicer will automatically scan the CD-ROM, and retrieve back the track listing, this will take for a while. Sorry, failed. &amp;hellip;
goobox is only a CD Player
grip is good, just use it for cd mp3 gripping.</description>
    </item>
    
    <item>
      <title>Install parole in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/01/05/install-parole-in-archlinux/</link>
      <pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/05/install-parole-in-archlinux/</guid>
      <description>Just 2 steps:
	$ sudo pacman -S parole $ sudo pacman -S gst-libav gst-plugins-bad gst-plugins-ugly gst-plugins-base xulrunner  </description>
    </item>
    
    <item>
      <title>Use RaspberryPI as a file server</title>
      <link>http://purplepalmdash.github.io/2013/12/30/use-raspberrypi-as-a-file-server/</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/30/use-raspberrypi-as-a-file-server/</guid>
      <description>###Preparation Mount the partition automatically, add following lines into the /etc/fstab:
	/dev/sda3	/media/ntfs ntfs-3g permissions,locale=en_US.utf8 0	2  I decide to use samba to share the files, so I have to install samba
	apt-get install samba  The samba server will start automatically, but we have to configure it to adapte to our situation.
Add the configuration to the samba config file:
	/etc/samba/smb.conf [raspshare] comment = raspberry PI Share path = /media/ntfs valid users = Trusty public = no writable = yes printable = no create mask = 0765  Restart the samba server</description>
    </item>
    
    <item>
      <title>Little tricky on SPI</title>
      <link>http://purplepalmdash.github.io/2013/12/29/little-tricky-on-spi/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/little-tricky-on-spi/</guid>
      <description>接着上一个日志来，玩一个小tricky，通过SPI总线自己想输入的字符。
主机端，添加下列头文件 #include  这使得可以使用strcpy等函数。
重写transfer()函数
static void transfer_mine(int fd, char *buf) { int ret; uint8_t tx[140]; int len = strlen(buf)+1; memcpy(tx, buf, strlen(buf)+1); tx[strlen(tx)] = &#39;\n&#39;; uint8_t rx[ARRAY_SIZE(tx)] = {0, }; struct spi_ioc_transfer tr = { .tx_buf = (unsigned long)tx, .rx_buf = (unsigned long)rx, //.len = ARRAY_SIZE(tx), .len = len, .delay_usecs = delay, .speed_hz = speed, .bits_per_word = bits, }; ret = ioctl(fd, SPI_IOC_MESSAGE(1), &amp;amp;tr); if (ret &amp;lt; 1) pabort(&amp;quot;can&#39;t send spi message&amp;quot;); }  在main()函数里，改写调用的方式：</description>
    </item>
    
    <item>
      <title>SPI连接raspberryPI和Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/29/spilian-jie-raspberrypihe-arduino/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/spilian-jie-raspberrypihe-arduino/</guid>
      <description>下面是使用SPI在RaspberryPI和Arduino Nano w之间进行双机通信的一个例子。借助它可以很好的理解SPI的工作原理。
###背景知识 RaspberryPI GPIO布局图：
从图中我们可以看到，RaspberryPI上与SPI通信相关的主要是GPIO 10（MOSI), GPIO 9(MISO)和GPIO 11(SCLK).
Arduino布局图：
SPI: 10 (SS), 11 (MOSI), 12 (MISO), 13 (SCK). These pins support SPI communication using the SPI library. SS代表Slava Select.
事实上我们要使用的仅仅是11/12/13三个口而已。
###连线图 如下图进行连线，简单来说，R(10 MOSI)-&amp;gt;A(12 MISO), R(9, MISO)-&amp;gt;A(11, MOSI), R(11, SCLK) -&amp;gt;A(13, SCK)：
###Arduino端程序
// Written by Nick Gammon // February 2011 /** * Send arbitrary number of bits at whatever clock rate (tested at 500 KHZ and 500 HZ).</description>
    </item>
    
    <item>
      <title>ArchLinux中文化问题</title>
      <link>http://purplepalmdash.github.io/2013/12/25/archlinuxzhong-wen-hua-wen-ti/</link>
      <pubDate>Wed, 25 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/25/archlinuxzhong-wen-hua-wen-ti/</guid>
      <description>本文将涉及到ArchLinux下中文化问题，主要是关于终端字符和vim中代码格式的细调工作。
###Vim 配置 ####Colorscheme配置：
下载几个美观的主题： solarized: https://github.com/altercation/vim-colors-solarized
molokai: https://github.com/tomasr/molokai
phd: http://www.vim.org/scripts/script.php?script_id=3139
将其解压开后，拷贝到~/.vim/colors，然后修改~/.vimrc:
	set background=dark &amp;quot;set background=bright &amp;quot;colorscheme solarized colorscheme molokai  ####Vim字体配置：
Consolas是一种专门为编程人员设计的字体，这一字体的特性是所有字母、数字与符号均能非常容易辨认，而且所有字符都具有相同的宽度，让编人员看着更舒服。但我们用Consolas在显示程序源码时，不可避免要使用中文注释。而Consolas不支持中文，因此中文默认是使用宋体显示的。当使用10点大小的时候，中文就模糊不清了。如果采用斜体显示注释的话，宋体就更加显得支离破碎。
在中文显示上，雅黑字体确实不错，但雅黑不是等宽字体，不能用于源码显示。
使用字体工具将雅黑和Consolas集成在一起后，程序员就可以在Linux环境下的源码中看到优秀的中文显示效果。
下载地址在 :
http://dl.dbank.com/c01bo3a1eo
https://code.google.com/p/uigroupcode/downloads/detail?name=YaHei.Consolas.1.12.zip&amp;amp;can=2&amp;amp;q=
解压缩后，运行以下命令：
	sudo mkdir -p /usr/share/fonts/vista sudo cp YaHei.Consolas.1.12.ttf /usr/share/fonts/vista/  更改权限:
	sudo chmod 644 /usr/share/fonts/vista/*.ttf  安装字体:
	cd /usr/share/fonts/vista/ sudo mkfontscale sudo mkfontdir sudo fc-cache -fv  ###终端字体配置 更改终端模拟器的字体为Yahei Consolas Hybrid即可 gvim中字体设置：
	set guifont=YaHei\ Consolas\ Hybrid\ 11.</description>
    </item>
    
    <item>
      <title>Setup Wordpress on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2013/12/23/setup-wordpress-on-ubuntu/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/23/setup-wordpress-on-ubuntu/</guid>
      <description>###Material Just some items on how to setup a wordpress website on Ubuntu12.04 and Ubuntu13.04.
The tutorial for setting up wordpress on Ubuntu12.04 is located at:
https://www.digitalocean.com/community/articles/how-to-install-wordpress-on-ubuntu-12-04
And a tutorial for setting up LAMP server on Ubuntu12.04 is located at:
https://www.digitalocean.com/community/articles/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu
###TroubleShotting I encountered some problem during setup. Following is the solutions for them.
####Delete the previous installed wordpress
	# mysqladmin -uXXXX -pXXXXXXXX drop wordpress Do you really want to drop the &#39;wordpress&#39; database [y/N] y  Then you can Re-Create the database.</description>
    </item>
    
    <item>
      <title>Try nanoc</title>
      <link>http://purplepalmdash.github.io/2013/12/21/try-nanoc/</link>
      <pubDate>Sat, 21 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/21/try-nanoc/</guid>
      <description>nanoc is a static site generator, fit for building anything from a small personal blog to a large corporate web site.
###Installation Simply do following:
	mkdir nanoc cd nanoc/ gem install nanoc  Then create a tutorial site
	nanoc create-site tutorial  Compile the site out
	nanoc compile  Before your preview, install adsf
	gem install adsf  Now you can preview the website
	nanoc view  </description>
    </item>
    
    <item>
      <title>Bluetooth Headset on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/12/19/bluetooth-headset-on-archlinux/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/19/bluetooth-headset-on-archlinux/</guid>
      <description>After 4 days struggling, I finally make bluetooth headset working on my ArchLinux. Following is the detailed how-to which shows how to enable bluetooth playing.
###Software Installation Currently blueman is still the best bluetooth management software, we can install it via:
	$ yaourt blueman 1 aur/blueman-bzr 726-2 [installed] (38) GTK+ bluetooth management utility  Then we have to install bluez related items:
	$ pacman -S bluez-utils bluez-libs python2-pybluez $ yaourt -S bluez4 $ yaourt pulseaudio-bluez4  ###Bluetooth Configuration First make sure your bluetooth service is enabled.</description>
    </item>
    
    <item>
      <title>Enable Bluetooth Headset on Jogger(2)</title>
      <link>http://purplepalmdash.github.io/2013/12/19/enable-bluetooth-headset-on-jogger-2/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/19/enable-bluetooth-headset-on-jogger-2/</guid>
      <description>Since trying to enable BT headset failed on Ubuntu12.04 Server, I decide to try xubuntu version. So I download the image from http://joggler.exotica.org.uk/ubuntu/, then extract it to get the image.
###Get the filesystem Use fdisk to get the img layout
	root@joggler:/media/nfs/xubuntu# fdisk -l xubuntu_12.04-v1.4-ext4.img Device Boot Start End Blocks Id System xubuntu_12.04-v1.4-ext4.img1 * 2048 126975 62464 e W95 FAT16 (LBA) xubuntu_12.04-v1.4-ext4.img2 126976 626687 249856 82 Linux swap / Solaris xubuntu_12.</description>
    </item>
    
    <item>
      <title>Enable Bluetooth headset on Joggler</title>
      <link>http://purplepalmdash.github.io/2013/12/18/enable-bluetooth-headset-on-joggler/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/18/enable-bluetooth-headset-on-joggler/</guid>
      <description>###TroubleShooting on alsa Current user canot use alsamixer
	Trusty@joggler:~$ alsamixer cannot open mixer: No such file or directory  This is because the current user is not in the &amp;ldquo;audio&amp;rdquo; group, use root to add current user into &amp;ldquo;audio&amp;rdquo; group:
	root@joggler:~# usermod -a -G audio Trusty  Unmute the channel:
	$ amixer sset Master unmute Simple mixer control &#39;Master&#39;,0 Capabilities: pvolume pswitch penum Playback channels: Front Left - Front Right Limits: Playback 0 - 31 Mono: Front Left: Playback 24 [77%] [-10.</description>
    </item>
    
    <item>
      <title>Fastly search package infos in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/12/17/fastly-search-package-infos-in-archlinux/</link>
      <pubDate>Tue, 17 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/17/fastly-search-package-infos-in-archlinux/</guid>
      <description>You can use pkgfile to view the metadata of the pacman files:
	pacman -Ss pkgfile extra/pkgfile 11-1 [installed] a pacman .files metadata explorer  Usage:
	pkgfile ls  Then you will see &amp;ldquo;ls&amp;rdquo; belogns to which package.</description>
    </item>
    
    <item>
      <title>Alsa Configuration(Adding bluetooth headset</title>
      <link>http://purplepalmdash.github.io/2013/12/16/alsa-configuration-adding-bluetooth-headset/</link>
      <pubDate>Mon, 16 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/16/alsa-configuration-adding-bluetooth-headset/</guid>
      <description>After upgrading 3.12.5, my archlinux dropped its alsa configuration, also I bought a new bluetooth headset MW600, following is the steps for catching back the alsa sound, and let bluetooth headset working together with alsa.
###Fetching back sound Found out the hadware
	$ sudo alsactl init Found hardware: &amp;quot;HDA-Intel&amp;quot; &amp;quot;Intel CougarPoint HDMI&amp;quot; &amp;quot;HDA:111d7605,103c3587,00100105 HDA:11c11040,103c3066,00100200 HDA:80862805,80860101,00100000&amp;quot; &amp;quot;0x103c&amp;quot; &amp;quot;0x161c&amp;quot; Hardware is initialized using a generic method  The acl should be reset via:</description>
    </item>
    
    <item>
      <title>Bluetooth headset in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/12/14/bluetooth-headset-in-archlinux/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/14/bluetooth-headset-in-archlinux/</guid>
      <description>I have a Nokia bluetooth headset BH-105,and a bluetooth usb dongle. And I want to connect them together. Following are the steps.
###Software Preparation On ArchLinux, Install &amp;ldquo;bluez&amp;rdquo; and &amp;ldquo;bluez-utils&amp;rdquo;
	$ sudo pacman -S bluez bluez-utils $ sudo systemctl start bluetooth &amp;amp;&amp;amp; sudo systemctl enable bluetooth  </description>
    </item>
    
    <item>
      <title>Write Blogger in Linux</title>
      <link>http://purplepalmdash.github.io/2013/12/13/write-blogger-in-linux/</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/13/write-blogger-in-linux/</guid>
      <description>###blogtk Install it via &amp;ldquo;yaourt -S blogtk&amp;rdquo;</description>
    </item>
    
    <item>
      <title>ssh with no password for github</title>
      <link>http://purplepalmdash.github.io/2013/12/13/ssh-with-no-password-for-github/</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/13/ssh-with-no-password-for-github/</guid>
      <description>###Github Account Setting Steps for settingup in your github accounting:
Go to your Settings.
Click &amp;ldquo;SSH Keys&amp;rdquo; in the left sidebar
Click &amp;ldquo;Add SSH key&amp;rdquo;
Paste your key into the &amp;ldquo;Key&amp;rdquo; field
Click &amp;ldquo;Add key&amp;rdquo;
Confirm the action by entering your GitHub password
The public key could be got via:
	$ xclip -sel clip &amp;lt; ~/.ssh/id_rsa.pub  Then see if you were authorized by github:
	[Trusty@XXXyyy debian_octopress]$ ssh -T git@github.</description>
    </item>
    
    <item>
      <title>KALI Linux in Qemu</title>
      <link>http://purplepalmdash.github.io/2013/12/12/kali-linux-in-qemu/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/12/kali-linux-in-qemu/</guid>
      <description>Download the iso from kali websitehttp://www.kali.org/downloads/:
	$ wget http://cdimage.kali.org/kali-images/kali-1.0.5/kali-linux-1.0.5-i386.iso  Create qemu img file:
	$ qemu-img create -f qcow2 kali.qcow2 30G Formatting &#39;kali.qcow2&#39;, fmt=qcow2 size=32212254720 encryption=off cluster_size=65536 lazy_refcounts=off Run installation. Here we use the run-qemu script which has been generated before under the same directory: [Trusty@DashArch kali]$ ./run-qemu -hda ./kali.qcow2 -boot d -cdrom /media/nfs/iso/kali-linux-1.0.5-i386.iso -m 1024 -enable-kvm -usb  Choose &amp;ldquo;Graphic Install&amp;rdquo; because currently we are not familiar with this brand new distribution.</description>
    </item>
    
    <item>
      <title>NTP in LAN based on OPENWRT</title>
      <link>http://purplepalmdash.github.io/2013/12/12/ntp-in-lan-based-on-openwrt/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/12/ntp-in-lan-based-on-openwrt/</guid>
      <description>###Package Installation Disable the system default ntp server and install ntpd, this ntpd is the real ntpd package, not busybox-ntpd
	opkg update opkg install ntpd /etc/init.d/sysntpd disable /etc/init.d/ntpd enable /etc/init.d/ntpd start netstat -l | grep ntp  The client installation, on debian:
	apt-get install ntp  ###Server Configuration Comment all of the possible reference server, use local time source.
	root@OpenWrt:~# cat /etc/ntp.conf # use a random selection of 4 public stratum 2 servers # see http://twiki.</description>
    </item>
    
    <item>
      <title>Western Digital Green Disk on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2013/12/12/western-digits-green-disk-on-ubuntu/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/12/western-digits-green-disk-on-ubuntu/</guid>
      <description>The WD20EARS (and other sizes include 1.0 and 1.5 TB driver in the series) will attempt to park the read heads once every 8 seconds FOR THE LIFE OF THE HDD which is just horrible! To see if you are affected use the smartctl command (part of smartmontools). If the last column changes rapidly, this section applies to your drive.
	# smartctl /dev/sdb -a | grep Load_Cycle 193 Load_Cycle_Count 0x0032 001 001 000 Old_age Always - 597115	 We have to disable this feature.</description>
    </item>
    
    <item>
      <title>BBBlack编译脚本解析</title>
      <link>http://purplepalmdash.github.io/2013/12/11/bbblackbian-yi-jiao-ben-jie-xi/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/11/bbblackbian-yi-jiao-ben-jie-xi/</guid>
      <description>###Preparation Download the &amp;ldquo;linux-dev&amp;rdquo; repository from github:
	git clone git://github.com/RobertCNelson/linux-dev.git  View the downloaded packages:
	[Trusty@XXXyyy mykernel]$ du -hs linux-dev/ 19M	linux-dev/ [Trusty@XXXyyy linux-dev]$ ls build_deb.sh build_kernel.sh build_mainline.sh LICENSE patches patch.sh README repo_maintenance scripts system.sh.sample tools version.sh  Switch to the 3.12 Branch:
	git checkout origin/am33x-v3.12 -b tmp [Trusty@XXXyyy linux-dev]$ ls build_deb.sh build_kernel.sh LICENSE patches patch.sh README repo_maintenance scripts system.sh.sample tools version.sh  ###Walk by lines Since we call .</description>
    </item>
    
    <item>
      <title>Debian on NFS</title>
      <link>http://purplepalmdash.github.io/2013/12/11/debian-on-nfs/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/11/debian-on-nfs/</guid>
      <description>Install some packages:
	$ apt-get install usbutils alsa-base  Use lsusb to view the installed usb equipments:
	Bus 001 Device 006: ID 0e5c:6441 Bitland Information Technology Co., Ltd C-Media Sound Device  Install modules to the filesystem, since our newly-installed filesytem doesn&amp;rsquo;t contains the necessary modules:
	$ pwd /media/x/bbBlack/38/linux-dev/deploy  Copy the firmware tar package and modules tar package to the nfs root directory
	$ tar xzvf 3.</description>
    </item>
    
    <item>
      <title>NFS of beaglebone</title>
      <link>http://purplepalmdash.github.io/2013/12/11/nfs-of-beaglebone/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/11/nfs-of-beaglebone/</guid>
      <description>###Serial Preparation The serial port image is as following: ###Failure information The bootup failure information is listed as following:
	Running uenvcmd ... reading zImage 3345240 bytes read in 383 ms (8.3 MiB/s) reading /dtbs/am335x-boneblack.dtb 24884 bytes read in 10 ms (2.4 MiB/s) Starting kernel ... Uncompressing Linux... done, booting the kernel. Error: unrecognized/unsupported machine ID (r1 = 0x00000e05). Available machine support: ID (hex) NAME ffffffff Generic OMAP4 (Flattened Device Tree) ffffffff Generic AM33XX (Flattened Device Tree) ffffffff Generic OMAP3-GP (Flattened Device Tree) ffffffff Generic OMAP3 (Flattened Device Tree) 0000060a OMAP3 Beagle Board 00000a9d IGEP OMAP3 module 00000928 IGEP v2 board 00000ae7 OMAP4 Panda board Please check your kernel config and/or bootloader.</description>
    </item>
    
    <item>
      <title>BeagleBone boot from NFS</title>
      <link>http://purplepalmdash.github.io/2013/12/10/beaglebone-boot-from-nfs/</link>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/10/beaglebone-boot-from-nfs/</guid>
      <description>###Building Preparation Create a new directory for stroing all of the items related to beaglebone.
	cd /media/nfs/ mkdir beaglebone cd beaglebone/  Download the cross-compiler from linaro toolchain binary website. And add it to the environment variables.
	wget -c https://launchpad.net/linaro-toolchain-binaries/trunk/2013.10/+download/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz tar xJf gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz export CC=`pwd`/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux/bin/arm-linux-gnueabihf- # Test the cross-compiler ${CC}gcc --version  Checkout the U-boot:
	git clone git://git.denx.de/u-boot.git cd u-boot/ git checkout v2013.10 -b tmp  Patching U-boot:</description>
    </item>
    
    <item>
      <title>Enable audio in BeagleBone Black</title>
      <link>http://purplepalmdash.github.io/2013/12/09/enable-audio-in-beaglebone-black/</link>
      <pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/09/enable-audio-in-beaglebone-black/</guid>
      <description>The usb sound card which I want to enable is a legend hub.
###Package Installation Install necessary packages:
	$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade $ sudo apt-get install vim mplayer alsa-base  ###Hardware Configuration View the sound card information:
	root@arm:~# lsusb Bus 001 Device 029: ID 0424:2507 Standard Microsystems Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.</description>
    </item>
    
    <item>
      <title>Listening Pandora under linux</title>
      <link>http://purplepalmdash.github.io/2013/12/09/listening-pandora-under-linux/</link>
      <pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/09/listening-pandora-under-linux/</guid>
      <description>An script named &amp;ldquo;piandbar&amp;rdquo; could let you listen to pandora music in CLI:
	$ yaourt -S pianobar  Or in ubuntu:
	$ apt-get install pianobar  The default configuration file could be found under ~/.config/pianobar:
	$ cat ~/.config/pianobar/config user = xxx@xxx.com password = xxxxxx tls_fingerprint =  The most cool functionality is it could automatically &amp;ldquo;remember&amp;rdquo; all of the played songs.
man pianobar could get more items, for example key-binding, etc.</description>
    </item>
    
    <item>
      <title>raspberryPI GPIO Programming on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/12/08/raspberrypi-gpio-programming-on-archlinux/</link>
      <pubDate>Sun, 08 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/08/raspberrypi-gpio-programming-on-archlinux/</guid>
      <description>###Python Preparation Install python
	$ pacman -S python  Install pip
	$ pacman -S python-pip  Install virtualenv, before install virtualenv, be sure to update your time. 1970&amp;rsquo;s time will get ssl error.
	$ date -s &amp;quot;8 Dec 2013 16:09:40&amp;quot; $ pip install --upgrade virtualenv virtualenvwrapper  Prepare virtualenv:
	[root@alarmpi ~]# mkdir ~/pyv [root@alarmpi ~]# vim ~/.virtualenvrc export WORKON_HOME=&amp;quot;/root/pyv&amp;quot; export PROJECT_HOME=&amp;quot;/root/pyv&amp;quot; source /usr/bin/virtualenvwrapper.sh [root@alarmpi ~]# source ~/.</description>
    </item>
    
    <item>
      <title>Linux Sound</title>
      <link>http://purplepalmdash.github.io/2013/12/07/linux-sound/</link>
      <pubDate>Sat, 07 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/07/linux-sound/</guid>
      <description>###ALSA普通用户无声 只有root才能听到声音，其他一概是哑巴，解决方案：
	$ sudo apt-get install acl $ sudo setfacl -m u:Your_Username:rw /dev/snd/*  等于说赋予了普通用户(Your_Username)访问/dev/snd下所有设备的读写权限。这时候打开mplayer就可以听到MP3播放声了。 ###使用tsocks和ssh转发穿越防火墙
	ssh -qTfnN -D 1394 xxx@xxx.xxx.xxx.xxx  这样可以在本地打开一个socks代理，127.0.0.1:1394 安装tsocks
	$ sudo apt-get install tsocks  配置tsocks
	# vim /etc/tsocks.conf # Local networks # For this example this machine can directly access 192.168.0.0/255.255.255.0 # (192.168.0.*) and 10.0.0.0/255.0.0.0 (10.*) local = 192.168.0.0/255.255.255.0 local = 10.0.0.0/255.0.0.0 server = 127.0.0.1 server_port = 1394 server_type = 5  试听音乐：</description>
    </item>
    
    <item>
      <title>Enable spice for qemu virtual machine</title>
      <link>http://purplepalmdash.github.io/2013/12/06/enable-spice-for-qemu-virtual-machine/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/06/enable-spice-for-qemu-virtual-machine/</guid>
      <description>###Package Installation Install virt-viewer for browsing the virtual machine desktop. For default spicec is not OK.
	$ pacman -S gtk-vnc $ yaourt -S spice-gtk3 $ yaourt -S virt-viewer  Install virt-manager
	[root@DashArch Trusty]# pacman -S virt-manager [root@DashArch Trusty]# systemctl start libvirtd.service [root@DashArch Trusty]# systemctl enable libvirtd.service ln -s &#39;/usr/lib/systemd/system/libvirtd.service&#39; &#39;/etc/systemd/system/multi-user.target.wants/libvirtd.service&#39; [root@DashArch Trusty]# ps -ef | grep libvirt root 8852 1 5 15:23 ? 00:00:00 /usr/bin/libvirtd -p /var/run/libvirtd.pid  ###启动支持spice Server的qemu -vga qxl -spice port=5988,disable-ticketing将使能spice</description>
    </item>
    
    <item>
      <title>Install Qemu virtio driver under windows</title>
      <link>http://purplepalmdash.github.io/2013/12/06/install-qemu-virtio-driver-under-windows/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/06/install-qemu-virtio-driver-under-windows/</guid>
      <description>Download the iso file from the redhat repository:
http://alt.fedoraproject.org/pub/alt/virtio-win/latest/images/images/images/bin/src/
Start the qemu with the following command :
 ./run-qemu -hda fpgawindows.qcow2 -m 1024 -cdrom ./virtio-win-0.1-74.iso -drive file=./fake.qcow2,if=ide  In run-qemu, the actual command is:
	qemu-system-i386 -net nic,model=virtio,macaddr=$macaddr -net tap,ifname=&amp;quot;$IFACE&amp;quot; $*  Then, follow the following images to operate:</description>
    </item>
    
    <item>
      <title>autossh multiple connection?</title>
      <link>http://purplepalmdash.github.io/2013/12/05/autossh-multiple-connection/</link>
      <pubDate>Thu, 05 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/05/autossh-multiple-connection/</guid>
      <description>Strangely, I cannot enable the multiple SSH connections on OpenWRT.
The configuration file is listed as:
	config autossh option ssh	&#39;-N -T -R 4381:localhost:22 root@XXX.xxx.xxx.xxx &#39; option gatetime	&#39;0&#39; option monitorport	&#39;20000&#39; option poll	&#39;600&#39; #config autossh #	option ssh	&#39;-L -N -T 10.0.0.1:9009:1XX.XX.XX.XXX:8000 xxx@xxx.xxx.xxx.xxx &#39; #	option gatetime	&#39;0&#39; #	option monitorport	&#39;20001&#39; #	option poll	&#39;600&#39;  But only 1 connection could be enabled.
I doubt this is because of the startup scripts for /etc/init.</description>
    </item>
    
    <item>
      <title>Configure samba server on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2013/12/02/configure-samba-server-on-ubuntu/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/02/configure-samba-server-on-ubuntu/</guid>
      <description>###Installation Update repository and install samba and samba services.
	$ sudo apt-get update $ sudo apt-get install samba smbfs  ###Configuration Add a new samba user:
	Trusty@joggler:~$ sudo smbpasswd -a Trusty [sudo] password for Trusty: New SMB password: Retype new SMB password:  Editing the /etc/samba/smb.conf:
 [samba] comment = samba for ethernet users path = /media/samba valid users = Trusty public = no writable = yes printable = no create mask = 0765 [homes] comment = Home Directories browseable = no security = user username map = /etc/samba/smbusers  Adding the mapping of the system user to samba user:</description>
    </item>
    
    <item>
      <title>Auto convert source code to UTF-8 compatiable</title>
      <link>http://purplepalmdash.github.io/2013/11/27/auto-convert-source-code-to-utf-8-compatiable/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/27/auto-convert-source-code-to-utf-8-compatiable/</guid>
      <description>For those code files which contains gb2312 or gbk format, we can use following scripts for automatically convert them to UTF-8 conpatiable format files.
#!/bin/sh export LANG=&amp;quot;zh_CN.utf8&amp;quot; export LC_ALL=&amp;quot;zh_CN.utf8&amp;quot; #for file in `find . -name &amp;quot;*.h&amp;quot;` for file in `find . -name &amp;quot;*.c&amp;quot;` do echo $file enca -L zh_CN -x UTF-8 $file done  </description>
    </item>
    
    <item>
      <title>Add vlan to existing machine</title>
      <link>http://purplepalmdash.github.io/2013/11/26/add-vlan-to-existing-machine/</link>
      <pubDate>Tue, 26 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/26/add-vlan-to-existing-machine/</guid>
      <description>增加一个VLAN设备：
	$ ip link add link eth0 name eth0.100 type vlan id 100  查看增加的VLAN设备详情：
	$ ip -d link show eth0.100  增加一个IPV4地址：
	$ ip addr add 192.168.100.1/24 brd 192.168.100.255 dev eth0.100 $ ip link set dev eth0.100 up  关闭一个VLAN设备：
	$ ip link set dev eth0.100 down  移除一个VLAN设备:
	$ ip link delete eth0.100  </description>
    </item>
    
    <item>
      <title>How to setup STM32 Project in eclipse</title>
      <link>http://purplepalmdash.github.io/2013/11/25/how-to-setup-stm32-project-in-eclipse/</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/25/how-to-setup-stm32-project-in-eclipse/</guid>
      <description>###Preparation ####STM Standard Peripheral Lib Download Link for STSW-STM32054STM32F10x standard peripheral library :
http://www.st.com/web/catalog/tools/FM147/CL1794/SC961/SS1743/PF257890
Unsip the downloaded library and you will get several folders, the Libraries folder is the pure libs. ####Cross-Compiler for STM32 Download the cross-compiler from CodeSourcery ARM EABI toolchain - Mentor Graphics:
https://sourcery.mentor.com/sgpp/lite/arm/portal/subscription?@template=lite
You have to choose EABI version. Download and install it, you will get &amp;ldquo;arm-none-eabi-&amp;rdquo; prefixed cross-compiler.
####Eclipse plugins Help-&amp;gt; Install New Software, Add the URL for gnuarm:</description>
    </item>
    
    <item>
      <title>Solution On Joggler</title>
      <link>http://purplepalmdash.github.io/2013/11/25/solution-on-joggler/</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/25/solution-on-joggler/</guid>
      <description>###Hardware Joggler
Intel&amp;reg; Atom&amp;trade; CPU Z520 @ 1.33GHz Dual Core
MemTotal: 504480 kB
Harddisk: 500G External USB.
###System and Software Download the Ubuntu Base/Server 12.04 LTS (Precise) (Joggler Image v1.4 - 09/04/2013) from the
http://joggler.exotica.org.uk/ubuntu/ From the ubuntu website we know 12.04 LTS will supported to 2017, I think that fits my needs.
Unzip the download image:
	gunzip ubuntu_base_12.04-v1.4-ext4.img.gz dd if=./ubuntu_base_12.04-v1.4-ext4.img of=/dev/sdc bs=1M  The use this external usb disk for booting up the joggler.</description>
    </item>
    
    <item>
      <title>Conky Customization</title>
      <link>http://purplepalmdash.github.io/2013/11/22/conky-customization/</link>
      <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/22/conky-customization/</guid>
      <description>###Add existing user to specified group The problem is : why I can&amp;rsquo;t use hddtemp? This is because hddtemp need priviledge for accessing the disk related equipment.
	[Trusty@XXXyyy ~]$ whoami Trusty [Trusty@XXXyyy ~]$ groups root log kvm users vboxusers [Trusty@XXXyyy ~]$ su root Password: [root@XXXyyy Trusty]# groups root bin daemon sys adm disk wheel log  But this didn&amp;rsquo;t solve the problem, I have to add prividge in /etc/sudoes,</description>
    </item>
    
    <item>
      <title>Setup an embedded development enviroment for STM32</title>
      <link>http://purplepalmdash.github.io/2013/11/21/setup-an-embedded-development-enviroment-for-stm32/</link>
      <pubDate>Thu, 21 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/21/setup-an-embedded-development-enviroment-for-stm32/</guid>
      <description>###Download the toolchain We should download the toolchain from the ARM employee maintained website, the download address is located at: https://launchpad.net/gcc-arm-embedded, use following command:
	$ wget https://launchpad.net/gcc-arm-embedded/4.7/4.7-2013-q3-update/+download/gcc-arm-none-eabi-4_7-2013q3-20130916-linux.tar.bz2  untar the downloaded package and then add it to your system path, my solution is directly add some alias into ~/.bashrc:
	### Add Cross_Compiler for eclipse based stm32 #export PATH=&amp;quot;/media/y/embedded/cortex/gcc-arm-none-eabi-4_7-2013q3/bin:$PATH&amp;quot; alias setstm=&#39;export PATH=&amp;quot;/media/y/embedded/cortex/gcc-arm-none-eabi-4_7-2013q3/bin:$PATH&amp;quot;&#39;  ###Eclipse Configuration We have to install zylin for flashing the stm32 board.</description>
    </item>
    
    <item>
      <title>Two Tips for setting</title>
      <link>http://purplepalmdash.github.io/2013/11/21/two-tips-for-setting/</link>
      <pubDate>Thu, 21 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/21/two-tips-for-setting/</guid>
      <description>###Disable the vim wraping There is a line in ~/.vimrc:
	autocmd FileType text setlocal textwidth=78  comment this line then everything goes OK. ###Change Awesome theme and change the titlebar width Download the 3rd party themes from https://github.com/Morley93/awesome-themes-3.5, then copy them to your own theme location, normally under the &amp;ldquo;/usr/share/awesome/themes/&amp;rdquo;, Choose whatever you want, and edit the ~/.config/awesome/default.rc.lua:
beautiful.init(&amp;quot;/usr/share/awesome/themes/wabbit/theme.lua&amp;quot;)  Save and exit then you got the new theme.</description>
    </item>
    
    <item>
      <title>Using IR-remote for controlling XBMC</title>
      <link>http://purplepalmdash.github.io/2013/11/21/using-ir-remote-for-controlling-xbmc/</link>
      <pubDate>Thu, 21 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/21/using-ir-remote-for-controlling-xbmc/</guid>
      <description>###Wiring The Wiring is listed as following Picture, You got your IR receiver&amp;rsquo;s pins to corresponding pins on raspberry PI. Positive to Pin1(3.3v), negative to Pin6(GND), the signal pins to Pin12(GPIO 18).
###Check the Kernel information Log on to the raspberry PI, then input dmesg to view the startup information, we can see the lirc has been added to kernel.
	$ dmesg [ 4.976752] systemd-udevd[822]: starting version 208 [ 7.</description>
    </item>
    
    <item>
      <title>Generate Your own epub book</title>
      <link>http://purplepalmdash.github.io/2013/11/20/generate-your-own-epub-book/</link>
      <pubDate>Wed, 20 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/20/generate-your-own-epub-book/</guid>
      <description>###Using Wget to fetching the webpages wget could be used to fetch the webpages from a specified website, using following command could fetch all of the wiki related 1st layer pages from &amp;ldquo;awesome Wiki&amp;rdquo;
	$ wget -r -l 1 http://awesome.naquadah.org/wiki/Main_Page  After wget finished, you will found the 1st layer webpatges under your directory. ###Decide which you want for generating the book There are some rubbish pages in downloaed pages, thus we have to write a script for fetching the valuable ones, my script is listed as following:</description>
    </item>
    
    <item>
      <title>Install OpenELEC on SD Card</title>
      <link>http://purplepalmdash.github.io/2013/11/19/install-openelec-on-sd-card/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/19/install-openelec-on-sd-card/</guid>
      <description>###Partition the SD card Insert the SD card and view the partitions via fdisk -l, then
	[root@XXXyyy Trusty]# parted -s /dev/mmcblk0 mklabel msdos [root@XXXyyy Trusty]# fdisk -l Disk /dev/mmcblk0: 7.4 GiB, 7948206080 bytes, 15523840 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x0002d03c  Make partition 1, fat32, and its size if 16 &amp;ldquo;cyl&amp;rdquo; (cylinders)</description>
    </item>
    
    <item>
      <title>Use Reverse SSH for Across Something(2)</title>
      <link>http://purplepalmdash.github.io/2013/11/19/use-reverse-ssh-for-across-something-2/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/19/use-reverse-ssh-for-across-something-2/</guid>
      <description>###ssh command Take following command for detailed example of using ssh:
	alias mydaili=&#39;ssh -qTfnN -D &#39; -q Quite Mode -T Disable pseudo-tty allocation -f background the ssh -n redirect the stdin from /dev/null -N Don&#39;t execute a remote command -D Bind address  ###Using rsh rsh could be used for executing the command remotely, thus in my family&amp;rsquo;s debian machine I could write following script:
	cat /bin/remoteON #!/bin/sh rsh -l root localhost -p 4381 ssh -qTfnN -L 1XX.</description>
    </item>
    
    <item>
      <title>Using autossh for keep ssh tunnel</title>
      <link>http://purplepalmdash.github.io/2013/11/19/using-autossh-for-keep-ssh-tunnel/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/19/using-autossh-for-keep-ssh-tunnel/</guid>
      <description>###Preparation Install autossh:
	$ sudo pacman -S autossh  ###Configure [root@DashArch Trusty]# cat /etc/systemd/system/autossh.service
	[Unit] Description=AutoSSH service for port 1394 access to family machine After=network.target [Service] ExecStart=/usr/bin/autossh -M 22000 -N -T -D 1394 root@aaa.aaa.aaa.com [Install] WantedBy=multi-user.target  ###Usage Change the proxy to 127.0.0.1, port is 1394, then you can use the ssh tunnel for browsing.
# crontab -e @reboot xxxx/.sh  </description>
    </item>
    
    <item>
      <title>How to use git behind the firewall</title>
      <link>http://purplepalmdash.github.io/2013/11/18/how-to-use-git-behind-the-firewall/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/18/how-to-use-git-behind-the-firewall/</guid>
      <description>###Tips:
	wget http://www.meadowy.org/~gotoh/ssh/connect.c gcc -o connect connect.c chmod 777 connect &amp;amp;&amp;amp; mv connect /bin/ http-proxy-gw content: /bin/connect -H http://10.0.0.221:9001 $@ git config --global core.gitproxy &amp;quot;http-proxy-gw for *.*&amp;quot; echo &amp;quot;export GIT_PROXY_COMMAND=/bin/http-proxy-gw&amp;quot; &amp;gt;&amp;gt; ~/.bashrc  ###C source code:
/*********************************************************************** * connect.c -- Make socket connection using SOCKS4/5 and HTTP tunnel. * * Copyright (c) 2000-2006 Shun-ichi Goto * Copyright (c) 2002, J. Grant (English Corrections) * * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version.</description>
    </item>
    
    <item>
      <title>Use Reverse SSH for Across Something</title>
      <link>http://purplepalmdash.github.io/2013/11/18/use-reverse-ssh-for-across-something/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/18/use-reverse-ssh-for-across-something/</guid>
      <description>###Enable No Password for Login Generate the public/private rsa key pair.
	root@OpenWrt:~# ssh-keygen -t rsa root@OpenWrt:~# ls ~/.ssh authorized_keys id_rsa id_rsa.pub known_hosts Upload the id_rsa.pub to the Home&#39;s PC. # cat .ssh/id_rsa.pub | ssh USER@HOME_PC &#39;cat &amp;gt;&amp;gt; .ssh/authorized_keys&#39; Check If you can login without entering the password: $ ssh USER@HOME_PC  ###OpenWRT Modification Since the default ssh client is dropbear on OpenWRT, thus the key length is 1024, we have to using the 2048 for most of the cases.</description>
    </item>
    
    <item>
      <title>HMC5883L on RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2013/11/16/hmc5883l-on-raspberrypi/</link>
      <pubDate>Sat, 16 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/16/hmc5883l-on-raspberrypi/</guid>
      <description>###Make sure you have installed i2c tools Install i2c-tools via:
	# apt-get install i2c-tools # apt-cache search i2c-tools i2c-tools - heterogeneous set of I2C tools for Linux  Check if spi and i2c has been blacklisted in system:
	# cat /etc/modprobe.d/raspi-blacklist.conf # blacklist spi and i2c by default (many users don&#39;t need them) blacklist spi-bcm2708 blacklist i2c-bcm2708  Comment out them, now your i2c will not be blacklisted.</description>
    </item>
    
    <item>
      <title>VMware VMCI problem</title>
      <link>http://purplepalmdash.github.io/2013/11/16/vmware-vmci-problem/</link>
      <pubDate>Sat, 16 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/16/vmware-vmci-problem/</guid>
      <description>Edit the file /etc/init.d/vmware with your favorite text editor, change the definition:
	vmwareLoadModule &amp;quot;$mod&amp;quot;  Change this line to
	vmwareLoadModule &amp;quot;$vmci&amp;quot;  Then Navigate to the other function vmwareLoadModule &amp;ldquo;$mod&amp;rdquo; Under the function definition.
	vmwareLoadModule &amp;quot;$mod&amp;quot;  Change this line to
	vmwareLoadModule &amp;quot;$vsock&amp;quot;  Now we need to find the corresponding Module Unload functions Under the Function vmwareStopVmci() Change
	vmwareUnloadModule &amp;quot;${mod}&amp;quot;  to
	vmwareUnloadModule &amp;quot;${vmci}&amp;quot;  Under the function vmwareStopVsock() Change</description>
    </item>
    
    <item>
      <title>Building Poll circuit on EagleBone</title>
      <link>http://purplepalmdash.github.io/2013/11/15/building-poll-circuit-on-eaglebone/</link>
      <pubDate>Fri, 15 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/15/building-poll-circuit-on-eaglebone/</guid>
      <description>###Background Knowledge 三极管（NPN型）的用法很简单（半圆形平的一面朝自己，引脚朝下），左边接电源中间为触发极，右边输出，有点像开关，只要中间的脚有微弱电流触发，就如同开关被打开，电流就会从左边流向右边。</description>
    </item>
    
    <item>
      <title>Compile Linux kernel for Beaglebone</title>
      <link>http://purplepalmdash.github.io/2013/11/14/compile-linux-kernel-for-beaglebone/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/14/compile-linux-kernel-for-beaglebone/</guid>
      <description>###SourceCode Preparation 1. Get the latest code of beaglebone kernel:
	git clone git://github.com/RobertCNelson/linux-dev.git  2. Check for your cross-compiler:
	$ which arm-linux-gnueabi-gcc /media/y/embedded/gcc-linaro-arm-linux-gnueabi-2012.02-20120222_linux/bin/arm-linux-gnueabi-gcc  3. Start a new branch
	$ git checkout origin/am33x-v3.2 -b am33x-v3.2 Branch am33x-v3.2 set up to track remote branch am33x-v3.2 from origin. Switched to a new branch &#39;am33x-v3.2&#39;  Since the latest kernel has been moved 3.12, we have to checkout am33x-v3.12
	$ git checkout origin/am33x-v3.</description>
    </item>
    
    <item>
      <title>Use Eclipse and C/C&#43;&#43; to develop on Beaglebone</title>
      <link>http://purplepalmdash.github.io/2013/11/14/use-eclipse-and-c-slash-c-plus-plus-to-develop-on-beaglebone/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/14/use-eclipse-and-c-slash-c-plus-plus-to-develop-on-beaglebone/</guid>
      <description>###Local Development on Beaglebone board. On Beagle to verify local development:
	#include &amp;lt;iostream&amp;gt; using namespace std; int main() { cout&amp;lt;&amp;lt;&amp;quot;Hello Beagle World!&amp;quot;&amp;lt;&amp;lt;endl; return 0; }  Compile and run:
	$ g++ -o test test.cpp $ ./test Hello Beagle World!  ###Using Cross-compiler for developing applications for Beaglebone Launch eclipse, then install new software via help-&amp;gt; Install new software, make sure installed CDT. then we will install RSE.
	$ pwd /home/Trusty/.</description>
    </item>
    
    <item>
      <title>Play Music On OpenWRT</title>
      <link>http://purplepalmdash.github.io/2013/11/13/play-music-on-openwrt/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/13/play-music-on-openwrt/</guid>
      <description>1. Install usbutils, this will enable you to use lsusb to detect your usb equipments.
	$ opkg install usbutils  2. Use lsusb to detect your usb audio card.
	# root@OpenWrt:~# lsusb Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 002: ID 1a40:0101 TERMINUS TECHNOLOGY INC. USB-2.0 4-Port HUB Bus 001 Device 003: ID 0781:557c SanDisk Corp. Bus 001 Device 004: ID 0424:2507 Standard Microsystems Corp.</description>
    </item>
    
  </channel>
</rss>