<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Dash</title>
    <link>http://purplepalmdash.github.io/categories/algorithm/</link>
    <description>Recent content in Algorithm on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Sep 2016 09:41:02 +0800</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ReadDigestOnPythonAlgorithm2</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/27/readdigestonpythonalgorithm2/</link>
      <pubDate>Tue, 27 Sep 2016 09:41:02 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/27/readdigestonpythonalgorithm2/</guid>
      <description>第三章笔记。
目的 * 理解抽象数据结构，stack,queue,dequeue,list. * 使用python lists实现抽象数据结构queue, deque. * 理解实现基本线性数据结构的性能. * 理解prefix,infix,postfix. * 使用stack陪你国家postfix表达式. * 使用stack来将表达式从infix到postfix. * 使用队列模拟基本计时模拟器 * 何种情况下该使用何种数据结构. * 使用node/参考模式实现抽象数据结构(链表). * 对比我们实现的链表和Python的链表实现的性能.  线性数据结构 线性数据结构包括: 栈，队列，双端队列，列表。
线性是因为存在两端，左/右，或者前/后，或者顶/底。
线性数据结构的差别在于数据添加/删除的方式。线性数据结构可以组合来解决很多难题。
Stack LIFO， Last In, First Out. 先进后出，后进先出。
Stack定义的抽象数据结构，见原文。
class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items) s=Stack() print(s.isEmpty()) s.</description>
    </item>
    
    <item>
      <title>ReadDigestOnPythonAlgorithm</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/26/readdigestonpythonalgorithm/</link>
      <pubDate>Mon, 26 Sep 2016 16:28:31 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/26/readdigestonpythonalgorithm/</guid>
      <description>目标 本节目标是:
* 理解算法分析的重要性 * 能使用&amp;quot;Big-O&amp;quot;描述算法的执行时间 * 理解常用的Python数组和字典的&amp;quot;Big-O&amp;quot;执行时间 * 理解Python数据的实现是如何影响到算法分析的 * 理解如何对简单的Python程序进行性能基准测试  算法分析 典型问题是: 当两个程序解决了同一个问题，然而看起来有差别的时候，如何得知一种方案确实优 于另一种？
理解：算法是用于解决针对某种输入的黑盒实现。某种算法可能针对多种不同程序，这取决于程序 的编写者及编程时使用的编程语言。
程序对比 两种累加器的实现：
清晰、明了的实现:
def sumOfN(n): theSum = 0 for i in range(1,n+1): theSum = theSum + i return theSum print(sumOfN(10))  糟糕的实现:
def foo(tom): fred = 0 for bill in range(1,tom+1): barney = bill fred = fred + barney return fred print(foo(10))  为什么糟糕？ 考虑到程序的可读性。
算法分析关注点 关注点在于基于对计算资源的量化，以评价算法的好坏。比较两种不同算法，评价出其优劣。譬如 ，如果一种算法在解决同一问题时使用了比另一种算法少得多的计算资源时，我们可以说该种算法 较为优秀。
量化指标: A.</description>
    </item>
    
  </channel>
</rss>