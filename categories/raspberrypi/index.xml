<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberrypi on Dash</title>
    <link>http://purplepalmdash.github.io/categories/raspberrypi/</link>
    <description>Recent content in Raspberrypi on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 May 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/raspberrypi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Download Android Source Code on RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2014/05/04/download-android-source-code-on-raspberrypi/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/04/download-android-source-code-on-raspberrypi/</guid>
      <description>Just a try. I don&amp;rsquo;t think I will use raspberryPI for developing, but using it for downloading code is a good idea.
###Go Back Home My raspberryPI is behind the router, so I have to use a ssh tunnel to reach raspberryPI.
Setting up tunnel:
$ ssh -L 2230:10.0.0.230:22 Tomcat.xxx.xx.xxx -l root  Login on local port:
$ ssh root@localhost -p 2230  Now we have a terminal which could reach raspberry PI.</description>
    </item>
    
    <item>
      <title>Re-compile Kernel For Supporting 512M Memory For RaspberryPI In Qemu</title>
      <link>http://purplepalmdash.github.io/2014/03/20/re-compile-kernel-for-supporting-512m-memory-for-raspberrypi-in-qemu/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/20/re-compile-kernel-for-supporting-512m-memory-for-raspberrypi-in-qemu/</guid>
      <description>###Cross Compiler Prepration Get the cross-compiler from github:
	[Trusty@XXXyyy tools]$ pwd /media/y/raspberryPI/tools [Trusty@XXXyyy tools]$ git clone git://github.com/raspberrypi/tools.git  Add the cross-compiler to system path:
	export PATH=&amp;quot;/media/y/raspberryPI/tools/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin:$PATH&amp;quot;  Now input &amp;ldquo;arm-linux-g&amp;rdquo; + tab you will see the cross-compiler is ready.
###Prepare the kernel Get the kernel source from github:
	git clone git://github.com/raspberrypi/linux.git  Now we need to get the patches for supporting the raspberryPI, Torlus has done the patches which could also be downloaded from github:</description>
    </item>
    
    <item>
      <title>Deploy Weather APP on RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2014/03/17/deploy-weather-app-on-raspberrypi/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/17/deploy-weather-app-on-raspberrypi/</guid>
      <description>Since I enabled the RaspberryPI and disabled the PogoPlug, I have to move the Weather App on RaspberryPI. The main difference lies on the python version, on PogoPlug the default python version is python2.7, while on RaspberryPI it&amp;rsquo;s python3.3, thus I have to use the virtualenvironment of Python. ###Setup the virtualenv Following is the steps for setting up the virtual environment for python2.7 on ArchLinux:
	$ mkdir ~/pyves $ cat &amp;gt;~/.</description>
    </item>
    
    <item>
      <title>Use RaspberryPI as a file server</title>
      <link>http://purplepalmdash.github.io/2013/12/30/use-raspberrypi-as-a-file-server/</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/30/use-raspberrypi-as-a-file-server/</guid>
      <description>###Preparation Mount the partition automatically, add following lines into the /etc/fstab:
	/dev/sda3	/media/ntfs ntfs-3g permissions,locale=en_US.utf8 0	2  I decide to use samba to share the files, so I have to install samba
	apt-get install samba  The samba server will start automatically, but we have to configure it to adapte to our situation.
Add the configuration to the samba config file:
	/etc/samba/smb.conf [raspshare] comment = raspberry PI Share path = /media/ntfs valid users = Trusty public = no writable = yes printable = no create mask = 0765  Restart the samba server</description>
    </item>
    
    <item>
      <title>I2C between raspberryPI and Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/29/i2c-between-raspberrypi-and-arduino/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/i2c-between-raspberrypi-and-arduino/</guid>
      <description>###连线 Arduino I2C 连线:
RaspberryPI I2C 连线:
连线图：
	RPI Arduino (Uno/Duemillanove) -------------------------------------------- GPIO 0 (SDA) &amp;lt;--&amp;gt; Pin 4 (SDA) GPIO 1 (SCL) &amp;lt;--&amp;gt; Pin 5 (SCL) Ground &amp;lt;--&amp;gt; Ground  ###Arduino端代码
#include &amp;lt;Wire.h&amp;gt; #define SLAVE_ADDRESS 0x04 int number = 0; int state = 0; void setup() { pinMode(13, OUTPUT); Serial.begin(9600); // start serial for output // initialize i2c as slave Wire.begin(SLAVE_ADDRESS); // define callbacks for i2c communication Wire.onReceive(receiveData); Wire.onRequest(sendData); Serial.</description>
    </item>
    
    <item>
      <title>Little tricky on SPI</title>
      <link>http://purplepalmdash.github.io/2013/12/29/little-tricky-on-spi/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/little-tricky-on-spi/</guid>
      <description>接着上一个日志来，玩一个小tricky，通过SPI总线自己想输入的字符。
主机端，添加下列头文件 #include  这使得可以使用strcpy等函数。
重写transfer()函数
static void transfer_mine(int fd, char *buf) { int ret; uint8_t tx[140]; int len = strlen(buf)+1; memcpy(tx, buf, strlen(buf)+1); tx[strlen(tx)] = &#39;\n&#39;; uint8_t rx[ARRAY_SIZE(tx)] = {0, }; struct spi_ioc_transfer tr = { .tx_buf = (unsigned long)tx, .rx_buf = (unsigned long)rx, //.len = ARRAY_SIZE(tx), .len = len, .delay_usecs = delay, .speed_hz = speed, .bits_per_word = bits, }; ret = ioctl(fd, SPI_IOC_MESSAGE(1), &amp;amp;tr); if (ret &amp;lt; 1) pabort(&amp;quot;can&#39;t send spi message&amp;quot;); }  在main()函数里，改写调用的方式：</description>
    </item>
    
    <item>
      <title>SPI连接raspberryPI和Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/29/spilian-jie-raspberrypihe-arduino/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/spilian-jie-raspberrypihe-arduino/</guid>
      <description>下面是使用SPI在RaspberryPI和Arduino Nano w之间进行双机通信的一个例子。借助它可以很好的理解SPI的工作原理。
###背景知识 RaspberryPI GPIO布局图：
从图中我们可以看到，RaspberryPI上与SPI通信相关的主要是GPIO 10（MOSI), GPIO 9(MISO)和GPIO 11(SCLK).
Arduino布局图：
SPI: 10 (SS), 11 (MOSI), 12 (MISO), 13 (SCK). These pins support SPI communication using the SPI library. SS代表Slava Select.
事实上我们要使用的仅仅是11/12/13三个口而已。
###连线图 如下图进行连线，简单来说，R(10 MOSI)-&amp;gt;A(12 MISO), R(9, MISO)-&amp;gt;A(11, MOSI), R(11, SCLK) -&amp;gt;A(13, SCK)：
###Arduino端程序
// Written by Nick Gammon // February 2011 /** * Send arbitrary number of bits at whatever clock rate (tested at 500 KHZ and 500 HZ).</description>
    </item>
    
  </channel>
</rss>