<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arduino on Dash</title>
    <link>http://purplepalmdash.github.io/categories/arduino/</link>
    <description>Recent content in Arduino on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Jul 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/arduino/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proto Thread In Arduino</title>
      <link>http://purplepalmdash.github.io/2014/07/04/proto-thread-in-arduino/</link>
      <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/04/proto-thread-in-arduino/</guid>
      <description> Recently I want to use RTOS on Arduino, but after reading the material I find it&amp;rsquo;s not so easy to run another &amp;ldquo;OS&amp;rdquo; on Arduino. But I found this library which named &amp;ldquo;Proto Thread&amp;rdquo; which could afford me thread-like operation. Following is the steps for using this library for controlling 2 different threads.
Installation of Proto Thread </description>
    </item>
    
    <item>
      <title>I2C between raspberryPI and Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/29/i2c-between-raspberrypi-and-arduino/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/i2c-between-raspberrypi-and-arduino/</guid>
      <description>###连线 Arduino I2C 连线:
RaspberryPI I2C 连线:
连线图：
	RPI Arduino (Uno/Duemillanove) -------------------------------------------- GPIO 0 (SDA) &amp;lt;--&amp;gt; Pin 4 (SDA) GPIO 1 (SCL) &amp;lt;--&amp;gt; Pin 5 (SCL) Ground &amp;lt;--&amp;gt; Ground  ###Arduino端代码
#include &amp;lt;Wire.h&amp;gt; #define SLAVE_ADDRESS 0x04 int number = 0; int state = 0; void setup() { pinMode(13, OUTPUT); Serial.begin(9600); // start serial for output // initialize i2c as slave Wire.begin(SLAVE_ADDRESS); // define callbacks for i2c communication Wire.onReceive(receiveData); Wire.onRequest(sendData); Serial.</description>
    </item>
    
    <item>
      <title>Little tricky on SPI</title>
      <link>http://purplepalmdash.github.io/2013/12/29/little-tricky-on-spi/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/little-tricky-on-spi/</guid>
      <description>接着上一个日志来，玩一个小tricky，通过SPI总线自己想输入的字符。
主机端，添加下列头文件 #include  这使得可以使用strcpy等函数。
重写transfer()函数
static void transfer_mine(int fd, char *buf) { int ret; uint8_t tx[140]; int len = strlen(buf)+1; memcpy(tx, buf, strlen(buf)+1); tx[strlen(tx)] = &#39;\n&#39;; uint8_t rx[ARRAY_SIZE(tx)] = {0, }; struct spi_ioc_transfer tr = { .tx_buf = (unsigned long)tx, .rx_buf = (unsigned long)rx, //.len = ARRAY_SIZE(tx), .len = len, .delay_usecs = delay, .speed_hz = speed, .bits_per_word = bits, }; ret = ioctl(fd, SPI_IOC_MESSAGE(1), &amp;amp;tr); if (ret &amp;lt; 1) pabort(&amp;quot;can&#39;t send spi message&amp;quot;); }  在main()函数里，改写调用的方式：</description>
    </item>
    
    <item>
      <title>SPI连接raspberryPI和Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/29/spilian-jie-raspberrypihe-arduino/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/spilian-jie-raspberrypihe-arduino/</guid>
      <description>下面是使用SPI在RaspberryPI和Arduino Nano w之间进行双机通信的一个例子。借助它可以很好的理解SPI的工作原理。
###背景知识 RaspberryPI GPIO布局图：
从图中我们可以看到，RaspberryPI上与SPI通信相关的主要是GPIO 10（MOSI), GPIO 9(MISO)和GPIO 11(SCLK).
Arduino布局图：
SPI: 10 (SS), 11 (MOSI), 12 (MISO), 13 (SCK). These pins support SPI communication using the SPI library. SS代表Slava Select.
事实上我们要使用的仅仅是11/12/13三个口而已。
###连线图 如下图进行连线，简单来说，R(10 MOSI)-&amp;gt;A(12 MISO), R(9, MISO)-&amp;gt;A(11, MOSI), R(11, SCLK) -&amp;gt;A(13, SCK)：
###Arduino端程序
// Written by Nick Gammon // February 2011 /** * Send arbitrary number of bits at whatever clock rate (tested at 500 KHZ and 500 HZ).</description>
    </item>
    
    <item>
      <title>TSC3200 on Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/28/tsc3200-on-arduino/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/28/tsc3200-on-arduino/</guid>
      <description>###Introduction The detailed information could be seen as in :
http://www.eefocus.com/zhang700309/blog/13-08/296390_6c438.html
###Wiring: Notice we use the interrupt 1.
###Code
#include &amp;lt;TimerOne.h&amp;gt; #define S0 6 // Please notice the Pin&#39;s define #define S1 5 #define S2 4 #define S3 2 #define OUT 3 int g_count = 0; // count the frequecy int g_array[3]; // store the RGB value int g_flag = 0; // filter of RGB queue float g_SF[3]; // save the RGB Scale factor // Init TSC230 and setting Frequency.</description>
    </item>
    
    <item>
      <title>使用超声波传感器控制LED</title>
      <link>http://purplepalmdash.github.io/2013/12/28/shi-yong-chao-sheng-bo-chuan-gan-qi-kong-zhi-led/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/28/shi-yong-chao-sheng-bo-chuan-gan-qi-kong-zhi-led/</guid>
      <description>###Wiring Pictures The UltraSound sensor is like following picture, it only sold at 8RMB on Taobao:
The Wiring Pictures is listed as following:
###Working Principle Trigger Pin will emit the ultra-sound, then Echo Pin will receive the reflected ultra-sound. Calculate its fleeting time then plus the speed of sound we can get the distance.
So the working method is:
a. Trig pin emmit a high signal out.
b. Echo pin will wait for receiving the high signal.</description>
    </item>
    
    <item>
      <title>HC-SR501人体感应模块 &amp;amp; Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/27/hc-sr501ren-ti-gan-ying-mo-kuai-and-arduino/</link>
      <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/27/hc-sr501ren-ti-gan-ying-mo-kuai-and-arduino/</guid>
      <description>###连线图 led &amp;ndash; pin 6, SR501 pin 7.
###代码
//红外感应 //信号接 7 端口 //LED will be 6 port int sigpin = 7; int ledpin = 6; void setup() { pinMode(sigpin, INPUT); pinMode(ledpin, OUTPUT); digitalWrite(ledpin, HIGH); Serial.begin(9600); // 打开串口，设置波特率为9600 bps } int storefun = 0; int ledstatus = HIGH; void loop() { int in = digitalRead(sigpin); //Change the led ON/OFF accoriding to the status sensor if(in != storefun) { Serial.println(&amp;quot;They are not equal!</description>
    </item>
    
    <item>
      <title>Using HMC5883L to control Servo</title>
      <link>http://purplepalmdash.github.io/2013/11/18/using-hmc5883l-to-control-servo/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/18/using-hmc5883l-to-control-servo/</guid>
      <description>###Wired __Servo __
5V/GND
Input&amp;ndash;&amp;gt; D4
__HMC5883L __ 3.3V/GND
SCL&amp;ndash;&amp;gt; A5
SDA&amp;ndash;&amp;gt; A4
###Code:
#include &amp;lt;Wire.h&amp;gt; #include &amp;lt;HMC5883L.h&amp;gt; HMC5883L compass; //Definition of servopin int servopin = 4; void setup(){ Serial.begin(9600); Wire.begin(); compass = HMC5883L(); //new instance of HMC5883L library setupHMC5883L(); //setup the HMC5883L pinMode(servopin,OUTPUT);//设定舵机接口为输出接口 } // Our main program loop. void loop(){ float heading = getHeading(); //Serial.println(heading); int angle = (int)heading/2; /* int angle = (int)heading; if(angle &amp;gt; 180) { angle = angle - 180; } */ Serial.</description>
    </item>
    
    <item>
      <title>IRRemote on Arduino</title>
      <link>http://purplepalmdash.github.io/2013/11/14/irremote-on-arduino/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/14/irremote-on-arduino/</guid>
      <description>###Preparation of the IRremote library Using the downloaded,
	Trusty@SomethingMissing:~/code/arduino/arduino-1.0.5/libraries$ cp -r ../../library/Arduino_IRremote_master/ ./ Trusty@SomethingMissing:~/code/arduino/arduino-1.0.5/libraries$ pwd /home/Trusty/code/arduino/arduino-1.0.5/libraries  Or using git the get the latest one, in fact this one is not new at all , it updates 2 years ago.
	$ git clone git://github.com/shirriff/Arduino-IRremote.git  Now we can use it for programming. ###Programming insert the code and verify the result.
	#include &amp;lt;IRremote.h&amp;gt; // 使用IRRemote函数库 const int irReceiverPin = 2; // 红外接收器的 OUTPUT 引脚接在 PIN2 接口 定义irReceiverPin变量为PIN2接口 IRrecv irrecv(irReceiverPin); // 设置irReceiverPin定义的端口为红外信号接收端口 decode_results results; // 定义results变量为红外结果存放位置 void setup() { Serial.</description>
    </item>
    
  </channel>
</rss>