<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arduino on Dash</title>
    <link>http://purplepalmdash.github.io/categories/arduino/</link>
    <description>Recent content in Arduino on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Jul 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://purplepalmdash.github.io/categories/arduino/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Proto Thread In Arduino</title>
      <link>http://purplepalmdash.github.io/2014/07/04/proto-thread-in-arduino/</link>
      <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/04/proto-thread-in-arduino/</guid>
      <description>

&lt;p&gt;Recently I want to use RTOS on Arduino, but after reading the material I find it&amp;rsquo;s not so easy to run another &amp;ldquo;OS&amp;rdquo; on Arduino. But I found this library which named &amp;ldquo;Proto Thread&amp;rdquo; which could afford me thread-like operation. Following is the steps for using this library for controlling 2 different threads.&lt;/p&gt;

&lt;h3 id=&#34;installation-of-proto-thread&#34;&gt;Installation of Proto Thread&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>I2C between raspberryPI and Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/29/i2c-between-raspberrypi-and-arduino/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/i2c-between-raspberrypi-and-arduino/</guid>
      <description>&lt;p&gt;###连线
Arduino I2C 连线:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/arduino-i2c-pins.jpg&#34; alt=&#34;arduino.jpg&#34; /&gt;&lt;br /&gt;
RaspberryPI I2C 连线:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/raspberry-pi-i2c-pins.jpg&#34; alt=&#34;rasp.jpg&#34; /&gt;&lt;br /&gt;
连线图：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	RPI               Arduino (Uno/Duemillanove)
	--------------------------------------------
	GPIO 0 (SDA) &amp;lt;--&amp;gt; Pin 4 (SDA)
	GPIO 1 (SCL) &amp;lt;--&amp;gt; Pin 5 (SCL)
	Ground       &amp;lt;--&amp;gt; Ground

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/RaspberryPI-I2c-Arduino.png&#34; alt=&#34;rasp-arduino.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;###Arduino端代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Wire.h&amp;gt;

#define SLAVE_ADDRESS 0x04
int number = 0;
int state = 0;

void setup() {
    pinMode(13, OUTPUT);
    Serial.begin(9600);         // start serial for output
    // initialize i2c as slave
    Wire.begin(SLAVE_ADDRESS);

    // define callbacks for i2c communication
    Wire.onReceive(receiveData);
    Wire.onRequest(sendData);

    Serial.println(&amp;quot;Ready!&amp;quot;);
}

void loop() {
    delay(100);
}

// callback for received data
void receiveData(int byteCount){

    while(Wire.available()) {
        number = Wire.read();
        Serial.print(&amp;quot;data received: &amp;quot;);
        Serial.println(number);

        if (number == 1){

            if (state == 0){
                digitalWrite(13, HIGH); // set the LED on
                state = 1;
            }
            else{
                digitalWrite(13, LOW); // set the LED off
                state = 0;
            }
         }
     }
}

// callback for sending data
void sendData(){
    Wire.write(number);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###RaspberryPI端准备
在/etc/modules中增加一行:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	i2c-dev

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释掉黑名单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ cat /etc/modprobe.d/raspi-blacklist.conf
	# blacklist spi and i2c by default (many users don&#39;t need them)
	# blacklist spi-bcm2708
	#blacklist i2c-bcm2708

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装i2c工具：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	apt-get install i2c-tools

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装python库：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	apt-get install python-smbus

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;探测i2c设备&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	i2cdetect -y 0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不是root用户，例如，如果是pi用户，则需要将当前用户增加到i2c组中:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ sudo adduser pi i2c

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###RaspberryPI端代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import smbus
import time
# for RPI version 1, use &amp;quot;bus = smbus.SMBus(0)&amp;quot;
bus = smbus.SMBus(0)

# This is the address we setup in the Arduino Program
address = 0x04

def writeNumber(value):
    bus.write_byte(address, value)
    # bus.write_byte_data(address, 0, value)
    return -1

def readNumber():
    number = bus.read_byte(address)
    # number = bus.read_byte_data(address, 1)
    return number

while True:
    var = input(&amp;quot;Enter 1 - 9: &amp;quot;)
    if not var:
        continue

    writeNumber(var)
    print &amp;quot;RPI: Hi Arduino, I sent you &amp;quot;, var
    # sleep one second
    time.sleep(1)

    number = readNumber()
    print &amp;quot;Arduino: Hey RPI, I received a digit &amp;quot;, number
    print

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行代码时要注意，0～255的数字输入进去，会在arduino i2c slave端收到对应的数据，并原封不动的被返回。超过255的数值将溢出。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Little tricky on SPI</title>
      <link>http://purplepalmdash.github.io/2013/12/29/little-tricky-on-spi/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/little-tricky-on-spi/</guid>
      <description>&lt;p&gt;接着上一个日志来，玩一个小tricky，通过SPI总线自己想输入的字符。&lt;br /&gt;
主机端，添加下列头文件
    #include &lt;string.h&gt;
这使得可以使用strcpy等函数。&lt;br /&gt;
重写transfer()函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void transfer_mine(int fd, char *buf)
{
	int ret;

	uint8_t tx[140];
	int len = strlen(buf)+1;
	memcpy(tx, buf, strlen(buf)+1);
	tx[strlen(tx)] = &#39;\n&#39;;

	uint8_t rx[ARRAY_SIZE(tx)] = {0, };
	struct spi_ioc_transfer tr = {
		.tx_buf = (unsigned long)tx,
		.rx_buf = (unsigned long)rx,
		//.len = ARRAY_SIZE(tx),
		.len = len,
		.delay_usecs = delay,
		.speed_hz = speed,
		.bits_per_word = bits,
	};
 
	ret = ioctl(fd, SPI_IOC_MESSAGE(1), &amp;amp;tr);
	if (ret &amp;lt; 1)
		pabort(&amp;quot;can&#39;t send spi message&amp;quot;);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在main()函数里，改写调用的方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	char myinput[140]=&amp;quot;Trustywill, Hi, this is Trusty&amp;quot;;
	transfer_mine(fd, myinput);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以将自定义的字符传输过去了，140是随便设置的值，可以设置为别的更大或者更小的值。&lt;br /&gt;
当然你也可以从命令行输入想传输的字符, 这里就不深入了。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPI连接raspberryPI和Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/29/spilian-jie-raspberrypihe-arduino/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/spilian-jie-raspberrypihe-arduino/</guid>
      <description>&lt;p&gt;下面是使用SPI在RaspberryPI和Arduino Nano w之间进行双机通信的一个例子。借助它可以很好的理解SPI的工作原理。&lt;br /&gt;
###背景知识
RaspberryPI GPIO布局图：&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/GPIOs.png&#34; alt=&#34;/images/GPIOs.png&#34; /&gt;&lt;br /&gt;
从图中我们可以看到，RaspberryPI上与SPI通信相关的主要是GPIO 10（MOSI), GPIO 9(MISO)和GPIO 11(SCLK).&lt;br /&gt;
Arduino布局图：&lt;br /&gt;
SPI: 10 (SS), 11 (MOSI), 12 (MISO), 13 (SCK). These pins support SPI communication using the SPI library. SS代表Slava Select.&lt;br /&gt;
事实上我们要使用的仅仅是11/12/13三个口而已。&lt;br /&gt;
###连线图
如下图进行连线，简单来说，R(10 MOSI)-&amp;gt;A(12 MISO), R(9, MISO)-&amp;gt;A(11, MOSI), R(11, SCLK) -&amp;gt;A(13, SCK)：&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/spiconnector.jpg&#34; alt=&#34;/images/spiconnector.jpg&#34; /&gt;
###Arduino端程序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Written by Nick Gammon
// February 2011
/**
 * Send arbitrary number of bits at whatever clock rate (tested at 500 KHZ and 500 HZ).
 * This script will capture the SPI bytes, when a &#39;\n&#39; is recieved it will then output
 * the captured byte stream via the serial.
 */
 
#include &amp;lt;SPI.h&amp;gt;
 
char buf [100];
volatile byte pos;
volatile boolean process_it;
 
void setup (void)
{
  Serial.begin (115200);   // debugging
 
  // have to send on master in, *slave out*
  pinMode(MISO, OUTPUT);
  
  // turn on SPI in slave mode
  SPCR |= _BV(SPE);
  //SPCR is  Arduino SPI Control Register
  // __BV&#39;s definition is like : #define _BV(bit) (1 &amp;lt;&amp;lt; (bit))
  // SPE is the register of the SPI Enable
  
  // get ready for an interrupt 
  pos = 0;   // buffer empty
  process_it = false;
 
  // now turn on interrupts
  SPI.attachInterrupt();
 
}  // end of setup
 
 
// SPI interrupt routine
ISR (SPI_STC_vect)
{
byte c = SPDR;  // grab byte from SPI Data Register
  
  // add to buffer if room
  if (pos &amp;lt; sizeof buf)
    {
    buf [pos++] = c;
    
    // example: newline means time to process buffer
    if (c == &#39;\n&#39;)
      process_it = true;
      
    }  // end of room available
}  // end of interrupt routine SPI_STC_vect
 
// main loop - wait for flag set in interrupt routine
void loop (void)
{
  if (process_it)
    {
    buf [pos] = 0;  
    Serial.println (buf);
    pos = 0;
    process_it = false;
    }  // end of flag set
    
}  // end of loop

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code Walking through:&lt;br /&gt;
Arduino SPI Control Register (SPCR), set it to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	SPCR |= _BV(SPE);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SPI Data Register (SPDR), SPI数据寄存器。 中断程序中，每次从SPDR中取回一个byte 并存储在c中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	if (c == &#39;\n&#39;)
		process_it = true;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里通过设置全局变量process_it来影响loop中对接收数据的处理，在loop()中有如下代码段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	if (process_it)
	{
		//.....
	}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上面看到，如果process_it为0,则loop中一直在空循环，只有当所有的数据全部接收完毕后，才会一次性打印出所有的数据。在打印完数据后，程序将自动将buf清0, 清0是通过将pos简单置0而实现的，实际的数据其实还在。
###RaspberryPI 端程序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * SPI testing utility (using spidev driver)
 *
 * Copyright (c) 2007  MontaVista Software, Inc.
 * Copyright (c) 2007  Anton Vorontsov &amp;lt;avorontsov@ru.mvista.com&amp;gt;
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License.
 *
 * Cross-compile with cross-gcc -I/path/to/cross-kernel/include
 */
 
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;getopt.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/ioctl.h&amp;gt;
#include &amp;lt;linux/types.h&amp;gt;
#include &amp;lt;linux/spi/spidev.h&amp;gt;
 
#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
 
static void pabort(const char *s)
{
	perror(s);
	abort();
}
 
static const char *device = &amp;quot;/dev/spidev0.0&amp;quot;;
static uint8_t mode;
static uint8_t bits = 8;
static uint32_t speed = 500000;
static uint16_t delay;
 
static void transfer(int fd)
{
	int ret;
	uint8_t tx[] = {
        0x48, 0x45, 0x4C, 0x4C, 0x4F,
        0x20, 
        0x57, 0x4F, 0x52, 0x4C, 0x44,
        0x0A 
	};
	uint8_t rx[ARRAY_SIZE(tx)] = {0, };
	struct spi_ioc_transfer tr = {
		.tx_buf = (unsigned long)tx,
		.rx_buf = (unsigned long)rx,
		.len = ARRAY_SIZE(tx),
		.delay_usecs = delay,
		.speed_hz = speed,
		.bits_per_word = bits,
	};
 
	ret = ioctl(fd, SPI_IOC_MESSAGE(1), &amp;amp;tr);
	if (ret &amp;lt; 1)
		pabort(&amp;quot;can&#39;t send spi message&amp;quot;);
 
    /*
	for (ret = 0; ret &amp;lt; ARRAY_SIZE(tx); ret++) {
		if (!(ret % 6))
			puts(&amp;quot;&amp;quot;);
		printf(&amp;quot;%.2X &amp;quot;, rx[ret]);
	}
	puts(&amp;quot;&amp;quot;);
    */
}
 
static void print_usage(const char *prog)
{
	printf(&amp;quot;Usage: %s [-DsbdlHOLC3]\n&amp;quot;, prog);
	puts(&amp;quot;  -D --device   device to use (default /dev/spidev1.1)\n&amp;quot;
	     &amp;quot;  -s --speed    max speed (Hz)\n&amp;quot;
	     &amp;quot;  -d --delay    delay (usec)\n&amp;quot;
	     &amp;quot;  -b --bpw      bits per word \n&amp;quot;
	     &amp;quot;  -l --loop     loopback\n&amp;quot;
	     &amp;quot;  -H --cpha     clock phase\n&amp;quot;
	     &amp;quot;  -O --cpol     clock polarity\n&amp;quot;
	     &amp;quot;  -L --lsb      least significant bit first\n&amp;quot;
	     &amp;quot;  -C --cs-high  chip select active high\n&amp;quot;
	     &amp;quot;  -3 --3wire    SI/SO signals shared\n&amp;quot;);
	exit(1);
}
 
static void parse_opts(int argc, char *argv[])
{
	while (1) {
		static const struct option lopts[] = {
			{ &amp;quot;device&amp;quot;,  1, 0, &#39;D&#39; },
			{ &amp;quot;speed&amp;quot;,   1, 0, &#39;s&#39; },
			{ &amp;quot;delay&amp;quot;,   1, 0, &#39;d&#39; },
			{ &amp;quot;bpw&amp;quot;,     1, 0, &#39;b&#39; },
			{ &amp;quot;loop&amp;quot;,    0, 0, &#39;l&#39; },
			{ &amp;quot;cpha&amp;quot;,    0, 0, &#39;H&#39; },
			{ &amp;quot;cpol&amp;quot;,    0, 0, &#39;O&#39; },
			{ &amp;quot;lsb&amp;quot;,     0, 0, &#39;L&#39; },
			{ &amp;quot;cs-high&amp;quot;, 0, 0, &#39;C&#39; },
			{ &amp;quot;3wire&amp;quot;,   0, 0, &#39;3&#39; },
			{ &amp;quot;no-cs&amp;quot;,   0, 0, &#39;N&#39; },
			{ &amp;quot;ready&amp;quot;,   0, 0, &#39;R&#39; },
			{ NULL, 0, 0, 0 },
		};
		int c;
 
		c = getopt_long(argc, argv, &amp;quot;D:s:d:b:lHOLC3NR&amp;quot;, lopts, NULL);
 
		if (c == -1)
			break;
 
		switch (c) {
		case &#39;D&#39;:
			device = optarg;
			break;
		case &#39;s&#39;:
			speed = atoi(optarg);
			break;
		case &#39;d&#39;:
			delay = atoi(optarg);
			break;
		case &#39;b&#39;:
			bits = atoi(optarg);
			break;
		case &#39;l&#39;:
			mode |= SPI_LOOP;
			break;
		case &#39;H&#39;:
			mode |= SPI_CPHA;
			break;
		case &#39;O&#39;:
			mode |= SPI_CPOL;
			break;
		case &#39;L&#39;:
			mode |= SPI_LSB_FIRST;
			break;
		case &#39;C&#39;:
			mode |= SPI_CS_HIGH;
			break;
		case &#39;3&#39;:
			mode |= SPI_3WIRE;
			break;
		case &#39;N&#39;:
			mode |= SPI_NO_CS;
			break;
		case &#39;R&#39;:
			mode |= SPI_READY;
			break;
		default:
			print_usage(argv[0]);
			break;
		}
	}
}
 
int main(int argc, char *argv[])
{
	int ret = 0;
	int fd;
 
	parse_opts(argc, argv);
 
	fd = open(device, O_RDWR);
	if (fd &amp;lt; 0)
		pabort(&amp;quot;can&#39;t open device&amp;quot;);
 
	/*
	 * spi mode
	 */
	ret = ioctl(fd, SPI_IOC_WR_MODE, &amp;amp;mode);
	if (ret == -1)
		pabort(&amp;quot;can&#39;t set spi mode&amp;quot;);
 
	ret = ioctl(fd, SPI_IOC_RD_MODE, &amp;amp;mode);
	if (ret == -1)
		pabort(&amp;quot;can&#39;t get spi mode&amp;quot;);
 
	/*
	 * bits per word
	 */
	ret = ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &amp;amp;bits);
	if (ret == -1)
		pabort(&amp;quot;can&#39;t set bits per word&amp;quot;);
 
	ret = ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, &amp;amp;bits);
	if (ret == -1)
		pabort(&amp;quot;can&#39;t get bits per word&amp;quot;);
 
	/*
	 * max speed hz
	 */
	ret = ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &amp;amp;speed);
	if (ret == -1)
		pabort(&amp;quot;can&#39;t set max speed hz&amp;quot;);
 
	ret = ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &amp;amp;speed);
	if (ret == -1)
		pabort(&amp;quot;can&#39;t get max speed hz&amp;quot;);
 
	printf(&amp;quot;spi mode: %d\n&amp;quot;, mode);
	printf(&amp;quot;bits per word: %d\n&amp;quot;, bits);
	printf(&amp;quot;max speed: %d Hz (%d KHz)\n&amp;quot;, speed, speed/1000);
 
	transfer(fd);
 
	close(fd);
 
	return ret;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析： 在main()函数中，设置完spi总线的相关参数后，调用transfer(fd)来传递参数。&lt;br /&gt;
transfer()函数的实现如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void transfer(int fd)
{
	int ret;
	uint8_t tx[] = {
        0x48, 0x45, 0x4C, 0x4C, 0x4F,
        0x20, 
        0x57, 0x4F, 0x52, 0x4C, 0x44,
        0x0A 
	};
	uint8_t rx[ARRAY_SIZE(tx)] = {0, };
	struct spi_ioc_transfer tr = {
		.tx_buf = (unsigned long)tx,
		.rx_buf = (unsigned long)rx,
		.len = ARRAY_SIZE(tx),
		.delay_usecs = delay,
		.speed_hz = speed,
		.bits_per_word = bits,
	};
 
	ret = ioctl(fd, SPI_IOC_MESSAGE(1), &amp;amp;tr);
	if (ret &amp;lt; 1)
		pabort(&amp;quot;can&#39;t send spi message&amp;quot;);
 
    /*
	for (ret = 0; ret &amp;lt; ARRAY_SIZE(tx); ret++) {
		if (!(ret % 6))
			puts(&amp;quot;&amp;quot;);
		printf(&amp;quot;%.2X &amp;quot;, rx[ret]);
	}
	puts(&amp;quot;&amp;quot;);
    */
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tx即为字符串，&amp;rsquo;H&amp;rsquo;=0x48, &amp;lsquo;E&amp;rsquo;=0x45, &amp;lsquo;L&amp;rsquo;=0x4c, &amp;lsquo;L&amp;rsquo;=0x4c, &amp;lsquo;O&amp;rsquo;=0x4f, &amp;lsquo; &amp;lsquo;=0x20, &amp;lsquo;W&amp;rsquo;=0x57, &amp;lsquo;O&amp;rsquo;=0x4f, &amp;lsquo;R&amp;rsquo;=0x52, &amp;lsquo;L&amp;rsquo;=0x4c, &amp;rsquo;D&amp;rsquo;=0x44, &amp;lsquo;\n&amp;rsquo;=0x0a.&lt;br /&gt;
实际传送则是调用：
    ret = ioctl(fd, SPI_IOC_MESSAGE(1), &amp;amp;tr);
有关它的解释如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	SPI_IOC_MESSAGE gives userspace the equivalent of kernel spi_sync().
	  72 * Pass it an array of related transfers, they&#39;ll execute together.
	  73 * Each transfer may be half duplex (either direction) or full duplex.
	  74 *
	  75 *      struct spi_ioc_transfer mesg[4];
	  76 *      ...
	  77 *      status = ioctl(fd, SPI_IOC_MESSAGE(4), mesg);

	#define SPI_IOC_MESSAGE(N) _IOW(SPI_IOC_MAGIC, 0, char[SPI_MSGSIZE(N)])

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用完transfer()函数后，调用close()来关闭文件描述符。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TSC3200 on Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/28/tsc3200-on-arduino/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/28/tsc3200-on-arduino/</guid>
      <description>&lt;p&gt;###Introduction
The detailed information could be seen as in :&lt;br /&gt;
&lt;a href=&#34;http://www.eefocus.com/zhang700309/blog/13-08/296390_6c438.html&#34;&gt;http://www.eefocus.com/zhang700309/blog/13-08/296390_6c438.html&lt;/a&gt;&lt;br /&gt;
###Wiring:
Notice we use the interrupt 1.&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/tsc3200d.jpg&#34; alt=&#34;images/tsc3200d.jpg&#34; /&gt;
###Code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;TimerOne.h&amp;gt;
 
#define S0     6   // Please notice the Pin&#39;s define
#define S1     5
#define S2     4
#define S3     2
#define OUT    3
 
int   g_count = 0;    // count the frequecy
int   g_array[3];     // store the RGB value
int   g_flag = 0;     // filter of RGB queue
float g_SF[3];        // save the RGB Scale factor
 
 
// Init TSC230 and setting Frequency.
void TSC_Init()
{
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  pinMode(OUT, INPUT);
 
  digitalWrite(S0, LOW);  // OUTPUT FREQUENCY SCALING 2%
  digitalWrite(S1, HIGH); 
}
 
// Select the filter color 
void TSC_FilterColor(int Level01, int Level02)
{
  if(Level01 != 0)
    Level01 = HIGH;
 
  if(Level02 != 0)
    Level02 = HIGH;
 
  digitalWrite(S2, Level01); 
  digitalWrite(S3, Level02); 
}
 
void TSC_Count()
{
  g_count ++ ;
}
 
void TSC_Callback()
{
  switch(g_flag)
  {
    case 0: 
         Serial.println(&amp;quot;-&amp;gt;WB Start&amp;quot;);
         TSC_WB(LOW, LOW);              //Filter without Red
         break;
    case 1:
         Serial.print(&amp;quot;-&amp;gt;Frequency R=&amp;quot;);
         Serial.println(g_count);
         g_array[0] = g_count;
         TSC_WB(HIGH, HIGH);            //Filter without Green
         break;
    case 2:
         Serial.print(&amp;quot;-&amp;gt;Frequency G=&amp;quot;);
         Serial.println(g_count);
         g_array[1] = g_count;
         TSC_WB(LOW, HIGH);             //Filter without Blue
         break;
 
    case 3:
         Serial.print(&amp;quot;-&amp;gt;Frequency B=&amp;quot;);
         Serial.println(g_count);
         Serial.println(&amp;quot;-&amp;gt;WB End&amp;quot;);
         g_array[2] = g_count;
         TSC_WB(HIGH, LOW);             //Clear(no filter)   
         break;
   default:
         g_count = 0;
         break;
  }
}
 
void TSC_WB(int Level0, int Level1)      //White Balance
{
  g_count = 0;
  g_flag ++;
  TSC_FilterColor(Level0, Level1);
  Timer1.setPeriod(1000000);             // set 1s period
}
 
void setup()
{
  TSC_Init();
  Serial.begin(9600);
  Timer1.initialize();             // defaulte is 1s
  Timer1.attachInterrupt(TSC_Callback);  
  attachInterrupt(1, TSC_Count, RISING);  
 pinMode(8, OUTPUT);
 pinMode(9, OUTPUT);
 pinMode(10, OUTPUT);
 digitalWrite(8,HIGH);
 digitalWrite(9,HIGH);
 digitalWrite(10,HIGH);
 
  delay(4000);
 
  for(int i=0; i&amp;lt;3; i++)
    Serial.println(g_array[i]);
 
  g_SF[0] = 255.0/ g_array[0];     //R Scale factor
  g_SF[1] = 255.0/ g_array[1] ;    //G Scale factor
  g_SF[2] = 255.0/ g_array[2] ;    //B Scale factor
 
  Serial.println(g_SF[0]);
  Serial.println(g_SF[1]);
  Serial.println(g_SF[2]);
 
}
 
void loop()
{
   g_flag = 0;
   for(int i=0; i&amp;lt;3; i++)
    Serial.println(int(g_array[i] * g_SF[i]));
   if(((g_array[0]*g_SF[0])&amp;gt;(g_array[1]*g_SF[1])) &amp;amp;&amp;amp; ((g_array[0]*g_SF[0])&amp;gt;(g_array[2]*g_SF[2])))
   {
      digitalWrite(8,HIGH);
      digitalWrite(9,LOW);
      digitalWrite(10,LOW);
   }
   else if(((g_array[1]*g_SF[1])&amp;gt;(g_array[0]*g_SF[0])) &amp;amp;&amp;amp; ((g_array[1]*g_SF[1])&amp;gt;(g_array[2]*g_SF[2])))
   {
      digitalWrite(8,LOW);
      digitalWrite(9,HIGH);
      digitalWrite(10,LOW);
   }     
   else if(((g_array[2]*g_SF[2])&amp;gt;(g_array[1]*g_SF[1])) &amp;amp;&amp;amp; ((g_array[2]*g_SF[2])&amp;gt;(g_array[0]*g_SF[0])))
   {
      digitalWrite(8,LOW);
      digitalWrite(9,LOW);
      digitalWrite(10,HIGH);
   }        
   else
   {
      digitalWrite(8,LOW);
      digitalWrite(9,LOW);
      digitalWrite(10,LOW);
   }
   delay(4000);
 
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Effect
First, the program will caculate the RBG base value out.&lt;br /&gt;
If you put the sensor on a red object, red LED will be lighten, turn the sensor facing a green object, green LED will be lighten; blue object for blue LED.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用超声波传感器控制LED</title>
      <link>http://purplepalmdash.github.io/2013/12/28/shi-yong-chao-sheng-bo-chuan-gan-qi-kong-zhi-led/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/28/shi-yong-chao-sheng-bo-chuan-gan-qi-kong-zhi-led/</guid>
      <description>&lt;p&gt;###Wiring Pictures
The UltraSound sensor is like following picture, it only sold at 8RMB on Taobao:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/ultraintaobao.jpg&#34; alt=&#34;ultraintaobao.jpg&#34; /&gt;&lt;br /&gt;
The Wiring Pictures is listed as following:&lt;br /&gt;
&lt;img src=&#34;http://purplepalmdash.github.io/images/UltraSound.jpg&#34; alt=&#34;/images/UltraSound.jpg&#34; /&gt;
###Working Principle
Trigger Pin will emit the ultra-sound, then Echo Pin will receive the reflected ultra-sound. Calculate its fleeting time then plus the speed of sound we can get the distance.&lt;br /&gt;
So the working method is:&lt;br /&gt;
a. Trig pin emmit a high signal out.&lt;br /&gt;
b. Echo pin will wait for receiving the high signal.&lt;br /&gt;
c. Calculate the fleeting time.&lt;br /&gt;
###The code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const int TrigPin = 2; 
const int EchoPin = 3; 
const int LedPin = 6;

float cm; 

int reverseStatus = 0;
int ledstatus = HIGH;

void setup() 
{ 
Serial.begin(9600); 
pinMode(TrigPin, OUTPUT); 
pinMode(EchoPin, INPUT); 
pinMode(LedPin, OUTPUT);
digitalWrite(LedPin, HIGH);
} 
void loop() 
{ 
digitalWrite(TrigPin, LOW); //低高低电平发一个短时间脉冲去TrigPin 
delayMicroseconds(2); 
digitalWrite(TrigPin, HIGH); 
delayMicroseconds(10); 
digitalWrite(TrigPin, LOW);
cm = pulseIn(EchoPin, HIGH) / 58.0; //将回波时间换算成cm 
cm = (int(cm * 100.0)) / 100.0; //保留两位小数 
if( cm &amp;lt; 10 )
{
  reverseStatus = 1;
}
else
{
  reverseStatus = 0;
}
if(reverseStatus == 1)
{
  if(ledstatus == LOW)
  {
    digitalWrite(LedPin, HIGH);
    ledstatus = HIGH;
  }
  else if(ledstatus == HIGH)
  {
    digitalWrite(LedPin, LOW);
    ledstatus = LOW;
  }
}
Serial.print(cm); 
Serial.print(&amp;quot;cm&amp;quot;); 
Serial.println(); 
delay(1000); 
} 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Critical Code Walk-through&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;digitalWrite(TrigPin, LOW); //低高低电平发一个短时间脉冲去TrigPin 
delayMicroseconds(2); 
digitalWrite(TrigPin, HIGH); 
delayMicroseconds(10); 
digitalWrite(TrigPin, LOW);
cm = pulseIn(EchoPin, HIGH) / 58.0; //将回波时间换算成cm 
cm = (int(cm * 100.0)) / 100.0; //保留两位小数 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First write low, delay 2 microsecond, then write high, continue for 10 microsecond, then switch to low.&lt;br /&gt;
pulseIn() will return the time wait the pin switch to High signal. Its output is microseconds. Since the speed of sound is 340m/s, like the following functions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;long microsecondsToCentimeters(long microseconds)
{
// The speed of sound is 340 m/s or 29 microseconds per centimeter.
// The ping travels out and back, so to find the distance of the
// object we take half of the distance travelled.
return microseconds / 29 / 2;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the distance we can caculate like: the time is x microseconds, while in 1 microseconds, the sound can walk:&lt;br /&gt;
340m/s = 340x100cm/s = 34cm/ms, so the distance will be:&lt;br /&gt;
distance == xms x 34cm/ms /2 == xms x 17&lt;br /&gt;
Thus the code could alter to :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  //cm = pulseIn(EchoPin, HIGH) / 58.0; //将回波时间换算成cm 
  cm = pulseIn(EchoPin, HIGH) * 17 / 1000;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both are OK for detecting the distance.&lt;br /&gt;
###Effect
When you hold your hands or other object to the ultrasound in less than 10cm, the led status will be changed in 1 seconds.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HC-SR501人体感应模块 &amp;amp; Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/27/hc-sr501ren-ti-gan-ying-mo-kuai-and-arduino/</link>
      <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/27/hc-sr501ren-ti-gan-ying-mo-kuai-and-arduino/</guid>
      <description>&lt;p&gt;###连线图
led &amp;ndash; pin 6, SR501 pin 7.&lt;br /&gt;
 &lt;img src=&#34;http://purplepalmdash.github.io/images/wiring1.jpg&#34; alt=&#34;/images/wiring1.jpg&#34; /&gt;
###代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//红外感应
//信号接 7 端口
//LED will be 6 port
int sigpin = 7;
int ledpin = 6;
 
void setup()
{
  pinMode(sigpin, INPUT);
  pinMode(ledpin, OUTPUT);
  digitalWrite(ledpin, HIGH);
  
  Serial.begin(9600);  // 打开串口，设置波特率为9600 bps
}
 
int storefun = 0;
int ledstatus = HIGH;

void loop()
{
  int in = digitalRead(sigpin); 
  
  
  //Change the led ON/OFF accoriding to the status sensor
  if(in != storefun)
  {
    Serial.println(&amp;quot;They are not equal!&amp;quot;);
    if(ledstatus == LOW)
    {
      digitalWrite(ledpin,HIGH);
      ledstatus = HIGH;
    }
    else if(ledstatus == HIGH)
    {
      digitalWrite(ledpin, LOW);
      ledstatus = LOW;
    }
  }
  storefun = in; 
  Serial.println(in); //有人的时候输出高电平1 无人0
  Serial.println(storefun);
  Serial.println(&amp;quot;***&amp;quot;);
  delay(2000);    
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using HMC5883L to control Servo</title>
      <link>http://purplepalmdash.github.io/2013/11/18/using-hmc5883l-to-control-servo/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/18/using-hmc5883l-to-control-servo/</guid>
      <description>&lt;p&gt;###Wired
__Servo   __&lt;br /&gt;
5V/GND&lt;br /&gt;
Input&amp;ndash;&amp;gt; D4&lt;/p&gt;

&lt;p&gt;__HMC5883L     __
3.3V/GND&lt;br /&gt;
SCL&amp;ndash;&amp;gt; A5&lt;br /&gt;
SDA&amp;ndash;&amp;gt; A4&lt;/p&gt;

&lt;p&gt;###Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Wire.h&amp;gt;
#include &amp;lt;HMC5883L.h&amp;gt;

HMC5883L compass;

//Definition of servopin
int servopin = 4; 


void setup(){
  Serial.begin(9600);
  Wire.begin();
  
  compass = HMC5883L(); //new instance of HMC5883L library
  setupHMC5883L(); //setup the HMC5883L
  
  pinMode(servopin,OUTPUT);//设定舵机接口为输出接口
}

// Our main program loop.
void loop(){
  
  float heading = getHeading();
  //Serial.println(heading);
  
  int angle = (int)heading/2;
  /*
  int angle = (int)heading;
  if(angle &amp;gt; 180)
  {
    angle = angle - 180;
  }
  */
  Serial.println(angle);
    //发送50个脉冲
  for(int i=0;i&amp;lt;50;i++)
  {
    //引用脉冲函数
    servopulse(angle);
  }

  delay(100); //only here to slow down the serial print

}

void setupHMC5883L(){
  //Setup the HMC5883L, and check for errors
  int error;  
  error = compass.SetScale(1.3); //Set the scale of the compass.
  if(error != 0) Serial.println(compass.GetErrorText(error)); //check if there
is an error, and print if so

  error = compass.SetMeasurementMode(Measurement_Continuous); // Set the
measurement mode to Continuous
  if(error != 0) Serial.println(compass.GetErrorText(error)); //check if there
is an error, and print if so
}

float getHeading(){
  //Get the reading from the HMC5883L and calculate the heading
  MagnetometerScaled scaled = compass.ReadScaledAxis(); //scaled values from
compass.
  float heading = atan2(scaled.YAxis, scaled.XAxis);

  // Correct for when signs are reversed.
  if(heading &amp;lt; 0) heading += 2*PI;
  if(heading &amp;gt; 2*PI) heading -= 2*PI;

  return heading * RAD_TO_DEG; //radians to degrees
}

void servopulse(int angle)//定义一个脉冲函数
{
  int pulsewidth=(angle*11)+500;  //将角度转化为500-2480的脉宽值
  digitalWrite(servopin,HIGH);    //将舵机接口电平至高
  delayMicroseconds(pulsewidth);  //延时脉宽值的微秒数
  digitalWrite(servopin,LOW);     //将舵机接口电平至低
  delayMicroseconds(20000-pulsewidth);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Result:
The servo will change direction according to the compass&amp;rsquo;s direction. because the compass&amp;rsquo;s range is from 0 to 360, while Servo could only serve for 180 degrees, we need to change th input parameter of compass by divide 2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/tuoji1.jpg&#34; alt=&#34;tuoji1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/tuoji2.jpg&#34; alt=&#34;tuoji2.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/tuoji3.jpg&#34; alt=&#34;tuoji3.jpg&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IRRemote on Arduino</title>
      <link>http://purplepalmdash.github.io/2013/11/14/irremote-on-arduino/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/14/irremote-on-arduino/</guid>
      <description>&lt;p&gt;###Preparation of the IRremote library
Using the downloaded,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	Trusty@SomethingMissing:~/code/arduino/arduino-1.0.5/libraries$ cp -r ../../library/Arduino_IRremote_master/ ./
	Trusty@SomethingMissing:~/code/arduino/arduino-1.0.5/libraries$ pwd
	/home/Trusty/code/arduino/arduino-1.0.5/libraries
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or using git the get the latest one, in fact this one is not new at all , it updates 2 years ago.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git clone git://github.com/shirriff/Arduino-IRremote.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can use it for programming.
###Programming
insert the code and verify the result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	#include &amp;lt;IRremote.h&amp;gt;  // 使用IRRemote函数库
	 
	const int irReceiverPin = 2;  // 红外接收器的 OUTPUT 引脚接在 PIN2 接口 定义irReceiverPin变量为PIN2接口
	 
	IRrecv irrecv(irReceiverPin); // 设置irReceiverPin定义的端口为红外信号接收端口
	decode_results results;    // 定义results变量为红外结果存放位置
	 
	void setup()
	{
	  Serial.begin(9600);   // 开启串口，波特率为9600
	  irrecv.enableIRIn();   // 启动红外解码
	}
	 
	void loop() 
	{
	  if (irrecv.decode(&amp;amp;results)) {   // 解码成功，把数据放入results变量中
	    // 把数据输入到串口
	    Serial.print(&amp;quot;irCode: &amp;quot;);            
	    Serial.print(results.value, HEX); // 显示红外编码
	    Serial.print(&amp;quot;,  bits: &amp;quot;);           
	    Serial.println(results.bits); // 显示红外编码位数
	    irrecv.resume();    // 继续等待接收下一组信号
	  }  
	  delay(600); //延时600毫秒，做一个简单的消抖
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Verification
See the wired image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/wired.png&#34; alt=&#34;wired.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then see how to connect the sensor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/sensors.jpg&#34; alt=&#34;sensors.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now see the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://purplepalmdash.github.io/images/IrRemote.png&#34; alt=&#34;IrRemote.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;###Seeing the light
Now we can use IRremote for controlling our mp3 player. Because it only occupy 1 GPIO, and it could support so many combinations, we can use it to control the player&amp;rsquo;s activities.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>