<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stm32 on Dash</title>
    <link>http://purplepalmdash.github.io/categories/stm32/</link>
    <description>Recent content in Stm32 on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Dec 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/stm32/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GPIO Advanced in STM32</title>
      <link>http://purplepalmdash.github.io/2013/12/01/gpio-advanced-in-stm32/</link>
      <pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/01/gpio-advanced-in-stm32/</guid>
      <description>直接操作寄存器的好处，最主要的就是看中它的快。缺点在于比较晦涩，因为你需要了解到实现的底层。在官方库中，我们可以找到如下的定义：
//./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h: #define PERIPH_BASE ((uint32_t)0x40000000) /*!&amp;lt; Peripheral base address in the alias region */ //./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h: #define APB2PERIPH_BASE (PERIPH_BASE + 0x10000) //./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h: #define GPIOA_BASE (APB2PERIPH_BASE + 0x0800) //./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h: #define GPIOA ((GPIO_TypeDef *) GPIOA_BASE) // Definition of the GPIO Types /** * @brief General Purpose I/O */ typedef struct { __IO uint32_t CRL; __IO uint32_t CRH; __IO uint32_t IDR; __IO uint32_t ODR; __IO uint32_t BSRR; __IO uint32_t BRR; __IO uint32_t LCKR; } GPIO_TypeDef; /** * IO definitions * * define access restrictions to peripheral registers */ #ifdef __cplusplus #define __I volatile /*!</description>
    </item>
    
    <item>
      <title>STM32 and 25F080</title>
      <link>http://purplepalmdash.github.io/2013/12/01/stm32-and-25f080/</link>
      <pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/01/stm32-and-25f080/</guid>
      <description>SST25F080,高达 1M 字节的串行 FLASH 存储器,此芯片为-50 版,即 SPI 速度可达到 50M,利用 STM32 的最高速 SPI 接口(36M),读写速度绝对不比并行 FLASH 慢.
连线图如下：</description>
    </item>
    
    <item>
      <title>RTC on STM32</title>
      <link>http://purplepalmdash.github.io/2013/11/30/rtc-on-stm32/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/30/rtc-on-stm32/</guid>
      <description>RTC(Real Time Clock) 在STM32中可以理解为内置的一个部件，和传说中的DS1302是有差别的。尽管官方发布的程序可以将RTC搞成一个万年历。
###配置RTC RTC需要顺带使用后备寄存器， 因为RTC是一个简单的秒中断定时器，关于年日月分秒的信息需要在掉电保存时依然放在某个地方，这个地方就是STM32的后备寄存器。配置好以后，尽管系统关电，依靠板子上的后备电池，依然可以保存32768的晶振和后备寄存器的数据。
配置RTC的方法：
	#include &amp;quot;stm32f10x_bkp.h&amp;quot; #include &amp;quot;stm32f10x_pwr.h&amp;quot; #include &amp;quot;stm32f10x_rtc.h&amp;quot; //使能一些外设 RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE); PWR_BackupAccessCmd(ENABLE);  ###判断RTC是否被配置过 下面的函数被用于判断RTC是否被配置过：
/************************************************************** ** 函数名:TestRtc ** 功能:测试RTC用 ** 注意事项:用于显示RTC是否已经设置过. ***************************************************************/ void TestRtc(void) { if(RTC_Blank) { USART1_Puts(&amp;quot;The Time is not set\r\n&amp;quot;); } else { USART1_Puts(&amp;quot;Time Setted.\r\n&amp;quot;); } }  这个函数判断RTC_Blank全局变量的值，而全局变量的值则在配置RTC的时候被设定。
void RTC_Configuration(void) { //...... if(BKP_ReadBackupRegister(BKP_DR1) != 0xA5A5) { //...... RTC_Blank=1;	//这个标志代表RTC是没有预设的(或者说是没有上纽扣电池) }  如果RTC后备寄存器的值为设定为0xA5A5，则代表RTC已经被设置过。否则，我们认为它处于未被设置过的状态。
###使用RTC的秒中断 在NVIC中，需要有下列的定义，以标识RTC的秒中断。
	/* RTC */ NVIC_InitStructure.</description>
    </item>
    
    <item>
      <title>STM32中的Systick</title>
      <link>http://purplepalmdash.github.io/2013/11/30/stm32zhong-de-systick/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/30/stm32zhong-de-systick/</guid>
      <description>Cortx-M3特有的SysTick可以很方便的实现定时。系统始终的频率和开启系统时钟中断主要在RCC.c里进行设置：
	//SYSTICK分频--1ms的系统时钟中断 if (SysTick_Config(SystemCoreClock / 1000)) { /* Capture error */ while (1); } // The definition of the SysTick_Config: /** * @brief Initialize and start the SysTick counter and its interrupt. * * @param ticks number of ticks between two interrupts * @return 1 = failed, 0 = successful * * Initialise the system tick timer and its interrupt and start the * system tick timer / counter in free running mode to generate * periodical interrupts.</description>
    </item>
    
    <item>
      <title>STM使用库函数读写Flash</title>
      <link>http://purplepalmdash.github.io/2013/11/30/stmshi-yong-ku-han-shu-du-xie-flash/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/30/stmshi-yong-ku-han-shu-du-xie-flash/</guid>
      <description>代码非常之简单：
#define	FLASH_ADR	0x08008000	//要写入数据的地址 #define	FLASH_DATA	0x5a5a5a5a	//要写入的数据 int main(void) { u32 tmp; ChipHalInit();	//片内硬件初始化 ChipOutHalInit();	//片外硬件初始化 //判断此FLASH是否为空白 tmp=*(vu32*)(FLASH_ADR); if(tmp==0xffffffff) { FLASH_Unlock(); FLASH_ProgramWord(FLASH_ADR,FLASH_DATA); FLASH_Lock(); USART1_Puts(&amp;quot;The destination is empty, Data has been written in!\r\n&amp;quot;); } else if(tmp==FLASH_DATA) { USART1_Puts(&amp;quot;The destination data is the same as certification data!\r\n&amp;quot;); } else { USART1_Puts(&amp;quot;The destination data is not equal to certification data, may caused via written error, or the destination is not empty!\r\n&amp;quot;); FLASH_Unlock(); FLASH_ErasePage(FLASH_ADR); FLASH_Lock(); USART1_Puts(&amp;quot;Erased the written destination!</description>
    </item>
    
    <item>
      <title>STM32上的定时器</title>
      <link>http://purplepalmdash.github.io/2013/11/29/stm32shang-de-ding-shi-qi/</link>
      <pubDate>Fri, 29 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/29/stm32shang-de-ding-shi-qi/</guid>
      <description>使用定时器的好处是，等待某个时隙的同时还可以干别的事，而定时器的时间一到，得到一个中断后对应执行中断函数中的服务例程而已。STM32的定时器非常之复杂而强大，配置和使用都要花很大精力。
打开TIM2线的程序如下：
void TIM_Configuration(void) { //...... /* TIM2 clock enable */ RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); //......  有关定时器的设置如下：
	/* 基础设置*/ TIM_TimeBaseStructure.TIM_Period = 8000;	//计数值 TIM_TimeBaseStructure.TIM_Prescaler = 7200-1; //预分频,此值+1为分频的除数 TIM_TimeBaseStructure.TIM_ClockDivision = 0x0; // TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //向上计数  这里设置的是定时器溢出控制,分频值的计算就是上述代码中提到的预分频的设置。 TIM2属于低速总线，这条总线最高只能达到36M的速度，芯片内部还有一个X2的倍频器，用于将低速的32M倍频成72M， 库中已经默认有实现。所以我们这里使用的TIM2其速度依然是72M， 如果预设分频为7200的话，分频后的结果就是72M/7200=10K(72000000&amp;frasl;7200). 我们可以把这个值变大或变小，以获得更慢或更快的分频速度。
计数值设置的是8000，计数器向上计数到8000的时候会溢出。因而溢出的时间是8000/10K=0.8s 比较值的设置如下：
	u16 CCR1_Val = 4000; u16 CCR2_Val = 2000; u16 CCR3_Val = 1000; u16 CCR4_Val = 500; /* 比较通道1*/ TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Inactive; //输出比较非主动模式 TIM_OCInitStructure.TIM_Pulse = CCR1_Val; TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;	//极性为正 TIM_OC1Init(TIM2, &amp;amp;TIM_OCInitStructure); TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Disable);	//禁止OC1重装载,其实可以省掉这句,因为默认是4路都不重装的.</description>
    </item>
    
    <item>
      <title>关于STM32板上的12864液晶(2)</title>
      <link>http://purplepalmdash.github.io/2013/11/28/guan-yu-stm32ban-shang-de-12864ye-jing-1/</link>
      <pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/28/guan-yu-stm32ban-shang-de-12864ye-jing-1/</guid>
      <description>###有关电路 上一章讲的是12864的基础知识。这一章里来看12864和stm32板的连接和驱动的问题。
有关12864小LCD的连接，在PDF中我们可以找到如下的表项:
   功能模块 占用模块 备注     12864小LCD PC4,PB2,PB11,PB13,PB15 PC4:A0,同时也是 CH375 和 TFT 的 A0;
PB2:BOOT1,LCD 的 CS 脚;
PB11:28J60 和大小 LCD 的复位脚    再结合电路图：
关于GPIO口的设置，我们可以看到有这样的定义：
	typedef enum { GPIO_Mode_AIN = 0x0, GPIO_Mode_IN_FLOATING = 0x04, GPIO_Mode_IPD = 0x28, GPIO_Mode_IPU = 0x48, GPIO_Mode_Out_OD = 0x14, GPIO_Mode_Out_PP = 0x10, GPIO_Mode_AF_OD = 0x1C, GPIO_Mode_AF_PP = 0x18 }GPIOMode_TypeDef;  而在stm32的Datasheet中有如下的配置模式：
最低的8个bit和表中是一一对应的，其中通用输出/复用功能输出的mode1/mode0的值为00.
因为PB15是MOSI2口， PB13是SCK2口，所以这两个管脚需要被设置为AF模式的。AF代表复用功能。PP代表push-pull.
	/* PB15-MOSI2,PB13-SCK2*/ /* Why PB14 should be enabled?</description>
    </item>
    
    <item>
      <title>关于STM32板上的12864液晶(3)</title>
      <link>http://purplepalmdash.github.io/2013/11/28/guan-yu-stm32ban-shang-de-12864ye-jing-3/</link>
      <pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/28/guan-yu-stm32ban-shang-de-12864ye-jing-3/</guid>
      <description>###如何控制液晶屏幕 ASCII码的可打印字符的范围在0x20 ~ 0x7f之间， 0x20 是空格字符，0x7f是delete字符。 最开始我们需要在内存中建立一张关于可打印字符的表。用于表示在液晶屏幕上如何显示出该字符，即该字符的点阵排列。
下图是可以打印的ASCII/Unicode 0-127的值：
点阵数组：
	const u8 Asii8[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x06,0x5F,0x06,0x00,0x00,0x07,0x03,0x00, 0x07,0x03,0x00,0x24,0x7E,0x24,0x7E,0x24, 0x00,0x24,0x2B,0x6A,0x12,0x00,0x00,0x63, 0x13,0x08,0x64,0x63,0x00,0x36,0x49,0x56,  来个例子：
	#: 0x00, 0x24, 0x7e, 0x24, 0x7e, 0x24 00000000 00100100 01111110 00100100 01111110 00100100  对应的1代表将该点的液晶点点上。
要注意，实际的显示应该是倒过来的，即： 把你的脖子顺时针转90度看上面的二进制表达式。
在LCD上设置需要写入的坐标，
	/************************************************************** **函数名 :LcdSetXP **功能:设置坐标** **注意事项:这里设置的坐标不是X,Y,而是X,PAGE.因为黑白屏一次写入的数据为8个点,而且为竖 **	式写入,故纵坐标是以页为单位,64个点共8页 ***************************************************************/ void LcdSetXP(u8 x,u8 page) { LcdCmd((page&amp;amp;0x07)+0xb0);	//设置页指针 LcdCmd((x&amp;gt;&amp;gt;4)|0x10); LcdCmd(x&amp;amp;0x0f); }  128X64的屏幕一共有8192个点， 每一个字符用48个点来表示，即8X6。所以每一个字的X坐标长度应该是6, 而Y坐标应该是8. 一个page代表8个点。
考虑下面代码:
	LcdSetXP(0,1); LcdChar8(&#39;T&#39;); LcdChar8(&#39;E&#39;); LcdChar8(&#39;S&#39;); LcdChar8(&#39;T&#39;); LcdChar8(&#39; &#39;); LcdChar8(&#39;O&#39;); LcdChar8(&#39;K&#39;); LcdChar8(&#39;!</description>
    </item>
    
    <item>
      <title>关于STM32板上的12864液晶</title>
      <link>http://purplepalmdash.github.io/2013/11/27/guan-yu-stm32ban-shang-de-12864ye-jing/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/27/guan-yu-stm32ban-shang-de-12864ye-jing/</guid>
      <description>板子是09年入手的，但是一直没时间好好玩，最近端起来觉得有必要好好研究一番。为了以后翻阅方便，全中文记下来。
###12864 通常所说的12864LCD显示块是所说的点阵液晶显示模块，就是由128X64个液晶显示点组成的一个128列X64行的阵列，所以也就叫成了12864。每个显示点都对应着有一位二进制数，0表示灭，1表示亮。存储这些点阵信息的RAM被称为显示数据存储器。如果要显示某个图形或汉字就是将相应的点阵信息写入到对应的存储单元中。图形或汉字的点阵信息是由自己设计，这时候问题的关键是显示点在液晶屏上的位置与其在存储器中的地址之间的关系。
显示点在64X64液晶屏上的位置由列号（line,0~63）与行号（line,0~63）确定。512X8 bits RAM中某个存储单元的地址由页地址（Xpage,0~7）和列地址（Yaddress,0~63）确定。每个存储单元存储8个液晶点的显示信息。也就是说，一个页的大小是8. 运算关系则是64x64=(64x8)x8=512x8.
由于多数液晶显示模块的驱动电路是由一片行驱动器和两片列驱动器构成，所以12864液晶屏实际上是由左右两块独立的64X64液晶屏拼接而成，每半屏有一个512X8 bits显示数据RAM。左右半屏驱动电路及存储器分别由片选信号CS1和CS2选择。（少数厂商为了简化用户设计，在模块中增加译码电路，使得128X64液晶屏就是一个整屏，只需一个片选信号。）
如如果点亮12864的屏中（20，30）位置上的液晶点，因列地址30小于64，该点在左半屏第29列，所以CS1有效；行地址20除以8取整得2，取余得4，该点在RAM中页地址为2，在字节中的序号为4；所以将二进制数据00010000（也可能是00001000，高低顺序取决于制造商）写入Xpage=2，Yaddress=29的存储单元中即点亮（20，30）上的液晶点。
这是为了为了使液晶点位置信息与存储地址的对应关系更直观关，将64X64液晶屏从上至下8等分为8个显示块，每块包括8行X64列个点阵。每列中的8行点阵信息构成一个8bits二进制数，存储在一个存储单元中。（需要注意：二进制的高低有效位顺序与行号对应关系因不同商家而不同）存放一个显示块的RAM区称为存储页。即64X64液晶屏的点阵信息存储在8个存储页中，每页64个字节，每个字节存储一列(8行)点阵信息。因此存储单元地址包括列地址（Yaddress,0~63）和页地址（Xpage,0~7）。
以上就是对于12864点阵液晶显示器的原理介绍。
在DX32开发板上的液晶是怎么一回事呢？它的封装图如下：
Datasheet有72页，乱七八糟的会讲一大堆。但是事实上我们只需要关注和软件有关的方面，拿一个很简单的开启/关闭LCD的例子来说，DataSheet里有这样的表格：
   Command A0 /RD /WR D7 D6 D5 D4 D3 D2 D1 D0 Function     Display On/OFF 0 1 0 1 0 1 0 1 1 1 1 LCD Display ON   Display On/OFF 0 1 0 1 0 1 0 1 1 1 0 LCD Display OFF    那么会有对应的代码:</description>
    </item>
    
    <item>
      <title>How to setup STM32 Project in eclipse</title>
      <link>http://purplepalmdash.github.io/2013/11/25/how-to-setup-stm32-project-in-eclipse/</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/25/how-to-setup-stm32-project-in-eclipse/</guid>
      <description>###Preparation ####STM Standard Peripheral Lib Download Link for STSW-STM32054STM32F10x standard peripheral library :
http://www.st.com/web/catalog/tools/FM147/CL1794/SC961/SS1743/PF257890
Unsip the downloaded library and you will get several folders, the Libraries folder is the pure libs. ####Cross-Compiler for STM32 Download the cross-compiler from CodeSourcery ARM EABI toolchain - Mentor Graphics:
https://sourcery.mentor.com/sgpp/lite/arm/portal/subscription?@template=lite
You have to choose EABI version. Download and install it, you will get &amp;ldquo;arm-none-eabi-&amp;rdquo; prefixed cross-compiler.
####Eclipse plugins Help-&amp;gt; Install New Software, Add the URL for gnuarm:</description>
    </item>
    
    <item>
      <title>Setup an embedded development enviroment for STM32</title>
      <link>http://purplepalmdash.github.io/2013/11/21/setup-an-embedded-development-enviroment-for-stm32/</link>
      <pubDate>Thu, 21 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/21/setup-an-embedded-development-enviroment-for-stm32/</guid>
      <description>###Download the toolchain We should download the toolchain from the ARM employee maintained website, the download address is located at: https://launchpad.net/gcc-arm-embedded, use following command:
	$ wget https://launchpad.net/gcc-arm-embedded/4.7/4.7-2013-q3-update/+download/gcc-arm-none-eabi-4_7-2013q3-20130916-linux.tar.bz2  untar the downloaded package and then add it to your system path, my solution is directly add some alias into ~/.bashrc:
	### Add Cross_Compiler for eclipse based stm32 #export PATH=&amp;quot;/media/y/embedded/cortex/gcc-arm-none-eabi-4_7-2013q3/bin:$PATH&amp;quot; alias setstm=&#39;export PATH=&amp;quot;/media/y/embedded/cortex/gcc-arm-none-eabi-4_7-2013q3/bin:$PATH&amp;quot;&#39;  ###Eclipse Configuration We have to install zylin for flashing the stm32 board.</description>
    </item>
    
  </channel>
</rss>