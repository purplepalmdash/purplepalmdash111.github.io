<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Dash</title>
    <link>http://purplepalmdash.github.io/categories/web/</link>
    <description>Recent content in Web on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Mar 2017 19:22:19 +0800</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working Tips On Dimension</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/17/working-tips-on-dimension/</link>
      <pubDate>Fri, 17 Mar 2017 19:22:19 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/17/working-tips-on-dimension/</guid>
      <description>背景 最近在帮一个亲戚做企业类网站，最初方案是基于Docker化的WordPress，搭建好以后 一直不闻不问，思想可能是因为WP对于小白用户来说太过于复杂的缘故。
正好今天查看hugo的模板方案时，发现有一个很美观的静态页面叫Dimension, 于是起 了把网站迁移到静态网站上的心思。
Dimension主题预览:
搭建环境 首先从github下载源代码:
$ git clone https://github.com/sethmacleod/dimension.git $ mkdir Website/themes $ mv dimension-master Website/themes/dimension $ cp -ar Website/themes/dimension/exampleSite/* Website/  经过上面的步骤，我们已经设置了模板可工作的DEMO环境，在Website目录下执行以下命令， 分别为编译整个静态网站和预览更改:
$ cd Website $ hugo $ sudo python2 -mSimpleHTTPServer 18118  现在打开你的浏览器访问http://localhost:18118，即可看到本地搭建的dimension示例网站。
自定义 如果要创建自己的页面，则hugo new Your-Page.md即可创建出来页面，编辑方法就是针对markdown的编辑。
多语言支持 默认的DEMO提供了对德语和英语的支持，我们只需要删除config.toml文件中的[languages]的字段就可以, 例如删除:
[languages] [languages.en] languageName = &amp;quot;English&amp;quot; weight = 1 title = &amp;quot;Dimension&amp;quot;  logo修改 默认的logo使用的是fontawesome字体，我们可以修改为自定义的图片，需要修改以下两个地方:
config.toml文件:
- logo = &amp;quot;fa-diamond&amp;quot; - logo = &amp;quot;/images/jqlogo.</description>
    </item>
    
    <item>
      <title>用Flask框架搭建Web App</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/12/%E7%94%A8flask%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BAweb-app/</link>
      <pubDate>Tue, 12 Jul 2016 15:26:23 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/12/%E7%94%A8flask%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BAweb-app/</guid>
      <description>拥有Web界面的好处是显而易见的，譬如说，我们可能需要下载Youtube上的某一段视频。传统的操 作方式是这样的：登录位于国外的vps-&amp;gt; 下载youtube视频到VPS -&amp;gt; 退出vps登录 -&amp;gt;采用某种手段 (ftp/scp?)传送到本地。这时候如果有一个运行于远端VPS上的Web App，本地输入Youtube视频链接 ，下载完毕后直接生成下载链接，这该有多好！这里我们来实现这个功能。
Flask 运行环境 远程VPS位于Digital Ocean上，运行Ubuntu14.04。 这里我们基于python virtualenv来构建Flask 开发框架.
$ sudo apt-get install -y python-virtualenv $ virtualenv myflask $ source ~/myflask/bin/activate $ mkdir ~/flask_youtube $ vim requirements.txt Flask==0.10.1 $ pip install -r requirements.txt  运行完上述命令后，flask运行环境就已经就绪了。
Flask App 这里我们参考了以下链接（实际上是照搬):
http://charlesleifer.com/blog/a-flask-front-end-and-chrome-extension-for-youtube-dl/
也参考了(关于virtualenv):
https://realpython.com/blog/python/setting-up-a-simple-ocr-server/
$ vim youtube.py import subprocess import sys from flask import Flask, flash, redirect, request, render_template, url_for DEBUG = False SECRET_KEY = &#39;this is needed for flash messages&#39; BINARY = &#39;/usr/bin/youtube-dl&#39; DEST_DIR = &#39;/home/dash/videos&#39; OUTPUT_TEMPLATE = &#39;%s/%%(title)s-%%(id)s.</description>
    </item>
    
    <item>
      <title>Speed-Up the WP website in TianChao</title>
      <link>http://purplepalmdash.github.io/2015/01/30/speed-up-the-wp-website-in-tianchao/</link>
      <pubDate>Fri, 30 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/30/speed-up-the-wp-website-in-tianchao/</guid>
      <description>Since our Great Fire Wall forbidden the google, thus all of the google related service becomes available in china, this leads to access to wordpress based website which uses google online fonts pretty slow. Following is how to speedup your website without too many changes:
First go to your website&amp;rsquo;s folder, find the files which calls fonts.googleapis.com:
$ grep -i &amp;quot;fonts.googleapis.com&amp;quot; ./ -r ./wp-content/themes/twentytwelve/functions.php:	$font_url = add_query_arg( $query_args, &amp;quot;$protocol://fonts.googleapis.com/css&amp;quot; ); .</description>
    </item>
    
    <item>
      <title>Enable Apache2 Redirect</title>
      <link>http://purplepalmdash.github.io/2015/01/22/enable-apache2-redirect/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/22/enable-apache2-redirect/</guid>
      <description>Problem Want to redirect from http://xxx/ to http://xxx/a/b
Solution Change the configuration file of the /etc/apache2/sites-enabled/000-default, enable the RedirectMatch:
	# For forwarding all of the request to &#39;/&#39; TO &#39;/bin/view&#39; RedirectMatch ^/$ /a/b  Restart the service of apache2 then everything goes OK.</description>
    </item>
    
    <item>
      <title>Switching To Blogging Using DO</title>
      <link>http://purplepalmdash.github.io/2015/01/19/switching-to-blogging-using-do/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/19/switching-to-blogging-using-do/</guid>
      <description>Since I changed the working PC, so I need to switch from the old machine to the new machine, while the new machine&amp;rsquo;s network speed is pretty slow, that force me to switching from the local side working to vps-side working, following is the steps for Using DigitalOcean for updating my blog.
Repository First using the git for pulling the repository from the github, following this article for setting the whole octopress system:</description>
    </item>
    
    <item>
      <title>Trouble Shooting On Lost SSH Connection</title>
      <link>http://purplepalmdash.github.io/2014/12/30/trouble-shooting-on-lost-ssh-connection/</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/30/trouble-shooting-on-lost-ssh-connection/</guid>
      <description>I found lots of ssh connection attack info under the folder of /var/log/btmp, So I decide to change the sshd default listening port, from 22 to xxxx. Following is the steps for doing this:
Change SSHD Listening Port Change the default port from 22 to xxxx
# vim /etc/ssh/sshd_config Change the port from 22 to xxxx # service ssh restart  Now, congratulations, you lost all of your connections, since you have enable the iptables and banned all of the other ports.</description>
    </item>
    
    <item>
      <title>Set Tiny Tiny Rss Reader on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/12/29/set-tiny-tiny-rss-reader-on-digitalocean/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/29/set-tiny-tiny-rss-reader-on-digitalocean/</guid>
      <description>Since Google Reader has been closed, many guys cannot find suitable Rss Reader for personal use. Following is a simple guildeline for setting up the Tiny Tiny Rss Reader on DigitalOcean, using docker, it&amp;rsquo;s pretty simple for setting up .
Container Setup Build two containers:
cd code mkdir TinyTinyRss cd TinyTinyRss/ git clone https://github.com/clue/docker-ttrss.git cd docker-ttrss/ docker run -d --name ttrssdb nornagon/postgres docker run -d --link ttrssdb:db -p 8078:80 clue/ttrss  ttrssdb is the dababase name for postgres, while the clue/ttrss is the tinytinyRss Webapp.</description>
    </item>
    
    <item>
      <title>Dockerize Mail Sender</title>
      <link>http://purplepalmdash.github.io/2014/12/24/dockerize-mail-sender/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/24/dockerize-mail-sender/</guid>
      <description>In DigitalOcean VPS, which runs the Ubuntu 14.04.1 LTS, setup a mail sender server.
Installation Install the docker.io via:
# apt-get install docker.io  Git clone the repository from the github, configure it and build the container:
# pwd /root/code/docker_mail # git clone https://github.com/lava/dockermail.git # ls dockermail # cd dockermail # cat mail-base/domains *******.com.cn # cat mail-base/passwords catch-all@xxxxx.com.cn:{PLAIN}password123 admin@xxxxxx.com.cn:{SHA256-CRYPT}$5$3qaCC/fV65Adtfoy$O20EXoSOcgWKf5NyAZnXAtGPQoSgeYRjLm56M25.H12 # make  Run the containers:
root@lilimarleen:~/code/docker_mail/dockermail# make run-all docker run -d -p 0.</description>
    </item>
    
    <item>
      <title>Create Vagrant For JD</title>
      <link>http://purplepalmdash.github.io/2014/12/19/create-vagrant-for-jd/</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/19/create-vagrant-for-jd/</guid>
      <description>Purpose For deploying the development environment in the Vagrant based environment, choose ubuntu 14.04.
Create List the exising Vagrants:
$ vagrant box list panamax-coreos-box-494.4.0 (virtualbox, 0)  Now download the vbox file of 14.04 daily Cloud image i386 from www.vagrantbox.es:
$ wget https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-i386-vagrant-disk1.box  Though this method could starts the vbox, but it&amp;rsquo;s not clean, it will have problems in our deliveris. So use the result from https://atlas.hashicorp.com/boxes/search
$ vagrant init ubuntu/trusty32 $ vagrant up  Current we use 32, because we may have windowsxp users, or 32-bit system users.</description>
    </item>
    
    <item>
      <title>Dockerize Wordpress On DigitalOcean&#39;s CoreOS</title>
      <link>http://purplepalmdash.github.io/2014/12/13/dockerize-wordpress-on-digitaloceans-coreos/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/13/dockerize-wordpress-on-digitaloceans-coreos/</guid>
      <description>Wordpress Install it via:
$ docker pull tutum/wordpress  Run it via:
$ docker run -p 80:80 tutum/wordpress &amp;amp;  Now configure the backend, and you could directly access http://Your_IP_Address for this wordpress website.
Import Database And Static Files Since I have an old website, I want to import it in this container, following is the steps of how-to.
The exising database runs on Debian 7, and its platform is arm-based, see if we could directly retrieve the wordpress and extract them into it.</description>
    </item>
    
    <item>
      <title>Re-Write WeatherAPP</title>
      <link>http://purplepalmdash.github.io/2014/12/10/re-write-weatherapp/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/10/re-write-weatherapp/</guid>
      <description>Background Building the Environment First clone the Vagrant Repo from:
$ pwd /media/y/Vagrant/CoreOS $ git clone https://github.com/coreos/coreos-vagrant.git $ cd coreos-vagrant $ cp config.rb.sample config.rb $ cp user-data.sample user-data  Cluster Setting Edit the config.rb, for configurating the instance and the official CoreOS channel:
# Size of the CoreOS cluster created by Vagrant $num_instances=3 # Official CoreOS channel from which updates should be downloaded $update_channel=&#39;stable&#39;  Now start the vagrant and view its status:</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(5)</title>
      <link>http://purplepalmdash.github.io/2014/12/06/tips-on-30days30skills-5/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/06/tips-on-30days30skills-5/</guid>
      <description>Since the RESTful API is a little bit hard for setup, I ignore the Day10 and Day11, jump to Day 12, OpenCV.
Day 12 - OpenCV Get the jar file First download the opencv from: http://sourceforge.net/projects/opencvlibrary/files/latest/download
$ unzip *.zip $ cd opencv-2.4.10 $ cmake -G &amp;quot;Unix Makefiles&amp;quot; -D CMAKE_CXX_COMPILER=/usr/bin/g++ -D CMAKE_C_COMPILER=/usr/bin/gcc -D WITH_CUDA=ON .. $ make -j4 &amp;amp;&amp;amp; make install  Trouble shooting when generating openCV jar file:
Correct output should be:</description>
    </item>
    
    <item>
      <title>Use VCCW For Deploying WP</title>
      <link>http://purplepalmdash.github.io/2014/12/06/use-vccw-for-deploying-wp/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/06/use-vccw-for-deploying-wp/</guid>
      <description>For deploying differenet versions of Wordpress, I searched various kinds of solutions, includeing docker and vagrant, finally I found VCCW(A Wordpress development environment) is what I want, because I could freely changes the WP versions, so following is the guideline for installing and configurating the whole virtualmachine.
Install The installation steps are listed as:
$ vagrant plugin install vagrant-hostsupdater $ wget https://github.com/miya0001/vccw/archive/1.9.1.tar.gz $ tar xzvf 1.9.1.tar.gz $ cd vccw-1.9.1 $ vagrant up  This will start downloading and configrating the VM, it will cost sometimes.</description>
    </item>
    
    <item>
      <title>Flask&amp;amp;AngularJS Blog Tips</title>
      <link>http://purplepalmdash.github.io/2014/12/04/flask-and-angularjs-blog-tips/</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/04/flask-and-angularjs-blog-tips/</guid>
      <description>Background For setup the local blog which used for recording some articles, and provide the RESTful APIs for remote usage.
The tutorial is located at:
http://blog.john.mayonvolcanosoftware.com/building-a-blog-using-flask-and-angularjs-part-1/
Installation of Packages First preapare the environment using virtualenv2:
$ virtualenv2 flask_blog $ source flask_blog/bin/activate  Now write a requirements.txt file, under the current folder, the content is:
Flask==0.10.1 Flask-Bcrypt==0.6.0 Flask-HTTPAuth==2.2.1 Flask-RESTful==0.2.12 Flask-SQLAlchemy==1.0 Flask-WTF==0.10.0 Jinja2==2.7.3 MarkupSafe==0.23 SQLAlchemy==0.9.7 SQLAlchemy-Utils==0.26.9 WTForms==2.0.1 WTForms-Alchemy==0.12.8 WTForms-Components==0.9.5 Werkzeug==0.9.6 aniso8601==0.83 decorator==3.</description>
    </item>
    
    <item>
      <title>Enable Timestamp In New Octopress Theme</title>
      <link>http://purplepalmdash.github.io/2014/12/03/enable-timestamp-in-new-octopress-theme/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/03/enable-timestamp-in-new-octopress-theme/</guid>
      <description>After installing the flattern theme of octopress, I found the post date missed. Following is the steps for catching it back.
rake install[&#39;flatten&#39;]  Modify the following file:
$ cat .themes/flatten/source/_includes/post/date.html  Then in .themes/flatten/source/_layouts/post.html, modify the following lines:
 &amp;lt;p class=&amp;quot;meta&amp;quot;&amp;gt; //.....// &amp;lt;/p&amp;gt;  After modification, you would see the time is displayed before the comment numbers.
Notice, the modification is not visible in codeblocks because the embedded symbol could not be resolved thus will cause build error, so the detailed code would be only fetched from my github repository but remains blank codeblocks here in this article.</description>
    </item>
    
    <item>
      <title>用Flask搭建你自己的Restful API</title>
      <link>http://purplepalmdash.github.io/2014/12/03/yong-flaskda-jian-ni-zi-ji-de-restful-api/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/03/yong-flaskda-jian-ni-zi-ji-de-restful-api/</guid>
      <description>背景 最近在过一个《30天学习30种新技术》，过到第10天用Phonegap开发APP的时候，发现作者提供的API不可用，所以费心研究了一下Restful API, 顺利构建出了环境写完了那个APP，下面是一些摘要。
我用的Tutorial来自这里：
http://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask
开发环境是ArchLinux.
Hello Flask 原Tutorial中给出的是一个关于todo-list的实现，我们从最简单的&amp;rdquo;Hello Flask&amp;rdquo;开始：
首先安装python虚拟环境和flask，注意因为Arch默认的python版本是3，所以这里我们使用了virtualenv2来创建python虚拟运行环境。
$ mkdir todo-api $ cd todo-api $ virtualenv2 flask $ source flask/bin/activate (flask) $ pip install flask  在当前目录下建立app.py文件， 输入以下内容：
#!flask/bin/python from flask import Flask app = Flask(__name__) @app.route(&#39;/&#39;) def index(): return &amp;quot;Hello, Flask!&amp;quot; if __name__ == &#39;__main__&#39;: app.run(debug=True)  现在改变文件属性，运行之:
$ chmod a+x app.py $ ./app.py  打开浏览器访问http://127.0.0.1:5000,，我们可以看到Hello Flask已经出现在浏览器里了。
实现最简单的Restful API Flask本身支持很多插件，可以用于实现Restful API，由于我们这里只是做DEMO使用，需求比较简单，我们抛弃那些繁琐的插件，手动来写。
这里我们也不会引入数据库等内容，我们将task任务列表直接保存在内存中，所以一旦断电这些数据就将消失。在实际的生产环境中，我们是需要引入不同的数据库来存储这些数据的。
在上面生成的app.py中添加以下内容:
#!flask/bin/python from flask import Flask, jsonify app = Flask(__name__) tasks = [ { &#39;id&#39;: 1, &#39;title&#39;: u&#39;Buy groceries&#39;, &#39;description&#39;: u&#39;Milk, Cheese, Pizza, Fruit, Tylenol&#39;, &#39;done&#39;: False }, { &#39;id&#39;: 2, &#39;title&#39;: u&#39;Learn Python&#39;, &#39;description&#39;: u&#39;Need to find a good Python tutorial on the web&#39;, &#39;done&#39;: False } ] @app.</description>
    </item>
    
    <item>
      <title>Virtual Node Environment For PhoneGap Development</title>
      <link>http://purplepalmdash.github.io/2014/12/01/virtual-node-environment-for-phonegap-development/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/01/virtual-node-environment-for-phonegap-development/</guid>
      <description>Background I met some tutorials which were write one or two years ago, while at that time the corresponding plugins are in an old version, so I need to find a whole &amp;ldquo;virtual&amp;rdquo; environment for developing these tutorials.
Install Nodeenv &amp;ldquo;Node.js virtual environment builder&amp;rdquo; &amp;mdash; is the introduction for Nodeenv.
Install it via:
$ virtualenv2 venv source venv/bin/activate (venv)[Trusty@~/code/30days/PhoneGap2.9.0]$ $ pip install nodeenv (venv)[Trusty@~/code/30days/PhoneGap2.9.0]$ which nodeenv /home/Trusty/code/30days/PhoneGap2.9.0/venv/bin/nodeenv (venv)[Trusty@~/code/30days/PhoneGap2.9.0]$ nodeenv --version 0.</description>
    </item>
    
    <item>
      <title>Apache Parameter Adjust</title>
      <link>http://purplepalmdash.github.io/2014/11/27/apache-parameter-adjust/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/27/apache-parameter-adjust/</guid>
      <description>Background A wordpress machine runs on DigitalOcean often sudden the mysqld database lost error.
Analyze This is because the memory is exhausted in DO, so first I enable the swap for machine. This method solved the problem for a long time.
But later it seems the robots who sent the rubbish comments continue to attack the system, causing the mysqld halt again, this time, I modified the apahce2&amp;rsquo;s works:</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(3)</title>
      <link>http://purplepalmdash.github.io/2014/11/27/tips-on-30days30skills-3/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/27/tips-on-30days30skills-3/</guid>
      <description>Day 7 - GruntJS(2) GruntJS Markdown Plugin First download the source file:
$ git clone https://github.com/shekhargulati/day7-gruntjs-livereload-example.git $ cd day7-gruntjs-livereload-example $ sudo npm install -g grunt $ grunt $ cd day7-gruntjs-livereload-example $ sudo npm install -g grunt $ npm init $ npm install grunt $ sudo npm install grunt-contrib-uglify grunt-markdown grunt-contrib-watch -g $ grunt &amp;gt;&amp;gt; Local Npm module &amp;quot;grunt-contrib-watch&amp;quot; not found. Is it installed? Running &amp;quot;uglify:build&amp;quot; (uglify) task &amp;gt;&amp;gt; 1 file created.</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(4)</title>
      <link>http://purplepalmdash.github.io/2014/11/27/tips-on-30days30skills-4/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/27/tips-on-30days30skills-4/</guid>
      <description>Day 9 - TextBlob Installation:
Yosemite:TextBlob Trusty$ mkdir myapp Yosemite:TextBlob Trusty$ cd myapp/ Yosemite:myapp Trusty$ virtualenv venv --python=python2.7 Running virtualenv with interpreter /usr/bin/python2.7 New python executable in venv/bin/python Installing setuptools, pip...done. Yosemite:myapp Trusty$ . venv/bin/activate (venv)Yosemite:myapp Trusty$ pip install textblob $ pip install -U textblob $ python -m textblob.download_corpora  After adding the textblob, create flask:
$ pip install flask $ vim app.py $ mkdir templates $ touch templates/index.html  Modify the app.</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(2)</title>
      <link>http://purplepalmdash.github.io/2014/11/26/tips-on-30days30skills-2/</link>
      <pubDate>Wed, 26 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/26/tips-on-30days30skills-2/</guid>
      <description>Day 5 - GruntJS Install via:
$ sudo npm install grunt-cli -g  After running you could see grunt is avaiable:
$ which grunt /usr/local/bin/grunt  Automatically create the package.json via npm init.
Yosemite:GruntJS Trusty$ mkdir blog Yosemite:GruntJS Trusty$ cd blog Yosemite:blog Trusty$ npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sane defaults. See `npm help json` for definitive documentation on these fields and exactly what they do.</description>
    </item>
    
    <item>
      <title>DNSCrypt&#43;ssh</title>
      <link>http://purplepalmdash.github.io/2014/11/23/dnscrypt-plus-ssh/</link>
      <pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/23/dnscrypt-plus-ssh/</guid>
      <description>Sometips for recording how to cross the greatfxxewall:
SSH Use following command for forwarding your flow to remote machine:
alias enablexx=&#39;ssh -C -qTfnN -D 1395 root@xxx.xxx.xxx.xxx  xxx.xxx.xxx.xxx should be the machine outside of China.
Then in your browser set the proxy to 127.0.0.1:1395, while this is the socket proxy, so choose sock4/sock5 for configuration parameters.
DNS Cryption For the DNS flow will be hijacked by greatfxxxewall, we have to encrypt all of the traffics for DNS Querying.</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(1)</title>
      <link>http://purplepalmdash.github.io/2014/11/23/tips-on-30days30skills/</link>
      <pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/23/tips-on-30days30skills/</guid>
      <description>Day 3 - Flask First install the virtualenv environment via:
$ brew install pyenv-virtualenv  Create the 2.7 virtualenv of python, first you have to install 2.7(before you could use list for listing all of the aviable versions), then use following command for creating the 2.7 virtualenv for developing flask:
$ eval &amp;quot;$(pyenv init -)&amp;quot; $ pyenv install --list $ pyenv install 2.7 $ pyenv virtualenv 2.7 venv_For_Flask_2.7 $ pyenv versions $ pyenv activate venv_For_Flask_2.</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills</title>
      <link>http://purplepalmdash.github.io/2014/11/22/tips-on-30days30skills/</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/22/tips-on-30days30skills/</guid>
      <description>This series is the note for learning 30days30skills, the origin web pages could be found at:
http://segmentfault.com/a/1190000000349384
All of these operations should be done under MACOS rather than linux.
Day 1 - bower First install nodejs from following position:
nodejs.org/download/
Git could be installed from APPStore.
Set npm proxy before you do everything, cause I operate under the proxy based network:
npm config set proxy http://xxx.xxx.xxx.xx:xxxx npm config set https-proxy http://xxx.</description>
    </item>
    
    <item>
      <title>Setup Wordpress on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2013/12/23/setup-wordpress-on-ubuntu/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/23/setup-wordpress-on-ubuntu/</guid>
      <description>###Material Just some items on how to setup a wordpress website on Ubuntu12.04 and Ubuntu13.04.
The tutorial for setting up wordpress on Ubuntu12.04 is located at:
https://www.digitalocean.com/community/articles/how-to-install-wordpress-on-ubuntu-12-04
And a tutorial for setting up LAMP server on Ubuntu12.04 is located at:
https://www.digitalocean.com/community/articles/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu
###TroubleShotting I encountered some problem during setup. Following is the solutions for them.
####Delete the previous installed wordpress
	# mysqladmin -uXXXX -pXXXXXXXX drop wordpress Do you really want to drop the &#39;wordpress&#39; database [y/N] y  Then you can Re-Create the database.</description>
    </item>
    
    <item>
      <title>Deploy your octopress website on heroku</title>
      <link>http://purplepalmdash.github.io/2013/12/14/deploy-your-octopress-website-on-heroku/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/14/deploy-your-octopress-website-on-heroku/</guid>
      <description>I&amp;rsquo;ve been using octopress for writing blogs for nearly half of a year. The website is hosted on my family computer, which is a arm-based machine, runs Debian Linux. But such machine can sometimes be powered off by accident. That&amp;rsquo;s while I want to put my webpages onto a stable server. Most of the people put their website on github, but github may be banned in china, so I choose heroku, I think it may be much more safer.</description>
    </item>
    
  </channel>
</rss>