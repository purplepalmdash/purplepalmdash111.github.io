<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Csapp on Dash</title>
    <link>http://purplepalmdash.github.io/categories/csapp/</link>
    <description>Recent content in Csapp on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/categories/csapp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>有关并发(3)</title>
      <link>http://purplepalmdash.github.io/2014/04/04/you-guan-bing-fa-3/</link>
      <pubDate>Fri, 04 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/04/you-guan-bing-fa-3/</guid>
      <description>当一个程序的正确性依赖于一个线程需要在另一个线程到达Y点之前到达它控制流中的x点时，就会发生竞争。竞争是因为程序员假定线程按照某种特殊的轨线穿过执行状态空间，而忘了另一条规则规定的，多线程程序必须对任何可行的轨线都正确工作。
例子如下：
/* * race.c - demonstrates a race condition */ /* $begin race */ #include &amp;quot;csapp.h&amp;quot; #define N 4 void *thread(void *vargp); int main() { pthread_t tid[N]; int i; for (i = 0; i &amp;lt; N; i++) Pthread_create(&amp;amp;tid[i], NULL, thread, &amp;amp;i); //line:conc:race:createthread for (i = 0; i &amp;lt; N; i++) Pthread_join(tid[i], NULL); exit(0); } /* thread routine */ void *thread(void *vargp) { int myid = *((int *)vargp); //line:conc:race:derefarg printf(&amp;quot;Hello from thread %d\n&amp;quot;, myid); return NULL; } /* $end race */  运行结果如下:</description>
    </item>
    
    <item>
      <title>有关并发(2)</title>
      <link>http://purplepalmdash.github.io/2014/04/02/you-guan-bing-fa-2/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/02/you-guan-bing-fa-2/</guid>
      <description>I/O多路技术可以作为并发事件驱动(event-driver)程序的基础。事件驱动中，流作为某种事件的结果前进。逻辑流可以被转化为状态机。
在服务器中，我们可以用I/O多路复用，借助select函数，检测输入事件的发声。当每个已连接描述符准备好可读时，服务器为相应的状态机执行状态转移。在例子中，就是从描述符读入和写回一个文本行。
###并发事件驱动服务器 首先看代码:
	/* * echoservers.c - A concurrent echo server based on select */ /* $begin echoserversmain */ #include &amp;quot;csapp.h&amp;quot; typedef struct { /* represents a pool of connected descriptors */ //line:conc:echoservers:beginpool int maxfd; /* largest descriptor in read_set */ fd_set read_set; /* set of all active descriptors */ fd_set ready_set; /* subset of descriptors ready for reading */ int nready; /* number of ready descriptors from select */ int maxi; /* highwater index into client array */ int clientfd[FD_SETSIZE]; /* set of active descriptors */ rio_t clientrio[FD_SETSIZE]; /* set of active read buffers */ } pool; //line:conc:echoservers:endpool /* $end echoserversmain */ void init_pool(int listenfd, pool *p); void add_client(int connfd, pool *p); void check_clients(pool *p); /* $begin echoserversmain */ int byte_cnt = 0; /* counts total bytes received by server */ int main(int argc, char **argv) { int listenfd, connfd, port; socklen_t clientlen = sizeof(struct sockaddr_in); struct sockaddr_in clientaddr; static pool pool; if (argc !</description>
    </item>
    
  </channel>
</rss>