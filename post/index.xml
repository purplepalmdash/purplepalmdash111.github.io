<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dash</title>
    <link>http://purplepalmdash.github.io/post/</link>
    <description>Recent content in Posts on Dash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Dec 2017 11:46:11 +0800</lastBuildDate>
    
	<atom:link href="http://purplepalmdash.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>sas2208configuration</title>
      <link>http://purplepalmdash.github.io/blog/2017/12/26/sas2208configuration/</link>
      <pubDate>Tue, 26 Dec 2017 11:46:11 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/12/26/sas2208configuration/</guid>
      <description>Configuration Steps Select the SAS Controller:
Ignore the foreign configration, hit cancel:
Display all of the disks:
Select one disk(1T-Disk):
Click configuration wizard:
Select Configuration Method:
Configure a new disk:
Click &amp;ldquo;Accept DG&amp;rdquo; for accepting the configurations.
Ignore add Span:
Add to Span:
Now you add successfully.
Click Accept:
Click Save Configuration, and you will be asked to initialize the new virtual driver, click yes.
Then save and reboot your system, your configuration will be done.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnRPIAndRedSocks</title>
      <link>http://purplepalmdash.github.io/blog/2017/12/24/workingtipsonrpiandredsocks/</link>
      <pubDate>Sun, 24 Dec 2017 22:10:31 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/12/24/workingtipsonrpiandredsocks/</guid>
      <description>AIM To setup an wireless ap which could enable all of the equipment free to internet.
Startup Download the rpi image from:
http://downloads.raspberrypi.org/raspbian/images/raspbian-2017-12-01/2017-11-29-raspbian-stretch.zip
Then unzip this image file and write to sd card.
Plugin your sd card into your rpi board, startup. At the very beginning, you have to enable the ssh via:
$ sudo systemctl enable ssh &amp;amp;&amp;amp; sudo systemctl start ssh  Then you could login remotely using ssh, default username/password is pi/raspberry.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnInternetSharing</title>
      <link>http://purplepalmdash.github.io/blog/2017/12/18/workingtipsoninternetsharing/</link>
      <pubDate>Mon, 18 Dec 2017 15:08:12 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/12/18/workingtipsoninternetsharing/</guid>
      <description>AIM To set up an free wireless solution working for WebDuino.
Because I located in china mainland, while our internet were forbidden by government(Fuck GFW!), so I have to find another way for accross the firewall and let WebDuino fetch back its updates.
Hardware Environment Laptop.
Wireless dongle(Fast)
Bus 001 Device 002: ID 0bda:8179 Realtek Semiconductor Corp. RTL8188EUS 802.11n Wireless Network Adapter  VirtualMachine I set a virtual machine which runs in virtualbox.</description>
    </item>
    
    <item>
      <title>VmwareBasedESXiWorkingTips</title>
      <link>http://purplepalmdash.github.io/blog/2017/12/14/vmwarebasedesxiworkingtips/</link>
      <pubDate>Thu, 14 Dec 2017 15:15:42 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/12/14/vmwarebasedesxiworkingtips/</guid>
      <description>Steps Create ESXI vm machine:
Typical setting:
I will install the operating system later:
Select guest operating system(Select ESXi 6.0):
Location:
Select 8 core:
32GB Memory:
Use NAT:
LSI logic:
scsi:
Create new, 20GB, single file. name it:
Customize, add an 280 GB Disk, also select the iso file.Click for installation.</description>
    </item>
    
    <item>
      <title>HPLRelated</title>
      <link>http://purplepalmdash.github.io/blog/2017/12/13/hplrelated/</link>
      <pubDate>Wed, 13 Dec 2017 17:03:49 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/12/13/hplrelated/</guid>
      <description>Parameter See Images:
Reference Website HOW DO I TUNE MY HPL.DAT FILE?:
http://www.advancedclustering.com/act_kb/tune-hpl-dat-file/
The testing is pretty long time-consuming&amp;hellip;..</description>
    </item>
    
    <item>
      <title>CreateEXEUsingWinRAR</title>
      <link>http://purplepalmdash.github.io/blog/2017/12/09/createexeusingwinrar/</link>
      <pubDate>Sat, 09 Dec 2017 15:48:12 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/12/09/createexeusingwinrar/</guid>
      <description>Procedure Notice: select the 2 items:
Advance, select the red item:
unzipeed location:
Setup:
Add shortcuts:
In Desktop:
Some text:
Update:
Text and icon:
Certification:
Modules:
Now you could see the rared files, click it for installation.</description>
    </item>
    
    <item>
      <title>WTwareOnRaspberryPI</title>
      <link>http://purplepalmdash.github.io/blog/2017/11/28/wtwareonraspberrypi/</link>
      <pubDate>Tue, 28 Nov 2017 14:54:34 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/11/28/wtwareonraspberrypi/</guid>
      <description> 效果 背景 RaspberryPI上的一种瘦客户端解决方案。
步骤 下载地址：
https://winterminal.com/index.html#download
下载链接有两个，一个是exe下载，一个是zip下载，我们选择exe下载。
下载包大小大概200M不到，安装在Windows系统上，附带的例如TFTP/dhcpD之类的功能根据个人需求自行选择。我这里因为是静态地址的，不需要这些组件，就没有安装。
安装完毕后的配置过程如下，可以看到我们
这类说明一下，我们先配置RaspberryPI本身的IP地址/子网掩码/网关等信息。远端的服务器则在开机启动的时候再配置。最后填入的密码是进入设置页面的密码。在开机加电时按DEL键进入修改的条目。
开机启动 这里的配置过程以后再补上，因为当时没有截图。
所有的更改项对应在SD卡的Config目录下。
$ cat initrd.wtc clientIP = 192.xxx.xxx.xxx netmask = 255.255.255.0 routerIP = 192.xxx.xxx.xxx nameserverIP = 192.xxx.xxx.xxx config = local setupPassword = xxx.xxxxxxxxxxxxxxx $ cat config.wtc server = rdp:192.xxx.xxx.xxx User=username:password  配置好以后，插入SD卡就可以进入到我们预配置好的远程桌面了，这里我们启用的是RDP协议的Windows远程桌面。
为了保证服务质量，WTware默认禁掉了很多桌面效果，可以通过在config.wtc文件中加入下列条目，来开启所有特效:
graphic = abcdefg  </description>
    </item>
    
    <item>
      <title>ThinkingOnSSDTesting</title>
      <link>http://purplepalmdash.github.io/blog/2017/11/20/thinkingonssdtesting/</link>
      <pubDate>Mon, 20 Nov 2017 10:17:56 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/11/20/thinkingonssdtesting/</guid>
      <description>benchmark SATA 3: 6Gbps/SATA 2: 3Gbps/SATA 1: 1.5GBps
ATTO Disk Benchmark.
CPU-Z
CrystalDiskMark
随机写入/随机读出/顺序写入/顺序读出
iometer
P/E Cycle.
HD Tune Pro
AS SSD Benchmark
PCMark
PCMark Vantage PCMark 7(SSD)
RAMDISK for win: dataram</description>
    </item>
    
    <item>
      <title>PlayingMySQLWorkbench</title>
      <link>http://purplepalmdash.github.io/blog/2017/11/15/playingmysqlworkbench/</link>
      <pubDate>Wed, 15 Nov 2017 16:45:28 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/11/15/playingmysqlworkbench/</guid>
      <description>dump sql Dump the existing sql via following commands:
# mysqldump -uxxxx -pxxxxx table_name -h10.53.12.102 -P3306&amp;gt;xxxx.sql  sql in docker Run docker instance of sql via following command:
$ sudo docker run --name=mysql1 -d -e MYSQL_ROOT_PASSWORD=xxxxxxx -v /media/sda5/mysql:/home -p3306:3306 mysql:5.7 $ sudo docker exec -it mysql1 /bin/sh # mysql -uroot -pxxxx &amp;gt; create database xxxxx  import to sql import sql files via following command:
# mysql -uroot -pxxxxxx databasenamexxxxxx -h127.</description>
    </item>
    
    <item>
      <title>GitLabInDocker</title>
      <link>http://purplepalmdash.github.io/blog/2017/11/13/gitlabindocker/</link>
      <pubDate>Mon, 13 Nov 2017 10:44:15 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/11/13/gitlabindocker/</guid>
      <description>Steps Run the docker instance via following steps:
# docker pull gitlab/gitlab-ce # mkdir -p ~/gitlab # mkdir -p ~/gitlab/config # mkdir -p ~/gitlab/logs # mkdir -p ~/gitlab/data # docker run --detach --publish 443:443 --publish 80:80 --publish 2222:22 \ --name gitlab \ --memory 4g \ --restart always \ --volume ~/gitlab/config:/etc/gitlab \ --volume ~/gitlab/logs:/var/log/gitlab \ --volume ~/gitlab/data:/var/opt/gitlab \ gitlab/gitlab-ce:latest  Reconfigure the configuration files:
# vim ~/gitlab/config/gitlab.rb external_url &#39;http://192.192.189.129&#39;  Let the configuration take effect:</description>
    </item>
    
    <item>
      <title>LinuxTips8</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/30/linuxtips8/</link>
      <pubDate>Mon, 30 Oct 2017 09:50:23 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/30/linuxtips8/</guid>
      <description>1. pigz for multi-core compression In case you need multi-core compression for speeding up compression procedure, please do following steps:
# pacman -S pigz # tar -c transfer/ | pigz -c | split -a 5 -d -b 1650m - mysplit # ls -l total 8296652 -rw-r--r-- 1 root root 1730150400 Oct 30 09:20 mysplit00000 -rw-r--r-- 1 root root 1730150400 Oct 30 09:20 mysplit00001 -rw-r--r-- 1 root root 1730150400 Oct 30 09:22 mysplit00002 -rw-r--r-- 1 root root 1730150400 Oct 30 09:23 mysplit00003 -rw-r--r-- 1 root root 1575143431 Oct 30 09:23 mysplit00004 drwxr-xr-x 3 root root 4096 Oct 30 08:59 transfer  Decompression these files:</description>
    </item>
    
    <item>
      <title>ArchLinuxUSBWirelessDongleIsssue</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/24/archlinuxusbwirelessdongleisssue/</link>
      <pubDate>Tue, 24 Oct 2017 08:53:47 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/24/archlinuxusbwirelessdongleisssue/</guid>
      <description>Hardware &amp;amp; Software Tenda u1, rtl8192eu chipset.
Could be found as wireless adaptor, but could not get networking.
# sudo wifi-menu wlp37s0u1 # dmesg .... [42647.461034] wlp37s0u1: send auth to **:xx:xx:xx:xx:xx (try 1/3) [42647.663969] wlp37s0u1: send auth to **:xx:xx:xx:xx:xx (try 2/3) [42647.867339] wlp37s0u1: send auth to **:xx:xx:xx:xx:xx (try 3/3) [42648.070657] wlp37s0u1: authentication with xx:xx:xx:xx:xx:xx timed out  Kernel Version:
$ uname -r 4.13.7-1-ARCH  Trouble-Shooting Install wireless_tools and use iwconfig for detecting the hardware:</description>
    </item>
    
    <item>
      <title>DunstOnArchLinux</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/19/dunstonarchlinux/</link>
      <pubDate>Thu, 19 Oct 2017 11:14:59 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/19/dunstonarchlinux/</guid>
      <description>Installation My desktop environment is awesome, my operating system is ArchLinux.
dunst and dunst-git are both ok for installation, because dunst-git have the systemd file, which would be very convenient for configuration, I install it via:
$ yaourt dunst-git  Configuration Enable the user&amp;rsquo;s systemd configuration via:
$ systemctl --user enable dunst  But your dunst will start-up with errors, calling:
&amp;quot;Name Lost. Is Another notification daemon running?&amp;quot;
This is because awesome has its own desktop notification daemon called naughty, simply comment them out in your ~/.</description>
    </item>
    
    <item>
      <title>vcenterIssue</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/18/vcenterissue/</link>
      <pubDate>Wed, 18 Oct 2017 09:11:27 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/18/vcenterissue/</guid>
      <description>AIM enlarge the disk space
vCenter Password For changing the vCenter password, do following:
First you should get the vCenter vm running on which machine:
Now use vsphere client login to 192.192.192.70, open the terminal window, then edit the grub items for setting the parameter to init=/bin/bash, now you got a window which you could change the passwd of root.
Enlarge disk Enlarge it on vsphere client, then run following command:</description>
    </item>
    
    <item>
      <title>GrafanaTemplateIssue</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/17/grafanatemplateissue/</link>
      <pubDate>Tue, 17 Oct 2017 17:06:46 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/17/grafanatemplateissue/</guid>
      <description>I downloaded some template from grafana.net, but none of them work properly, following are the trouble-shooting of template.
 Change the data source.
View the json file, get its input field:
  { &amp;quot;__inputs&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;DS_BC-GRAPHITE&amp;quot;, &amp;quot;label&amp;quot;: &amp;quot;BC-Graphite&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;datasource&amp;quot;, &amp;quot;pluginId&amp;quot;: &amp;quot;graphite&amp;quot;, &amp;quot;pluginName&amp;quot;: &amp;quot;Graphite&amp;quot; } ],  This means you have to define a datasource named DS_BC-GRAPHITE, like following:
 Change collectd&amp;rsquo;s write_graphite structure.
  The item could not be displayed properly, because the definition for data listed as:</description>
    </item>
    
    <item>
      <title>ipmitips</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/17/ipmitips/</link>
      <pubDate>Tue, 17 Oct 2017 09:52:38 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/17/ipmitips/</guid>
      <description>AIM For managing the servers via ipmitools.
Installation Install ipmitools via yum install -y ipmitool, then you could use ipmitool for managing the servers.
HuaWei Examples Official Website:
http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000055104&amp;amp;partNo=10082
Username/passwd:
Using ipmitool for displaying the lan info:
Setting IP Setting IP Address/Netmask/gateway via following way:
iBMC Huwei using iBMC, so now you could visit its ip address for managing this server:
Now you could using its management URL:
Configure JDK Add new Env Var:</description>
    </item>
    
    <item>
      <title>CollectdDiskIssue</title>
      <link>http://purplepalmdash.github.io/blog/2017/10/11/collectddiskissue/</link>
      <pubDate>Wed, 11 Oct 2017 15:21:56 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/10/11/collectddiskissue/</guid>
      <description>Installation and Configuration Via collectd you could monitoring the disk statistics, the configuration files is listed as following:
# cat /etc/collectd.conf ..... LoadPlugin disk  No other configuration on disk configuration, then you could see all of the items which listed under /proc/diskstats would be send to graphite database.
Another plugin Located at:
https://github.com/indygreg/collectd-diskstats
Configuration:
[root@LABSERVER127 collectd]# pwd /usr/lib64/collectd [root@LABSERVER127 collectd]# ls diskstats.py diskstats.py # vim /etc/collectd.conf ..... LoadPlugin python .</description>
    </item>
    
    <item>
      <title>云终端虚拟机搬迁操作指南</title>
      <link>http://purplepalmdash.github.io/blog/2017/09/20/%E4%BA%91%E7%BB%88%E7%AB%AF%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AC%E8%BF%81%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 20 Sep 2017 11:22:30 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/09/20/%E4%BA%91%E7%BB%88%E7%AB%AF%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AC%E8%BF%81%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</guid>
      <description>1. 搬迁前操作 注意：此步骤在服务器搬迁前(周三下午三点前)执行。
此步骤执行完后将更改云终端虚拟机IP，由之前的192.168.13段更改为宝地广场使用的192.168.103段。
浏览器访问http://192.192.192.91/c/
如果碰到网页乱码, 则更改浏览器默认编码为UTF-8即可：
在网页中查找自己名字对应的bat文件，右键另存到本地。
用记事本打开该bat文件，用纸笔记下更改后的IP地址。
服务器搬迁到宝地广场后，需要用IP地址配置云终端盒子:
点击鼠标右键，选择以管理员身份运行, 按下鼠标右键以后，该bat文件将自动更改你的云终端虚拟机IP地址/子网掩码/网关地址:
2. 搬迁后配置 宝地服务器就绪后(秘书会通知大家的)，在个人的云终端盒子上配置。
点击配置按钮进入到配置界面：
点击用户配置后再点击编辑：
用第一步记下的IP地址替换原配置的主机地址, 之后点击保存返回:
点击原有的个人配置文件，应该可以进入到原来的桌面了。</description>
    </item>
    
    <item>
      <title>FixedABugOnDockerAndDebian</title>
      <link>http://purplepalmdash.github.io/blog/2017/09/18/fixedabugondockeranddebian/</link>
      <pubDate>Mon, 18 Sep 2017 09:36:59 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/09/18/fixedabugondockeranddebian/</guid>
      <description>When install docker on Debian9, when configured the static ip address mode, then you install docker, you will find the ip address won&amp;rsquo;t be configured as you imagined. It will get the dhcp ip from your dhcpd server. Following are the steps for correct this bug:
# systemctl disable docker.service # systemctl enable rc-local.service  Then in /etc/rc.local file you will add following lines:
#!/bin/sh -e systemctl start docker.service  Then you should chmod a+x /etc/rc.</description>
    </item>
    
    <item>
      <title>EnableBBROnUbuntu1604</title>
      <link>http://purplepalmdash.github.io/blog/2017/09/14/enablebbronubuntu1604/</link>
      <pubDate>Thu, 14 Sep 2017 17:15:49 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/09/14/enablebbronubuntu1604/</guid>
      <description>The kernel should be newer than 4.9, then you could enable BBR algorithm.
Take v4.12 for example, visit http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12/ for getting the daily build kernel:
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12/linux-headers-4.12.0-041200-generic_4.12.0-041200.201707022031_amd64.deb wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12/linux-headers-4.12.0-041200_4.12.0-041200.201707022031_all.deb wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12/linux-image-4.12.0-041200-generic_4.12.0-041200.201707022031_amd64.deb  Install debs via dpkg -i *.deb, reboot the machine.
Change in sysctl:
echo &amp;quot;net.core.default_qdisc=fq&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf echo &amp;quot;net.ipv4.tcp_congestion_control=bbr&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf sysctl -p  Verification:
# sysctl net.ipv4.tcp_available_congestion_control net.ipv4.tcp_available_congestion_control = bbr cubic reno # lsmod | grep bbr tcp_bbr 20480 0  Now the bbr algorithm for tcp is enabled, enjoy the high speed.</description>
    </item>
    
    <item>
      <title>TipsOnPX</title>
      <link>http://purplepalmdash.github.io/blog/2017/09/14/tipsonpx/</link>
      <pubDate>Thu, 14 Sep 2017 09:04:49 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/09/14/tipsonpx/</guid>
      <description>Tips Delete the pods forcely:
// kubectl &amp;gt;= 1.5 # kubectl delete pods &amp;lt;pod&amp;gt; --grace-period=0 --force // kubectl &amp;lt; 1.4 # kubectl delete pods &amp;lt;pod&amp;gt; --grace-period=0  Install jq(Command-line JSON processor) :
wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 chmod +x ./jq cp jq /usr/bin  px volume operation:
# pxctl v l # pxctl v d XXXXXXX  Before you run px on k8s(offline), you have to manually install following packages:</description>
    </item>
    
    <item>
      <title>BuildDebianDockerImageLocally</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/29/builddebiandockerimagelocally/</link>
      <pubDate>Tue, 29 Aug 2017 09:21:07 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/29/builddebiandockerimagelocally/</guid>
      <description>AIM Recently I am working in a network isolated environment, this means, I am unable to connect to internet freely. But I have to finish my working using some specific docker images, how? So I have to build them locally using iso.
Preparation Download debian dvds from internet and tranfer them into the intranet:
# ls -l debian* -rw-r--r-- 1 dash root 3.6G Jul 21 00:59 debian-9.0.0-amd64-DVD-1.iso -rw-r--r-- 1 dash root 4.</description>
    </item>
    
    <item>
      <title>SetupVinoServer</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/24/setupvinoserver/</link>
      <pubDate>Thu, 24 Aug 2017 15:42:39 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/24/setupvinoserver/</guid>
      <description>Background For enable rdp server, but I installed vino server for vncserver, faint.
CentOS Configuration Install Gnome Desktop.
Enable root autologin(This is pretty dangerous):
# vim /etc/gdm/custom.conf [daemon] AutomaticLoginEnable=true AutomaticLogin=username  So next time you will login to the desktop automatically.
Vino Server Vino will be automatically installed for gnome desktop ,config it via:
# gsetting set org.gnome.Vino require-encryption false  Also setting up the password.
Now reboot the machine you could enjoy the vncserver.</description>
    </item>
    
    <item>
      <title>OnAirDetection</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/22/onairdetection/</link>
      <pubDate>Tue, 22 Aug 2017 14:32:51 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/22/onairdetection/</guid>
      <description>Direct Read From Serial Port Arduino mega2560 Code:
void setup() { pinMode(0,INPUT_PULLUP); pinMode(1,INPUT_PULLUP); } void loop() { }  This code will turn mega2560 into a USB-TTL transmitter, thus you could directly read from the serial port and display them in hex mode:
# cat /dev/ttyACM0 | xxd -p -c 9 ffff01270005020534 ffff01270005020534 ffff01270005020534 ffff01270005020534 ....  According to the reference manual,
we know the air is 0.05 mg/m3.</description>
    </item>
    
    <item>
      <title>OnFIOTesting</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/21/onfiotesting/</link>
      <pubDate>Mon, 21 Aug 2017 09:22:57 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/21/onfiotesting/</guid>
      <description>Environment bare metal vs kvm vs docker Testing script:
#!/bin/bash function tgt_r { fio -filename=/root/ioscript/ccc -direct=1 -iodepth 4 -thread -rw=read -ioengine=libaio -bs=$1 -size=120G -runtime=200 -group_reporting -name=mytest &amp;amp;&amp;gt;&amp;gt; s_r_test } function tgt_w { fio -filename=/root/ioscript/ccc -direct=1 -iodepth 4 -thread -rw=write -ioengine=libaio -bs=$1 -size=120G -runtime=200 -group_reporting -name=mytest &amp;amp;&amp;gt;&amp;gt; s_w_test } function tgt_rr { fio -filename=/root/ioscript/ccc -direct=1 -iodepth 4 -thread -rw=randread -ioengine=libaio -bs=$1 -size=120G -runtime=200 -group_reporting -name=mytest &amp;amp;&amp;gt;&amp;gt; r_r_test } function tgt_rw { fio -filename=/root/ioscript/ccc -direct=1 -iodepth 4 -thread -rw=randwrite -ioengine=libaio -bs=$1 -size=120G -runtime=200 -group_reporting -name=mytest &amp;amp;&amp;gt;&amp;gt; r_w_test } mkdir -p /root/ioscript rm -f /root/ioscript/ccc; touch /root/ioscript/ccc tgt_r 128K rm -f /root/ioscript/ccc; touch /root/ioscript/ccc tgt_w 128K rm -f /root/ioscript/ccc; touch /root/ioscript/ccc tgt_rr 4K rm -f /root/ioscript/ccc; touch /root/ioscript/ccc tgt_rw 4K  Sequence read/write, 128K.</description>
    </item>
    
    <item>
      <title>TipsOnTesingFrameWorkForPython</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/11/tipsontesingframeworkforpython/</link>
      <pubDate>Fri, 11 Aug 2017 14:27:43 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/11/tipsontesingframeworkforpython/</guid>
      <description>Code Before you run:
# apt-get install python-pip # pip install nose # pip install python-memcached  Directory Structure:
test@local:~$ tree /tmp/foomodule/ /tmp/foomodule/ |-- foo | |-- a.py | |-- b.py | `-- __init__.py `-- tests |-- test_a.py `-- test_b.py  Module Source Code:
# /tmp/foomodule/foo/a.py def add(a, b): return a + b def double(a): return a * 2 # /tmp/foomodule/foo/b.py import memcache class Cache: def __init__(self, server): self.cache = memcache.</description>
    </item>
    
    <item>
      <title>ThinkingOnCloud</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/10/thinkingoncloud/</link>
      <pubDate>Thu, 10 Aug 2017 16:31:46 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/10/thinkingoncloud/</guid>
      <description>Comparison On Chinese cloud vs Citrix cloud</description>
    </item>
    
    <item>
      <title>MakeCIIn3rdParty</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/02/makeciin3rdparty/</link>
      <pubDate>Wed, 02 Aug 2017 15:00:52 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/02/makeciin3rdparty/</guid>
      <description>Docker Images 需要用到的Docker Image: wgetbuildcs6, 构建的Dockerfile:
FROM centos:centos6 MAINTAINER dash xxx &amp;lt;xxxx@gmail.com&amp;gt; RUN yum -y install curl git gcc make rpm-build python-devel which lrzsz tar gnutls gnutls-devel  将创建好的镜像上传到私有仓库(某台内网主机):
$ sudo docker load&amp;lt;wgetbuildcs6.tar $ sudo docker images | grep wgetbuildcs6 $ sudo docker tag 1020xxxxx 192.168.124.102:5000/xxxxx/wgetbuildcs6:latest $ sudo docker push 192.168.124.102:5000/xxxxx/wgetbuildcs6:latest  Git Repository 在CentOS7.3系统上，安装git daemon:
# yum install -y git-daemon  在源码目录下, 执行以下命令:
# git init # git add .</description>
    </item>
    
    <item>
      <title>TipsOnHA</title>
      <link>http://purplepalmdash.github.io/blog/2017/08/01/tipsonha/</link>
      <pubDate>Tue, 01 Aug 2017 09:32:54 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/08/01/tipsonha/</guid>
      <description>Network Preparation libvirt network preparation:
$ cat internal.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;internal&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr8&#39;/&amp;gt; &amp;lt;/network&amp;gt; $ cat external.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;external&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr9&#39;/&amp;gt; &amp;lt;/network&amp;gt; $ cat management.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;management&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr7&#39;/&amp;gt; &amp;lt;ip address=&#39;192.168.3.1&#39; netmask=&#39;255.255.255.0&#39;&amp;gt; &amp;lt;/ip&amp;gt; &amp;lt;/network&amp;gt; $ cat heartbeat.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;heartbeat&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr6&#39;/&amp;gt; &amp;lt;/network&amp;gt;  Define all of the networking, take heartbeat networking for example:
$ sudo virsh net-define heartbeat.xml $ sudo virsh net-autostart heartbeat $ sudo virsh net-start heartbeat  iscsi node Create a new machine(192.</description>
    </item>
    
    <item>
      <title>UsingLocalRdesktopForAcrossingSomething</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/31/usinglocalrdesktopforacrossingsomething/</link>
      <pubDate>Mon, 31 Jul 2017 12:23:57 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/31/usinglocalrdesktopforacrossingsomething/</guid>
      <description>MAC Address Spoofing First you have to cheat your remote machine via changing your own MAC address from the origin one to the remote box address.
There are many methods in:
https://wiki.archlinux.org/index.php/MAC_address_spoofing
My method is via changing the systemd-networkd:
$ pwd /etc/systemd/network $ cat 00-default.link [Match] MACAddress=xx:xx:xx:xx:xx [Link] MACAddress=xx:xx:xx:xx:xx NamePolicy=kernel database onboard slot path  After your changing, reboot your system.
Iptables Changing Add following lines into my own iptables rules:</description>
    </item>
    
    <item>
      <title>ReadingTipsOnLinuxSystemArchitecture</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/31/readingtipsonlinuxsystemarchitecture/</link>
      <pubDate>Mon, 31 Jul 2017 09:19:01 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/31/readingtipsonlinuxsystemarchitecture/</guid>
      <description>On This Book Borrowed from lab, written via a janpanese author.
This article will record the reading tips on Chapter 2(libvirtd related).
Network Configuration Edit the netoworking definition xml:
$ cat internal.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;internal&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr8&#39;/&amp;gt; &amp;lt;/network&amp;gt; $ cat external.xml &amp;lt;network&amp;gt; &amp;lt;name&amp;gt;external&amp;lt;/name&amp;gt; &amp;lt;bridge name=&#39;virbr9&#39;/&amp;gt; &amp;lt;/network&amp;gt;  Define the networking via following commands:
$ sudo virsh net-define external.xml Network external defined from external.xml $ sudo virsh net-autostart external Network external marked as autostarted $ sudo virsh net-start external Network external started $ libvirt sudo virsh net-list Name State Autostart Persistent ---------------------------------------------------------- default active no yes external active yes yes internal active yes yes kubernetes active yes yes  View the configuration in virt-manager:</description>
    </item>
    
    <item>
      <title>CorrectHugoDate</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/27/correcthugodate/</link>
      <pubDate>Thu, 27 Jul 2017 16:28:35 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/27/correcthugodate/</guid>
      <description>Problem Reason This is because hugo upgrade to a new version 0.25.1, while this new version won&amp;rsquo;t give the default value of date in newly created markdown file.
Solution Edit the themes/hyde-a/archetypes/default.md, add following items:
+++ title = &amp;quot;&amp;quot; date = &amp;quot;{{ .Date }}&amp;quot; description = &amp;quot;&amp;quot; keywords = [&amp;quot;Linux&amp;quot;] categories = [&amp;quot;Linux&amp;quot;] +++  Now you could re-new your configuration, and then your blog will acts OK.</description>
    </item>
    
    <item>
      <title>CreateRHEL6CustomizedISO</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/27/createrhel6customizediso/</link>
      <pubDate>Thu, 27 Jul 2017 12:28:35 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/27/createrhel6customizediso/</guid>
      <description>目的 根据用户自定义配置，自动从ISO安装出整个系统。
准备材料 RHEL 6.6安装光盘, x86_64版本。 自定义kickstart文件，用于自定义分区/用户/密码/安装包等
红帽系列操作系统(用于制作光盘镜像，已验证Redhat7.3)
步骤  创建目录用于挂载安装光盘和自定义光盘, 其中/media/bootiso用于挂载安装光盘， /media/bootisoks用于存放自定义光盘内容:
  $ mkdir -p /media/bootiso /media/bootisoks   拷贝安装内容到自定义光盘目录:
  $ sudo mount -t iso9660 -o loop DVD.iso /media/bootiso $ cp -r /media/bootiso/* /media/bootisoks/ $ chmdo -R u+w /media/bootisoks $ cp /media/bootiso/.discinfo /media/bootisoks $ cp /media/bootiso/.discinfo /media/bootisoks/isolinux   拷贝自定义的ks文件到isolinux目录下:
  $ cp YourKickStartFile.ks /media/bootisoks/isolinux   配置引导选项:
  $ vim /media/bootisoks/isolinux.cfg initrd=initrd.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnOracleDatabaseDeployment</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/21/workingtipsonoracledatabasedeployment/</link>
      <pubDate>Fri, 21 Jul 2017 12:28:35 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/21/workingtipsonoracledatabasedeployment/</guid>
      <description>Items Working items on one-click deployment of oracle database.
Ansible-Playbooks Based on:
https://github.com/nkadbi/oracle-db-12c-vagrant-ansible
Refers to:
https://blog.dbi-services.com/vagrant-up-get-your-oracle-infrastructure-up-and-running/
https://blog.dbi-services.com/part2-vagrant-up-get-your-oracle-infrastructure-up-an-running/
Username/Password:
System: oracle/welcome1
Database: sys/oracle
Linux Client Yaourt has the linux client for accessing oracle Db:
https://aur.archlinux.org/packages/oracle-sqldeveloper/
Installing method:
Download the file from oracle.com
Create Database Create database using following command:
[vagrant@dbserver1 ~]$ su - oracle Password: -bash-4.2$ sqlplus &amp;quot;/as sysdba&amp;quot;  Now you got the shell like SQL&amp;gt;, you could input the sql in this shell:</description>
    </item>
    
    <item>
      <title>DockerNetworkPerformanceTest</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/13/dockernetworkperformancetest/</link>
      <pubDate>Thu, 13 Jul 2017 16:51:35 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/13/dockernetworkperformancetest/</guid>
      <description>测试环境 Docker常用的两种网络模式包括Bridge和Host模式，为测试这两种网络模式的性能，我们将创建以下的测试环境:
 192.192.192.89 - 运行Docker容器的服务器， CentOS 7.3.
 192.192.192.88 - 运行客户端的服务器, CentOS 7.3.
  两台服务器之间的物理网络为万兆以太网络。
我们采用Iperfhttp://software.es.net/iperf/来测量网络带宽，iperf非常简单，也拥有足够多的特性用于测试基本的性能指标。 在服务器端，我们需要一个运行iperf3的Docker容器。 Docker的版本为17.05-ce.
测试将基于以下几个场景: * 原始网络吞吐量 * 跨主机物理机到Docker(host模式) * 跨主机物理机到Docker(Bridge模式) * 同主机物理机到Docker(Bridge模式) * 同主机Docker到Docker(Bridge模式-external) * 同主机Docker到Docker(Bridge模式-internal)
原始网络吞吐量 首先，我们需要得到在没有任何Docker容器运行时的原始网络吞吐，在Server端运行:
[root@192.192.192.89 ~]# iperf3 -s -p 5202  Client端运行:
[root@192.192.192.88 ~]# iperf3 -c 192.192.192.89 -p 5202  运行测试后，服务器端和客户端都会返回诊断信息。我们暂时只关心其吞吐量:
----------------------------------------------------------- Server listening on 5202 ----------------------------------------------------------- Accepted connection from 192.192.192.88, port 39682 [ 5] local 192.192.192.89 port 5202 connected to 192.</description>
    </item>
    
    <item>
      <title>MakeDockerImages</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/04/makedockerimages/</link>
      <pubDate>Tue, 04 Jul 2017 16:28:35 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/04/makedockerimages/</guid>
      <description>环境准备 在Virtualbox（已默认安装在虚拟机上）中，创建一台新机器，如下图：
内存为1G:
创建硬盘:
选择VDI:
Dynamically Allocated:
大小为8G：
现在点击Settings, 加载安装盘:
点击OK后，按Start开始安装：
选择Basic Server，
安装完毕后重新启动系统。
点击virtualbox菜单上的Devices-&amp;gt;Optical Devices-&amp;gt; ，加载rhel6.6的ISO到虚拟机。
通过下列命令集合，创建rhel6.6的基础文件系统:
# mkdir -p /mnt/rhel6-repo # mount /dev/sr0 /mnt/rhel6-repo # mkdir /root/rhel6-root # rpm --root /root/rhel6-root/ --initdb # rpm --root /root/rhel6-root/ -ivh /mnt/rhel6-repo/Packages/redhat-release-server-6Server-6.6.0.2.el6.x86_64.rpm # cd /root/rhel6-root/ # cd etc/yum.repos.d # rm -f *.repo # vim rhel6.repo [rhel6] baseurl=file:///mnt/rhel6-repo enabled=1 gpgcheck=0 # rpm --root /root/rhel6-root --import /mnt/rhel6-repo/RPM-GPG-KEY-redhat-* # yum -y --installroot=/root/rhel6-root install yum which vim  这时候如果直接打包成tar.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnDockerDeployment</title>
      <link>http://purplepalmdash.github.io/blog/2017/07/02/workingtipsondockerdeployment/</link>
      <pubDate>Sun, 02 Jul 2017 12:33:39 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/07/02/workingtipsondockerdeployment/</guid>
      <description>问题背景 针对某公司现有的混乱的发布、部署流程提出的一种基于Docker的应用程序部署方案。
架构 物理机+Docker运行环境+Docker-Compose编排+Docker镜像+Ansible自动化配置框架，达到开箱即用的快速部署目的。
准备 Vagrantbox基础环境 Vagrantbox基于Ubuntu Xenial(16.04), 在其上安装了docker, docker-compose:
# sudo apt-get update -y # curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/test/internet | sh # sudo apt-get install docker-compose  由此构建的vagrant包含了docker运行所需要的最小条件，也就是基于最小条件，我们可以部署预定义好的docker服务。达到&amp;rdquo;开箱即用&amp;rdquo;的目的。
可以通过vagrant package打包我们建立好的vagrant环境, 由此生成的vagrant.box可以用于新建环境的分发.
测试代码 基于docker-haproxy-nginx, 这个工程将建立一个nginx与haproxy协同作用的web集群，haproxy在本机的8080端口创建服务，将服务分别转发到后端的nginx1/nginx2/nginx3服务器，我们基于此测试代码构建我们的服务框架:
# git clone git://github.com/kakakakakku/docker-haproxy-nginx.git  为模拟离线部署，手动pull回对应的docker镜像并保存之:
# sudo docker pull haproxy:1.6.4-alpine # sudo docker pull nginx:stable-alpine # sudo docker save haproxy:1.6.4-alpine&amp;gt;haproxy.tar # sudo docker save nginx:stable-alpine&amp;gt;nginx.tar  ansible部署脚本 ansible部署脚本用于自动执行环境配置，在准备好基础环境和测试代码、对应的docker镜像后，我们将对应撰写相应的ansible-playbook， 用于完成一键部署。
手动部署流程 创建基于我们前面制作好的vagrantbox的虚拟机，给定一个新的IP地址，例如192.168.33.201:
# mkdir testdockerdeployment # cd testdockerdeployment # vagrant init Xenial64DockerCompose # vim Vagrantfile config.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnAnsiblePull</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/30/workingtipsonansiblepull/</link>
      <pubDate>Fri, 30 Jun 2017 08:50:26 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/30/workingtipsonansiblepull/</guid>
      <description>背景 在生产环境中经常面临大量卸载或迁移服务器的操作，这时候必须手动重建配置，这是一项繁琐且容易出错的工作。
部署人员可能会尝试DevOps方式(&amp;ldquo;基础设施作为代码&amp;rdquo;)管理底层设备，在迁移过程中也会尝试像Chef或Puppet这样的流行工具，但是发现它们对于简单的案例来说也是非常复杂的。
本文将介绍一个强大但简单的配置管理工具Ansible, 基于Ansible和GitLab建立出的工作流，我们可以快速对环境进行集中化部署/管理。在实际的生产环境中，基于此工作流将使运维变得更加简单、高效、可靠。
概观 Ansible Ansible是一个用Python编写的自动化和编排工具。它通过SSH连接工作，不需要在主机上安装代理。
如果读者不了解使用公钥的无密码连接，可以参考:
Ansible的配置文件以YAML文档编写，称为&amp;rdquo;Playbook&amp;rdquo;, Playbook中可以包括用户自定义的任务和事件处理程序。举例说，在一个用于配置服务器的Playbook中，我们定义一系列用于更新配置文件的数据库服务器，而事件处理程序则在这些任务完成之后负责重新启动数据库服务。
基于推送的Ansible Ansible用于推送的架构:
Control Host: 通常是用于管理的节点(本机)，在主机上手动运行需要运行的任务，也可以基于crontab定时来做。
Ansible使用inventory文件来包含需配置的机器列表，在上图中，我们包含了两个组: 数据库服务器组和Web服务器组。inventory文件中包含了这些服务器组中的节点IP。
inventory文件也可以是动态生成的，Ansible同样提供了对动态生成的支持。
每个Playbook从inventory文件中选取一个或多个组进行配置。在上一个例子中，我们定义了一个Playbook配置和编排数据库服务器，另一个则作用于Web服务器。Playbook也可以被抽象成更高层次，因此可以将两者中比较共同的任务配置成一个作用于all节点的任务。
基于拉取的Ansible 使用ansible-pull命令可以开启Ansible的拉取工作方式，ansible-pull命令的执行流程如下:
 每个主机都安装了Ansible， 该配置存储在Git仓库中， ansible-pull检出配置库在给定的分支或标记（提示：prod，staging等）， ansible-pull 执行指定的playbook， 使用cronjob自动化ansible-pull进程 最后，针对每次配置的修改，您所要做的就是将配置更改推送到Git仓库。  GitLab GitLab是一个利用 Ruby on Rails 开发的开源应用程序，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。
GitLab可以与诸多CI(持续集成)工具协同工作，且提供了原生的GitLabCI用于持续CI和CD。
GitLab提供完整的单机/集群解决方案。
工作流讲解 环境配置 本工作流示例环境包括如下机器:
192.168.33.2, GitLab VM, 2Core 2G.
192.168.33.10, mgmt VM, 256 M内存。
192.168.33.11, lb VM, 256 M内存。
192.168.33.21, web1 VM, 256 M内存。
192.168.33.22, web2 VM, 256 M内存。
首次部署(推送) 作用范畴如下:</description>
    </item>
    
    <item>
      <title>WorkingTipsOnAnsiblePull</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/28/workingtipsonansiblepull/</link>
      <pubDate>Wed, 28 Jun 2017 15:05:08 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/28/workingtipsonansiblepull/</guid>
      <description>Environment Preparation Create the vagrant environment via following Vagrantfile:
# -*- mode: ruby -*- # vi : set ft=ruby : Vagrant.configure(2) do |config| config.ssh.insert_key = false # Use the same insecure key provided from box for each machine config.vm.box = &amp;quot;UbuntuTrusty3G&amp;quot; config.vm.provision :shell, path: &amp;quot;initial.sh&amp;quot; config.vm.box_check_update = false # do not check for updates ( not recommended , just for demo ) config.vm.boot_timeout = 700 #config.hostmanager.enabled = true config.hostmanager.enabled = false config.</description>
    </item>
    
    <item>
      <title>CreateRHEL6DockerImage</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/22/createrhel6dockerimage/</link>
      <pubDate>Thu, 22 Jun 2017 16:22:37 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/22/createrhel6dockerimage/</guid>
      <description>背景 内网工作环境下，无法联网安装软件，所以需要制作rhel6的docker镜像，用于离线安装、验证、部署等过程。
准备 需要准备一台基于virtualbox的rhel65虚拟机。
一台安装了docker的Centos7或者ubuntu的物理机。
rhel65安装光盘.
步骤 启动rhel65虚拟机，将rhel65的iso挂载到virtualbox虚拟机上.
登录到虚拟机后，执行以下命令:
# mkdir -p /mnt/rhel6-repo # mount /dev/sr0 /mnt/rhel6-repo # mkdir /root/rhel6-root # rpm --root /root/rhel6-root/ --initdb # rpm --root /root/rhel6-root/ -ivh /mnt/rhel6-repo/Packages/redhat-release-server-6Server-6.5.0.1.el6.x86_64.rpm # cd /root/rhel6-root/ # cd etc/yum.repos.d # rm -f *.repo # vim rhel6.repo [rhel6] baseurl=file:///mnt/rhel6-repo enabled=1 gpgcheck=0 # rpm --root /root/rhel6-root --import /mnt/rhel6-repo/RPM-GPG-KEY-redhat-* # yum -y --installroot=/root/rhel6-root install yum which vim  安装完毕后，将/root/rhel6-root目录拷贝到安装好docker的物理机，执行以下命令打包成docker镜像:
# tar -C rhel6-root/ -c .</description>
    </item>
    
    <item>
      <title>WorkingTipsOnRPMBuild</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/21/workingtipsonrpmbuild/</link>
      <pubDate>Wed, 21 Jun 2017 11:33:40 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/21/workingtipsonrpmbuild/</guid>
      <description>Prerequisites From docker images Centos:6.6.
Steps Environment Preparation Start the docker instance:
$ sudo docker run -it centos:6.6 /bin/bash  Install the dev environment&amp;copy;:
# yum install -y rpm-build rpmdevtools vim gcc tar openssh-clients  Create the macro for rpmbuild, and setup the rpm build tree:
# vim /root/.rpmmacros %_topdir /root/rpmbuild # rpmdev-setuptree  C Project Refers to:
https://blog.packagecloud.io/rpm/rpmbuild/packaging/2015/06/29/building-rpm-packages-with-rpmbuild/
Verification Using a new docker instance, then you could verify your rpm installation and uninstallation.</description>
    </item>
    
    <item>
      <title>创建RHELVagrantBox</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/20/%E5%88%9B%E5%BB%BArhelvagrantbox/</link>
      <pubDate>Tue, 20 Jun 2017 14:41:41 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/20/%E5%88%9B%E5%BB%BArhelvagrantbox/</guid>
      <description>背景 调研RHEL6.5, 为了在vagrant环境中验证我们的修改，故创建该系统的vagrant box
准备 Virtualbox 5.1.22 r115126, vagrant 1.9.1, CentOS 7.3(host机器)
创建一台虚拟机，配置如下:
内存: 512 m 网卡: NAT, port forward: 2223 -&amp;gt; 22 硬盘: 40 G 声卡: 禁用  用RHEL 6.5的ISO安装系统，安装完毕之后，将自动重启。
配置 激活网络，通过配置/etc/sysconfig/network-scripts/ifcfg-eth0, 设置为boot=yes.
安装完毕后，依然插入RHEL 6.5 ISO, 将其挂载到/mnt目录，并配置本地安装源:
# mount /dev/sr0 /mnt # vim /etc/yum.repos.d/local.repo [local] name=local baseurl=file:///mnt enabled=1 gpgcheck=0 # yum makecache&amp;amp;&amp;amp;yum install -y vim kernel-devel gcc bzip2  添加vagrant用户:
# useradd -m vagrant # passwd vagrant  添加vagrant用户到visudo:</description>
    </item>
    
    <item>
      <title>WorkingTipsOnGitLabCI</title>
      <link>http://purplepalmdash.github.io/blog/2017/06/14/workingtipsongitlabci/</link>
      <pubDate>Wed, 14 Jun 2017 08:30:37 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/06/14/workingtipsongitlabci/</guid>
      <description>背景 设置GitLabCI的流程。
使用两台虚拟机节点来实现GitLab服务器/GitLabCI节点, CI工作节点。
硬件配置:
GitLab服务器及CI节点: 2核3G内存。
CI工作节点: 2核2G内存。
运行系统: CentOS 7.3 X86_64
GitLab节点配置 gitlab-ce 配置gitlab-ce库及安装gitlab-ce:
# vim /etc/yum.repos.d/gitlab-ce.repo [gitlab-ce] name=gitlab-ce baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7 repo_gpgcheck=0 gpgcheck=0 enabled=1 gpgkey=https://packages.gitlab.com/gpg.key # yum makecache &amp;amp;&amp;amp; yum install -y gitlab-ce  配置gitlab-ce并使能服务:
# gitlab-ctl reconfigure # firewall-cmd --permanent --add-service=http  如果你的机器没有开启firewalld, 则firewalld这条命令则无需键入。
gitlab-ci-multi-runner 配置gitlab-ci-multi-runner库:
# vim /etc/yum.repos.d/gitlab-ce.repo [gitlab-ci-multi-runner] name=gitlab-ci-multi-runner baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ci-multi-runner/yum/el7 repo_gpgcheck=0 gpgcheck=0 enabled=1 gpgkey=https://packages.gitlab.com/gpg.key  安装gitlab-ci：
# yum makecache &amp;amp;&amp;amp; yum install -y gitlab-ci-multi-runner  现在访问http://192.</description>
    </item>
    
    <item>
      <title>ThinkingInOC</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/25/thinkinginoc/</link>
      <pubDate>Thu, 25 May 2017 14:54:36 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/25/thinkinginoc/</guid>
      <description>昨天看到teambition上有关一键启停的描述，提到了有关GPS模块和 噪音传感器模块的表述。这就很奇怪了。
不错，把传感器和开发板衔接在一起是个很简单的活，但问题是你要 用这些数据来做什么？譬如说，噪音传感器，它会感知声音，那么这个 声音信号产生的电流值可以用来控制某个条件。一个办公室里的人说话 声音大，会不会被鉴定为噪音？而一个服务器跑满，风扇也算是噪音吧。
而GPS模块就更为诡异，不知道为什么要平白无故的添加这个模块上去， 难道是为了看一体机卖了多少台，都处于某个位置吗？而GPS模块到底 是采用室外的还是基于SIM卡的，也值得商量。
越来越像一个手机，或者说，把服务器做成像一个玩具。对此我只能表示 遗憾，好大喜功的老板和无事生非的中层，硬是鼓捣出来这么一个怪胎。
还好我已经离开了OC，回头看看这一摊烂泥，只能从心底为自己感觉 到庆幸万分。</description>
    </item>
    
    <item>
      <title>DevEnvsForLAB</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/24/devenvsforlab/</link>
      <pubDate>Wed, 24 May 2017 15:28:51 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/24/devenvsforlab/</guid>
      <description>目的 LAB验证环境的搭建。
前提条件： 最小化CentOS7系统迁移（见前一篇文章）.
安装 CentOS 7.3(1611), 最小化安装。
# yum update -y # yum install -y vim qemu libvirt libvirt-devel ruby-devel gcc qemu-kvm net-tools virt-manager wget lm_sensors iotop # wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo # yum install -y nethogs byobu ansible rubygem-ruby-libvirt.x86_64 # wget https://releases.hashicorp.com/vagrant/1.9.1/vagrant_1.9.1_x86_64.rpm # yum install vagrant_1.9.1_x86_64.rpm # vagrant plugin install --plugin-version 0.0.37 vagrant-libvirt # cd ~/.vagrant.d/gems/2.2.5/gems # ln -s ../extensions ./ # vi /etc/modprobe.d/kvm-nested.conf options kvm_intel nested=1  Disable the selinux, firewalld:</description>
    </item>
    
    <item>
      <title>MigrationForCentOS7</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/24/migrationforcentos7/</link>
      <pubDate>Wed, 24 May 2017 14:32:50 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/24/migrationforcentos7/</guid>
      <description>目的 使用磁盘克隆的方式快速安装、部署系统。
验证环境 Virt-manager, CentOS 7 ISO安装盘
安装注意事项 分区时选择xfs(CentOS默认)， 选择LVM分区。
The disk partition should be Automatically create them.
安装时选择minimum installation. 安装完毕后，关闭虚拟机
安装后调整 复制安装好的硬盘:
$ ls CentOS5G.qcow2 $ cp CentOS5G.qcow2 Duplicated.qcow2 $ ls CentOS5G.qcow2 Duplicated.qcow2  创建一个中转盘，一个大小为50G的目标盘, 中转盘用于存放克隆文件，而目标盘则是我们将克隆文件拷贝过去的盘。
$ qemu-img create -f qcow2 Middle.qcow2 16G Formatting &#39;Middle.qcow2&#39;, fmt=qcow2 size=17179869184 encryption=off cluster_size=65536 lazy_refcounts=off refcount_bits=16 $ qemu-img create -f qcow2 Dest.qcow2 50G Formatting &#39;Dest.qcow2&#39;, fmt=qcow2 size=53687091200 encryption=off cluster_size=65536 lazy_refcounts=off refcount_bits=16  在virt-manager中，依次添加剩余的三块硬盘.</description>
    </item>
    
    <item>
      <title>vagrant-libvirt issue on ArchLinux</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/23/vagrant-libvirt-issue-on-archlinux/</link>
      <pubDate>Tue, 23 May 2017 16:54:24 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/23/vagrant-libvirt-issue-on-archlinux/</guid>
      <description>Previously install vagrant-libvirt is a tough task on ArchLinux, thus I do following steps to let my vagrant-libvirt running again on archlinux, steps are listed as following:
Remove the installed vagrant and backup the configuration files.
$ sudo pacman -Rsn vagrant $ sudo mv ~/.vagrant.d ~/vagrant.d.back $ sudo rm -rf /opt/vagrant  Install the vagrant-libvirt in AUR repository:
$ yaourt vagrant-libvirt $ tsocks vagrant plugin install vagrant-libvirt $ vagrant plugin list vagrant-libvirt (0.</description>
    </item>
    
    <item>
      <title>AddSecondDiskForVagrant</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/22/addseconddiskforvagrant/</link>
      <pubDate>Mon, 22 May 2017 17:00:19 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/22/addseconddiskforvagrant/</guid>
      <description>Purpose For adding second disk to vagrant machine, while vagrant machine is running under virtualbox hypervisor. Following are the steps for doing this.
Steps Vagrantfile definition:
# -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb| # Display the VirtualBox GUI when booting the machine #vb.gui = true unless File.exist?(&#39;./secondDisk.vdi&#39;) vb.customize [&#39;createhd&#39;, &#39;--filename&#39;, &#39;./secondDisk.vdi&#39;, &#39;--variant&#39;, &#39;Fixed&#39;, &#39;--size&#39;, 10 * 1024] end # Customize the amount of memory on the VM: vb.</description>
    </item>
    
    <item>
      <title>Ansible Tips on register and so on</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/12/ansible-tips-on-register-and-so-on/</link>
      <pubDate>Fri, 12 May 2017 12:25:17 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/12/ansible-tips-on-register-and-so-on/</guid>
      <description>处理用户输入  vars_prompt, 设置KVMPassword的值为多少 - name: apply CloudStack configuration to all nodes hosts: cloudstackmanagement sudo: yes ######################################################################################### # Vars and vars_prompt # vars_prompt: - name: &amp;quot;KVMPassword&amp;quot; prompt: &amp;quot;KVM host root password&amp;quot; private: yes   可以使用when来界定用户输入值的有效   - name: Validate input - KVMServer host password fail: msg=&amp;quot;Missing or incorrect KVM Host password.&amp;quot; when: KVMPassword is not defined or ( KVMPassword is defined and KVMPassword == &amp;quot;&amp;quot; )  when 针对不同的返回值采取不同的行动（举某个安装命令yum/apt差别为例）</description>
    </item>
    
    <item>
      <title>OpenWRT MR11u</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/05/openwrt-mr11u/</link>
      <pubDate>Fri, 05 May 2017 16:30:08 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/05/openwrt-mr11u/</guid>
      <description>Upgrade kernel On OpenWRT:
$ cd /tmp $ wget http://openwrt.proxy.ustclug.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-mr11u-v2-squashfs-sysupgrade.bin $ sysupgrade -v openwrt-ar71xx-generic-tl-mr11u-v2-squashfs-sysupgrade.bin  Make sure your configuration is listed as following:
# cat /etc/opkg/distfeeds.conf src/gz designated_driver_base http://openwrt.proxy.ustclug.org/snapshots/trunk/ar71xx/generic/packages/base src/gz designated_driver_kernel http://openwrt.proxy.ustclug.org/snapshots/trunk/ar71xx/generic/packages/kernel src/gz designated_driver_telephony http://openwrt.proxy.ustclug.org/snapshots/trunk/ar71xx/generic/packages/telephony src/gz designated_driver_packages http://openwrt.proxy.ustclug.org/snapshots/trunk/ar71xx/generic/packages/packages src/gz designated_driver_routing http://openwrt.proxy.ustclug.org/snapshots/trunk/ar71xx/generic/packages/routing src/gz designated_driver_luci http://openwrt.proxy.ustclug.org/snapshots/trunk/ar71xx/generic/packages/luci src/gz designated_driver_management http://openwrt.proxy.ustclug.org/snapshots/trunk/ar71xx/generic/packages/management # src/gz designated_driver_targets http://openwrt.proxy.ustclug.org/snapshots/trunk/ar71xx/generic/packages/targets  Then opkg update, and install following packages:
$ opkg install block-mount kmod-fs-ext4 kmod-usb-ohci kmod-usb-storage  But the storage is too slow.</description>
    </item>
    
    <item>
      <title>OnVRTest</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/03/onvrtest/</link>
      <pubDate>Wed, 03 May 2017 14:09:10 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/03/onvrtest/</guid>
      <description>Preparation Ubuntu14.04, KVM(cpu host-passthrough), 16G memory, 8-Core CPU, 200G Disk.
Update/upgrade to newest version of ubuntu:
# apt-get update # apt-get upgrade -y  Enable root login with the password set as engine123.
# sed -i &#39;/PermitRootLogin without-password/PermitRootLogin yes&#39; /etc/ssh/sshd_config # service ssh restart  Networking Using bridged networking in ubuntu:
/etc/network/interfaces content:
# The loopback network interface auto lo iface lo inet loopback # The primary network interface auto eth0 iface eth0 inet manual auto cloudbr0 iface cloudbr0 inet static address 10.</description>
    </item>
    
    <item>
      <title>CS49OnUbuntu1404</title>
      <link>http://purplepalmdash.github.io/blog/2017/05/03/cs49onubuntu1404/</link>
      <pubDate>Wed, 03 May 2017 11:18:34 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/05/03/cs49onubuntu1404/</guid>
      <description>MySql Configuration Configuration for mysql:
# cat &amp;gt;&amp;gt;/etc/mysql/conf.d/cloudstack.cnf &amp;lt;&amp;lt;EOM &amp;gt; [mysqld] &amp;gt; innodb_rollback_on_timeout=1 &amp;gt; innodb_lock_wait_timeout=600 &amp;gt; max_connections=350 &amp;gt; log-bin=mysql-bin &amp;gt; binlog-format = &#39;ROW&#39; &amp;gt; EOM # service mysql restart  Configuration:
# cloudstack-setup-databases cloud:engine123@localhost --deploy-as=root:engine123 -e file -m mymskey44 -k mydbkey00  NFS Server # mkdir -p /export/primary /export/secondary # apt-get install nfs-kernel-server # vim /etc/exports /export *(rw,async,no_root_squash,no_subtree_check) # service nfs-kernel-server start # exportfs -a # showmount -e 127.0.0.1 Export list for 127.</description>
    </item>
    
    <item>
      <title>快速搭建MiniKube开发环境</title>
      <link>http://purplepalmdash.github.io/blog/2017/04/07/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAminikube%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Fri, 07 Apr 2017 18:08:19 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/04/07/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAminikube%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>版本 minikube的版本是v0.17.1, 运行于ArchLinux.
镜像准备 感谢万能的防火墙，我们需要手动下载docker镜像到本地:
sudo docker pull gcr.io/google-containers/kube-addon-manager:v6.3 sudo docker pull gcr.io/google_containers/kubedns-amd64:1.9 sudo docker pull gcr.io/google_containers/kube-dnsmasq-amd64:1.4 sudo docker pull gcr.io/google_containers/exechealthz-amd64:1.2 sudo docker pull gcr.io/google_containers/kubernetes-dashboard-amd64:v1.5.1 sudo docker pull gcr.io/google_containers/heapster:v1.2.0 sudo docker pull kubernetes/heapster_influxdb:v0.6 sudo docker pull gcr.io/google_containers/heapster_grafana:v2.6.0-2 sudo docker pull gcr.io/google_containers/pause-amd64:3.0  存储docker镜像并打包的命令如下, 这样一个wget就可取下来所有的镜像:
sudo docker save gcr.io/google-containers/kube-addon-manager:v6.3 | bzip2&amp;gt;~/serve/addonmanagerv63.tar.bz2 sudo docker save gcr.io/google_containers/kubedns-amd64:1.9|bzip2&amp;gt;~/serve/dns19.tar.bz2 sudo docker save gcr.io/google_containers/kube-dnsmasq-amd64:1.4 |bzip2&amp;gt;~/serve/dnsmasq14.tar.bz2 sudo docker save gcr.io/google_containers/exechealthz-amd64:1.2|bzip2&amp;gt;~/serve/exechealthz12.tar.bz2 sudo docker save gcr.io/google_containers/kubernetes-dashboard-amd64:v1.5.1|bzip2&amp;gt;~/serve/dashboard151.tar.bz2 sudo docker save gcr.</description>
    </item>
    
    <item>
      <title>CoreOS Cluster On Libvirt</title>
      <link>http://purplepalmdash.github.io/blog/2017/04/06/coreos-cluster-on-libvirt/</link>
      <pubDate>Thu, 06 Apr 2017 13:27:15 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/04/06/coreos-cluster-on-libvirt/</guid>
      <description>Environment ArchLinux, libvirt.
Libvirt network(NAT, NOT dhcp), 172.17.8.1&amp;frasl;24.
etcd server On ArchLinux, create a etcd server via following commands:
http://purplepalmdash.github.io/blog/2016/12/21/trycoreos2/
ArchLinux etcd2 Example.</description>
    </item>
    
    <item>
      <title>Working Tips On Dimension</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/17/working-tips-on-dimension/</link>
      <pubDate>Fri, 17 Mar 2017 19:22:19 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/17/working-tips-on-dimension/</guid>
      <description>背景 最近在帮一个亲戚做企业类网站，最初方案是基于Docker化的WordPress，搭建好以后 一直不闻不问，思想可能是因为WP对于小白用户来说太过于复杂的缘故。
正好今天查看hugo的模板方案时，发现有一个很美观的静态页面叫Dimension, 于是起 了把网站迁移到静态网站上的心思。
Dimension主题预览:
搭建环境 首先从github下载源代码:
$ git clone https://github.com/sethmacleod/dimension.git $ mkdir Website/themes $ mv dimension-master Website/themes/dimension $ cp -ar Website/themes/dimension/exampleSite/* Website/  经过上面的步骤，我们已经设置了模板可工作的DEMO环境，在Website目录下执行以下命令， 分别为编译整个静态网站和预览更改:
$ cd Website $ hugo $ sudo python2 -mSimpleHTTPServer 18118  现在打开你的浏览器访问http://localhost:18118，即可看到本地搭建的dimension示例网站。
自定义 如果要创建自己的页面，则hugo new Your-Page.md即可创建出来页面，编辑方法就是针对markdown的编辑。
多语言支持 默认的DEMO提供了对德语和英语的支持，我们只需要删除config.toml文件中的[languages]的字段就可以, 例如删除:
[languages] [languages.en] languageName = &amp;quot;English&amp;quot; weight = 1 title = &amp;quot;Dimension&amp;quot;  logo修改 默认的logo使用的是fontawesome字体，我们可以修改为自定义的图片，需要修改以下两个地方:
config.toml文件:
- logo = &amp;quot;fa-diamond&amp;quot; - logo = &amp;quot;/images/jqlogo.</description>
    </item>
    
    <item>
      <title>XenServer Windows NTP时间配置</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/17/xenserver-windows-ntp%E6%97%B6%E9%97%B4%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 17 Mar 2017 16:58:26 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/17/xenserver-windows-ntp%E6%97%B6%E9%97%B4%E9%85%8D%E7%BD%AE/</guid>
      <description>ntp server Configure an ntp server in ubuntu16.04, IP address is 192.168.0.221:
$ sudo apt-get install -y openntp $ sudo vim /etc/ntp.conf  The reference configuration file is listed as following:
# /etc/ntp.conf, configuration for ntpd; see ntp.conf(5) for help driftfile /var/lib/ntp/ntp.drift # Enable this if you want statistics to be logged. #statsdir /var/log/ntpstats/ statistics loopstats peerstats clockstats filegen loopstats file loopstats type day enable filegen peerstats file peerstats type day enable filegen clockstats file clockstats type day enable # Specify one or more NTP servers.</description>
    </item>
    
    <item>
      <title>Wordpress Migration Tips</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/15/wordpress-migration-tips/</link>
      <pubDate>Wed, 15 Mar 2017 10:58:52 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/15/wordpress-migration-tips/</guid>
      <description>Background Moving a friend&amp;rsquo;s wordpress blog from DigitalOcean to a new cheap vps, here are all of the tips and steps.
MySQL Password recovery I forget the mysql password, recover it via following ways(Ubuntu14.04 Version):
Stop the mysql instance via:
$ sudo /etc/init.d/mysql stop  Start the mysqld daemon process use --skip-grant-tables options:
$ sudo /usr/sbin/mysqld --skip-grant-tables --skip-networking &amp;amp;  Mysql steps are listed as:
$ mysql -u root &amp;gt; FLUSH PRIVILEGES; &amp;gt; SET PASSWORD FOR root@&#39;localhost&#39; = PASSWORD(&#39;password&#39;); &amp;gt; FLUSH PRIVILEGES; &amp;gt; \q  Now better you reboot the machine, thus you could login to the mysql using the newly changed passwd.</description>
    </item>
    
    <item>
      <title>没有网络的生活</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/14/%E6%B2%A1%E6%9C%89%E7%BD%91%E7%BB%9C%E7%9A%84%E7%94%9F%E6%B4%BB/</link>
      <pubDate>Tue, 14 Mar 2017 14:01:44 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/14/%E6%B2%A1%E6%9C%89%E7%BD%91%E7%BB%9C%E7%9A%84%E7%94%9F%E6%B4%BB/</guid>
      <description>无网络后的生活 前几天折腾我两年已久的长城宽带终于到期了，长城宽带是假宽带，根本达不到宣称 的速度，一句话便宜无好货啊，好在它终于到期，我也终于可以不用再受丫的气了。 停机前长城宽带的人无数次电话骚扰了我，均被一一碾回。珍爱生命，远离垃圾宽带。
于是我过回了一种曾经很熟悉的无网络生活。
回想一下，在有网络的时候，我的业余生活是怎样度过的呢？中午时分我回到家里的时候， 吃点东西后就会躺在床上，然后顺手打开手机，刷几下微博或者看看朋友圈，再看看微信 里的消息，好了，1点到了，开始睡，然而，效果并不好。
或者，下班回家后，往电脑前一坐，驾上梯子，开始浏览推特或者刷墙外楼上的新闻，那些 新闻也许很有意思，所以不知不觉，一个晚上就这样过去了…………
而在没有了网络的家里，我再也找不到WIFI的标记。随手刷几下便是浪费我宝贵的流量。尽管 我有着1块钱800M的无敌电信卡，然而那毕竟是要通过开热点才能打开的功能。这个门槛的设置 让网络不再触手可及，因而不知不觉之间，微博/朋友圈/微信等等那些可能谋杀生命的东西因为 门槛的设置被挡在了外面。
于是如今中午的生活我是这样的： 回家后，吃点东西，躺下，开始翻某本小说，或者过我前段时间买回来的技术类/语言类书籍。 到1点的时候，放开书本，哇，绝对的好梦。
其实也不用担心在离线的时候无法提升技能，这世界上有的是离线教程，或者书籍，似乎我离开 那种对着书本敲入代码运行的年代已经很远。有时候我想着，互联网的便利，似乎让我们失去了 长久以来养成的良好的学习习惯，我们不再依赖于技术文档而完成研发，我们似乎只是动用着搜索引擎 在网上找着现成的答案。我们似乎变成了临场考试时随手打小抄的学生，而不是平时认真积累凭借 自己的深入理解认真答题的学霸。
中午回家的时候在楼道里看到电信1000块钱两年的宽带，实在是实惠，小小动心。然而反思断网 后的自由，我深感断开网络后所获得的岂止是全身心的自由? 没有网络的家里，带来的是一种失去已久的我曾经很熟悉的求学求知模式。眼下看来，我打算延续这种难得的自由, 继续 无WIFI生存。。
有时我们费心所追求的东西，正是 把我们身心自由束缚上的那一道金制的枷锁。
无网络后的知识提升 1、 更多的依赖于纸质资料，凭借对问题的领悟找寻解决方案。
2、 利用公司网络下载学习资料和搭建开发环境，用自己的笔记本上班，以便同步工作。
3、 1块钱800M的电信卡，不到万不得已的时候不开作弊模式。
4、 破解邻居WIFI，你懂得。
5、 实在不行就装回来1000块钱两年的真电信宽带吧。
说实话，我也有点好奇这样下去我能挺多久？</description>
    </item>
    
    <item>
      <title>Reading Digest On Programming Interview</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/09/reading-digest-on-programming-interview/</link>
      <pubDate>Thu, 09 Mar 2017 15:55:10 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/09/reading-digest-on-programming-interview/</guid>
      <description>最近扫了扫一本知名书《程序员面试宝典》。众所周知国内的面试都得要靠扫书来的嘛。
然而这本书上的有些习题，答案也未必为对，这里列举一个:
CPU架构导致的sizeof 原题目如下:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; struct { short a1; short a2; short a3; }A; struct { long a1; short a2; }B; int main(void) { char *ss1= &amp;quot;0123456789&amp;quot;; char ss2[]= &amp;quot;0123456789&amp;quot;; char ss3[100] = &amp;quot;0123456789&amp;quot;; int ss4[100]; char q1[]=&amp;quot;abc&amp;quot;; char q2[]=&amp;quot;a\n&amp;quot;; char *str1= (char*)malloc(100); void *str2= (void*)malloc(100); printf(&amp;quot;Sizeof ss1 is %d\n&amp;quot;, sizeof(ss1)); printf(&amp;quot;Sizeof ss2 is %d\n&amp;quot;, sizeof(ss2)); printf(&amp;quot;Sizeof ss3 is %d\n&amp;quot;, sizeof(ss3)); printf(&amp;quot;Sizeof ss4 is %d\n&amp;quot;, sizeof(ss4)); printf(&amp;quot;Sizeof q1 is %d\n&amp;quot;, sizeof(q1)); printf(&amp;quot;Sizeof q2 is %d\n&amp;quot;, sizeof(q2)); printf(&amp;quot;Sizeof str1 is %d\n&amp;quot;, sizeof(str1)); printf(&amp;quot;Sizeof str2 is %d\n&amp;quot;, sizeof(str2)); printf(&amp;quot;Sizeof A is %d\n&amp;quot;, sizeof(A)); printf(&amp;quot;Sizeof B is %d\n&amp;quot;, sizeof(B)); return 0; }  在我的机器上的答案是:</description>
    </item>
    
    <item>
      <title>Vue.js Learning</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/08/vue.js-learning/</link>
      <pubDate>Wed, 08 Mar 2017 09:25:54 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/08/vue.js-learning/</guid>
      <description>Question What is ES6? ES6的语法? What is MVVM框架?  Tips 介绍 Website: cn.vuejs.org
三种组建组合到一个vue文件里:
.vue是 vue.js中特有的一种文件，在打包中会被打包成浏览器可理解的html.
开发环境建立 Ubuntu为例:
$ sudo apt-get install -y npm $ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org $ sudo cnpm install -g vue-cli $ vue init webpack my-project $ cd my-project $ cnpm install  前端项目的依赖很多，所以需要用cnpm install所有依赖
-g 代表安装到系统目录下
Understanding Code First example. ### Html &amp;lt;div id=&amp;quot;demo&amp;quot;&amp;gt; &amp;lt;p&amp;gt;{{ message }}&amp;lt;/p&amp;gt; //常用的模板渲染的方式, 此message对应的是 // 新建的Vue对象里的data里的mesage字段 &amp;lt;input v-model=&amp;quot;message&amp;quot;&amp;gt; // Vue.</description>
    </item>
    
    <item>
      <title>Android Mount</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/07/android-mount/</link>
      <pubDate>Tue, 07 Mar 2017 23:28:15 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/07/android-mount/</guid>
      <description>The steps in Ubuntu includes:
$ sudo pacman -S pcmanfm mtpfs gvfs-mtp gvfs-gphoto2 libmtp  Edit the fuse configuration via:
$ sudo vim /etc/fuse.conf user_allow_other  Mount the equipment to ~/mnt:
$ mkdir -p ~/mnt $ mtpfs -o allow_other ~/mnt  Now open pcmanfm you will see the attached new android equipment.
Or now if you insert the android phone, the pcmanfm will automatically mount the equipment&amp;rsquo;s file system.</description>
    </item>
    
    <item>
      <title>Linux Tips(7)</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/03/linux-tips7/</link>
      <pubDate>Fri, 03 Mar 2017 11:14:34 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/03/linux-tips7/</guid>
      <description>1. CloudStack Issue On ubuntu1404/1604, the template should enable HVM.
Its partition size should less than the primary storage size.
Password reset issue: Ubuntu1604, failed.
Ubuntu14.04 startup too slow, because of ntp, remove it sudo update-rc.d -f ntp remove 
2. Ubuntu16.04 cloudstack-pass issue The reset-password script is located as /etc/init.d/cloud-set-guest-password, then we could do following configurations:
Remove the services via:
# update-rc.d -f cloud-set-guest-password remove # cp /etc/init.d/cloud-setup-guest-password /usr/bin/ # chmod 777 /usr/bin/cloud-setup-guest-password  Before because you set update-rc.</description>
    </item>
    
    <item>
      <title>Migration Docker Based WordPress</title>
      <link>http://purplepalmdash.github.io/blog/2017/03/02/migration-docker-based-wordpress/</link>
      <pubDate>Thu, 02 Mar 2017 14:22:31 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/03/02/migration-docker-based-wordpress/</guid>
      <description>AIM For last 3 days I was busy designing the website for a company, I run everything in docker, and finish the design very fast. Now I want to migrate it from the old vps to a new vps, following records all of the steps.
Data Volume Migration Examine the data volume via following commands:
# docker volume ls | grep db local makeclean_db_data # docker volume ls | grep html local makeclean_html  Get the volume mount point:</description>
    </item>
    
    <item>
      <title>DockerizedWordpressQuickStart</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/27/dockerizedwordpressquickstart/</link>
      <pubDate>Mon, 27 Feb 2017 16:01:30 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/27/dockerizedwordpressquickstart/</guid>
      <description>AIM Recently I want to setup a wordpress based website and quickly adjust the content, since the time is so limted, I choose docker for development and finish the task soonly, this article records all of the detailed steps.
Docker-compose the wordpress We use docker-compose for composing the wordpress based apps, the commands listed as following:
$ mkdir -p ~/code/wordpress $ vim docker-compose.yml  The docker-compose.yml file is listed as following:</description>
    </item>
    
    <item>
      <title>用Git和Docker快速部署应用程序</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/23/%E7%94%A8git%E5%92%8Cdocker%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 23 Feb 2017 11:06:30 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/23/%E7%94%A8git%E5%92%8Cdocker%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>参考资料 《Docker基础与实战》第八章 (韩) 李在弘。
环境 本机, ArchLinux.
服务器, DigitalOcean, Ubuntu14.04.
之所以选择DO的主机，是因为它位于墙外，不会有防火墙的阻挡，每次都能编译成功。
本机配置 Git ArchLinux上安装sudo pacman -S git， 之后可以配置global:
$ git config --global user.name xxxx $ git config --global user.email xxxx@gamil.com  app.js 用Node.js编写一个简单的Web服务器，返回Hello Docker:
var express = require(&#39;express&#39;); var app = express(); app.get([&#39;/&#39;, &#39;/index.html&#39;], function (req, res) { res.send(&#39;Hello Docker1&#39;); }); app.listen(80);  package.json 用于描述运行该程序的依赖关系:
{ &amp;quot;name&amp;quot;: &amp;quot;exampleapp&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Hello Docker&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;, &amp;quot;dependencies&amp;quot;: { &amp;quot;express&amp;quot;: &amp;quot;4.4.x&amp;quot; } }  Dockerfile 用于运行该APP的Docker容器定义如下:</description>
    </item>
    
    <item>
      <title>应用框架加密</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/22/%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Wed, 22 Feb 2017 09:35:12 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/22/%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%8A%A0%E5%AF%86/</guid>
      <description>目的 在诸如OpenSuse 11.1这一类的古老系统上，对组建系统的加密可能会比较繁琐，首先全盘加密的实现并不容易(几乎不可能，因为内核太古老)。
测试用框架 为了简单起见，我们将使用一个非常简单的基于C语言的网页服务器，来将我们的静态网站导出，静态网站也没什么内容，大体截图如下:
框架目录结构如下:
. ├── images │ └── 2017_02_22_09_41_24_1599x874.jpg ├── index.html └── index.md 1 directory, 3 files  网页服务器 为了测试的方便，我们用一个基于C实现的静态网页服务器:
$ wget https://gist.githubusercontent.com/sumpygump/9908417/raw/5fa991fda103d0b7a0c38512394a83ccada9ad6c/nweb23.c $ gcc -O -DLINUX nweb32.c -o nweb $ ./nweb 8848 ./  加入到启动项中:
$ sudo vim /etc/rc.d/boot.local /home/dash/Code/nweb 8848 /home/dash/testwebsite/ &amp;amp;  现在打开浏览器访问该机器的8848端口，可以看到我们的框架已经正确运行:
加密问题 现在的问题在于：一旦用户登入到系统，对我们框架的结构即可一目了然。
因而首先要解决的是：禁止用户登入进LINUX系统，这个步骤很简单，设置用户名/密码更加复杂就可以，理论上可以防止用户暴力破解并登入系统。
但是一旦用户拔下硬盘，将此机器上的硬盘插入到另一台机器上，则框架的所有结构同样一览无余，接下来我们来解决框架的加密问题.
虚拟加密盘 创建一个大小为1G的虚拟加密盘raw文件:
# dd if=/dev/zero of=/root/luks.vol bs=1M count=1024 1024+0 records in 1024+0 records out 1073741824 bytes (1.</description>
    </item>
    
    <item>
      <title>创建Vagrant Box</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/20/%E5%88%9B%E5%BB%BAvagrant-box/</link>
      <pubDate>Mon, 20 Feb 2017 10:59:17 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/20/%E5%88%9B%E5%BB%BAvagrant-box/</guid>
      <description>Aims Recently I am frequently using vagrant for verification, so quickly creating the vagrant box becomes the essential tasks. Previsouly I am suing packer for building vagrant box, but it requires you for writing the complex configuration files. How to quickly generate the vagrant box using virtualbox, following lists the steps
Virtual Machine Create a new virtual machine in virtualbox, make sure you locate your disk file in /tmp folder!</description>
    </item>
    
    <item>
      <title>Configuraiton For Vagrant</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/17/configuraiton-for-vagrant/</link>
      <pubDate>Fri, 17 Feb 2017 11:09:33 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/17/configuraiton-for-vagrant/</guid>
      <description>Vagrantfile Configuration for setting Ubuntu14.04, bridged networking, and setting its routing to specified node.
# -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.box = &amp;quot;minimum/ubuntu-trusty64-docker&amp;quot; # Networking config.vm.network &amp;quot;public_network&amp;quot;, ip:&amp;quot;192.168.10.217&amp;quot;, netmask: &amp;quot;16&amp;quot;,bridge:&amp;quot;xenbr0&amp;quot; # default router config.vm.provision &amp;quot;shell&amp;quot;, run: &amp;quot;always&amp;quot;, inline: &amp;quot;route add default gw 192.168.0.176&amp;quot; # delete default gw on eth0 config.vm.provision &amp;quot;shell&amp;quot;, run: &amp;quot;always&amp;quot;, inline: &amp;quot;eval `route -n | awk &#39;{ if ($8 ==\&amp;quot;eth0\&amp;quot; &amp;amp;&amp;amp; $2 !</description>
    </item>
    
    <item>
      <title>OpenSuSE全盘加密</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/14/opensuse%E5%85%A8%E7%9B%98%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Tue, 14 Feb 2017 11:08:07 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/14/opensuse%E5%85%A8%E7%9B%98%E5%8A%A0%E5%AF%86/</guid>
      <description>系统准备 OpenSuse 13.2 DVD, Libvirt.
磁盘分区 在初始化磁盘配置的时候，点击Edit Proposal Settings:
点击Create LVM-based Proposal并勾选Encrypt Volume Group:
输入两次密码：
可以选择ext4为默认的文件系统:
磁盘分区格局如下:
点击Next按钮，继续完成安装.
安装完毕后，需要手动输入密码才能进入系统:
免密码登录 OpenSuse的免密码登录与CentOS相同, 都是通过修改dracut来实现免密码登录.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnEncryption</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/10/workingtipsonencryption/</link>
      <pubDate>Fri, 10 Feb 2017 18:08:48 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/10/workingtipsonencryption/</guid>
      <description>Refers to:
https://blog.tinned-software.net/automount-a-luks-encrypted-volume-on-system-start/
Disk Partition Encryption Steps for encryption of vdb1:
# dd if=/dev/urandom of=/root/vdb_secret_key bs=512 count=8 # cryptsetup -v luksAddKey /dev/vdb1 /root/vdb_secret_key # cryptsetup luksDump /dev/vdb1 | grep &amp;quot;Key Slot&amp;quot; # cryptsetup -v luksOpen /dev/vdb1 vdb1_crypt --key-file=/root/vdb_secret_key # cryptsetup -v luksClose vdb1_crypt  Add following line for auto decryption:
# vim /etc/crypttab vdb1_crypt UUID=43740d4f-df91-492e-8d06-b32f461a633e /root/vdb_secret_key luks  While UUID is generated via following command:
# cryptsetup luksDump /dev/vdb1 | grep &amp;quot;UUID&amp;quot;  Add lines into /etc/fstab:</description>
    </item>
    
    <item>
      <title>CentOS全盘加密</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/09/centos%E5%85%A8%E7%9B%98%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Thu, 09 Feb 2017 14:37:24 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/09/centos%E5%85%A8%E7%9B%98%E5%8A%A0%E5%AF%86/</guid>
      <description>以下记录安装好加密磁盘后，免密码登录配置。
keyfile生成及配置 生成加密keyfile:
# dd if=/dev/urandom of=/boot/keyfile bs=1024 count=4  用加密的keyfile解锁加密盘:
# cryptsetup luksAddKey /dev/vda2 /boot/keyfile --key-slot 1 Enter any existing passphrase:  dracut配置 更改/usr/lib/dracut/modules.d/90crypt/cryptroot-ask.sh文件:
info &amp;quot;luksOpen $device $luksname $luksfile $luksoptions&amp;quot; +++ # Unlock with USB key +++ sleep 3 +++ udevsettle +++ usbkey=/dev/disk/by-uuid/8cc8c3fe-8b6d-4adf-aab5-e3b9e758b622 +++ if [ -e $usbkey ]; then +++ ask_passphrase=0 +++ echo &amp;quot;USB Key detected - unlocking partition $device ...&amp;quot; +++ echo &amp;quot;mkdir&amp;quot; +++ mkdir -p /mnt +++ echo &amp;quot;mount&amp;quot; +++ mount $usbkey /mnt +++ echo &amp;quot;unlock&amp;quot; +++ cat /mnt/keyfile | cryptsetup luksOpen $device $luksname --key-file=- +++ fi  因为我们使用了几条命令，所以需要将可执行文件打包进去:</description>
    </item>
    
    <item>
      <title>Ubuntu磁盘加密测试</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/08/ubuntu%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 08 Feb 2017 16:25:34 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/08/ubuntu%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/</guid>
      <description>准备 三台虚拟机，Ubuntu16.04 安装盘，virt-manager.
角色配置 虚拟机A：未加密，Ubuntu16.04安装。
虚拟机B: encrypted LVM, 安装Ubuntu16.04.
虚拟机C：Test Machine.
加密配置 每次启动时避免输入密码的配置， 在虚拟机B上作如下配置:
首先备份initrd.img:
# cp /boot/initrd.img-4.4.0-31-generic /boot/initrd.img-4.4.0-31-generic.safe  在未经加密的/boot分区生成加密的key文件:
# dd if=/dev/urandom of=/boot/keyfile bs=1024 count=4  查看加密分区情况:
$ sudo blkid | grep -i crypto /dev/vda5: UUID=&amp;quot;a255260b-30eb-4630-b9c9-a6b7f75b236e&amp;quot; TYPE=&amp;quot;crypto_LUKS&amp;quot; PARTUUID=&amp;quot;2a203ff6-05&amp;quot;  从上面可以看出vda5是我们的加密风趣，现在将新创建的keyfile作为加密卷的解锁文件:
# cryptsetup -v luksAddKey /dev/vda5 /boot/keyfile Enter any passphrase:  输入你以前创建的密码，看到以下输出时代表解锁文件添加成功:
Key slot 0 unlocked. Command successful.  现在更改/etc/crypttab文件:
# cp /etc/crypttab /root/ # vim /etc/crypttab vda5_crypt UUID=a255260b-30eb-4630-b9c9-a6b7f75b236e /dev/disk/by-uuid/36747581-1841-47de-9ce2-b1262e1eb167:/keyfile luks,keyscript=/lib/cryptsetup/scripts/passdev  其中/ev/disk/by-uuid的字段可以通过blkid来获得，即/boot的uuid值。</description>
    </item>
    
    <item>
      <title>EnableUSBCameraOnArchLinux</title>
      <link>http://purplepalmdash.github.io/blog/2017/02/04/enableusbcameraonarchlinux/</link>
      <pubDate>Sat, 04 Feb 2017 20:14:50 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/02/04/enableusbcameraonarchlinux/</guid>
      <description>WebCam Detection Detect the USB equipment via:
# lsusb Bus 002 Device 002: ID 0b95:772b ASIX Electronics Corp. AX88772B Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 008 Device 002: ID 0c45:0011 Microdia EBUDDY Bus 008 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub Bus 007 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub Bus 006 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub Bus 001 Device 002: ID 046d:0829 Logitech, Inc.</description>
    </item>
    
    <item>
      <title>CentOS Encryption</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/24/centos-encryption/</link>
      <pubDate>Tue, 24 Jan 2017 15:35:05 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/24/centos-encryption/</guid>
      <description>Disk Configuration Specify the disk like following, notice we don&amp;rsquo;t activate the swap partition.
Select the disk and do the following configuration:
Boot partition, should be 400MiB:
Root partition, should contains all of the left space:
Cryption Refers to:
http://www.gaztronics.net/howtos/luks.php
Generate the secret key file:
# dd if=/dev/sdb of=luks-secret.key bs=1 count=4096 # cryptsetup luksAddKey /dev/sda2 luks-secret.key --key-slot 1  Modify Dracut:
# ls /dev/disk/by-id | grep usb usb-SanDisk_Cruzer_Orbit_4C532000050606114400-0:0 -&amp;gt; .</description>
    </item>
    
    <item>
      <title>使用USB磁盘无密码登录加密分区的LINUX</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/22/%E4%BD%BF%E7%94%A8usb%E7%A3%81%E7%9B%98%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E5%8A%A0%E5%AF%86%E5%88%86%E5%8C%BA%E7%9A%84linux/</link>
      <pubDate>Sun, 22 Jan 2017 18:31:43 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/22/%E4%BD%BF%E7%94%A8usb%E7%A3%81%E7%9B%98%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E5%8A%A0%E5%AF%86%E5%88%86%E5%8C%BA%E7%9A%84linux/</guid>
      <description>背景 最近一直在看关于LINUX磁盘加密的东西，也尝试了文件加密、扇区加密、全盘加密等方面。 然而每次都需要输入密码这种事情对一个追求速度的人来说似乎有点浪费时间，而且每次重新 都需要输入密码也无法适用于自动化运维的场合。因而我根据网上提到的方法制作了一个 从USB磁盘读取密钥以解密加密全盘的方法。下面是对应的实现过程。
Debian系统安装 从镜像网站下载Debian 8(jessie)的DVD安装源，在Virtualbox中创建一台虚拟机，插入 ISO后，光盘启动系统进入到以下界面:
选择Install后，继续安装，因为篇幅的关系，这里省略掉关于用户名/密码/主机名/语言/区域设置等配置， 直接进入到磁盘分区的步骤:
选择手动对磁盘进行分区:
选择我们添加的磁盘:
选择接受上面的提示，创建一个新的空白分区表:
可以看到当前没有任何磁盘分区，选择到红色光标所在的行，按回车:
创建一个新的分区:
/boot分区大小我们设置为400MB：
选择为主分区:
Location选择，从Beginning开始:
配置为我们以下截图里所示的内容:
接着创建一个大小为1GB的交换分区:
接着创建主分区，步骤不再重复，充分利用剩下的磁盘空间:
在上面的高亮区内按回车，改变磁盘类型为physical volume for encryption:
注意我们配置的参数，这里配置了默认的加密方式为device-mapper(dm-crypt)， 加密算法为256键字节大小的AES加密:
成功创建后的磁盘分区情况如下图:
接下来对加密卷作高阶配置，选择如下图中的条目:
出现警告信息，告知我们当前的分区方案将被写入到磁盘，我们是否开始配置加密卷？
选择yes后，选择Create encrypted volumes:
我们选择sda2和sda3，对交换分区和主分区进行加密。如果只选择主分区加密，安装程序会 报出错误，所以一开始我们就选中这两块分区，进入到下一步:
分区完毕，选择Done Setting up the partition， 结束手动分区步骤:
确定写入磁盘:
写入过程:
此时需要定义密码:
成功配置完加密卷的磁盘分区表如下所示:
选择4G大小的主分区，改变其Mount point为/:
同样改变swap分区:
确定写入磁盘:
接下来继续安装，并在安装的最后一步将BootLoad写入MBR。
安装完毕后，重新启动机器后，需要输入密码才能进入系统:
配置passwordless 接下来我们创建无需输入密码的根文件系统，使用一个USB优盘来记录密码信息，位于USB优盘 上的secret key将用于解密加密磁盘。 将USB盘插入到虚拟机，可以使用dmesg来获取其卷标，这里可以看到我们的卷表为/dev/sdb:
使用dd命令，从优盘读取8192字节大小的随机字节 ，作为我们要使用的secret key:
# dd if=/dev/sdb of=/root/secret.key bs=512 skip=4 count=16  上面生成的secret.key文件将被加入到加密卷中，通过cryptsetup命令加入。默认的密码被保存 在slot 0, 而slot 1将被用作第二个secret key。</description>
    </item>
    
    <item>
      <title>火炉-凤凰</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/21/%E7%81%AB%E7%82%89-%E5%87%A4%E5%87%B0/</link>
      <pubDate>Sat, 21 Jan 2017 17:55:42 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/21/%E7%81%AB%E7%82%89-%E5%87%A4%E5%87%B0/</guid>
      <description>想起来有段时间没去火炉山-凤凰山玩了，看今天天气不错，出去走走。
6号线开通后可以直接坐地铁到龙洞，省掉了之前地铁转公交的繁琐，10点多才出发，一个小时 不到就可以到达火炉山山脚。
今天广州的画风是这样的:
火炉:
凤凰:
火炉山最近维护力度比较大，台阶基本上都是干净的:
爬到猪头石只需要20分钟:
一颗枯死的树:
凤凰山比起火炉山来，更加原生态:
一位玩越野跑的女侠:
一位玩午睡的男侠:
此处风景甚妙:
筲箕窝水库:
木强水库:
秋叶红胜二月花:
水库这块属凤凰山的精华:
出山的路上发现这家别致的餐馆，屋顶上长满蓝色的花:
草莓25一斤，可自采:
全程耗时3小时，全程步行大约18公里。冬日温度适宜，恰是登山之好时节。</description>
    </item>
    
    <item>
      <title>Awesome4.0 配置</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/20/awesome4.0-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 20 Jan 2017 14:07:37 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/20/awesome4.0-%E9%85%8D%E7%BD%AE/</guid>
      <description>Aim For Awesome is upgrading to 4.0 version, the configuration file has changed a lot comparing to Awesome 3.5, I have to rewrite the configuration files, following records all of the steps for customize Awesome 4.0.
Configure File Simply copy the configuration file from xdg:
$ cp /etc/xdg/awesome/rc.lua ~/.config/awesome/  Customization default terminal Change default terminal from xterm to gnome-terminal:
-- terminal = &amp;quot;xterm&amp;quot; terminal = &amp;quot;gnome-terminal&amp;quot;  Run Once Programs Add one function then call it:</description>
    </item>
    
    <item>
      <title>Linux下的磁盘加密</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/19/linux%E4%B8%8B%E7%9A%84%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Thu, 19 Jan 2017 10:26:41 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/19/linux%E4%B8%8B%E7%9A%84%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86/</guid>
      <description>目的 调研Linux虚拟机磁盘加密
环境 Ubuntu16.04 LTS/Libvirt.
全盘加密 选择磁盘全盘加密，需要在系统安装时指定encrypted LVM:
指定加密的密码:
效果 每次启动时，需要在以下界面手动输入加密时密码，以继续系统启动:
如果输入失败，会提示密码错误，无法继续启动:
只有输入正确密码，才可以继续系统启动并进入到登录界面:
Packer.io制作加密系统 UBUNTU系统，对于加密LVM系统的构建，需要改动相应的preseed文件。
CentOS需要改动KickStart中对应的定义.
磁盘格局 通过命令sudo fdisk -l查看磁盘格局:
Disk /dev/ram0 ~ /dev/ram14, 64 MiB, 67108864 bytes, 131072 sectors Disk /dev/mapper/sda5_crypt: 7.5 GiB, 8074035200 bytes, 15769600 sectors Disk /dev/mapper/ubuntu--vg-root: 6.5 GiB, 6996099072 bytes, 13664256 sectors Disk /dev/mapper/ubuntu--vg-swap_1: 1 GiB, 1073741824 bytes, 2097152 sectors Disk /dev/mapper/cryptswap1: 1023.5 MiB, 1073217536 bytes, 2096128 sectors  通过df -h查看分区格式:
$ df -h Filesystem Size Used Avail Use% Mounted on udev 478M 0 478M 0% /dev tmpfs 100M 3.</description>
    </item>
    
    <item>
      <title>将网站转化为Android应用程序</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/13/%E5%B0%86%E7%BD%91%E7%AB%99%E8%BD%AC%E5%8C%96%E4%B8%BAandroid%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Fri, 13 Jan 2017 19:22:37 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/13/%E5%B0%86%E7%BD%91%E7%AB%99%E8%BD%AC%E5%8C%96%E4%B8%BAandroid%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>写了几年博客，博文已有数百篇，于是我想能不能把每次需要上网搜索的过程改为在手机端本地查找呢？
看了下网上的解决方案，参考了以下这个，可以作为静态网站APP化的第一步。
参考链接:
http://www.vetbossel.in/convert-website-to-android-application/
构建开发环境 ArchLinux下安装android-studio的方法是通过yaourt:
$ yaourt -S android-studio  需要注意的是，安装过程中需要访问Google网站，因而需要代理（你懂的）。而安装完毕后，需要安装本地模拟器，下载 img也需要用到代理。确保你翻墙的速度够快。
运行模拟器会出错，可以通过以下两个步骤来纠正:
$ yaourt glxinfo $ cd ~/Android/Sdk/tools/lib64/libstdc++/ $ mv libstdc++.so.6 libstdc++.so.6.back $ ln -s /usr/lib/libstdc++.so.6 ~/Android/Sdk/tools/lib64/libstdc++/libstdc++.so.6  开发 开发步骤可以参考原文。
值得注意的是，在MainActivity.java文件中，第一行需要改正为正确的包名，否则会出现编译错误。
- package com.example.vetri.websitetoapplication; + package com.example.dash.websitetoapplication;  执行 实际运行的效果如下:
想法 在Android端已经可以有简单的Web服务器，考虑把hugo生成的网站内容上传到Android手机内的Web服务器上。
因为网站是本地化的，所以可以去掉一切不需要的插件，例如disqus之类。</description>
    </item>
    
    <item>
      <title>Wordpress长图片功能实现</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/12/wordpress%E9%95%BF%E5%9B%BE%E7%89%87%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 12 Jan 2017 12:06:15 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/12/wordpress%E9%95%BF%E5%9B%BE%E7%89%87%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</guid>
      <description>目标 在Wordpress的每篇文章添加TurnToJPG功能，点击该按钮以后，由博文直接生成长文字图片。
搭建测试环境 为了及时测试我们的博客，快速搭建一个基于docker的开发环境:
$ sudo docker pull wordpress $ sudo docker pull mariadb $ sudo docker pull corbinu/docker-phpmyadmin  创建一个docker-compose的yml文件，启动之:
$ vim docker-compose.yml wordpress: image: wordpress links: - wordpress_db:mysql ports: - 8080:80 wordpress_db: image: mariadb environment: MYSQL_ROOT_PASSWORD: examplepass phpmyadmin: image: corbinu/docker-phpmyadmin links: - wordpress_db:mysql ports: - 8181:80 environment: MYSQL_USERNAME: root MYSQL_ROOT_PASSWORD: examplepass  现在启动服务:
$ sudo docker-compose up -d Creating mywordpress_wordpress_db_1 Creating mywordpress_wordpress_1 Creating mywordpress_phpmyadmin_1  打开http://127.0.0.1:8080即可访问到我们的测试站点。在wordpress后台 查找并安装tdPersona主题.</description>
    </item>
    
    <item>
      <title>后台开发读书笔记</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/10/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 10 Jan 2017 12:06:14 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/10/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>从图书馆借回来不少书，其中有一本腾讯工程师写的《后台开发核心技术与应用实践》，这本书的内容很浅显易懂， 基本上涵盖了Linux下C++开发在一般公司能用到的范畴。作者也说了，她写书的初衷在于用最短的篇幅讲解实际后台 用到的核心知识点以便读者能快速进入到实际开发中。扫了扫，前两张用来复习准备面试中有关C++的内容不错。
想提升的就算了，这本书的代码和调试手段都比较初级，实际工作中，需要更多的借助Google和开源社区来完成。
这里记录的主要是本人对该书里提到的一些概念的理解.
第一章 函数模板/函数重载 1.2函数章节里，关于函数重载和函数模板的理解可以用下面的代码来解释，左边是用函数重载的情形，可以看到一个 同名函数可以有多个参数版本，而右边的函数模板则引用了模板的概念，大大节约了代码行。
#include&amp;lt;iostream&amp;gt; #include&amp;lt;iostream&amp;gt; using namespace std; using namespace std; int min(int a, int b, int c){ |	template&amp;lt;typename T&amp;gt; &amp;gt;	T min(T a,T b,T c){ if(a&amp;gt;b)a=b; if(a&amp;gt;b)a=b; if(a&amp;gt;c)a=c; if(a&amp;gt;c)a=c; return a; return a; } } long long min(long long a,long long b, long long c){ &amp;lt; if(a&amp;gt;b)a=b; &amp;lt; if(a&amp;gt;c)a=c; &amp;lt; return a; &amp;lt; } &amp;lt; double min(double a, double b){ //�������������ϵĲ�����ֻ�� &amp;lt; if(a-b&amp;gt;(1e-5))a=b; &amp;lt; return a; &amp;lt; } &amp;lt; int main(){ int main(){ int a=1,b=2,c=3; |	int a=1,b=2,c=3; cout&amp;lt;&amp;lt;min(a,b,c)&amp;lt;&amp;lt;endl; |	cout&amp;lt;&amp;lt;min(a,b,c)&amp;lt;&amp;lt;endl; long long a1=100,b1=200,c1=300; |	long long a1=1000000000,b1=2000000000,c1=3000000000; cout&amp;lt;&amp;lt;min(a1,b1,c1)&amp;lt;&amp;lt;endl; |	cout&amp;lt;&amp;lt;min(a1,b1,c1)&amp;lt;&amp;lt;endl; double a2=1.</description>
    </item>
    
    <item>
      <title>Hugo And TravisCI Issue</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/07/hugo-and-travisci-issue/</link>
      <pubDate>Sat, 07 Jan 2017 10:25:59 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/07/hugo-and-travisci-issue/</guid>
      <description>Problem In this morning when I get up and try to write something in my blog, I found the blog won&amp;rsquo;t upate. In travisCI website I got something very strange like following picture shows:
Error info:
Failed to normalize URL string. Returning in = &amp;quot;/&amp;quot;  Reason As discussed in this post:
https://discuss.gohugo.io/t/started-getting-failed-to-normalize-url-string-returning-in/5034
This is because hugo now holds its own dependencies using govendor, you could view from its repository:</description>
    </item>
    
    <item>
      <title>DockerCloudReadingDigests</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/06/dockercloudreadingdigests/</link>
      <pubDate>Fri, 06 Jan 2017 15:42:25 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/06/dockercloudreadingdigests/</guid>
      <description>第一章 Docker镜像准备:
$ sudo docker pull redis $ sudo docker pull django $ sudo docker pull haproxy $ sudo docker pull ubuntu  应用栈节点架构:
启动redis-master容器节点, 两个redis-slave容器节点启动时连接到redis-master上面, 两个app容器节点启动时连接到redis-master上面, haproxy容器结点启动时连接到两个app结点上面。
容器的启动顺序为：redis-master -&amp;gt; redis-slave -&amp;gt; APP -&amp;gt; HAProxy.
Redis Master:
$ sudo docker run -it --name redis-master redis /bin/bash root@4e4e597ffcb6:/data#  Redis Slave1/Slave2:
$ sudo docker run -it --name redis-slave1 --link redis-master:master redis /bin/bash $ sudo docker run -it --name redis-slave2 --link redis-master:master redis /bin/bash  App1, App2:</description>
    </item>
    
    <item>
      <title>运行K8S例程</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/03/%E8%BF%90%E8%A1%8Ck8s%E4%BE%8B%E7%A8%8B/</link>
      <pubDate>Tue, 03 Jan 2017 19:10:32 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/03/%E8%BF%90%E8%A1%8Ck8s%E4%BE%8B%E7%A8%8B/</guid>
      <description>GuestBook 注意修改imagePullPolicy为IfNotPresent, 创建服务的步骤分别为:
$ kubectl create -f redis-master-deployment.yaml $ kubectl create -f redis-master-service.yaml $ kubectl create -f frontend-deployment.yaml $ kubectl create -f frontend-service.yaml  现在得到其运行状态:
$ kubectl get pod NAME READY STATUS RESTARTS AGE frontend-88237173-02dvl 1/1 Running 0 2h frontend-88237173-r7g3v 1/1 Running 0 2h frontend-88237173-vjbv5 1/1 Running 0 2h redis-master-4154998525-f186t 1/1 Running 0 2h redis-slave-132015689-3qh7b 1/1 Running 0 2h redis-slave-132015689-hpw88 1/1 Running 0 2h  可以用proxy-forward直接访问某个pod中暴露出来的frontend服务:
$ kubectl port-forward frontend-88237173-02dvl 9081:80  上述命令的意思是，将pod frontend-88237173-02dvl80端口的流量转发到 本地的9081端口，则可以通过访问http://127.</description>
    </item>
    
    <item>
      <title>MyReadingBooks</title>
      <link>http://purplepalmdash.github.io/blog/2017/01/03/myreadingbooks/</link>
      <pubDate>Tue, 03 Jan 2017 10:19:04 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2017/01/03/myreadingbooks/</guid>
      <description>文学类 1 《流亡中的自在》达lai喇嘛著.
心得：
从另一个角度看待西藏问题，当事人很难得的回忆录。
阅读时间： 2017.1.1
2 《五代十国》 朱长孝著.
心得：
演艺类小说，讲述五代十国的风云人物/事件。
阅读时间： 2017.1.2 ~
3 《鲸鱼女孩 池塘男孩》痞子蔡著.
心得：
台湾网络文学，小确幸的典型文章，读起来很温馨。
阅读时间： 2017.1.1
4 《窗边的小豆豆》 (日本)黑柳彻子著.
心得：
幼儿教育类作品，一个叫豆豆的淘气小女孩，如何在一所尊重儿童个性的幼儿园里愉快成长的故事，很值得当代的 中国父母们看看。
阅读时间： 2017.1.1
5 《北极风情画》卜乃夫著.
心得：
40年代作品，言情作品，一个在东北参加马占山抗日的南韩青年随部队流亡到苏联后，与一位波兰少女的爱情故事。
阅读时间: 2017.1.1
6 《人类的故事》(美) 房龙著, 白马译，中国文联出版社.
心得：
故事真是娓娓道来，书中的插图也很有想象力，这本书质感很好，拿在手里就不想放。
之前对欧洲中世纪的历史不是很了解，看完这本书以后了解了基督教三大派系的起源和发展，了解了原来俄罗斯 的起源在于东罗马帝国、沙皇的本意是凯撒等等…………作者写作的时候是20世纪初，当时能有如此宏观的视角，真是让人佩服。
后续我想继续找到他写的《圣经的故事》《宽容》等作品.
阅读时间： 2017.1.3～2017.1.6
7 《草房子》
心得： 已经是第二次看这本书了，第一次是在nook上，依然兴趣盎然。好的作品就是这样，值得回味。适合儿童、童心未泯的成人阅读。 关于苏北的一些习俗，写得很好。
阅读时间： 2017.1.8~ 2017.1.10
8 《欲乐园》（日）渡边淳一
心得：
草根医生与富家姑娘、穷护士之间的一段孽缘。以学历论英雄之狭隘被讽刺得很深刻。
阅读时间: 2017.02.09晚
技术类 1 《实用数据分析》 (美) Hector Cuesta著.
心得：
可以直接上手用来把玩数据。 阅读时间: 2017.</description>
    </item>
    
    <item>
      <title>RSSToPdf</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/29/rsstopdf/</link>
      <pubDate>Thu, 29 Dec 2016 16:24:38 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/29/rsstopdf/</guid>
      <description>AIM Using python for fetching back some blog articles and convert them into pdf files, send it to some specified mailbox.
Preparation The script depends on python library:
 feedparser pdfkit  Install them via:
$ sudo pip install feedparser $ sudo pip install pdfkit  pdfkit depends on wkhtmltopdf, install it on ubuntu via:
$ sudo apt-get install -y wkhtmltopdf  Configure wkhtmltopdf, because in vps we don&amp;rsquo;t have X Window:</description>
    </item>
    
    <item>
      <title>VisualizerForKubernetes</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/27/visualizerforkubernetes/</link>
      <pubDate>Tue, 27 Dec 2016 19:06:23 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/27/visualizerforkubernetes/</guid>
      <description>Download the source code from github:
$ git clone https://github.com/saturnism/gcp-live-k8s-visualizer $ kubectl proxy ---www=./  Create the service/pods like the ones in examples, then you get the beautiful view for your pods and services:
Change the rcs to 10:
$ kubectl scale rc nginx --replicas=10  Now the image changes to:</description>
    </item>
    
    <item>
      <title>离线安装CoreOS上的Kubernetes</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/26/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85coreos%E4%B8%8A%E7%9A%84kubernetes/</link>
      <pubDate>Mon, 26 Dec 2016 10:09:41 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/26/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85coreos%E4%B8%8A%E7%9A%84kubernetes/</guid>
      <description>先决条件 CoreOS安装iso: coreos_production_iso_image.iso.
https://coreos.com/os/docs/latest/booting-with-iso.html
VirtualBox.
https://www.virtualbox.org/wiki/Downloads
硬盘安装介质, 放置于某web服务器根目录下(这里的根目录是/var/download):
$ pwd /var/download/1185.5.0 $ ls coreos_production_image.bin.bz2 coreos_production_image.bin.bz2.sig  准备硬盘安装介质，需要通过coreos-baremetal项目，从./examples/assets下拷贝相应文件到web服务器根目录下:
 $ git clone https://github.com/coreos/coreos-baremetal # Make a copy of example files $ cp -R coreos-baremetal/examples . # Download the CoreOS image assets referenced in the target profile. $ ./coreos-baremetal/scripts/get-coreos stable 1185.5.0 ./examples/assets  网络配置 三个CoreOS节点IP配置
coreos1: 172.17.8.221 coreos2: 172.17.8.222 coreos3: 172.17.8.223  etcd discovery Server IP: 172.17.8.1.
Virtualbox网络配置如下:
第一块网卡接入到NAT网络，第二块网卡接入到Host-only网络，这也就是在下面的Cloudinit文件中 需要定义的Name=enp0s8字段。
Discovery Server配置 实际上这个Server是运行etcd2的一个物理机，接入172.</description>
    </item>
    
    <item>
      <title>LoadBalancingInCoreOS</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/23/loadbalancingincoreos/</link>
      <pubDate>Fri, 23 Dec 2016 19:01:18 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/23/loadbalancingincoreos/</guid>
      <description>这几天一直在把玩CoreOS， 主要参考的是DigitalOcean上的tutorial以及《CoreOS实践之路》这本书， 奈何文章离如今年代已经久远，一直搭建不成功. 几经周折后终于在一篇guideline 的指导下把负载均衡的服务跑通，这里是搭建该服务的步骤和心得。
参考网址:
http://blog.dixo.net/2015/02/load-balancing-with-coreos/
架构图 该网址中列举的的架构图如下:
刚开始看到这个图是有点发蒙的，这里简单说一下操作步骤，与图中一一对应.
 CoreOS Machine B和Core Machine C是两个CoreOS系统节点，位于其上分别 运行了两个apache容器，B上的容器监听8001端口，C上的容器监听8002端口。
 两个apache容器将自身的IP和端口发布到etcd服务(etcd.service).
 CoreOS Machine A上运行了三个单元，分别是nginx服务、confdata服务、confd服务. 其中nginx服务在配置好的负载均衡后端上分发http请求。confdata服务主要用于 为nginx配置文件共享数据卷。confd服务查看etcd中元数据的变化，根据这些变化 在共享数据卷中写入新的配置文件.
 详细说明一下confd的作用，A. 发现coreos集群中可用的apache容器. B. 实时生成 nginx.conf文件，并将此文件写入到共享存储. C. 写入完成后，通知docker给nginx发送 一个HUP信号. D. Docker发送HUP信号给nginx容器后，容器将重新加载其配置文件。
  以上就是我对架构图的解读。接下来将一步步来实现这个负载均衡。
先决条件 一个3节点的CoreOS集群
有效的/etc/environment文件(有时候需要手动生成) 相关的容器(制作流程见后)
容器镜像制作 Apache容器 在某台安装好Docker的机器上，或者直接在CoreOS节点机上，运行:
$ docker run -i -t ubuntu:14.04 /bin/bash # apt-get update # apt-get install apache2 # sudo bash # echo &amp;quot;&amp;lt;h1&amp;gt;Running from Docker on CoreOS&amp;lt;/h1&amp;gt;&amp;quot; &amp;gt; /var/www/html/index.</description>
    </item>
    
    <item>
      <title>CoreOSTips</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/22/coreostips/</link>
      <pubDate>Thu, 22 Dec 2016 18:02:47 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/22/coreostips/</guid>
      <description>Add additional ssh keys Adding new keys into the deployed system:
# echo &#39;ssh-rsa AAAAB3Nza....... key@host&#39; | update-ssh-keys -a core  Write files Take /etc/environment file for example:
core@coreos1 ~ $ cat /usr/share/oem/cloud-config.yml #cloud-config write_files: - path: /etc/environment permissions: 0644 content: | COREOS_PUBLIC_IPV4=172.17.8.201 COREOS_PRIVATE_IPV4=172.17.8.201  Add User Also add in the file /usr/share/oem/cloud-config.yml, like following:
users: - name: &amp;quot;dash&amp;quot; passwd: &amp;quot;xxxxxxxxxxxxxxxxxx&amp;quot; groups: - &amp;quot;sudo&amp;quot; - &amp;quot;docker&amp;quot; ssh-authorized-keys: - &amp;quot;ssh-rsa ADD ME&amp;quot;  Password could be generated via openssl -1 &amp;quot;YourPasswd&amp;quot;</description>
    </item>
    
    <item>
      <title>TryCoreOS(3)</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/21/trycoreos3/</link>
      <pubDate>Wed, 21 Dec 2016 18:02:15 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/21/trycoreos3/</guid>
      <description>fleetctl Configuration Cluster Status fleetctl list-machines will display all of the nodes in cluster:
core@coreos1 ~ $ fleetctl list-machines MACHINE	IP	METADATA bea5741d...	172.17.8.203	- dd464e69...	172.17.8.202	- f22aee5d...	172.17.8.201	-  fleetctl list-units will list all of the services in cluster:
core@coreos1 ~ $ fleetctl list-units UNIT	MACHINE	ACTIVE	SUB  Nodes Jumping Use ssh-keygen for generating the id_rsa.pub, and add them into other nodes&amp;rsquo;s /home/core/.ssh/authorized_keys.
Start the ssh-agent via:</description>
    </item>
    
    <item>
      <title>TryCoreOS(2)</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/21/trycoreos2/</link>
      <pubDate>Wed, 21 Dec 2016 14:29:28 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/21/trycoreos2/</guid>
      <description>Local Discovery Service Take a look at the yaml configuration file:
 etcd2: # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3 # specify the initial size of your cluster with ?size=X discovery: https://discovery.etcd.io/4add2186302763c8876afd1684ca06fe  This means all of you coreos nodes should reach the internet, what if we deploy a coreos cluster offline? We need to deploy a local discovery service.
ArchLinux etcd2 Example Download the etcd v2.</description>
    </item>
    
    <item>
      <title>TryCoreOS</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/20/trycoreos/</link>
      <pubDate>Tue, 20 Dec 2016 15:35:29 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/20/trycoreos/</guid>
      <description>Preparation Create image file via:
$ sudo mkdir corecluster $ cd corecluster $ qemu-img create -f qcow2 coreos1.qcow2 30G $ qemu-img create -f qcow2 coreos2.qcow2 30G $ qemu-img create -f qcow2 coreos3.qcow2 30G  Create a network named 172.17.8.1/24, dhcp disabled.
Since the vnet interface is occupied via virtualbox, switches to virtualbox installation.
Two Ethernet cards:
Start from CD:
Installation File Preparation For saving time, we use local installation repository, download the installation images via:</description>
    </item>
    
    <item>
      <title>UseMesosForCI</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/15/usemesosforci/</link>
      <pubDate>Thu, 15 Dec 2016 21:19:18 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/15/usemesosforci/</guid>
      <description>参考了http://container-solutions.com/continuous-delivery-with-docker-on-mesos-in-less-than-a-minute/
Nodejs程序 app.js程序如下:
// Load the http module to create an http server. var http = require(&#39;http&#39;); // Configure our HTTP server to respond with Hello World to all requests. var server = http.createServer(function (request, response) { response.writeHead(200, {&amp;quot;Content-Type&amp;quot;: &amp;quot;text/plain&amp;quot;}); response.end(&amp;quot;Hello World&amp;quot;); }); // Listen on port 8000, IP defaults to &amp;quot;0.0.0.0&amp;quot; server.listen(8000); // Put a friendly message on the terminal console.log(&amp;quot;Server running at http://127.0.0.1:8000/&amp;quot;);  配置文件package.json如下:
{ &amp;quot;name&amp;quot;: &amp;quot;hello-world&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;hello world&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;0.</description>
    </item>
    
    <item>
      <title>OfflineInstallJavaOnUbuntu1404</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/11/offlineinstalljavaonubuntu1404/</link>
      <pubDate>Sun, 11 Dec 2016 11:23:06 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/11/offlineinstalljavaonubuntu1404/</guid>
      <description>在ubuntu14.04上搭建mesos时，需要安装jdk8或jdk9，然而官方仓库中没有类似的选项， 因而有两种work-around，第一种是手动安装jdk， 第二种是使用第三方库安装.
手动安装 下载安装包:
$ wget --header &amp;quot;Cookie: oraclelicense=accept-securebackup-cookie&amp;quot; http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz  如果是jdk9，则下载安装包为:
$ wget http://www.java.net/download/java/jdk9/archive/140/binaries/jdk-9-ea+140_linux-x64_bin.tar.gz  下载完毕后，安装步骤如下:
$ sudo bash # tar -zxf jdk-9-ea+140_linux-x64_bin.tar.gz -C /opt/jdk/ # update-alternatives --install /usr/bin/java java /opt/jdk/jdk-9/bin/java 100 # update-alternatives --install /usr/bin/javac javac /opt/jdk/jdk-9/bin/javac 100 # update-alternatives --display java # update-alternatives --display javac  第三方库 激活ppa库如下:
$ sudo add-apt-repository ppa:webupd8team/java $ sudo apt-get update $ sudo apt-get install oracle-java8-installer $ sudo apt-get install oracle-java8-set-default  在安装过程中需要从oracle官方网站下载安装包，为了避免重复下载过程，可以将安装包直接拷贝到 /var/cache/oracle-jdk9-installer目录或者/var/cache/oracle-jdk8-installer目录。</description>
    </item>
    
    <item>
      <title>VirtualBoxAndVagrantOnXenial</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/09/virtualboxandvagrantonxenial/</link>
      <pubDate>Fri, 09 Dec 2016 10:35:28 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/09/virtualboxandvagrantonxenial/</guid>
      <description>Since the vagrant version and virtualbox version are too old in official repository, we need to upgrade them for using the newest feature, following are the tips.
Virtualbox Manually Install Download URL:
https://www.virtualbox.org/wiki/Downloads
Before installing the newest version, make sure you have uninstalled the old version via `sudo apt-get purge virtualbox*&amp;ldquo;.
Use dpkg for installing the virtualbox then using sudo apt-get -f install for resolving the dependency issue.
After installed the virtualbox, use sudo /sbin/vboxconfig for building the kernel module.</description>
    </item>
    
    <item>
      <title>vagrantpluginissue</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/07/vagrantpluginissue/</link>
      <pubDate>Wed, 07 Dec 2016 22:00:18 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/07/vagrantpluginissue/</guid>
      <description>After updating vagrant, my vagrant could use, the error msg are listed as following:
$ vagrant box list Vagrant failed to initialize at a very early stage: The plugins failed to initialize correctly. This may be due to manual modifications made within the Vagrant home directory. Vagrant can attempt to automatically correct this issue by running: vagrant plugin repair If Vagrant was recently updated, this error may be due to incompatible versions of dependencies.</description>
    </item>
    
    <item>
      <title>DownloadXenServer62Patches</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/07/downloadxenserver62patches/</link>
      <pubDate>Wed, 07 Dec 2016 18:03:31 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/07/downloadxenserver62patches/</guid>
      <description>The script is listed as following, use python2 for running it:
from bs4 import BeautifulSoup import urllib2 import re ## Pages contains the download page url url_list = [ &amp;quot;https://support.citrix.com/search?searchQuery=%3F&amp;amp;lang=en&amp;amp;sort=cr_date_desc&amp;amp;ct=Hotfixes&amp;amp;ctcf=Recommended&amp;amp;prod=XenServer&amp;amp;pver=XenServer+6.2.0&amp;amp;st=0&amp;quot;, &amp;quot;https://support.citrix.com/search?searchQuery=%3F&amp;amp;lang=en&amp;amp;sort=cr_date_desc&amp;amp;ct=Hotfixes&amp;amp;ctcf=Recommended&amp;amp;prod=XenServer&amp;amp;pver=XenServer+6.2.0&amp;amp;st=10&amp;quot;, &amp;quot;https://support.citrix.com/search?searchQuery=%3F&amp;amp;lang=en&amp;amp;sort=cr_date_desc&amp;amp;ct=Hotfixes&amp;amp;ctcf=Recommended&amp;amp;prod=XenServer&amp;amp;pver=XenServer+6.2.0&amp;amp;st=20&amp;quot;, &amp;quot;https://support.citrix.com/search?searchQuery=%3F&amp;amp;lang=en&amp;amp;sort=cr_date_desc&amp;amp;ct=Hotfixes&amp;amp;ctcf=Recommended&amp;amp;prod=XenServer&amp;amp;pver=XenServer+6.2.0&amp;amp;st=30&amp;quot;, ] for url in url_list: #response = urllib2.urlopen(&#39;https://support.citrix.com/search?searchQuery=%3F&amp;amp;lang=en&amp;amp;sort=cr_date_desc&amp;amp;ct=Hotfixes&amp;amp;ctcf=Recommended&amp;amp;prod=XenServer&amp;amp;pver=XenServer+6.2.0&amp;amp;st=0&#39;) response = urllib2.urlopen(url) ### Fetch the urllib2 result. html = response.read() # print len(html) ### Make soup of the html. soup = BeautifulSoup(html, &#39;html.parser&#39;) # print soup.prettify() ### Get all of the download page link: for i in soup.</description>
    </item>
    
    <item>
      <title>TipsOnCassandraOnKubernetes</title>
      <link>http://purplepalmdash.github.io/blog/2016/12/06/tipsoncassandraonkubernetes/</link>
      <pubDate>Tue, 06 Dec 2016 19:27:19 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/12/06/tipsoncassandraonkubernetes/</guid>
      <description>First download the image from gcr.io:
$ sudo docker pull gcr.io/google-samples/cassandra:v11  Create a replicas using following yaml file:
apiVersion: v1 kind: ReplicationController metadata: name: cassandra # The labels will be applied automatically # from the labels in the pod template, if not set # labels: # app: cassandra spec: replicas: 1 # The selector will be applied automatically # from the labels in the pod template, if not set. # selector: # app: cassandra template: metadata: labels: app: cassandra spec: containers: - command: - /run.</description>
    </item>
    
    <item>
      <title>BuildCollectdForXenServer</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/30/buildcollectdforxenserver/</link>
      <pubDate>Wed, 30 Nov 2016 15:00:57 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/30/buildcollectdforxenserver/</guid>
      <description> 先决条件 启用aliyun CentOS源，安装工具:
$ yum install rpm-build --skip-broken  因为编译可能会占用大量硬盘空间，预先加载某个NFS卷:
# mount -t nfs 192.168.0.221:/xxxx /mnt  下载源码包:
错误！！！ rpm-build安装失败。
不建议在xenserver上手动编译，上网搜索，找到collectd正确的源:
# vim /etc/yum.repos.d/collectd-ci.repo [collectd-ci] name=collectd CI baseurl=http://pkg.ci.collectd.org/rpm/collectd-5.5/epel-5-$basearch enabled=1 gpgkey=http://pkg.ci.collectd.org/pubkey.asc gpgcheck=0 repo_gpgcheck=0 # yum remove collectd &amp;amp;&amp;amp; yum install -y collectd  Trouble-Shooting 如果激活有其他源，则可能会因为优先级顺序，优先安装例如epel里的collectd-i386之类的包， 解决方案是将这些源全盘屏蔽。
[root@xenserver-WolfHunter yum.repos.d]# ls back Citrix.repo collectd-ci.repo  </description>
    </item>
    
    <item>
      <title>MinikubeMyBlog</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/30/minikubemyblog/</link>
      <pubDate>Wed, 30 Nov 2016 10:44:10 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/30/minikubemyblog/</guid>
      <description>Generate blog Generate the static blog via:
# hugo --theme=hyde-a  Persist Volume Define a pv:
$ vim blog.yaml kind: PersistentVolume apiVersion: v1 metadata: name: pvblog labels: type: local spec: capacity: storage: 5Gi accessModes: - ReadWriteOnce hostPath: path: &amp;quot;/data/hugoblog&amp;quot;  Create this pv:
$ kubectl create -f blog.yaml persistentvolume &amp;quot;pvblog&amp;quot; created  Create a pv claim:
$ vim blogclaim.yaml kind: PersistentVolumeClaim apiVersion: v1 metadata: name: blogclaim spec: accessModes: - ReadWriteOnce resources: requests: storage: 3Gi  Create this pv claim:</description>
    </item>
    
    <item>
      <title>RunWordPressOnMinikube</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/28/runwordpressonminikube/</link>
      <pubDate>Mon, 28 Nov 2016 11:53:25 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/28/runwordpressonminikube/</guid>
      <description>Installation On Ubuntu16.04, first download the deb package from
https://github.com/kubernetes/minikube/releases
Install virtualbox:
$ sudo apt-get install -y virtualbox $ sudo dpkg -i minikube_0.12-2.deb $ which minikube-linux-amd64 /usr/bin/minikube-linux-amd64  Start Cluster First install kubectl:
$ curl -Lo kubectl \ https://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/linux/amd64/kubectl \ &amp;amp;&amp;amp; chmod +x kubectl &amp;amp;&amp;amp; sudo mv kubectl /usr/local/bin/  Start kubernetes cluster via:
$ minikube-linux-amd64 start Starting local Kubernetes cluster... Downloading Minikube ISO 36.00 MB / 36.00 MB [==============================================] 100.</description>
    </item>
    
    <item>
      <title>WorkingTipsOnKubernetes</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/26/workingtipsonkubernetes/</link>
      <pubDate>Sat, 26 Nov 2016 20:43:20 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/26/workingtipsonkubernetes/</guid>
      <description>先决条件 CentOS 7.2 1511, Vagrant for kvm.
关闭selinux, 关闭firewalld, 使用以下命令安装docker最新版:
$ curl -sSL \ http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | \ sh -  IP地址配置:
master	192.168.0.223 node1	192.168.0.224  配置无密码登录，master到master, master到node1.
# ssh-copy-id root@192.168.0.223 # ssh-copy-id root@192.168.0.224  安装kubernetes 修改配置文件如下:
$ cat kubernetes/cluster/centos/config-default.sh # Master配置 export MASTER=${MASTER:-&amp;quot;root@192.168.0.223&amp;quot;} export MASTER_IP=${MASTER#*@} # Minion节点配置 export NODES=${NODES:-&amp;quot;root@192.168.0.223 root@192.168.0.224&amp;quot;} # Cluster中含有的节点数 export NUM_NODES=${NUM_NODES:-2} # service cluster配置的IP地址范围 export SERVICE_CLUSTER_IP_RANGE=${SERVICE_CLUSTER_IP_RANGE:-&amp;quot;192.168.22.0/24&amp;quot;} # flannel的overlay网络IP地址范围, 不能和上面定义的SERVICE_CLUSTER_IP_RANGE地址范围冲突 export FLANNEL_NET=${FLANNEL_NET:-&amp;quot;172.20.0.0/16&amp;quot;} # Docker参数，这里我们开启daocloud加速模式 export DOCKER_OPTS=${DOCKER_OPTS:-&amp;quot;--cluster-store=etcd://$MASTER_IP:2379, --registry-mirror=http://1a653205.</description>
    </item>
    
    <item>
      <title>XenServerAndDocker</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/24/xenserveranddocker/</link>
      <pubDate>Thu, 24 Nov 2016 09:44:04 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/24/xenserveranddocker/</guid>
      <description>XenServer配置 XenServer 6.5 下载xscontainer iso并安装之:
# wget http://downloadns.citrix.com.edgesuite.net/10343/XenServer-6.5.0-SP1-xscontainer.iso # xe-install-supplemental-pack XenServer-6.5.0-SP1-xscontainer.iso  XenServer 7.0 下载并安装:
# wget http://downloadns.citrix.com.edgesuite.net/11621/XenServer-7.0.0-xscontainer.iso # xe-install-supplemental-pack XenServer-7.0.0-xscontainer.iso  guest虚拟机准备 安装docker:
$ curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/experimental/internet | sh $ sudo usermod -aG docker  安装ncat/openssh-server(nmap中包含ncat):
$ sudo apt-get install -y openssh-server nmap  添加guest虚拟机 添加docker monitor:
# xscontainer-prepare-vm -v 05cd5c8f-eb32-86c6-b687-7a296180e3d3 -u dash  添加后的效果如下:</description>
    </item>
    
    <item>
      <title>PlayXenOnUbuntu1604</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/23/playxenonubuntu1604/</link>
      <pubDate>Wed, 23 Nov 2016 17:29:07 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/23/playxenonubuntu1604/</guid>
      <description>硬件环境 AMD E-350， 8G内存，320G 硬盘，绝对垃圾配置。
软件环境 Ubuntu16.04, LVM磁盘配置:
$ sudo lvdisplay ..... ..... ......  安装完毕后，安装xen hypervisor:
$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y &amp;amp;&amp;amp; sudo apt-get dist-upgrade -y $ sudo apt-get install -y xen-hypervisor-amd64 $ sudo apt-get install -y virtinst virt-manager  更改grub配置，默认使用xen hypervisor内核, 并指定dom0最大可用内存:
$ sudo vim /etc/default/grub GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;Xen 4.1-amd64&amp;quot; GRUB_CMDLINE_XEN=&amp;quot;dom0_mem=1024M,max:1024M dom0_max_vcpus=2&amp;quot; $ sudo update-grub $ sudo reboot  检查:
$ sudo xl list Name ID Mem VCPUs	State Time(s) Domain-0 0 1024 2 r----- 28.</description>
    </item>
    
    <item>
      <title>Nov20BaiyunMountain</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/20/nov20baiyunmountain/</link>
      <pubDate>Sun, 20 Nov 2016 20:43:40 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/20/nov20baiyunmountain/</guid>
      <description>今天下午的路径, GPS上来看是18公里，路途上大概24公里：
Let the hunt begin:
五雷岭:
双髻岭:
山里公路:
碑林:
raining:
正所谓&amp;rdquo;一年无日不看花，四面有山皆入画&amp;rdquo;，哈哈哈哈。</description>
    </item>
    
    <item>
      <title>SomeTipsOnAnsible</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/19/sometipsonansible/</link>
      <pubDate>Sat, 19 Nov 2016 08:57:36 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/19/sometipsonansible/</guid>
      <description>In this series I will collect some of the tips in using ansible for playing automation deployment.
co-operation with vagrant ssh Method: In inventory file, add vagrant&amp;rsquo;s ssh key.
First you should get the ssh indentity file via:
$ vagrant ssh-config | grep IdentityFile # result should be your private key and not # .vagrant/machines/default/virtualbox/private_key  Add these file definition into your inventory file:
[master] 192.168.33.17 ansible_ssh_port=22 ansible_ssh_user=vagrant ansible_ssh_private_key_file=/var1/Nov14/test/.vagrant/machines/master/virtualbox/private_key [node1] 192.</description>
    </item>
    
    <item>
      <title>第三种笨鸟</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/15/%E7%AC%AC%E4%B8%89%E7%A7%8D%E7%AC%A8%E9%B8%9F/</link>
      <pubDate>Tue, 15 Nov 2016 19:37:16 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/15/%E7%AC%AC%E4%B8%89%E7%A7%8D%E7%AC%A8%E9%B8%9F/</guid>
      <description>配图:章诒和书法
首先说一个段子&amp;mdash;-&amp;ldquo;孩子因成绩不好，被家长骂笨鸟，孩子不服气的说，世上笨鸟有三种， 一种是先飞的，一种是嫌累不飞的，家长问:那第三种呢？孩子说：这种最讨厌，自己飞不起来， 就在窝里下个蛋，要下一代使劲飞。&amp;rdquo;
有时候生活里的现状比段子里还要夸张，来说说今天下午泳池里见到的一件事吧。
下午泳池中水温尚可，属于那种刚下水还OK，但如果不动体温将快速下降，瞬间就会哆嗦的那种。
一个看上去大概五六岁的小朋友，独自下水开始游起了蛙泳，姿势还挺标准。做娘的 一身横肉，在岸上看着，间或瞅瞅手机。
水温确实凉，小朋友游了30分钟后扛不住，到泳池边央求妈妈上岸。他娘不肯， 赶下去继续游。游过我身边的时候看到他动作显然变形了，换气有点难，一够到泳池边 就得大口喘气的那种。按理说少儿游泳到这个运动量就够了，慢慢练呗来日方长嘛。
然而当娘的太狠心，站在泳池边死活不让孩子上来。小朋友就只能边游水边抽泣，委屈得不行了。 终于在某次游回泳池边后开始大声号哭，声贯全场。一位大哥看不下去，游过去抱住小朋友柔声安慰，说来吧我 带你慢慢游。然后又回过头帮小朋友和家长谈判。
做娘的就是一副今天你不游满全场就不要走的派头，死活不松口。小朋友在岸上跟大哥 调整了一下，又低声抽泣下水，一直游到了终场铃响。
讲真，这事看得旁人也挺心酸的。
中国有很多家长都摆出来一副&amp;rdquo;我这是为你好&amp;rdquo;的派头，对孩子严加要求。然而换个角度看呢？家长自己啥也做不到， 却要求孩子啥都做到、而且要做好。孩子投胎到你家来，真是倒了八辈子血霉了。私下以为 不顾及孩子感受提出的苛刻要求，根本就不是真正的为孩子好，而是一种另类的自私(抑或是残忍)。
说起今天下午那位母亲，倘若她自己肯下水试一试，那身横肉还真未必能扛过30分钟。自己晒着太阳暖暖和和 的呆在岸上，却要孩子游上一小时，这不是&amp;rdquo;自己飞不起来，下个蛋要下一代使劲飞&amp;rdquo;的典型吗？
回来以后我在想，如果将来我遇到这种情况，会怎么做？接下来是我的几点思考:
1、自己做不到的事情，不要苛求别人做到。
不出意外的话，今天下午泳池边这种情况估计在我今后的生活 里出现概率会很小。首先本人玩心太重兴趣广泛精力充沛，可能唯一要担心的是下一代会不会被我带到太野。 退一万步说，万一孩子TA娘铁了心要当虎妈，小孩被虎妈逼迫学各种技能什么的，那当爹的也只能跟着去受罪了。交一份钱，两 人一起学，虎妈, 这买卖不亏呀！
国内对子女教育的一个很大的误区就是认为&amp;rdquo;自己花了很多钱就OK了&amp;rdquo;&amp;mdash;-然而在我看来，这是属于暴发户的玩法。
典型的暴发户的玩法是什么呢？是中国足球。请来金牌教练来教自己不成器的孩子妄想称霸全宇宙实现刁某某的足球 梦。歇歇吧足协, 足球不是这么玩的。
教育也是。
花了钱是远远不够的，最关键是你得自个儿也花点心思上去. 譬如学钢琴，很多琴童家长就自个在那儿玩着手机，对着自己裤裆傻笑。拜托！琴行里那么多琴，你们怎么就不自个儿体验一把呢？ 只有你体验到这项技能学习过程里所可能遇到的挑战，你才能感同身受，进而在孩子遇到瓶颈的时候和TA一起越过障碍。
很多少儿技能的学习会步入这样的误区： 当学习已经没有乐趣的时候，投资就等同于打水漂：家长在持续砸钱，钱花出去， 孩子却越来越不愿意去了。当然那帮笨蛋父母从来不会反思自己的不是，他们只会简单的一拍脑袋，马上得出&amp;rdquo;孩子不争气&amp;rdquo;或者 &amp;ldquo;孩子不是这块料&amp;rdquo;的反馈。这对孩子的成长而言实在不是一件好事。
别问我为啥知道这么多，教书匠的孩子出生时都会附送教书属性这事我会到处乱说？
2、 面对挑战，激励应该是&amp;rdquo;做加法&amp;rdquo;而不是&amp;rdquo;做减法&amp;rdquo;。
回到今天下午的场景: 如果我家小朋友不想游泳了我怎么办呢？
很简单，那你就不游了吧，自个上岸呆着去。当爹的继续到泳池里玩花样了哈，边游还要边刺激TA““哎呀真的好过瘾啊，来嘛 下来玩嘛”
如果还不下来你就可以逐渐提升筹码了，比如说&amp;rdquo;下来游两圈，一会散场了带你去吃冰淇淋？&amp;rdquo;&amp;ldquo;多游两百米今晚多一个小时IPAD 游戏时间？&amp;rdquo;。诱惑有得是，就看你扛不扛得住。
如果这么诱惑都不下来，那确实是人家不想游了，自由这两个字是用来尊重的。这个时候你应该感激TA肯自个呆在岸上等着你 游完了。
因而在我看来今天下午那位做娘的就是在做减法，最后搞得有点两败俱伤。不过是一两个冰淇淋做诱惑的事情，母子之间相互 做做加法，这事绝逼好过在公众场合搞得孩子哭声满场进而塑造出自己&amp;rdquo;六亲不认&amp;rdquo;的&amp;rdquo;虎妈&amp;rdquo;残酷形象吧。当然这位母亲应该感谢 这是天朝而不是美帝，在美帝这可能构成了某种程度上的虐待。
做加法优于做减法这事不仅仅适用于家庭教育，譬如说某公司号称在公众区域发现员工杯子要罚款,这得是多傻逼的人 才想得出来这种做减法的招式啊？ 最后的结果可能是：既达不到想要的效果，又给自己贴上了&amp;rdquo;管得太宽&amp;rdquo;的标签。不出意外，这项一拍脑袋想出来的规定过几天自己都忘了。
3、技能的最高境界是&amp;rdquo;玩&amp;rdquo;。
港真，没有比&amp;rdquo;玩&amp;rdquo;更能带动个体在某个领域造诣的手段。因为你在玩游泳，所以你不觉得累，不觉得冷。兴趣是学习某 项技能最好的老师，那位虎妈轻而易举的扼杀掉了兴趣这位最好的老师，把原本在&amp;rdquo;泳池里玩&amp;rdquo;的活动闹成 了&amp;rdquo;在泳池里受冻受罪&amp;rdquo;的活动，这当娘的跟自家孩子到底是有多大仇啊。
或者，根本就没有什么技能一说。常人眼中的技能，在该领域的高手眼中，只是手头的玩物罢了。因为他们玩得炫，所以 旁人信以为真，却不知自古都有知音一说，到最终到达该领域的终极状态的一定会是彼此之间有着诸多默契的大玩家们。
后记 只是在池边发现的一只&amp;rdquo;第三种笨鸟&amp;rdquo;，引发了上面的一段文字。事实上生活里充满了太多这样的笨鸟，从对待子女教育 的方式，很容易衍生到工作、生活的方方面面里。我们可以想象&amp;mdash;-如果这位母亲是单位里的某个小头目，对下属会不会也 时常采用&amp;rdquo;做减法&amp;rdquo;的策略呢？讲到这里你能体会为什么职场上那么多人说难难难了吧，为什么那么多人说生活难难难了吧， 那么多人说做人难了吧？因为生活里永远有那么多自己不会飞却指望你飞给它看的笨鸟们啊。但其实如同 章诒和老师所说： &amp;ldquo;天下断无易处之境遇, 人间那有空闲的光阴&amp;rdquo;。难了就对了，因为：</description>
    </item>
    
    <item>
      <title>白云半日</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/12/%E7%99%BD%E4%BA%91%E5%8D%8A%E6%97%A5/</link>
      <pubDate>Sat, 12 Nov 2016 22:22:30 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/12/%E7%99%BD%E4%BA%91%E5%8D%8A%E6%97%A5/</guid>
      <description>余寓之南粤已逾两年，此地风景秀美，而余外出游乐之心不减。值周日，城中大霾，入山清肺，是为记。
下午三点，准备进山。
西偏门进去，可见大片翠竹，不蔓不枝，犹为赏目：
水库堤坝上远眺主峰：
山水:
循梅花谷一路而上，新修的登山道宽敞、平整、人也不多，个人将之评为白云山里No.2登山道:
新登山道远眺主峰:
沿着新登山道，抵达本人从未行至的白云山北线，此处游人不多，然植被茂盛，清幽异常:
从北峰杀回主峰的路，这段路是我特别喜欢的感觉，在半山腰循环迂回，而两旁鸟鸣不断，有脱尘 之感:
南国11月，植被依然是纯绿色:
林间休憩的老爷们和少爷们:
转战北峰途中拍的白云山全景图片之一:
下山途中，天色渐晚，游人归而禽鸟乐也:
远方被雾霾笼罩的城市:
夜夜夜夜:
下到山底，夜幕降临时的美食之都，吃货们已然开始出巢(不用担心，窝吃得也不赖):
我时常感觉，爬山即是一种修行。其实走上坡路的时候，辛苦异常，尤其对如我这种背包里塞满各种 装备外加充足补给的家伙、爬升速度又快，心率提升及滴汗速度更是快于常人不少。而这又如何？ 艰难的爬升意味着在到达的顶点上足以俯瞰到在山脚下很难想象到的风景。登高至高点之时，把酒(水)迎风， 两腋生津，人生至乐，总共有多少次能做到这样呢？
有时候爬山爬到晚上，沿山路下山，看到山下的城市里灯光一盏一盏亮起来的时候，会有一种感慨： 山下的灯光里，可能会有很多的觥筹交错、也会有很多的温馨、拥抱、争吵乃至是狗血；山下的城市里 会有人欢笑有人哭泣…………而此时自己确是在高处里，眼往着这一摊蕴含着各种情绪的灯光，多奇妙，不是吗？
所以有语曰&amp;rdquo;近山者智 近水者仁&amp;rdquo;，近山者得来的智慧，我想有可能是因为个体在高处，因而能高于或是超脱于世俗来看到尘世 里的纷争吧？其实很多纷争，把自己抬高一下，很容易就明白把自己摆在什么位置了。为了避免装B嫌疑，这事 我就不能说太细。
晚上听到一个让我很担心的消息，一位兄弟正在远方独自经历一场他不能输的搏斗。祈祷他能赢得这场战役, 譬如南粤之地，几多秀美风光，若能共赏，当是几多幸矣。fight, brother!!!我只是做好了90岁依然能和 你在白云山早茶的准备。心香三炷，千里之外，祝君安康。</description>
    </item>
    
    <item>
      <title>RunWithMusic</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/07/runwithmusic/</link>
      <pubDate>Mon, 07 Nov 2016 21:17:38 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/07/runwithmusic/</guid>
      <description>晚上败了个索尼大法，回想起来跑步这么些年，听坏的播放装备简直是……提起来就让人&amp;rdquo;心痛到无法呼吸&amp;rdquo;。好了，下面 来盘点一下被我玩坏过的装备。
跑步中会大量出汗，因而选择运动装备，无论是耳机还是播放设备，第一是防水、第二还是防水、第三还是防水&amp;mdash;-重要的事情说 三遍！ 如果你还没悟到防水的重要，那可能是因为：
1、 你处于高纬度地带，跑步压根不出汗；
2、 你跑步的速度可能有点。。。。。。慢;
3、 你没有汗腺，可以像狗狗一样伸个舌头就散热。。。(开个玩笑)
意外的是，在诸多运动耳机中，我第一时间想到的是Philips的耳机. 便宜、耐操, 防水性超好：
Philips 灵活挂钩式耳机 SHS3200BK/37 ：
特点： 非入耳式，跑步时很安全(可以听到汽笛声铃铛声等)。这个耳机是我用过的最耐操的，先后买过两个， 白色和黑色。这个耳机的脆弱点在于，它的与耳朵接触的部位含有少量金属，因而会慢慢被腐蚀，最后 导致声音越来越少。本人右耳出汗稍微多点，每次都是坏右耳。
重音很好。
价格：入手时50左右，现在可能涨了点。
使用寿命：一年+。
飞利浦（PHILIPS） SHQ3200/98 ActionFit：
特点：
入耳式，听各种协奏曲会很爽。耐操程度不如上一个。这个耳机我也买过两个。脆弱点在于：发音部分 含有金属，所以，会被汗液慢慢腐蚀。
缺点： 带上以后，跑公路很危险，因为是入耳式。
使用寿命：9个月左右。
DECATHLON
么有评价，只是告诉你们不要买就是了。买来听两个月就挂的货，毕竟是找到国内企业低成本代工。。。。
Moto SF200
在200左右的价位入手，结果大失所望，听了5个月就坏掉了，一个耳朵没声音。
蓝牙耳机不评论。盖因本人一直用有线听音乐。当然蓝牙适配器也是有的，因为汗水的缘故，已经挂掉了 N个。。。。
跑步时候的播放设备，曾经用过PHILIPS、SANDISK、爱国者的MP3，还有几台NOKIA手机。然而我可以很负责任 的告诉各位&amp;mdash;-这些设备现在通通不能用了，因为被汗水诟坏了。
所以，到最后我只能剁手这个：
索尼大法好，希望索尼大法能被我操两年+。</description>
    </item>
    
    <item>
      <title>TurnQcow2IntoVagrantBox</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/07/turnqcow2intovagrantbox/</link>
      <pubDate>Mon, 07 Nov 2016 14:59:09 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/07/turnqcow2intovagrantbox/</guid>
      <description>img preparation First you got a qcow2 file, which could let you startup a virtualmachine, so you startup a machine like following:
# cp YourQcowFile.qcow2 ./box.img # qemu-system-x86_64 -net nic -net user,hostfwd=tcp::2222-:22 -hda ./box.img -m 512 --enable-kvm  Login to the machine and run following scripts:
useradd -m vagrant mkdir /home/vagrant/.ssh chmod 700 /home/vagrant/.ssh echo &amp;quot;ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key&amp;quot; &amp;gt; /home/vagrant/.ssh/authorized_keys chmod 600 /home/vagrant/.ssh/authorized_keys chown -R vagrant.vagrant /home/vagrant/.</description>
    </item>
    
    <item>
      <title>ClimbingMaoFengMountain</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/06/climbingmaofengmountain/</link>
      <pubDate>Sun, 06 Nov 2016 20:06:19 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/06/climbingmaofengmountain/</guid>
      <description>近期广州雾霾实在是有点醇厚，所以周末的第一选择当然是进山避霾啦！
今天定它个小目标，快速穿越帽峰山脉。
帽峰山是广州周边我非常喜欢的一座山，距市区有点距离(40公里？)，配套设施好、 人流量适中、植被茂密、空气清新。这一年多来去了好几次，每次都有新发现。今天 走的是一条穿越的线路，20公里，白山村-&amp;gt;山顶-&amp;gt;古庙出口。
早上游泳的缘故，出发得晚，11点多才开始走白山村道，果然没有雾霾，蓝天白云：
水厂后面的山峰郁郁葱葱，深山有好水:
沿途有村民营业的大量取水点，自备矿泉水桶过来装，2元/桶。拉回城应该随便就能卖到20 块一桶吧? 发家致富的路子，窝也只能指点到这了:
锄禾日当午, 要珍惜盘中餐啊，看下图，向我学习:
惭愧，走了一个小时就饿了，果断吃饭，考虑一会要在山里跑，吃素淡点就不点鱼了。喜欢 吃鱼的朋友到了帽峰山可以点鱼吃，铜锣湾水库水质不错，出品的鱼很美味:
这位一直围着桌子喵喵叫的小兄弟, 窝那么富有爱心当然不会忘了你:
山间风景:
15分钟到顶，开始沿着山脊往帽峰山顶广场穿行:
速度有点快，1小时不到抵达帽峰山顶广场:
山顶俯瞰林海, 空气没得说，怎样都是负氧离子饱和:
北国早已寒冷如咧，可这帽峰山里风景, 依然青翠如夏:
下午3点40,自古庙出口下到山底，结束愉快的帽峰山一日之旅。
如此算来，从白山村到杨伙寮，经箫神顶到帽峰山顶景区后经古庙下山,可以在三个小时内完成。
压轴奉上帽峰山脉一景. Life is short, play more.</description>
    </item>
    
    <item>
      <title>为Blog添加保存为图片功能</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/05/%E4%B8%BAblog%E6%B7%BB%E5%8A%A0%E4%BF%9D%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 05 Nov 2016 18:28:54 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/05/%E4%B8%BAblog%E6%B7%BB%E5%8A%A0%E4%BF%9D%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87%E5%8A%9F%E8%83%BD/</guid>
      <description>背景 众所周知疼讯其实一直是一个很封闭傻逼的企业，早年QZONE的代码就层层加密， 惟恐互联网爬虫爬到它上面取内容。进入到移动互联网时代，就更加变本加厉，盆友 圈里的诸多内容，恐怕诸位都是没办法弄出来的。
早年曾在Blog上添加过分享到朋友圈或分享到微信好友按钮，由于github.io未 被疼讯认可，共享出来的链接通常只有自己能看到，这又是一个拿用户当SB的典型 案例。
还好，对于用户上传图片，疼讯是没法限制的。所以有了以下的开发。
功能参考 在博文里添加按钮一键保存为图片,即可将该篇文章生成为长图片。
参考设计： 锤子便签。顺便吐槽一下锤子便签，添加了关键词过滤，关键词嘛，这也是 党国拿来折腾屁民的一个傻逼玩意，例如有一首歌是这么唱的:
我爱北京关键词， 关键词上太阳升。。 伟大得领袖关键词， 带领我们向前进…  ╮〔╯ε╰〕╭ &amp;mdash;太多的关键词，容易让写博文的人心情不好。
可选方案 A. wkhtmltoimage.
这个转换起来是全屏转换，所以最初想到的是对网页做再加工，抠取出其中含有内容的一部分。 好处是，真的是所见即所得。
$ wkhtmltoimage http://www.google.com google.jpg  B. html2canvas.
这种方案直接在html页面上做文章，添加按钮后直接用画布来生成对象。缺点是有些格式显示出来 有少量阴影。
暂时基于方案B实现。
Code 参考资料:
https://www.youtube.com/watch?v=-d2FeFiBvEo
https://html2canvas.hertzen.com/
因为本博客基于hugo构建，直接修改hugo使用的主题即可添加html2canvas。
目录结构:
$ ls config.toml content id_rsa.enc scripts static themes $ themes/hyde-a $ ls archetypes images layouts LICENSE README.md static theme.toml  下载html2canvas.js到主题的static/js目录:
$ cd static/js $ wget https://github.com/niklasvh/html2canvas/releases/download/0.4.1/html2canvas.js  在主题的.</description>
    </item>
    
    <item>
      <title>SetupARegistryProxyCacheForDocker</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/04/setuparegistryproxycachefordocker/</link>
      <pubDate>Fri, 04 Nov 2016 17:14:21 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/04/setuparegistryproxycachefordocker/</guid>
      <description>准备 首先需要准备以下Docker image:
$ sudo docker pull registry:latest $ sudo docker pull registry:2  在/etc/hosts里加一条记录，接下来我们将用这条记录生成签名(注意修改IP地址和域名）:
# echo &#39;192.168.0.121 xxx.xxx.xxx.com&#39;&amp;gt;&amp;gt;/etc/hosts  准备所需要的自签名文件(用于tls连接)
mkdir -p certs &amp;amp;&amp;amp; openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -x509 -days 365 -out certs/domain.crt Generating a 4096 bit RSA private key ....................................................................................................++ ......++ writing new private key to &#39;certs/domain.key&#39; ----- You are about to be asked to enter information that will be incorporated into your certificate request.</description>
    </item>
    
    <item>
      <title>DockerSpeedUp</title>
      <link>http://purplepalmdash.github.io/blog/2016/11/03/dockerspeedup/</link>
      <pubDate>Thu, 03 Nov 2016 17:23:23 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/11/03/dockerspeedup/</guid>
      <description>Docker Registry 因为众所周知的原因，在国内下载Docker镜像会很慢，所以我们更改docker的配置，让它使用 daocloud的加速服务:
ArchLinux下，编辑以下文件，或者你可以通过sudo systemctl edit docker.service来配置以下 文件:
# vim /etc/systemd/system/docker.service.d/override.conf [Service] ExecStart= ExecStart=/usr/bin/dockerd --registry-mirror=http://1a653205.m.daocloud.io -H fd://  现在重新加载服务并重新启动docker.service：
# systemctl daemon-reload # systemctl restart docker.service  从此以后，每一次docker pull都会使用到daocloud提供的加速服务。
本地私有registry 首先pull下来如下镜像(这两个其实是一个镜像):
# docker pull registry:latest # docker pull registry:2  运行registry实例(注意更改volumn映射):
# docker run -d -p 5000:5000 --restart=always --name registry -v /root/DockerRegistry:/var/lib/registry registry:2  检查实例运行情况:
➜ ~ sudo docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b16b27933709 registry:2 &amp;quot;/entrypoint.</description>
    </item>
    
    <item>
      <title>VRMonitoringViaCollectd</title>
      <link>http://purplepalmdash.github.io/blog/2016/10/24/vrmonitoringviacollectd/</link>
      <pubDate>Mon, 24 Oct 2016 16:36:24 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/10/24/vrmonitoringviacollectd/</guid>
      <description>Environment The VR&amp;rsquo;s information is listed as following:
Now login the VR in CloudStack Agent Node via:
# ssh -i /root/.ssh/id_rsa.cloud -p3922 169.254.0.129  Modify its /etc/apt/sources.list like following:
# cat /etc/apt/sources.list # # deb cdrom:[Debian GNU/Linux 7.8.0 _Wheezy_ - Official amd64 NETINST Binary-1 20150110-14:41]/ wheezy main #deb cdrom:[Debian GNU/Linux 7.8.0 _Wheezy_ - Official amd64 NETINST Binary-1 20150110-14:41]/ wheezy main deb http://mirrors.aliyun.com/debian wheezy main deb-src http://mirrors.aliyun.com/debian wheezy main deb http://mirrors.</description>
    </item>
    
    <item>
      <title>LinuxTips6</title>
      <link>http://purplepalmdash.github.io/blog/2016/10/09/linuxtips6/</link>
      <pubDate>Sun, 09 Oct 2016 17:24:03 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/10/09/linuxtips6/</guid>
      <description>1. Working tips for remove dulipcate chars http://codereview.stackexchange.com/questions/5441/removing-any-duplicate-characters-in-a-string
2. pip reinstallation Uninstall all of the pip installed packages:
# pip freeze | xargs pip uninstall -y  3. ipython notebook Install on ArchLinux via:
$ sudo pip install &amp;quot;ipython[all]&amp;quot;  Be sure to make your internet connection stable.
Run it via:
$ ipython notebook  ipython2 installation issue:
$ python2 -m pip install ipykernel $ python2 -m ipykernel install --user $ python2 -m pip install &amp;quot;ipython[all]&amp;quot; $ ipython3 notebook  Now you could create python2&amp;amp;python3 notebooks.</description>
    </item>
    
    <item>
      <title>LeetCodeTips1</title>
      <link>http://purplepalmdash.github.io/blog/2016/10/09/leetcodetips1/</link>
      <pubDate>Sun, 09 Oct 2016 15:28:18 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/10/09/leetcodetips1/</guid>
      <description>又到了一年一度的跳Cao准备期间了，来刷刷LeetCode，提升一下编程技巧，准备可能的鄙视或者是 被鄙视。
1. Two Sum 问题:
给定一个整型数组，编写一函数，返回值为两个数组的下标，两个下标所在的数组元素相加的和为 给定的数值。例如:
给定 nums = [2,7,11,15], targe = 9, 因为nums[0] + nums[1] = 2 + 7 = 9, 返回的数组应为[0, 1].  C语言版 用C语言我的解决方案如下:
/* Given nums = [2, 7, 11, 15], target = 9, * * Because nums[0] + nums[1] = 2 + 7 = 9, * return [0, 1]. */ #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /** * Note: The returned array must be malloced, assume caller calls free().</description>
    </item>
    
    <item>
      <title>MyHugo</title>
      <link>http://purplepalmdash.github.io/blog/2016/10/09/myhugo/</link>
      <pubDate>Sun, 09 Oct 2016 14:40:34 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/10/09/myhugo/</guid>
      <description>MyHugo Since I switched from octopress to hugo, hugo is wonderful, but I get used to use Octopress&amp;rsquo;s naming method. For example, if I create a new post in Octopress I&amp;rsquo;d rather using following command:
$ rake new_post[&amp;quot;PostName&amp;quot;]  Then the generated post name would be something like following:
 $ ls -lt | more total 3632 -rw-rw-r-- 1 dash dash 5292 Apr 1 2016 2015-11-05-good-material.markdown -rw-rw-r-- 1 dash dash 540 Apr 1 2016 2016-01-04-purge-cloudstack-env.</description>
    </item>
    
    <item>
      <title>ReadDigestOnPythonAlgorithm2</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/27/readdigestonpythonalgorithm2/</link>
      <pubDate>Tue, 27 Sep 2016 09:41:02 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/27/readdigestonpythonalgorithm2/</guid>
      <description>第三章笔记。
目的 * 理解抽象数据结构，stack,queue,dequeue,list. * 使用python lists实现抽象数据结构queue, deque. * 理解实现基本线性数据结构的性能. * 理解prefix,infix,postfix. * 使用stack陪你国家postfix表达式. * 使用stack来将表达式从infix到postfix. * 使用队列模拟基本计时模拟器 * 何种情况下该使用何种数据结构. * 使用node/参考模式实现抽象数据结构(链表). * 对比我们实现的链表和Python的链表实现的性能.  线性数据结构 线性数据结构包括: 栈，队列，双端队列，列表。
线性是因为存在两端，左/右，或者前/后，或者顶/底。
线性数据结构的差别在于数据添加/删除的方式。线性数据结构可以组合来解决很多难题。
Stack LIFO， Last In, First Out. 先进后出，后进先出。
Stack定义的抽象数据结构，见原文。
class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items) s=Stack() print(s.isEmpty()) s.</description>
    </item>
    
    <item>
      <title>ReadDigestOnPythonAlgorithm</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/26/readdigestonpythonalgorithm/</link>
      <pubDate>Mon, 26 Sep 2016 16:28:31 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/26/readdigestonpythonalgorithm/</guid>
      <description>目标 本节目标是:
* 理解算法分析的重要性 * 能使用&amp;quot;Big-O&amp;quot;描述算法的执行时间 * 理解常用的Python数组和字典的&amp;quot;Big-O&amp;quot;执行时间 * 理解Python数据的实现是如何影响到算法分析的 * 理解如何对简单的Python程序进行性能基准测试  算法分析 典型问题是: 当两个程序解决了同一个问题，然而看起来有差别的时候，如何得知一种方案确实优 于另一种？
理解：算法是用于解决针对某种输入的黑盒实现。某种算法可能针对多种不同程序，这取决于程序 的编写者及编程时使用的编程语言。
程序对比 两种累加器的实现：
清晰、明了的实现:
def sumOfN(n): theSum = 0 for i in range(1,n+1): theSum = theSum + i return theSum print(sumOfN(10))  糟糕的实现:
def foo(tom): fred = 0 for bill in range(1,tom+1): barney = bill fred = fred + barney return fred print(foo(10))  为什么糟糕？ 考虑到程序的可读性。
算法分析关注点 关注点在于基于对计算资源的量化，以评价算法的好坏。比较两种不同算法，评价出其优劣。譬如 ，如果一种算法在解决同一问题时使用了比另一种算法少得多的计算资源时，我们可以说该种算法 较为优秀。
量化指标: A.</description>
    </item>
    
    <item>
      <title>OnYoutube dl</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/08/onyoutube-dl/</link>
      <pubDate>Thu, 08 Sep 2016 12:00:39 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/08/onyoutube-dl/</guid>
      <description>Background If you download a playlist on youtube, your download files would be renamed as following:
$ ls -l -h /mnt/golang total 4.8G -rwxr--r-- 1 dash root 62M Sep 7 18:43 &#39;Aerospike Install Linux-bw0eipI7-4s.mp4&#39; -rwxr--r-- 1 dash root 9.8M Sep 7 22:48 &#39;App Enginge Domains-rNI_PyNuS2o.mp4&#39; -rwxr--r-- 1 dash root 28M Sep 7 21:52 &#39;General Overview of Networking &amp;amp; The Internet-hZ7cX4fpMk4.mp4&#39; -rwxr--r-- 1 dash root 51M Sep 7 22:25 &#39;Golang Aerospike-symvVMJlC3g.</description>
    </item>
    
    <item>
      <title>RHEL Working Tips</title>
      <link>http://purplepalmdash.github.io/blog/2016/09/05/rhel-working-tips/</link>
      <pubDate>Mon, 05 Sep 2016 10:42:24 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/09/05/rhel-working-tips/</guid>
      <description>Subscrition Manager After install RHEL7, we could register it first:
# subscription-manager register  List and register with the available pools:
# subscription-manager list --available --all # subscription-manager subscribe --pool=XXXXXXXXX  After registration, we could see all of the registered repos:
$ subscription-manager repos --list  Syncing Repos Because the openstack repo is the paid channel, skip for other options.</description>
    </item>
    
    <item>
      <title>WorkTipsOnOpenStackDeployment</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/31/worktipsonopenstackdeployment/</link>
      <pubDate>Wed, 31 Aug 2016 17:29:36 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/31/worktipsonopenstackdeployment/</guid>
      <description>Repository Sync The current version of OpenStack could be found in:
https://releases.openstack.org/
Mitaka is the recent version.
Mitaka	Current stable release, security-supported	2016-04-07	2017-04-10  Ubuntu repository could be found at:
http://ubuntu-cloud.archive.canonical.com/ubuntu/dists/
Use apt-mirror for syncing them. Current the ubuntu1404 is well supported.</description>
    </item>
    
    <item>
      <title>OnXenServerBridgeWorkingTips2</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/19/onxenserverbridgeworkingtips2/</link>
      <pubDate>Fri, 19 Aug 2016 14:37:59 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/19/onxenserverbridgeworkingtips2/</guid>
      <description>VirtualBox Setup Define a virtual machine:
Use 7G of 8G memory for this VM:
Create a new disk(200G), choose VDI, Dynamically allocated, And specify the location for storing it.
Now create the virtual machine, and configure its networking like following:
CPUs, we allocated 4:
And also the acceleration configuration:
Storage Configuration:
For saving the resources, disable USB/Audio.
Now insert the XenServer Installation CDROM, and install it.
XenServer Configuration IP Address, for bridged networking:</description>
    </item>
    
    <item>
      <title>OnXenServerBridgeWorkingTips</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/18/onxenserverbridgeworkingtips/</link>
      <pubDate>Thu, 18 Aug 2016 19:29:45 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/18/onxenserverbridgeworkingtips/</guid>
      <description>Background I will use XenServer for testing, while I made a vagrant box of XenServer 6.5, it could work properly in seperated networking, so following I will try to setup a bridged &amp;ldquo;XenServer&amp;rdquo; which will acts like a real physical machine.
Vagrantfile The configuration part is listed as:
 # csagentxen65 node. # Add one networking, modify hostname, define memory, CPU cores. config.vm.define :csagentxen65 do |csagentxen65| csagentxen65.vm.box = &amp;quot;Xen65Box&amp;quot; csagentxen65.</description>
    </item>
    
    <item>
      <title>SendMessageToSlack</title>
      <link>http://purplepalmdash.github.io/blog/2016/08/03/sendmessagetoslack/</link>
      <pubDate>Wed, 03 Aug 2016 09:55:58 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/08/03/sendmessagetoslack/</guid>
      <description>Reference Mainly refers to:
https://api.slack.com/incoming-webhooks
http://blog.pragbits.com/it/2015/02/09/slack-notifications-via-curl/
Incomming webhooks Create a incoming webhooks in:
https://skyruntime.slack.com/apps/new/A0F7XDUAZ-incoming-webhooks
After created the webhook use curl for sending out the direct message:
$ curl -X POST --data-urlencode &#39;payload={&amp;quot;channel&amp;quot;: &amp;quot;#general&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;webhookbot&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;This is posted to #general and comes from a bot named webhookbot.&amp;quot;, &amp;quot;icon_emoji&amp;quot;: &amp;quot;:ghost:&amp;quot;}&#39; https://hooks.slack.com/services/xxxxxxxxxxxxxxxxxxxxxxxxxx  Wrap the message In Bash:
$ proxychains4 curl -X POST --data-urlencode &#39;payload={&amp;quot;channel&amp;quot;: &amp;quot;#general&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;webhookbot&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&#39;$1&#39;&amp;quot;, &amp;quot;icon_emoji&amp;quot;: &amp;quot;:ghost:&amp;quot;}&#39; https://hooks.</description>
    </item>
    
    <item>
      <title>Using Packer For Building VM Templates</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/28/using-packer-for-building-vm-templates/</link>
      <pubDate>Thu, 28 Jul 2016 12:08:27 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/28/using-packer-for-building-vm-templates/</guid>
      <description>Background Recently I am playing the jenkins and VM Templates, so I want to setup the CI(Continous Integration) environment which could automatically finish the template building, following are the tips on how to setup these environment and let everything working together.
Using Makefile boxcutter https://github.com/boxcutter has lots of projects for packering the templates, directly clone them to local and run them, you could get the standard vagrant box, which could be used via virtualbox/vmware/paralles.</description>
    </item>
    
    <item>
      <title>编译Packer及其插件</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/21/%E7%BC%96%E8%AF%91packer%E5%8F%8A%E5%85%B6%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Thu, 21 Jul 2016 21:12:27 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/21/%E7%BC%96%E8%AF%91packer%E5%8F%8A%E5%85%B6%E6%8F%92%E4%BB%B6/</guid>
      <description> Install Go In ArchLinux, do following for installing and configurating go:
$ vim ~/.bash_profile export GOPATH=$HOME/go export PATH=$PATH:$GOPATH/bin  Exit the terminal and relogin again, now you could verify your GOPATH and golang System Path.
Install go in ArchLinux via:
$ sudo pacman -S go  Installing Dev Packer </description>
    </item>
    
    <item>
      <title>使用Jenkins/PackerIO自动化编译虚拟机镜像</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/18/%E4%BD%BF%E7%94%A8jenkins/packerio%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E8%AF%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%95%9C%E5%83%8F/</link>
      <pubDate>Mon, 18 Jul 2016 14:53:58 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/18/%E4%BD%BF%E7%94%A8jenkins/packerio%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E8%AF%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%95%9C%E5%83%8F/</guid>
      <description>GitLab仓库 在前面搭建的GitLab里创建一个新仓库，用于存储Packer.io脚本。
在编译机器的仓库里，运行以下命令，添加自己到新创建的仓库里:
$ cd existing_folder $ git init $ git remote add origin http://192.168.1.79:10080/root/BuildUbuntu.git $ git add . $ git commit $ git push -u origin master  提交完毕之后，在GitLab服务器上就可以看到新添加的代码了。
Jenkins配置 在Jenkins里创建一个新项目，选择Freestyle Project， 默认创建完毕。
在源代码管理的设置中，填入以下的条目:
Build Trigger中我们选择由GitLab触发：
在GitLab中我们需要添加相应的钩子(WebHook):
设置:
添加Build脚本(选择execute shell):
配置完毕后，就可以通过点击Build Now来编译Packer.io工程了。</description>
    </item>
    
    <item>
      <title>SetupJenkinsCI</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/13/setupjenkinsci/</link>
      <pubDate>Wed, 13 Jul 2016 19:28:30 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/13/setupjenkinsci/</guid>
      <description>AIM Jenkins + Packer.io + GitLab + Gogs, for automatically building the virtual machine images.
Jenkins Installation/Configuration TBD
GitLab Refers to:
https://github.com/sameersbn/docker-gitlab
Image Preparation Using docker for installing gitlab. First pull the docker image back via:
$ docker pull sameersbn/gitlab:8.9.6  Also pull back the postgres and redis images, for we will link to these container&amp;rsquo;s services:
$ docker pull sameersbn/postgresql:9.4-22 $ docker pull sameersbn/redis:latest  Run GitLab Create the data directory for holding the data:</description>
    </item>
    
    <item>
      <title>用Flask框架搭建Web App</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/12/%E7%94%A8flask%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BAweb-app/</link>
      <pubDate>Tue, 12 Jul 2016 15:26:23 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/12/%E7%94%A8flask%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BAweb-app/</guid>
      <description>拥有Web界面的好处是显而易见的，譬如说，我们可能需要下载Youtube上的某一段视频。传统的操 作方式是这样的：登录位于国外的vps-&amp;gt; 下载youtube视频到VPS -&amp;gt; 退出vps登录 -&amp;gt;采用某种手段 (ftp/scp?)传送到本地。这时候如果有一个运行于远端VPS上的Web App，本地输入Youtube视频链接 ，下载完毕后直接生成下载链接，这该有多好！这里我们来实现这个功能。
Flask 运行环境 远程VPS位于Digital Ocean上，运行Ubuntu14.04。 这里我们基于python virtualenv来构建Flask 开发框架.
$ sudo apt-get install -y python-virtualenv $ virtualenv myflask $ source ~/myflask/bin/activate $ mkdir ~/flask_youtube $ vim requirements.txt Flask==0.10.1 $ pip install -r requirements.txt  运行完上述命令后，flask运行环境就已经就绪了。
Flask App 这里我们参考了以下链接（实际上是照搬):
http://charlesleifer.com/blog/a-flask-front-end-and-chrome-extension-for-youtube-dl/
也参考了(关于virtualenv):
https://realpython.com/blog/python/setting-up-a-simple-ocr-server/
$ vim youtube.py import subprocess import sys from flask import Flask, flash, redirect, request, render_template, url_for DEBUG = False SECRET_KEY = &#39;this is needed for flash messages&#39; BINARY = &#39;/usr/bin/youtube-dl&#39; DEST_DIR = &#39;/home/dash/videos&#39; OUTPUT_TEMPLATE = &#39;%s/%%(title)s-%%(id)s.</description>
    </item>
    
    <item>
      <title>搭建基于Docker的Piwigo照片管理网站</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/08/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84piwigo%E7%85%A7%E7%89%87%E7%AE%A1%E7%90%86%E7%BD%91%E7%AB%99/</link>
      <pubDate>Fri, 08 Jul 2016 21:35:19 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/08/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84piwigo%E7%85%A7%E7%89%87%E7%AE%A1%E7%90%86%E7%BD%91%E7%AB%99/</guid>
      <description>最近和小伙伴一起出去玩的次数比较多，免不了要拍下不少照片。考虑到照片共享的便捷性，特地调研了 几个关于照片共享的方法，最后打算基于Piwigo来搭建，以下是详细的步骤。
从Iphone同步图片到ArchLinux 参考了https://wiki.archlinux.org/index.php/IPod
$ sudo pacman -S ifuse usbmuxd libplist $ lsmod | grep -i fuse fuse 94208 3 $ ifuse ~/iphone $ cd ~/iphone $ ls Books DCIM Downloads MediaAnalysis PhotoData PhotoStreamsData Photos Purchases Radio Recordings iTunes_Control  DCIM/100APPLE下即为我们Iphone里所储存的图片。可以直接拷贝到本地。
Piwigo 有了容器以后，很多配置的工作就完全被简化了。以下是步骤：
$ sudo docker pull mathieuruellan/piwigo $ sudo docker pull mysql:5.5  而后，在某个目录下，创建一个fig.yml文件, fig可以通过pip install fig来安装.
$ pwd /home/dash/Code/piwigo $ cat fig.yml mysqlpiwigo: image: mysql:5.5 volumes: - /home/dash/piwigo/mysql/:/var/lib/mysql environment: - MYSQL_ROOT_PASSWORD=XXXXXXXX - MYSQL_DATABASE=piwigo - MYSQL_USER=piwigo - MYSQL_PASSWORD=XXXXXX piwigo: image: mathieuruellan/piwigo links: - mysqlpiwigo:mysql volumes: - /home/dash/piwigo/data/galleries:/var/www/galleries - /home/dash/piwigo/data/local:/var/www/local - /home/dash/piwigo/data/plugins:/var/www/plugins - /home/dash/piwigo/data/themes:/var/www/themes - /home/dash/piwigo/cache:/var/www/_data/i - /home/dash/piwigo/upload:/var/www/upload&amp;quot; - /var/log - /var/log/piwigo:/var/log/apache2 ports: - &amp;quot;8964:80&amp;quot; hostname: piwigo domainname: localhost  写好以上的配置文件以后，在该目录下运行sudo fig up -d即可将Piwigo运行起来。</description>
    </item>
    
    <item>
      <title>用Travis CI发布Hugo博客</title>
      <link>http://purplepalmdash.github.io/blog/2016/07/07/%E7%94%A8travis-ci%E5%8F%91%E5%B8%83hugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 07 Jul 2016 15:59:09 +0800</pubDate>
      
      <guid>http://purplepalmdash.github.io/blog/2016/07/07/%E7%94%A8travis-ci%E5%8F%91%E5%B8%83hugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>背景 在前面的文章 Using hugo中我已经完成了从 Octopress到Hugo博客构建引擎的迁移，这篇文章将讲述如何进一步简化博客从撰写到发布的流程。 主要使用了Travis CI和Github Page.
如果没有Travis帐号的，可以到Travis-ci注册一个，也可以使用 github帐号连接使用。
github pages Github的pages遵循的命名原则非常简单，如果github在用户的账户下发现一个名字为 &amp;lt;username&amp;gt;.github.io的仓库，那它会将这个仓库的master分支里的内容映射到 http://&amp;lt;username&amp;gt;.github.io.
以下创建出了一个名字为purplepalmdash.github.io的github仓库, 并将hugo生成的public/目 录下的所有内容(即整个静态网站)上传到了github。
$ git clone git@github.com:purplepalmdash/purplepalmdash.github.io.git $ cp -r public/* purplepalmdash.github.io/ $ cd purplepalmdash.github.io $ git add --all $ git commit -m &amp;quot;First commit under hugo&amp;quot; $ git push  这时打开浏览器，访问http://purplepalmdash.github.io就可以看到上传后的静态网站。
github pages代码分支 仅仅拥有master分支用来存储静态网站是不够的，我们还需要创建一个用于存放网站源代码的 source分支。以下命令创建出source分支，并上传了hugo源代码内容.
$ cd purplepalmdash.github.io $ git checkout -b source $ rm -rf * $ cp -r ~/blog_source/* ./ $ git add --all $ git commit -m &amp;quot;First commit for source code&amp;quot; $ git push --set-upstream origin source  现在我们已经把源代码和生成的网站放在同一个仓库的不同分支了。</description>
    </item>
    
    <item>
      <title>Using hugo</title>
      <link>http://purplepalmdash.github.io/2016/07/04/using-hugo/</link>
      <pubDate>Mon, 04 Jul 2016 15:36:43 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/07/04/using-hugo/</guid>
      <description>For switching my blogging engine from octopress to hugo, following are the steps.
Installing GO ArchLinux installation is:
$ sudo pacman -S go $ mkdir -p ~/go/{bin,src} $ export GOPATH=~/go $ export PATH=&amp;quot;$PATH:$GOPATH/bin&amp;quot;  Get Hugo Hugo could be fetched directly from github, install it via:
$ Notice you have to use redsocks! $ go get -u -v github.com/spf13/hugo $ which hugo /home/vagrant/go/bin/hugo  First Blog Create a new site:</description>
    </item>
    
    <item>
      <title>XenServer Statistics</title>
      <link>http://purplepalmdash.github.io/2016/07/01/xenserver-statistics/</link>
      <pubDate>Fri, 01 Jul 2016 17:45:50 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/07/01/xenserver-statistics/</guid>
      <description>Direct write rrd into graphite, refers to:
$ git clone https://github.com/jgilmour/XenGraphiteIT.git  Then you get the storage pool information fro xsconsole via:
$ xe vdi-list  Notice it will contain the hard disk and iso repositories, use harddisk.
Now edit the .config file:
[XENAPI] URL = http://192.168.10.187 USERNAME = root PASSWORD = xxxxxxx SR-UUID = 51977c4b-8dc2-bcff-b7ad-de7cc5c7e717 [GRAPHITE] CARBON_HOST = 192.168.1.79 CARBON_PORT = 2003 CARBON_NAME = collectd.com.IT.servers.xen.  Run python2 xengraphite.py you could get your XenServer statistic data into your graphite database, enjoy it.</description>
    </item>
    
    <item>
      <title>site-to-site VPN</title>
      <link>http://purplepalmdash.github.io/2016/06/29/site-to-site-vpn/</link>
      <pubDate>Wed, 29 Jun 2016 18:51:40 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/29/site-to-site-vpn/</guid>
      <description>Reference Refers to:
https://clauseriksen.net/2011/02/02/ipsec-on-debianubuntu/
And http://xmodulo.com/create-site-to-site-ipsec-vpn-tunnel-openswan-linux.html
Network Topology The topology is listed as following:
Host1 &amp;ndash; LAN1 &amp;ndash; Router1 &amp;ndash;[BIG, BAD INTERNET]&amp;ndash; Router2 &amp;ndash; LAN2 &amp;ndash; Host2
Router1 and Router2 are Ubuntu14.04 machine, which runs in virt-manager,thus you have to create 2 new networks, each in one physical machine.
Physical Machine 1: 192.168.1.79
Router1:
eth0: bridge to physical machine&amp;rsquo;s networking. 192.168.10.100
eth1: 10.47.70.2.
DHCP on eth1.
Physical Machine 2: 192.</description>
    </item>
    
    <item>
      <title>搭建基于docker的监控系统</title>
      <link>http://purplepalmdash.github.io/2016/06/20/da-jian-ji-yu-dockerde-jian-kong-xi-tong/</link>
      <pubDate>Mon, 20 Jun 2016 09:39:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/20/da-jian-ji-yu-dockerde-jian-kong-xi-tong/</guid>
      <description>Graphite/Grafana 这两个用于记录和展示监控数据，通过以下命令可以快速搭建:
Graphite 开启容器:
$ mkdir -p /local/path/to/graphite/storage/whisper/ $ sudo docker run -d \ --name graphite \ -p 8080:80 \ -p 2003:2003 \ -v /local/path/to/.htpasswd:/etc/nginx/.htpasswd \ -v /local/path/to/graphite/storage/whisper:/opt/graphite/storage/whisper \ sitespeedio/graphite  创建htpasswd文件的方法可以参阅:
http://httpd.apache.org/docs/2.2/programs/htpasswd.html
当然如果你使用默认的密码的话，用户名/密码是:guest/guest.
Grafana 开启容器:
# mkdir -p /local/path/to/grafana # docker run -d -p 3000:3000 --name=grafana -v /local/path/to/grafana:/var/lib/grafana grafana/grafana  默认用户名/密码为admin/admin.
Collectd 用于采集节点机上的数据，
# docker run -d --net=host --privileged -v /:/hostfs:ro --name=collectd -e \ HOST_NAME=localhost -e \ GRAPHITE_HOST=192.168.1.79 andreasjansson/collectd-write-graphite  参数说明:</description>
    </item>
    
    <item>
      <title>搭建无盘CentOS桌面环境</title>
      <link>http://purplepalmdash.github.io/2016/06/18/da-jian-wu-pan-centoszhuo-mian-huan-jing/</link>
      <pubDate>Sat, 18 Jun 2016 13:43:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/18/da-jian-wu-pan-centoszhuo-mian-huan-jing/</guid>
      <description>网络准备 创建一个无DHCP的网络:
DHCP服务器我们将配置在PXE服务器节点上。
PXE节点配置 初始化配置 最小化安装CentOS 7 Server。并配置其IP地址为10.19.20.2.
关闭selinux和firewalld服务:
# vi /etc/selinux/config SELINUX=disabled # systemctl disable firewalld.service  使用DVD作为源 创建挂载目录并挂在DVD：
# mkdir /cdrom # mount -t iso9660 -o loop ./CentOS-7-x86_64-Everything-1511.iso /cdrom/  创建新的repo文件:
# vi /etc/yum.repos.d/local.repo [LocalRepo] name=Local Repository baseurl=file:///cdrom enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7  生成新的缓存：
# mkdir back # mv CentOS-* back # yum makecache  安装一些必要的包:
# yum install -y vim wget  TFTP Server 安装必要的包:
# yum -y install syslinux xinetd tftp-server # mkdir /var/lib/tftpboot/pxelinux.</description>
    </item>
    
    <item>
      <title>RackHD Worktips</title>
      <link>http://purplepalmdash.github.io/2016/06/07/rackhd-worktips/</link>
      <pubDate>Tue, 07 Jun 2016 17:05:19 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/07/rackhd-worktips/</guid>
      <description>Vagrant Preparation rackhd/rackhd vagrant box could be downloaded from following link:
https://atlas.hashicorp.com/rackhd/boxes/rackhd
Clone the repository from the github:
$ pwd /home/dash/Code/Jun13 $ git clone https://github.com/RackHD/RackHD $ cd RackHD  Change into the directory example, create config and run the setup command:
$ cd example $ cp config/monorail_rack.cfg.example config/monorail_rack.cfg  Edits can be made to this new file to adjust the number of pxe clients created.
$ bin/monorail_rack  The monorail_rack script will auto-start all of the services by default, but you can also run them manually if you prefer.</description>
    </item>
    
    <item>
      <title>Use RackHD For Deploying Systems</title>
      <link>http://purplepalmdash.github.io/2016/06/01/use-rakehd-for-deploying-systems/</link>
      <pubDate>Wed, 01 Jun 2016 09:14:18 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/06/01/use-rakehd-for-deploying-systems/</guid>
      <description>Following are the steps for using the RackHD for deploying systems. Mainly refers to http://dojoblog.emc.com/rackhd-cpi/setting-up-rackhd/
But the tutorial from emc includes lots of mistakes, so I listed all of the steps in following chapters.
Vagrant Env Preparation Initialize the vagrant env via(ubuntu1404 is my box name):
$ vagrant init ubuntu1404 A `Vagrantfile` has been placed in this directory. $ vim Vagrantfile config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb| # # Display the VirtualBox GUI when booting the machine # vb.</description>
    </item>
    
    <item>
      <title>不同桌面环境占用内存/CPU对比</title>
      <link>http://purplepalmdash.github.io/2016/05/31/bu-tong-zhuo-mian-huan-jing-zhan-yong-nei-cun-slash-cpudui-bi/</link>
      <pubDate>Tue, 31 May 2016 09:25:38 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/31/bu-tong-zhuo-mian-huan-jing-zhan-yong-nei-cun-slash-cpudui-bi/</guid>
      <description>对比xfce4, lxde, gnome, mate等桌面环境占用内存/CPU对比
先决条件 使用vagrant的镜像(ubuntu14.04):
$ vagrant box list ubuntu1404 (virtualbox, 0)  每一个桌面环境的验证如下:
$ vagrant init ubuntu1404 $ vim Vagrantfile config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb| # Display the VirtualBox GUI when booting the machine # vb.gui = true # Customize the amount of memory on the VM: vb.memory = &amp;quot;1024&amp;quot; end $ vagrant up  基础镜像占用内存 用free -m来查看系统运行时所占用内存：
xfce4(xubuntu) 安装:
$ sudo apt-get update $ sudo apt-get install xubuntu-desktop  启动xfce4桌面后，内存占用结果为：</description>
    </item>
    
    <item>
      <title>羊城漫步(二)</title>
      <link>http://purplepalmdash.github.io/2016/05/29/yang-cheng-man-bu-er/</link>
      <pubDate>Sun, 29 May 2016 22:27:39 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/29/yang-cheng-man-bu-er/</guid>
      <description>计划不如变化，昨天说要去南越文王博物馆，结果上午下暴雨，中午有饭局，延后。饭局中有 小伙伴说去看广美的毕业设计，想起来几天前在微博上看到一广美学生关于GFW的讽刺毕业设计， 酒足饭饱后一行人即赶赴大学城观展。
广美毕业设计展 广美毕业展分五楼，每个展厅都有数百平米，囊括了绘画、动画、建筑设计、服装设计、模型设计、 汽车设计…………内容。一路看来，真是让人大开眼界。
设计是很重要的，有了好的设计才会有好的产品。在制造业已然日薄西山的当下，往设计转型也许 是个不错的发展方向。好了，以下是一些走马观花的掠影。
彩陶制作的城堡摆件。笨拙的造型和鲜活的配色让诸多小朋友流连往返:
这组憨态可掬的作品叫《不减肥挺好的》，一个妹子的本科毕业设计:
这个屏风摆件很有想象力：
如果家里有一个温馨如此的阳台:
适合培养多肉植物的摆盘:
生活在绿色里:
破烂狗熊和它的朋友们:
这几个皮革的配色相当不错，有手工打造一个键盘皮套的冲动:
喵星人专属的浴室设计, 这个真的要狂赞:
萌爆了的拖鞋！
让人马上能安静下来的书桌设计，萌萌的北极熊，蓝+白色调。超赞的设计！
这个家居摆设让人无法抗拒一杯咖啡或者啤酒的诱惑:
一位兰州籍学子为家乡设计的兰州珍品包装，也是超级赞哦！！！
这里头的一个吊牌，就是一个被GFW屏蔽的网站, 叹气。。。
而吊牌下的小卡片，则是该网站不能访问的起始时间，9个卡片里，有twitter,facebook,google等：
视觉跟踪的小黄鸭们，用传感器，实现小黄鸭随着观众的体感而转动，老大哥能从任一方向都看着你:
中国人用了太多抗生素，滥用了太多。这幅作品就是指的这个:
水墨展示的乐师们的神态。虽然没有面部表情，但是，那种陶醉的形态已经栩栩如生:
好作品真是太多。限于时间，没法一一展示了。我们只是看了4层，还有一层没看。这次展览 完全出乎我的意料之外，首先我没想到本科生的毕业设计水准已经如此之高；再次我没想到美术学院 的学生，他们所着眼的范围已经覆盖得如此之广，他们涉及了城市设计、环境保护、家居设计、工业 包装等等等等诸多领域。而我们这群技术工人，相比之下，做的只是一点点微小的工作吧。
Life is long, play more.
纯吃货贴 本日主打斑鱼，顺祝某位小伙伴生日快乐。
传说中的斑鱼：
晚餐呢接着腐败，驴肉:
好烧鹅：
天上龙肉，地下驴肉:
酒足饭饱外加精神愉悦的一天！好了，周末再见，周一继续狠狠的上班吧！</description>
    </item>
    
    <item>
      <title>羊城漫步(一)</title>
      <link>http://purplepalmdash.github.io/2016/05/28/yang-cheng-man-bu-yi/</link>
      <pubDate>Sat, 28 May 2016 21:23:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/28/yang-cheng-man-bu-yi/</guid>
      <description>题记 近来多了不少个人时间，周末得以在广州和周边自由行走。又鉴于一直以来对朋友圈封闭生态系统的反感 、有限文字带来的表达能力的局限的顾虑，决定把游记整理在blog中。
2016.05.28，周六，雨，行程：陈家祠，越秀山。
陈家祠 陈家祠实在是名声在外得太响，俨然成为岭南建筑的一大地标性建筑，以至于我一个朋友出差路过广州还 专程去访了一次(WMZDBD,说你呢:)哈哈哈)。我想可能和它地处闹市区外加交通便利有很大关系&amp;mdash;-地铁1号线坐到陈家祠站，出D口， 票价10元，好了，陈家祠欢迎你。
下图是祠堂正门。中国各地的祠堂并无两样，牌坊打先锋，往后两根大旗杆，门口用石狮镇门，对联则用来表示 本宗姓优越感的字句，无非也是诗书耕读勤俭发奋一类的语调。本族子弟一接近这门，心底的自豪感嗖的 一下即提升到爆表。祠堂里供奉的，当是本姓人里的成大器者。从这个意义上讲，宗祠可算得上是某个姓的”靖国神社“。
陈家祠堂有名的就是它的各种雕刻了。网上说这些雕刻美仑美奂(&amp;ldquo;图案题材广泛，造型生动逼真，雕刻技艺精湛， 用笔简炼粗放却又精雕细琢，与雄伟的厅堂浑然一体&amp;rdquo;)。
讲真，我觉得网上的说法言过其实。来广州一年多，喜欢游走的缘故，看过不少岭南派建筑。砖雕做得好的 我推荐：佛山祖庙和顺德城煌庙。若是以前从没见过岭南雕刻艺术的，到了陈家祠可能觉得“哇噻好漂亮”， 但 若是看得多、有了比较，就会有高下立判之感。陈家祠砖雕的人物造型过于呆板，层次感对比于我提起的两个 地方显得不够分明。而且它们都高高的站在了屋顶上，原谅我的老颈椎实在没法承受仰望星空的45度角。很多砖雕又 太新了，就像是刻意做新的一般。
还有就是，看各种雕刻一定要慢慢看，干扰越少越好。陈家祠里爱自拍的小姑娘和爱玩单反的大爷大妈太多了，拜托， 我已经抑制住了很多次做V字型手势的冲动。
据说这是在陈家祠的文物仓库里发现的一个用于祭拜神像的木质建筑，官方介绍说它在仓库里沉睡了数十年后，终于 于2015年被发现而后组装出来展览喽！我比较怀疑这个建筑展览人做策划时的智商及情商，我也可以花几万找文物贩子 做旧一个然后说成是&amp;rdquo;沉睡数十年&amp;rdquo;啊。。。。。。
陈家祠还有个身份是广东民俗博物馆，因而在它里头有很多民俗藏品，譬如：
大潮汕剪纸：
特别强调一下”红头船“和”妈祖“, 怡乐路上有家馆子，名字就叫红头船, 鹅肝专卖：
做桃粿，潮汕的一种过年用的食物：
汕头那边的漆版画，这张是说”李白醉酒应诏答番书“:
木雕中的上品，没想到一块木头里即可幻化出人生万象：
一副刻填彩漆画，50年代创作，浓郁的时代风情，《蔗糖丰收》：
此外还有各种绘画/刺绣/雕刻艺术等等，个人喜好问题，我没有完全拍下来。
个人表示很排斥陈家祠里的象牙雕刻展览及售卖场所，你可以说象牙雕刻出来的东西很精美，富有收藏价值等等。但 如果一件艺术品要建立在一条生命的泯灭上，那这种艺术可以说成是杀戮。从这个意义上讲，那些标价数百万的象牙雕刻作品 ，背后站着的都是一头或是数头可怜的惨遭虐杀的大象。
综上所述, 陈家祠我勉强给它给到60分。我给它的评价是一个岭南派建筑的快餐式消费产品。做新痕迹太重，商业气息太浓， 而且，贩卖象牙制品。有朋友路过想走马观花看一下岭南建筑及民俗的，又不想出市区的话，可以带过来走一走。
越秀山 基于陈家祠实在没啥好逛的，出门我就上了109,一路坐到越秀山, 电车，很平稳，很舒服。
越秀山的植被相当好。在市区里来讲，NO.1。 它让我想起南宁的青秀山，青秀山也是个植被很不错的地方，比越秀山要大很多。 雨后的越秀山空气清新，各种热带植物在视野里简直是青翠欲滴，赤裸裸的挑战着你的视觉神经。生态好，所以随处可以看到 小动物，比如:
越秀山里残存了一段明城墙，全广州唯一。 一棵开花的树VS明城墙，很奇妙。要知道在南京的明城墙，大部分都是光秃秃的：
红花残，满地伤，适合发呆一下午的所在:
越秀山里的标志性建筑有两个，先说第一个： 镇海楼, 别名”五层楼“， 广州地标建筑，感兴趣的自行Google之. 见图。
进到楼里，即是广州博物馆，各种文物古玩众多，值得细细品尝。 当然文物这东西的喜好个人都不一样，这里仅列举几例， 展示一下窝的品味，勾引一下泥的欲望:
南越国(公元前100多年)时陶器，上塑&amp;rdquo;食官第一&amp;rdquo;。 说人话就是：吃货才是老大:
陶制小船，公元前作品:
来呀，快活呀，反正有大把时光：
各种各样的陶制建筑，东汉作品:
特写一个，上层住人，下层养猪的陶屋:
把灯放在大脸人的头上真的很好咩, 陶娃娃无辜的表情说明了一切。
南朝时的一张地契，刻在石头上的, 买卖双方都以为可以一直如约下去，没想到过了2000年，全TM国有了:
元代的计时器，运用滴水的原理，判断时辰：</description>
    </item>
    
    <item>
      <title>Working Tips on Ansible-cobbler(3)</title>
      <link>http://purplepalmdash.github.io/2016/05/18/working-tips-on-ansible-cobbler-3/</link>
      <pubDate>Wed, 18 May 2016 21:15:10 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/18/working-tips-on-ansible-cobbler-3/</guid>
      <description>APT Packages The downloaded deb files should be under /var/cache/apt, use following command for copying to another position:
$ find . | grep -i deb$ | xargs % cp % ~/Dest_Folder $ scp -r ~/Dest_Folder Your_Cobbler_Machine  Repositories Install dpkg-dev package, so we could generate the dpkg packages:
$ sudo apt-get install -y dpkg-dev  Create a new repository:
Edit the advanced options:
Report the repository info via:
root@cobbler-ubuntu:~# cobbler repo report --name=ubuntu1604Mate Name : ubuntu1604Mate Apt Components (apt only) : [&#39;main&#39;] Apt Dist Names (apt only) : [&#39;stable&#39;] Arch : x86_64 Breed : apt Comment : Ubuntu 16.</description>
    </item>
    
    <item>
      <title>Tips On Maas 2.0</title>
      <link>http://purplepalmdash.github.io/2016/05/12/tips-on-maas-2-dot-0/</link>
      <pubDate>Thu, 12 May 2016 14:10:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/12/tips-on-maas-2-dot-0/</guid>
      <description>Installation Based on Ubuntu16.04, install maas via:
$ sudo apt-get install -y maas  After installation, create the default username/password via following command:
$ sudo maas-region createadmin --username=root --email=xxyy@xxyy.com Password: Again:  Now you could login to the http://YourIP/MAAS via:
Using API to talk In maas cli, using following steps for generate the API key and use:
# sudo maas-region apikey --username=root AYnuZY3gWTnpxJb7Kp:AtDG3yUmaDu8tXGzTc:tumR29xsRGL6A7T6M2G7LTETPP5kkDwC # maas login mymaas http://10.17.17.2/MAAS/api/2.0 AYnuZY3gWTnpxJb7Kp:AtDG3yUmaDu8tXGzTc:tumR29xsRGL6A7T6M2G7LTETPP5kkDwC You are now logged in to the MAAS server at http://10.</description>
    </item>
    
    <item>
      <title>Setup LXD On Ubuntu1604</title>
      <link>http://purplepalmdash.github.io/2016/05/11/setup-lxd-on-ubuntu1604/</link>
      <pubDate>Wed, 11 May 2016 15:38:23 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/11/setup-lxd-on-ubuntu1604/</guid>
      <description>Preparation By default the lxd is installed in ubuntu1604.
Image The image file are downloaded before we actually install it, install the image via:
$ lxc image import ubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz ubuntu-16.04-server-cloudimg-amd64-root.tar.xz --alias ubuntu1604 $ lxc image list +--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+ | ALIAS | FINGERPRINT | PUBLIC | DESCRIPTION | ARCH | SIZE | UPLOAD DATE | +--------------+--------------+--------+--------------------------------------+--------+----------+------------------------------+ | ubuntu1604 | f4c4c60a6b75 | no | Ubuntu 16.04 LTS server (20160420.3) | x86_64 | 137.</description>
    </item>
    
    <item>
      <title>tips on lxc</title>
      <link>http://purplepalmdash.github.io/2016/05/10/tips-on-lxc/</link>
      <pubDate>Tue, 10 May 2016 22:17:35 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/10/tips-on-lxc/</guid>
      <description>Working Tips Just for importing the images and let it run in lxc
dash@ubuntu:~/may10$ ls ubuntu-14.04-server-cloudimg-amd64-lxd.tar.xz ubuntu-15.04-snappy-amd64-generic.img.xz ubuntu-16.04-server-cloudimg-amd64-root.tar.xz ubuntu-14.04-server-cloudimg-amd64-root.tar.xz ubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz dash@ubuntu:~/may10$ lxc image import ubuntu-14.04-server-cloudimg-amd64-lxd.tar.xz ubuntu-14.04-server-cloudimg-amd64-root.tar.xz --alias ubuntu:14.04 Transferring image: 100% Image imported with fingerprint: b69c9370446a28c02ad5b0d41f07e028a1756a74bee62b7d59467201a6488fc2 dash@ubuntu:~/may10$ lxc image list +--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+ | ALIAS | FINGERPRINT | PUBLIC | DESCRIPTION | ARCH | SIZE | UPLOAD DATE | +--------------+--------------+--------+------------------------------------+--------+----------+------------------------------+ | ubuntu:14.04 | b69c9370446a | no | Ubuntu 14.04 LTS server (20160406) | x86_64 | 118.</description>
    </item>
    
    <item>
      <title>Working Tips On Mesos/Ansible</title>
      <link>http://purplepalmdash.github.io/2016/05/09/working-tips-on-mesos-slash-ansible/</link>
      <pubDate>Mon, 09 May 2016 12:20:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/09/working-tips-on-mesos-slash-ansible/</guid>
      <description>Package Prepare We have the default vagrant box generated by bento, listed it via:
➜ mesos vagrant box list | grep -i centos | grep -i virtualbox centos72 (virtualbox, 0)  Now we want to generate a new box from it, and added our own configuration:
$ vagrant init centos72 $ vagrant up $ vagrant ssh  Edit for keeping the cache:
$ cat /etc/yum.conf | more [main] cachedir=/home/vagrant/rpms/$basearch/$releasever #keepcache=0 keepcache=1  Now poweroff the machine and export it to the new box:</description>
    </item>
    
    <item>
      <title>Working Tips on Ansible-cobbler(2)</title>
      <link>http://purplepalmdash.github.io/2016/05/06/working-tips-on-ansible-cobbler-2/</link>
      <pubDate>Fri, 06 May 2016 15:03:59 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/06/working-tips-on-ansible-cobbler-2/</guid>
      <description>AIM Change the vagrant box to libvirt, and let this libvirt machine working properly.
Image Transformation Transform the image via following command:
$ VBoxManage clonehd /home/dash/VirtualBox\ VMs/ansible-cobbler_cobbler-ubuntu_1462410925173_15793/packer-virtualbox-iso-1454031074-disk1.vmdk /home/dash/output.img --format raw &amp;amp;&amp;amp; qemu-img convert -f raw /home/dash/output.img -O qcow2 /home/dash/ansible-cobbler.qcow2 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100% Clone medium created in format &#39;raw&#39;. UUID: 6fbb99be-8004-43b5-831b-ec794a001c10  Qemu Virtual Machine Create a new machine, then configure the networking, edit the cobbler setting/dhcp setting, then cobbler sync, now the cobbler is adjusting to new environment.</description>
    </item>
    
    <item>
      <title>Linux Tips(5)</title>
      <link>http://purplepalmdash.github.io/2016/05/04/linux-tips-5/</link>
      <pubDate>Wed, 04 May 2016 20:03:21 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/04/linux-tips-5/</guid>
      <description>1. Detach Running Tasks Ctrl+Z for suspend the tasks, then bg it, now you could use disown %1 for detaching the running process.
Next time you login, you will see this background task is also running.
2. Installation of Cobbler Shell Scripts:
https://gist.github.com/luisbolson/1d0dc42976d2468171d0
3. yum groups http://ramblings.narrabilis.com/creating-a-yum-repository-repo-and-creating-a-yum-group-to-install-kickstart
4. rvm issue rvm met openssl.so (LoadError), could be solved via following steps.
$ curl https://github.com/ruby/ruby/commit/801e1fe46d83c856844ba18ae4751478c59af0d1.diff &amp;gt; openssl.patch\n $ rvm install 1.9.3 --with-openssl-dir=$HOME/.</description>
    </item>
    
    <item>
      <title>Working Tips On ansible-cobbler</title>
      <link>http://purplepalmdash.github.io/2016/05/04/working-tips-on-ansible-cobbler/</link>
      <pubDate>Wed, 04 May 2016 15:36:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/05/04/working-tips-on-ansible-cobbler/</guid>
      <description>Source The source are downloaded from:
https://github.com/signed8bit/ansible-cobbler
Git clone it via:
$ git clone https://github.com/signed8bit/ansible-cobbler.git  Test The test will be done via vagrant up, while we met the problem: the cobbler version in ansible playbooks are too old, thus the command cobbler get-loaders won&amp;rsquo;t acts well. we have to changing to the newest cobbler version which is available in
http://cobbler.github.io/
Manually Steps(Ubuntu) Install the newest cobbler via:
$ wget -qO - http://download.</description>
    </item>
    
    <item>
      <title>TipsOnOSExperiment</title>
      <link>http://purplepalmdash.github.io/2016/04/24/tipsonosexperiment/</link>
      <pubDate>Sun, 24 Apr 2016 17:32:12 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/24/tipsonosexperiment/</guid>
      <description>为了在家里验证一下DevStack的网络配置，组建了一个网络，涉及到的点比较多，以下是 具体记录。
交换机配置 前段时间从美国亚马逊买回来一个TP-LINK的千兆交换机一直没用起来，型号是TL-SG108E ，8口可网管交换机。但前面有写过文章可以用来参考:
http://purplepalmdash.github.io/blog/2015/12/12/ba-wan-tl-sg108e/
但这篇文章里讲的主要还是ovs后虚拟机的vlan，和最近要做的DevStack的FloatIP配置稍 微有点差异。
网络规划 家里已有网络192.168.177.0/24, 这个网络是可以访问Internet的。所以DevStack机器上 的eth0将连接到这个网段，并在其上分配floating IP.
另外我们需要创建一个VLAN隔离的private network，用于给DevStack里的虚拟机默认启 动后分配IP地址。将DevStack机器上的eth1连接到此网络。
配置交换机 TP-LINK的DEB-100网卡是比较皮实，奈何win10驱动需要找，随便找了个淘宝9.9包邮的 USB转10兆网卡连上SurfacePro，开始配置交换机。
步骤:
打开桌面的Easy Smart Configuration Utility，开始自动发现局域网内的交换机，如 下图:
需要重新配置下USB有线网卡的IP地址才能连接上交换机:
双击发现的交换机，用admin/admin登录后的界面如下:
以前我曾经把这个交换机配置成802.1Q VLAN, 这次基于端口来隔离，所以要配置成Port Based VLAN, 配置完毕后的画面如下:
这种基于端口VLAN的验证方法很简单，将上网机和宽带路由器分别插在1～4和5～8口，即 可测试出VLAN被端口隔离。但这好像不是DevStack中需要设置的。
还是继续配置802.1Q VLAN. 值得注意的是，如果之前配置端口VLAN时将SurfacePro的连 接和交换机网段隔离了，那可能会连接不上，换回同一VLAN即可连接上。
配置vlan100如以下图所示:
测试VLAN 将两台PC连接在5~8口上，VLAN100。
PC1, ArchLinux, Systemd配置VLAN:
$ cat enp0s25.100.network [Match] Name=enp0s25.100 [Network] DNS=192.168.2.1 Address=192.168.2.1/24 $ cat enp0s25.100.netdev [NetDev] Name=enp0s25.100 Kind=vlan [VLAN] Id=100 [Network] DNS=192.168.2.1 Address=192.168.2.1/24 Gateway=192.168.2.1 $ pwd /etc/systemd/network  重新启动PC1后，192.</description>
    </item>
    
    <item>
      <title>在DevStack中使用Packer</title>
      <link>http://purplepalmdash.github.io/2016/04/24/zai-devstackzhong-shi-yong-packer/</link>
      <pubDate>Sun, 24 Apr 2016 10:16:39 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/24/zai-devstackzhong-shi-yong-packer/</guid>
      <description> 导入源镜像 源镜像可以从ubuntu.com下载到，并使用以下命令导入:
$ wget https://cloud-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-disk1.img $ glance image-create --name ubuntu-trusty --disk-format qcow2 \ --container-format bare --file trusty-server-cloudimg-amd64-disk1.img  openstack.json文件 github上有现成的，克隆到本地:
$ git clone https://github.com/Thingee/packer-devstack.git  </description>
    </item>
    
    <item>
      <title>rsync the vault.centos.com</title>
      <link>http://purplepalmdash.github.io/2016/04/22/rsync-the-vault-dot-centos-dot-com/</link>
      <pubDate>Fri, 22 Apr 2016 19:39:58 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/22/rsync-the-vault-dot-centos-dot-com/</guid>
      <description>For I want to do some configuration workings on old distribution of CentOS, I have to use lots of materials which from vault.centos.com, following are the steps for syncing them.
First, rsync in vault.centos.com is closed, thus we have to choose http://archive.kernel.org/centos/.
Rsync Scripts Refers to:
https://www.totalnetsolutions.net/2013/10/02/setting-up-a-corporate-yum-repository-mirror-for-bandwidth-and-staged-update-management/
Make Repository https://wiki.centos.org/HowTos/CreateLocalMirror</description>
    </item>
    
    <item>
      <title>Switching to Win10</title>
      <link>http://purplepalmdash.github.io/2016/04/21/switching-to-win10/</link>
      <pubDate>Thu, 21 Apr 2016 10:06:44 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/21/switching-to-win10/</guid>
      <description>Background Since the monitor in my company are so ba&amp;hellip;&amp;hellip;..d, I have to change my working environment from PC to SurfacePro, thus I have some tools changes, following are the records.
Tool List Terminal: XShell4, Make sure you have change the screen-size issue.
purplepalmdash.github.io/blog/2015/11/13/win10-tips-for-using-xshell/
Screen-Shot:
I use picPick for replacing the scrot, the scrot is so convenient thus I found many tools for replacing it.
picPick Configuration: the main purpose is for selecting the rectangle and save it automatically to the folder with the timestamp.</description>
    </item>
    
    <item>
      <title>DevStack Enable Neutron</title>
      <link>http://purplepalmdash.github.io/2016/04/20/devstack-enable-neutron/</link>
      <pubDate>Wed, 20 Apr 2016 11:11:54 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/20/devstack-enable-neutron/</guid>
      <description>Steps Install steps are listed as following:
First as root user, create the initial stack user via:
# git clone https://git.openstack.org/openstack-dev/devstack # tools/create-stack-user.sh # passwd stack  Now login with user stack, clone the repository and begin devstack installation:
$ git clone https://git.openstack.org/openstack-dev/devstack $ cd devstack $ git checkout stable/liberty $ cp samples/local.conf ./ $ vim local.conf  The local.conf file should added following items:
 # use TryStack git mirror GIT_BASE=http://git.</description>
    </item>
    
    <item>
      <title>Change IP In DevStack</title>
      <link>http://purplepalmdash.github.io/2016/04/18/change-ip-in-devstack/</link>
      <pubDate>Mon, 18 Apr 2016 12:15:35 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/18/change-ip-in-devstack/</guid>
      <description>Tips After changing the IP Address of the DevStack machine, do following for re-installing the envs:
$ ssh stack@Your_IP stack@packer-PerforceTest:~$ pwd /opt/stack stack@packer-PerforceTest:~$ cd devstack/ stack@packer-PerforceTest:~/devstack$ ./unstack.sh &amp;amp;&amp;amp; ./stack.sh  Now visiting your http://Your_New_IP/dashboard you will got the openstack dashborad.</description>
    </item>
    
    <item>
      <title>Moving Docker Repository Position</title>
      <link>http://purplepalmdash.github.io/2016/04/15/moving-docker-repository-position/</link>
      <pubDate>Fri, 15 Apr 2016 15:55:15 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/15/moving-docker-repository-position/</guid>
      <description>Since the root partition is not so large, I have to change the default position of the docker repository, following are the steps:
Make a Soft Link Make a soft link to the docker repository via:
$ sudo mkdir DockerRepo $ sudo chown -R dash:dash DockerRepo $ sudo chmod 777 -R DockerRepo $ sudo tar -zcC /var/lib docker &amp;gt; /home/juju/DockerRepo/var_lib_docker-backup-$(date +%s).tar.gz $ ls -l -h /home/juju/DockerRepo $ sudo mv /var/lib/docker /home/juju/DockerRepo/ $ sudo ln -s /home/juju/DockerRepo/docker /var/lib/docker $ sudo service docker restart $ sudo service docker status  Notice: the tar -zcC will take a long time, be patient.</description>
    </item>
    
    <item>
      <title>Tips On Setup Eclipse CHE</title>
      <link>http://purplepalmdash.github.io/2016/04/06/tips-on-setup-eclipse-che/</link>
      <pubDate>Wed, 06 Apr 2016 11:40:05 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/06/tips-on-setup-eclipse-che/</guid>
      <description>Steps Reconfigure the LC_ALL, etc:
$ sudo vim /etc/environment LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 $ sudo locale-gen &amp;quot;en_US.UTF-8&amp;quot; $ sudo dpkg-reconfigure locales $ sudo reboot  Be Sure to use latest repository, like aliyun.com.
$ sudo apt-get update -y $ sudo bash # apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D #  Trouble-Shooting Docker download too slow, download it to local.</description>
    </item>
    
    <item>
      <title>Extend Vagrant&#39;s Disk</title>
      <link>http://purplepalmdash.github.io/2016/04/05/extend-vagrants-disk/</link>
      <pubDate>Tue, 05 Apr 2016 15:30:35 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/05/extend-vagrants-disk/</guid>
      <description>In Vagrantfile, edit the following definition:
 config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb| # # Display the VirtualBox GUI when booting the machine # vb.gui = true # # # Customize the amount of memory on the VM: vb.memory = &amp;quot;1024&amp;quot; file_to_disk = File.realpath( &amp;quot;.&amp;quot; ).to_s + &amp;quot;/disk.vdi&amp;quot; if ARGV[0] == &amp;quot;up&amp;quot; &amp;amp;&amp;amp; ! File.exist?(file_to_disk) puts &amp;quot;Creating 5GB disk #{file_to_disk}.&amp;quot; vb.customize [ &#39;createhd&#39;, &#39;--filename&#39;, file_to_disk, &#39;--format&#39;, &#39;VDI&#39;, &#39;--size&#39;, 5000 * 1024 # 5 GB ] vb.</description>
    </item>
    
    <item>
      <title>NodeMCU and 1602I2C(1)</title>
      <link>http://purplepalmdash.github.io/2016/04/01/nodemcu-and-1602i2c-1/</link>
      <pubDate>Fri, 01 Apr 2016 18:00:38 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/04/01/nodemcu-and-1602i2c-1/</guid>
      <description>今天更新了一下代码，实现了两行显示，第一行显示CPU Load，第二行显示剩余内存数。
只是部分替代数据显示部分，这个代码还是有BUG的，譬如说最后一位在下一次显示时不会被清零。
import psutil import serial import time # Setup the Serial Port and open it. ser = serial.Serial() ser.baudrate = 9600 ser.port = &#39;/dev/ttyUSB0&#39; ser.open() ## Todo, to check if the port is opened. # Really talks to the i2c LCD. # Setup the wiring ser.write(b&#39;i2c.setup(0, 4, 3, i2c.SLOW)\r\n&#39;) # dofile, load the lcd library ser.write(b&#39;lcd = dofile(&amp;quot;lcd1602.lua&amp;quot;)()\r\n&#39;) # Now Refresh the LCD. ser.write(b&#39;lcd.clear()\r\n&#39;) #ser.write(b&#39;lcd.put(lcd.light(on))\r\n&#39;) ser.write(b&#39;lcd.put(lcd.locate(0, 0), &amp;quot;CPU Load: &amp;quot;)\r\n&#39;) ser.</description>
    </item>
    
    <item>
      <title>NodeMCU And 1602I2C</title>
      <link>http://purplepalmdash.github.io/2016/03/31/nodemcu-and-1602i2c/</link>
      <pubDate>Thu, 31 Mar 2016 21:34:42 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/31/nodemcu-and-1602i2c/</guid>
      <description>最初入手的1602是N个口的, 激活它需要耗掉开发板上N个GPIO口,为此做完Arduino上的实 验就收了起来. 这次采购中看到店家有卖1602 I2C的转接卡,3块钱,顺手就买了回来.打算 用来做一个WIFI显示屏.
今天做了一个NodeMCU和1602连接实时显示CPU使用率的方案, 如下图所示,这里简单记录 一下制作过程.
连线图 1602 I2C上有四个口,分别是GND/VCC/SDA/SCL.
GND自然不用多说,连接NodeMCU上的GND即可.
VCC我们使用5V输入,在NodeMCU上则是VIN口. 在下图里我用红色做了标注.
SDA接GPIO0, SDC接GPIO2,在图中我用橙色做了标识.
软件准备 我这里参考了 http://domoticx.com/esp8266-wifi-lcd-1602-2004-via-i2c-nodemcu/ 上的实例, 所以用ESPlorer来写入1602的库文件. ESPlorer的下载地址在:
http://esp8266.ru/esplorer/#download
如果你使用的是ArchLinux的话,一行命令就够了:
$ yaourt esplorer  如果你运行上述网址上的示例, 故事的结尾你会获得一个Hallo的显示,以及跑马灯式的显 示效果.
CPU Load Program 先上代码, 用Python写的, 如果你看过上面的示例程序就会明白, 往串口写入1602的lua 脚本,就能获得对应的显示效果,那么以下的Python代码就是每分钟读取CPU的负载值, 将 它封装在一个字符串中发送到NodeMCU连接的串口.
import psutil import serial import time # Setup the Serial Port and open it. ser = serial.Serial() ser.baudrate = 9600 ser.port = &#39;/dev/ttyUSB0&#39; ser.open() ## Todo, to check if the port is opened.</description>
    </item>
    
    <item>
      <title>Monitoring XenServer</title>
      <link>http://purplepalmdash.github.io/2016/03/29/monitoring-xenserver/</link>
      <pubDate>Tue, 29 Mar 2016 12:23:50 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/29/monitoring-xenserver/</guid>
      <description>Prerequisition Refers tohttps://github.com/crashdump/collectd-xenserver
 Collected 4.9 or later Python2.4 Or Later sudo pip install XenAPI sudo pip install collectd  Configuration Make a directory under /etc/collectd folder, and copy the collectd-xenserver.py into this folder:
$ sudo mkdir -p /var/collectd/plugins $ sudo cp YourDictory/collectd-xenserver.py /var/collectd/plugins/collectd_xenserver.py  Now edit the configuration file of /etc/collectd/collectd.conf:
&amp;lt;LoadPlugin python&amp;gt; Globals true &amp;lt;/LoadPlugin&amp;gt; &amp;lt;Plugin python&amp;gt; ModulePath &amp;quot;/etc/collectd/plugins/&amp;quot; #LogTraces true #Interactive true Import &amp;quot;collectd_xenserver&amp;quot; &amp;lt;Module &amp;quot;collectd_xenserver&amp;quot;&amp;gt; &amp;lt;Host &amp;quot;192.</description>
    </item>
    
    <item>
      <title>Use Debmirror For Setup Local Repository</title>
      <link>http://purplepalmdash.github.io/2016/03/29/use-debmirror-for-setup-local-repository/</link>
      <pubDate>Tue, 29 Mar 2016 11:31:42 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/29/use-debmirror-for-setup-local-repository/</guid>
      <description>Setup Repository Install debmirror via:
$ sudo apt-get install -y debmirror $ sudo mkdir /home/UbuntuMirror $ sudo vim /usr/local/bin/mirrorbuild.sh  The mirrorbuild.sh file listed as following:
#### Start script to automate building of Ubuntu mirror ##### ## THE NEXT LINE IS NEEDED THE REST OF THE LINES STARTING WITH A # CAN BE DELETED #!/bin/bash ## Setting variables with explanations. # # Don&#39;t touch the user&#39;s keyring, have our own instead # export GNUPGHOME=/home/mirrorkeyring # Arch= -a # Architecture.</description>
    </item>
    
    <item>
      <title>Tips On NodeMCU</title>
      <link>http://purplepalmdash.github.io/2016/03/27/tips-on-nodemcu/</link>
      <pubDate>Sun, 27 Mar 2016 09:30:05 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/27/tips-on-nodemcu/</guid>
      <description>电路图 在淘宝上买的NodeMCU是v1.0版的, v0.9版和v1.0版的差别如下:
1.0版的连线如图:
烧写固件 ArchLinux下,可以通过python程序直接烧写固件.
下载integer版本的固件,
$ wget https://github.com/nodemcu/nodemcu-firmware/releases/download/0.9.6-dev_20150704/nodemcu_integer_0.9.6-dev_20150704.bin  下载esp-tool, ArchLinux需要安装python2版本的pyserial库才能运行该软件:
$ git clone https://github.com/themadinventor/esptool.git $ sudo pacman -S python2-pyserial $ sudo python2 ./esptool.py --port /dev/ttyUSB0 --write_flash 0x0000 ../nodemcu_integer_0.9.6-dev_20150704.bin  Minicom串口 Minicom串口配置如下:
烧写完固件后,最简单的测试如下:
&amp;gt; print &amp;quot;Hello World&amp;quot; Hello World  同时我们可以看下NodeMCU的版本,命令如下:
&amp;gt; majorVer, minorVer, devVer, chipid, flashid, flashsize, flashmode, flashspeed = node.info(); &amp;gt; print(&amp;quot;NodeMCU &amp;quot;..majorVer..&amp;quot;.&amp;quot;..minorVer..&amp;quot;.&amp;quot;..devVer) NodeMCU 0.9.6  可以看到我们使用的固件版本是0.9.6的.
闪烁LED NodeMCU支持LUA编程,为此我们需要准备另一个写入LUA脚本的小程序:
$ git clone https://github.com/4refr0nt/luatool.git  NodeMCU板上自带有两个LED, 我们先点亮D4口,即GPIO2口上的LED:</description>
    </item>
    
    <item>
      <title>XenServer6.2切换管理端口</title>
      <link>http://purplepalmdash.github.io/2016/03/24/cloudstackqie-huan-guan-li-duan-kou/</link>
      <pubDate>Thu, 24 Mar 2016 17:28:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/24/cloudstackqie-huan-guan-li-duan-kou/</guid>
      <description>默认安装完的XenServer，不能找到eth1, 用以下命令找到eth1:
[root@csagentv1 ~]# xe pif-list uuid ( RO) : cd4409d4-b2b8-543c-ea9c-35170673e924 device ( RO): eth0 currently-attached ( RO): true VLAN ( RO): -1 network-uuid ( RO): 597114f0-e71a-34fe-d6a2-230cc75e085a [root@csagentv1 ~]# xe host-list uuid ( RO) : 367ebe92-0634-41a8-825a-cd23184824ea name-label ( RW): csagentv1 name-description ( RW): Default install of XenServer [root@csagentv1 ~]# xe pif-scan host-uuid=367ebe92-0634-41a8-825a-cd23184824ea [root@csagentv1 ~]# xe pif-list uuid ( RO) : 3f6e551b-993e-0a3d-96b6-0f0d172f867f device ( RO): eth1 currently-attached ( RO): false VLAN ( RO): -1 network-uuid ( RO): 1ff03ece-8b93-b231-ac2d-679d035422da uuid ( RO) : cd4409d4-b2b8-543c-ea9c-35170673e924 device ( RO): eth0 currently-attached ( RO): true VLAN ( RO): -1 network-uuid ( RO): 597114f0-e71a-34fe-d6a2-230cc75e085a  在Console上可以看到管理端口:</description>
    </item>
    
    <item>
      <title>Setup Vagrant-libvirt Env On Ubuntu15.04</title>
      <link>http://purplepalmdash.github.io/2016/03/23/setup-vagrant-libvirt-env-on-ubuntu15-dot-04/</link>
      <pubDate>Wed, 23 Mar 2016 20:49:52 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/23/setup-vagrant-libvirt-env-on-ubuntu15-dot-04/</guid>
      <description>For continue working at home, I have to install vagrant-libvirt on Ubuntu15.04, following are steps:
Vagrant Installation The vagrant version in repository is too old, examine it via:
$ apt-cache policy vagrant vagrant: Installed: (none) Candidate: 1.6.5+dfsg1-2 Version table: 1.6.5+dfsg1-2 0 500 http://mirrors.aliyun.com/ubuntu/ vivid/universe amd64 Packages  Download the installation file in:
https://releases.hashicorp.com/vagrant/1.8.1/vagrant_1.8.1_x86_64.deb
Install it via:
$ sudo dpkg -i vagrant_1.8.1_x86_64.deb $ which vagrant /usr/bin/vagrant  Vagrant-libvirt For building vagrant-libvirt, we have to install following packages:</description>
    </item>
    
    <item>
      <title>Use Vagrant To Manage XenServer</title>
      <link>http://purplepalmdash.github.io/2016/03/21/use-vagrant-to-manage-xenserver/</link>
      <pubDate>Mon, 21 Mar 2016 14:20:09 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/21/use-vagrant-to-manage-xenserver/</guid>
      <description>Building Templates Build XenServer 6.2 Template is pretty easy, simply do following:
$ git clone https://github.com/imduffy15/packer-xenserver.git $ cd packer-xenserver $ packer build template.iso  After building, check the following box file available under the directory:
$ ls -l -h XenServer.box -rw-rw-r-- 1 dash dash 708M 3月 21 14:41 XenServer.box  Import box File Import the generated box file via:
$ vagrant box add XenServer.box --name &amp;quot;XenServer62&amp;quot; $ vagrant box list | grep XenServer62 XenServer62 (virtualbox, 0)  Start the Virtualbox XenServer $ mkdir XenServer62 $ cd XenServer62 $ vim Vagrantfile Vagrant.</description>
    </item>
    
    <item>
      <title>Tips on 5050RGB(2)</title>
      <link>http://purplepalmdash.github.io/2016/03/17/tips-on-5050rgb-2/</link>
      <pubDate>Thu, 17 Mar 2016 13:09:12 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/17/tips-on-5050rgb-2/</guid>
      <description>上次的5050RGB模块损坏后, 我又从淘宝买了一块. 价格不贵,4块钱不到. 卖家的资料上 这么写着:
瞅着还挺OK的,不就是Arduino板5V电压外接,然后用三个GPIO口来控制嘛. 接线完毕后发 现怎么也点不亮.
于是用万用表Debug, 发现公共端应该是接GND, 三个控制端需要电平置为高才可以点亮对 应的颜色.
于是正确的连线和示例代码如下:
// V-VCC GND R-9 B-10 G-11 #define LEDR 9 #define LEDB 10 #define LEDG 11 void clear() { analogWrite(LEDR,0); analogWrite(LEDB,0); analogWrite(LEDG,0); //off } void setup() { pinMode(LEDG,OUTPUT); pinMode(LEDB,OUTPUT); pinMode(LEDR,OUTPUT); } void loop() { clear(); // Red analogWrite(LEDR,255); delay(1000); clear(); // Green analogWrite(LEDG,255); delay(1000); clear(); // Blue analogWrite(LEDB,255); delay(1000); // White analogWrite(LEDB,255); analogWrite(LEDG,255); analogWrite(LEDR,255); delay(2000); }  编译并上传代码到Arduino板子上, LED将呈现成红色-&amp;gt;绿色-&amp;gt;蓝色-&amp;gt;白色的渐变.</description>
    </item>
    
    <item>
      <title>Vagrant-libvirt Playing</title>
      <link>http://purplepalmdash.github.io/2016/03/16/vagrant-libvirt-playing/</link>
      <pubDate>Wed, 16 Mar 2016 10:31:53 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/16/vagrant-libvirt-playing/</guid>
      <description>最终目的是用vagrant实现CloudStack+Xenserver的自动化部署。
CentOS6.7 box Creating 用packer生成CentOS6.7 amd64的镜像，这个镜像默认是virtualbox兼容的，用vagrant-mutate插件 将其转换为libvirt可用的box镜像:
# vagrant mutate centos-6.7.virtualbox.box libvirt # cd /root/.vagrant.d/boxes # ls centos-6.7.virtualbox trusty64 # mv centos-6.7.virtualbox/ centos6764 # vagrant box list centos6764 (libvirt, 0) trusty64 (libvirt, 0)  创建Vagrantfile文件启动一个实验性质的虚拟机：
# pwd /media/opensusue/dash/Code/Vagrant/CentOS2New # ls Vagrantfile Vagrantfile~ # cat Vagrantfile # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(2) do |config| # The most common configuration options are documented and commented below. # For a complete reference, please see the online documentation at # https://docs.</description>
    </item>
    
    <item>
      <title>把玩ebuddy(4)</title>
      <link>http://purplepalmdash.github.io/2016/03/15/ba-wan-ebuddy-4/</link>
      <pubDate>Tue, 15 Mar 2016 14:25:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/15/ba-wan-ebuddy-4/</guid>
      <description>总结了一下ebuddy的玩法，最近加了点玩法，就是用ebuddy作为Bash运行脚本后的提示部件。譬如 ，当完成了某个编译任务后，用ebuddy来告知任务的运行成功。
$ Task A ; NOTIFY EBUDDY  /bin/ebuddy 创建一个/bin/ebuddy的文件，内容如下:
#!/bin/bash FILE=/tmp/ebuddy while true do # if exists the file, then blinking the ebuddy. if [ -f $FILE ]; then # Exists the file, shining the ebuddy echo 07 &amp;gt; /dev/udp/127.0.0.1/8888 else # Now clear the status of the ebuddy echo 17 &amp;gt; /dev/udp/127.0.0.1/8888 fi #echo 07 &amp;gt; /dev/udp/127.0.0.1/8888 sleep 3 done  这个文件的意思是，如果存在/tmp/ebuddy文件，ebuddy的头会亮起，否则，清除ebuddy的状态。
notifyebuddy &amp;amp;&amp;amp; clearebuddy 这两个命令是做在.zshrc里的两个alias:</description>
    </item>
    
    <item>
      <title>使用squid缓存所有rpm/deb安装包</title>
      <link>http://purplepalmdash.github.io/2016/03/15/shi-yong-squidhuan-cun-suo-you-rpm-slash-deban-zhuang-bao/</link>
      <pubDate>Tue, 15 Mar 2016 10:23:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/15/shi-yong-squidhuan-cun-suo-you-rpm-slash-deban-zhuang-bao/</guid>
      <description>在进行自动化部署的时候，需要频繁安装系统，鉴于工作环境的带宽有限，我需要设置一个代理服 务器，用于缓存所有的RPM/DEB安装包，以便自动化部署可以在瞬间完成。
以下示例运行在ArchLinux上。
Squid搭建 Squid介绍:
Squid 是一个 Web 缓存代理，支持 HTTP, HTTPS, FTP, 以及更多。它通过缓存与重用经常请求的 web页面，减少带宽使用同时提升了响应时间。Squid 具有可扩展的访问控制功能，同时可以使服务 器加速。它运行在 Unix 和 Windows 中，采用 GNU GPL 协议发布。
安装squid:
$ sudo pacman -S squid  我们需要配置squid以便它能适配我们的环境，我的环境里主要需要做以下几个事情：
1. 更改squid缓存目录到/home分区。
2. 更改squid缓存目录大小为30G以上。
3. 更改缓存文件大小，以便它支持大的RPM/DEB包。
更改缓存目录， 找到以下的行，在其下添加我们自定义的缓存目录:
$ sudo vim /etc/squid/squid.conf # Uncomment and adjust the following to add a disk cache directory. #cache_dir ufs /var/cache/squid 100 16 256 cache_dir ufs /home/dash/squid 30000 16 256  我们将在指定目录下创建目录， 第一层数为16, 每个文件夹下最多包含256个子文件夹。</description>
    </item>
    
    <item>
      <title>用Vagrant管理libvirt</title>
      <link>http://purplepalmdash.github.io/2016/03/13/yong-vagrantguan-li-libvirt/</link>
      <pubDate>Sun, 13 Mar 2016 16:07:59 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/13/yong-vagrantguan-li-libvirt/</guid>
      <description>先决条件 Vagrant为0.8.1.
参考:
http://linuxsimba.com/vagrant.html
http://linuxsimba.com/vagrant-libvirt-install/
Ubuntu设置 考虑到天朝防火墙的存在,需要经过以下命令才能安装vagrant-libvirt插件:
$ sudo apt-get install -y libvirt-dev ruby-dev $ gem source -r https://rubygems.org/ $ gem source -a http://mirrors.aliyun.com/rubygems/ $ gem install ruby-libvirt -v &#39;0.6.0&#39; $ gem install vagrant-libvirt -v &#39;0.0.32&#39; $ vagrant plugin install vagrant-libvirt $ vagrant plugin list vagrant-libvirt (0.0.32) $ axel http://linuxsimba.com/vagrantbox/ubuntu-trusty.box $ vagrant box add ./ubuntu-trusty.box --name &amp;quot;trusty64&amp;quot;  ArchLinux设置 按照ArchLinux wiki的方法,安装vagrant-libvirt插件:
 # in case it&#39;s already installled vagrant plugin uninstall vagrant-libvirt # vagrant&#39;s copy of curl prevents the proper installation of ruby-libvirt sudo mv /opt/vagrant/embedded/lib/libcurl.</description>
    </item>
    
    <item>
      <title>Tips On 5050RGB</title>
      <link>http://purplepalmdash.github.io/2016/03/12/tips-on-5050rgb/</link>
      <pubDate>Sat, 12 Mar 2016 19:32:42 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/12/tips-on-5050rgb/</guid>
      <description>背景 淘宝上买的5050RGB模块, 外观如下图:
连线:
这个RGB模块比较奇怪,直接使用Arduino的5v输出一直有问题,我是用的外接5V电源供电, 动用了面包板模块.(之后发现不是供电的问题, 是因为淘宝上卖的模块提供示例代码的问 题)
更具体的连线如下:
// V-VCC 5V R-9 B-10 G-11 #define LEDR 9 #define LEDB 10 #define LEDG 11  测试 按照厂方提供的程序,未能成功运行.
厂方提供的电路图如下:
Debug 百思不得其解后,用万用表测试, 电阻发声的那档, 发现加电后,某两个LED可以亮, 另外 一个不能亮.
发现奇怪的一点是, VCC接高电压, RGB接低电压时, 无法点亮LED. RGB接高电压, VCC接 低电压时, LED可以被点亮两个.
猜测: 厂方给的参考资料有误, 接线错误. 而且LED坏了一个.
验证, 正确.
连线更改为:
// V-VCC 5V R-9 B-10 G-11 #define LEDR 9 #define LEDG 10  蓝色的LED已坏, 所以示例代码中,不许配置LEDB.
// V-VCC GND R-9 G-10 #define LEDR 9 #define LEDG 10 int i = 0; void setup() { pinMode(LEDG,OUTPUT); pinMode(LEDR,OUTPUT); } void loop() { analogWrite(LEDR,0); analogWrite(LEDG,0); //off delay(1000); analogWrite(LEDR,255); delay(1000); analogWrite(LEDR,0); analogWrite(LEDG,0); delay(1000); analogWrite(LEDR,30); analogWrite(LEDG,200); delay(1000); analogWrite(LEDR,0); analogWrite(LEDG,0); delay(1000); analogWrite(LEDG,30); analogWrite(LEDR,200); delay(1000); }  正确的电路连线应该是:</description>
    </item>
    
    <item>
      <title>Tips on w5100</title>
      <link>http://purplepalmdash.github.io/2016/03/11/tips-on-w5100/</link>
      <pubDate>Fri, 11 Mar 2016 22:00:50 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/11/tips-on-w5100/</guid>
      <description>参考 参考如下:
http://www.bigiot.net/help/6.html
问题 上报的数据不准确.
原因是因为W5100抄版的淘宝版本有短路, 换成别的模拟口:
const int LM35 = 3;//LM35 pin byte mac[] = {0x00, 0x1D, 0x72, 0x82, 0x35, 0x9D}; EthernetClient client ; IPAddress ip(192, 168, 17, 177);//local IP //IPAddress server(121,42,180,30); char server[] = &amp;quot;www.bigiot.net&amp;quot;;  连线改为了3, 即A3口以后,上报数据成功.</description>
    </item>
    
    <item>
      <title>配置Qemu的VDE网络</title>
      <link>http://purplepalmdash.github.io/2016/03/10/pei-zhi-qemude-vdewang-luo/</link>
      <pubDate>Thu, 10 Mar 2016 14:18:43 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/10/pei-zhi-qemude-vdewang-luo/</guid>
      <description>为了快速验证镜像，配置出一个在本机上的tap0端口，虚拟机则通过VDE虚拟交换机连接到此端口后 ，DHCP获得IP地址，从而得到网络连接， 以下是步骤。
安装VDE ArchLinux下安装命令为sudo pacman -S vde2.
配置 贴出配置文件如下, 摘录自ArchLinux的Wiki. 值得注意的是，在Systemd的配置文件中，需要先把 tun驱动装载上，才能使得VDE启动成功。
配置qemu网络环境配置脚本:
$ vim /etc/systemd/scripts/qemu-network-env #!/bin/sh # QEMU/VDE network environment preparation script # The IP configuration for the tap device that will be used for # the virtual machine network: TAP_DEV=tap0 TAP_IP=10.33.34.254 TAP_MASK=24 TAP_NETWORK=10.33.34.0 # Host interface NIC=enp2s0 case &amp;quot;$1&amp;quot; in start) echo -n &amp;quot;Starting VDE network for QEMU: &amp;quot; # If you want tun kernel module to be loaded by script uncomment here modprobe tun 2&amp;gt;/dev/null # Wait for the module to be loaded while !</description>
    </item>
    
    <item>
      <title>Tips on V-USB and Arduino(5)</title>
      <link>http://purplepalmdash.github.io/2016/03/07/tips-on-v-usb-and-arduino-5/</link>
      <pubDate>Mon, 07 Mar 2016 21:52:47 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/07/tips-on-v-usb-and-arduino-5/</guid>
      <description>这一节将添加一个LED到已有的方案中. 这个LED将使用11口, 通过./set-led new来设 置状态.
连线 新加一个LED如图:
仅仅添加了一个LED + 220欧电阻.
代码修改 requests.h 添加新的request定义:
diff --git a/requests.h b/requests.h index 90275f5..b354a73 100644 --- a/requests.h +++ b/requests.h @@ -32,4 +32,6 @@ #define CUSTOM_RQ_BLINK 3 +#define CUSTOM_RQ_NEWLED 4 +  hid_custom_rq.h 添加新的管脚, 和对CUSTOM_RQ_NEWLED的处理代码:
diff --git a/hid_custom_rq.h b/hid_custom_rq.h index f5509e4..b5411cf 100644 --- a/hid_custom_rq.h +++ b/hid_custom_rq.h @@ -13,6 +13,7 @@ class hid_custom_rqDevice { hid_custom_rqDevice () { usbInit(); ledPin = 13; // pin 13 as default ledPin + newledPin = 11; // pin 11 as newledPin } void poll() { @@ -20,6 +21,7 @@ class hid_custom_rqDevice { } unsigned int ledPin; + unsigned int newledPin; }; hid_custom_rqDevice hid_custom_rq = hid_custom_rqDevice(); @@ -99,6 +101,14 @@ usbMsgLen_t usbFunctionSetup(uchar data[8]) usbMsgPtr = dataBuffer; /* tell the driver which data to return */ return 1; /* tell the driver to send 1 byte */ } + /* Added for newly added LED */ + else if(rq-&amp;gt;bRequest == CUSTOM_RQ_NEWLED){ + if(rq-&amp;gt;wValue.</description>
    </item>
    
    <item>
      <title>Tips on V-USB and Arduino(4)</title>
      <link>http://purplepalmdash.github.io/2016/03/07/tips-on-v-usb-and-arduino-4/</link>
      <pubDate>Mon, 07 Mar 2016 21:07:53 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/07/tips-on-v-usb-and-arduino-4/</guid>
      <description>前面把玩了一下ebuddy, 回去想了一下, 觉得基于v-usb和arduino来实现 一个自己的ebuddy也不是特别难的事情.
思路 还是参考:
V-USB examples for Arduino
以hid_custom_rq项目来改. 例子里已经实现了Arduino板载的LED亮/灭. 我们只需要在 原例上修改, 添加自定义命令和硬件即可.
代码 示例代码我做完后放到了github上, 可以通过以下命令获得:
$ git clone git@github.com:purplepalmdash/arduino-usb-led.git  主要修改 request.h 这个头文件被USB固件和主机所共享, 定义了USB的request number数字, request number 被用于主机和设备之间的通信.
添加:
#define CUSTOM_RQ_BLINK 3  hid_custom_rq.h 这个文件是Arduino板上固件程序中对各种来自主机的request信息的响应, 或者说, 消息 处理函数.
针对上面在requst.h文件中添加的消息, 我们需要在usbFunctionSetup()函数中添加 对应的消息处理代码, 为简单起见, 直接添加在函数的入口处就好.
 usbMsgLen_t usbFunctionSetup(uchar data[8]) { usbRequest_t *rq = (usbRequest_t *)((void *)data); + if(rq-&amp;gt;bRequest == CUSTOM_RQ_BLINK){ /* blink -- used for blink the LED */ + /* First set the led pin to high */ + unsigned char i = 6; + while(i &amp;gt;= 1) + { + digitalWrite(hid_custom_rq.</description>
    </item>
    
    <item>
      <title>把玩ebuddy(3)</title>
      <link>http://purplepalmdash.github.io/2016/03/05/ba-wan-ebuddy-3/</link>
      <pubDate>Sat, 05 Mar 2016 21:39:41 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/05/ba-wan-ebuddy-3/</guid>
      <description>早上起来刷微信, 觉得网页版微信的提示信息大可用ebuddy来响应. 说干就干,以下是解 决方案.
gnotifier 写作时,我的firefox版本是44.0.2, 需要安装gnotifier这个插件,从而把firefox的提示 消息转为系统提示信息, 下载地址在:
https://addons.mozilla.org/en-US/firefox/addon/gnotifier/
点击Add to Firefox即完成安装:
查看dbus消息 gnotifier将网页版微信的提示消息转为了系统提示消息, 那么只需要获取到系统消息总 线里的提示信息, 筛选出我们要的类型后, 给ebuddy发送相应的指令即可.
dbus-monitor工具可用于侦听dbus总线里的消息, 我们来运行一下,如下:
$ dbus-monitor --session interface=&#39;org.freedesktop.Notifications&#39;,member=&#39;Notify&#39; signal time=1457186062.137082 sender=org.freedesktop.DBus -&amp;gt; destination=:1.163 serial=2 path=/org/freedesktop/DBus; interface=org.freedesktop.DBus; member=NameAcquired string &amp;quot;:1.163&amp;quot; signal time=1457186062.137154 sender=org.freedesktop.DBus -&amp;gt; destination=:1.163 serial=4 path=/org/freedesktop/DBus; interface=org.freedesktop.DBus; member=NameLost string &amp;quot;:1.163&amp;quot; method call time=1457186083.405690 sender=:1.39 -&amp;gt; destination=:1.14 serial=220 path=/org/freedesktop/Notifications; interface=org.freedesktop.Notifications; member=Notify string &amp;quot;Firefox&amp;quot; uint32 0 string &amp;quot;/tmp/gnotifier-3Fh5Sa&amp;quot; string &amp;quot;yfp&amp;quot; string &amp;quot;[Sticker][Sticker][Sticker]&amp;quot; array [ ] array [ ] int32 -1 method call time=1457186086.</description>
    </item>
    
    <item>
      <title>把玩ebuddy(2)</title>
      <link>http://purplepalmdash.github.io/2016/03/03/ba-wan-ebuddy-2/</link>
      <pubDate>Thu, 03 Mar 2016 10:15:43 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/03/ba-wan-ebuddy-2/</guid>
      <description>ArchLinux配置过程 因为ArchLinux默认python版本为python3, 使用python2激活e-buddy人偶:
$ sudo pacman -S python2-pip $ sudo pip2 install pyusb $ git clone git@github.com:purplepalmdash/pybuddy-dx.git $ sudo python2 ~/Code/ebuddy/pybuddy-dx/pybuddyDX.py $ sudo netstat -anp | grep 8888 udp 0 0 127.0.0.1:8888 0.0.0.0:* 14635/python2  接下来就是往127.0.0.1:8888发送指令控制人偶的干活了。具体的指令可以见上一篇文章。
定期检查邮件控制人偶 先安装用于检查imap服务端状态的python模块:
$ sudo pip2 install imapclient  检查邮件的脚本如下, 该脚本检查163邮箱的IMAP服务器，如果有新邮件，人偶的头就会出现颜色渐 变，否则，则显示绿灯闪烁:
#!/usr/bin/env python import imaplib from imapclient import IMAPClient import time import subprocess import thread DEBUG = True HOSTNAME = &#39;imap.163.com&#39; USERNAME = &#39;XXXXXXXX&#39; PASSWORD = &#39;XXXXXXXX&#39; MAILBOX = &#39;Inbox&#39; newmails = 0 NEWMAIL_OFFSET = 0 # my unread messages never goes to zero, yours might MAIL_CHECK_FREQ = 60 # check mail every 60 seconds # Define a function for checking email def check_mail( threadName): while True: # Login into the imap server and check the numbers for the new mail.</description>
    </item>
    
    <item>
      <title>conntrack-tools usage</title>
      <link>http://purplepalmdash.github.io/2016/03/02/conntrack-tools-usage/</link>
      <pubDate>Wed, 02 Mar 2016 17:30:31 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/02/conntrack-tools-usage/</guid>
      <description> 参考 https://blogs.it.ox.ac.uk/networks/2014/09/30/linux-and-eduroam-nat-logging-perl-and-regular-expressions/
安装 ArchLinux下:
$ sudo pacman -S conntrack-tools  使用 记录新建/销毁连接数至文件:
$ sudo touch /var/log/conntrack-data.log $ sudo chmod 777 /var/log/conntrack-data.log $ sudo conntrack -E -eNEW,DESTROY --src-nat -otimestamp,extended --buffer-size=104857600 &amp;gt; /var/log/conntrack-data.log  </description>
    </item>
    
    <item>
      <title>e-buddy消息提醒服务设计思路(1)</title>
      <link>http://purplepalmdash.github.io/2016/03/01/e-buddyxiao-xi-ti-xing-fu-wu-she-ji-si-lu-1/</link>
      <pubDate>Tue, 01 Mar 2016 19:47:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/01/e-buddyxiao-xi-ti-xing-fu-wu-she-ji-si-lu-1/</guid>
      <description>设计目的 设计为一个系统通用的? 还是特定应用的?
监控 vs 告警 监控某项指标? 然后告警?
总线? DBUS 总线?
D-Bus For Python.</description>
    </item>
    
    <item>
      <title>把玩e-Buddy</title>
      <link>http://purplepalmdash.github.io/2016/03/01/ba-wan-e-buddy/</link>
      <pubDate>Tue, 01 Mar 2016 10:47:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/03/01/ba-wan-e-buddy/</guid>
      <description>状态 逆向工程得出的控制指令:
################ #Commands ################ # GLADNESS = 00 # FEAR = 01 # FIZZ = 02 # PLEASANTSURPRISE =03 # GRIEF = 04 # FURY = 05 # QUELL = 06 # REDHEAD = 07 # GREENHEAD = 08 # BLUEHEAD = 09 # YELLOWHEAD = 10 # BLAME = 11 # BLUEGREENHEAD = 12 # WHITEHEAD = 13 # HEART = 14 # WINGS = 15 # BODY = 16 # NOEFFECT = 17 # ONLINE = 18 # BUSY = 19 # DAZE = 20 # BACKSOON = 21 # AWAY = 22 # PHONE = 23 # LUNCH = 24 # OFFLINE = 25  功能列表:</description>
    </item>
    
    <item>
      <title>Tips on V-USB and Arduino(3)--Others</title>
      <link>http://purplepalmdash.github.io/2016/02/29/tips-on-v-usb-and-arduino-3-others/</link>
      <pubDate>Mon, 29 Feb 2016 11:50:09 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/29/tips-on-v-usb-and-arduino-3-others/</guid>
      <description>连线/电路 不需要对电路做任何修改，仅替换arduino里的程序即可。
代码 代码如下:
hid_custom_rq/ hid_data/ hid_mouse/  编译方法和上面一样。
值得注意的是, 这三个设备都是实现了HID设备，可以做到即插即用。
hid_data的用法：
读取/写入例子:
➜ commandline ./hidtool read 0x01 0x02 0x03 0x04 0x05 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ➜ commandline .</description>
    </item>
    
    <item>
      <title>Tips On V-USB And Arduino(2)--用v-usb控制LED</title>
      <link>http://purplepalmdash.github.io/2016/02/26/tips-on-v-usb-and-arduino-2/</link>
      <pubDate>Fri, 26 Feb 2016 17:07:20 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/26/tips-on-v-usb-and-arduino-2/</guid>
      <description>参考 参考链接如下(需翻墙):
V-USB examples for Arduino
连线图 链接里的连线图如下:
这个图我想了很久，对比上一节里键盘的连线图对比，发现D+/D-的连线刚好是反过来的。此外就是 D-上加了一个上拉电阻， 电阻值为1.5K， 这个其实没关系，在我们的例子中，用到2.2K，是因为 我们用的参考电压是5V的。
对上一章我们的连线图进行修改，得出的连线图如下:
电路图如下:
上一章用到的开关可以不用拆除。
值得注意的是，2.2K的上拉电阻接到了5V输入。
代码 下载Windows版0022 Arduino，编译原帖中pde文件并上传，修改 hardware/arduino/cores/arduino/wiring.c里的:
SIGNAL(TIMER0_OVF_vect) { ++++++ sei() ...... }  客户端程序编译:
➜ pwd ......../custom_class/examples/custom_class_demo/commandline ➜ make clean rm -f *.o set-led ➜ make  使用./set-led即可，编译前需要修改头文件:
$ vim set-led.c //#include &amp;quot;../firmware/requests.h&amp;quot; /* custom request numbers */ //#include &amp;quot;../firmware/usbconfig.h&amp;quot; /* device&#39;s VID/PID and names */ #include &amp;quot;../../../requests.h&amp;quot; /* custom request numbers */ #include &amp;quot;.</description>
    </item>
    
    <item>
      <title>Tips On V-USB And Arduino(1)- USB Keyboard</title>
      <link>http://purplepalmdash.github.io/2016/02/26/tips-on-v-usb-and-arduino-1/</link>
      <pubDate>Fri, 26 Feb 2016 16:55:10 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/26/tips-on-v-usb-and-arduino-1/</guid>
      <description>参考 主要参考了:
Arduino学习笔记A11 - Arduino模拟电脑键盘（基于AVR-USB的USB-HID设备）
电路图 安装Fritzing后，可以绘制出面包板连线图和电路图:
电路图:
注意事项:
电阻换成100欧也可以，原帖中是68欧电阻。
注意齐纳二极管的极性，带有色条的一端是负极。
代码 值得注意的配置如下:
#define USB_CFG_IOPORTNAME D USB输入输出引脚使用AVR单片机的PORTD，如果改成B就是使用PORTB #define USB_CFG_DMINUS_BIT 4 USB的D-接PORTD的第四位PD4，对应Arduino D4 #define USB_CFG_DPLUS_BIT 2 USB的D+接PORTD的第二位PD2，对应Arduino D2 #define USB_CFG_PULLUP_IOPORTNAME D USB上拉引脚使用AVR单片机的PORTD，如果改成B就是使用PORTB #define USB_CFG_PULLUP_BIT 5 USB的上拉电阻接PORTD的第五位PD5，对应Arduino D5  在Arduino1.0.5上编译/配置都没有问题，最好在0022～1.05的版本范围内进行实验。
首先通过USBasp线写入编译后的程序，而后换上我们添加的USB线缆后，点击按键，每次即可输出 hello world字符串。</description>
    </item>
    
    <item>
      <title>OpenVswitch bonding</title>
      <link>http://purplepalmdash.github.io/2016/02/25/openvswitch-bonding/</link>
      <pubDate>Thu, 25 Feb 2016 15:02:24 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/25/openvswitch-bonding/</guid>
      <description>Before Add 2 NICs, and show their ip infos via:
[root@localhost ~]# ifconfig eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 inet 10.47.58.207 netmask 255.255.255.0 broadcast 10.47.58.255 inet6 fe80::5054:ff:feae:f2be prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt; ether 52:54:00:ae:f2:be txqueuelen 1000 (Ethernet) RX packets 75 bytes 10924 (10.6 KiB) RX errors 0 dropped 5 overruns 0 frame 0 TX packets 15 bytes 1668 (1.6 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 eth1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 inet 10.</description>
    </item>
    
    <item>
      <title>Using python for checking imap mailbox unread message</title>
      <link>http://purplepalmdash.github.io/2016/02/23/using-python-for-checking-imap-mailbox-unread-message/</link>
      <pubDate>Tue, 23 Feb 2016 19:52:57 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/23/using-python-for-checking-imap-mailbox-unread-message/</guid>
      <description>Just paste some python scripts:
&amp;gt;&amp;gt;&amp;gt; import imaplib &amp;gt;&amp;gt;&amp;gt; obj=imaplib.IMAP4_SSL(&#39;imap.163.com&#39;,&#39;993&#39;) &amp;gt;&amp;gt;&amp;gt; obj.login(&#39;XXXXX&#39;,&#39;XXXXXXXX&#39;) (&#39;OK&#39;, [b&#39;LOGIN completed&#39;]) &amp;gt;&amp;gt;&amp;gt; obj.select() (&#39;OK&#39;, [b&#39;49&#39;]) &amp;gt;&amp;gt;&amp;gt; obj.search(None,&#39;Unseen&#39;) (&#39;OK&#39;, [b&#39;&#39;]) &amp;gt;&amp;gt;&amp;gt; len(obj.search(None, &#39;UnSeen&#39;)[1][0].split()) 0 &amp;gt;&amp;gt;&amp;gt; len(obj.search(None, &#39;UnSeen&#39;)[1][0].split()) 1 &amp;gt;&amp;gt;&amp;gt; len(obj.search(None, &#39;UnSeen&#39;)[1][0].split()) 2 &amp;gt;&amp;gt;&amp;gt; len(obj.search(None, &#39;UnSeen&#39;)[1][0].split()) 2 &amp;gt;&amp;gt;&amp;gt; len(obj.search(None, &#39;UnSeen&#39;)[1][0].split()) 1 &amp;gt;&amp;gt;&amp;gt;  Using the unread counts, you could easily interact with some other programs, for example shining LEDs.</description>
    </item>
    
    <item>
      <title>Playing e-Buddy</title>
      <link>http://purplepalmdash.github.io/2016/02/23/playing-e-buddy/</link>
      <pubDate>Tue, 23 Feb 2016 09:36:58 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/23/playing-e-buddy/</guid>
      <description>Python Library Clone the repository from google Code to github, then clone it to local:
This library could makes the ebuddy dance and sing.
$ git clone git@github.com:purplepalmdash/pybuddy-dx.git  Environment Since ArchLinux runs python3, we need to create a virtualenv for running python2.7
$ virtualenv2 venv2 --python=python2.7 ✗ . ~/venv2/bin/activate (venv2) ➜ _posts git:(master) ✗ python Python 2.7.11 (default, Dec 6 2015, 15:43:46) [GCC 5.2.0] on linux2 $ pip install pyusb  Modification Modify the source code, mainly change the following lines:</description>
    </item>
    
    <item>
      <title>Mutt Configuration On DO</title>
      <link>http://purplepalmdash.github.io/2016/02/19/mutt-configuration-on-do/</link>
      <pubDate>Fri, 19 Feb 2016 07:11:24 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/19/mutt-configuration-on-do/</guid>
      <description>For sending back the daily fetched items into China Great LAN, I have to setup the smtp configuration for mutt on DO&amp;rsquo;s ubuntu machine. Following are the steps.
Install the mutt and msmtp:
$ sudo apt-get install -y mutt msmtp  Edit following files:
$ cat ~/.muttrc set mbox_type=Maildir set folder=$HOME/.mail set spoolfile=~/.mail set header_cache=~/.mail/.hcache set sendmail=&amp;quot;/usr/bin/msmtp&amp;quot; set use_from=yes set realname=&amp;quot;YourRealName&amp;quot; set from=YourUserNameHere@163.com set envelope_from=yes  msmtp rc config file:</description>
    </item>
    
    <item>
      <title>USB Cute Things</title>
      <link>http://purplepalmdash.github.io/2016/02/18/usb-cute-things/</link>
      <pubDate>Thu, 18 Feb 2016 18:04:42 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/18/usb-cute-things/</guid>
      <description>Funny Things on Taobao:
USB新奇特 带HUB HUB USB邮件通知提醒器 USB Webmail Notifier https://item.taobao.com/item.htm?spm=a230r.1.14.7.1r483a&amp;amp;id=19165960441&amp;amp;ns=1&amp;amp;abbucket=5#detail Dream Cheeky USB Friends Alert 邮件消息提醒器 还用老旧的邮箱？来，一起怀个旧吧。这个小东西能帮你提醒邮件状态，支持Facebook、Twitter、 MSN的消息呢，哦，差点忘记了，只有MSN你偶尔可以玩一下。 https://item.taobao.com/item.htm?spm=a230r.1.14.13.1r483a&amp;amp;id=523240173722&amp;amp;ns=1&amp;amp;abbucket=5#detail i-buddy: https://item.taobao.com/item.htm?spm=a230r.1.14.1.aWRsP6&amp;amp;id=5177828698&amp;amp;ns=1&amp;amp;abbucket=5#detail https://2.taobao.com/item.htm?id=521593051559&amp;amp;spm=a230r.1.14.12.CcgnsG&amp;amp;ns=1&amp;amp;abbucket=5#detail USB Webmail Notifer USB邮件通知器 USB Webmail Notifer USB邮件通知器 https://item.taobao.com/item.htm?spm=a230r.1.14.36.BVZqTi&amp;amp;id=2719139321&amp;amp;ns=1&amp;amp;abbucket=5#detail HX USB温度计TEMPer 机房/库房 温度计 环境监测 防水 邮件提醒 https://detail.tmall.com/item.htm?spm=a230r.1.14.4.BVZqTi&amp;amp;id=40327431222&amp;amp;cm_id=140105335569ed55e27b&amp;amp;abbucket=5 taobao ebuddy http://www.computersolutions.cn/blog/category/tao-bao/ AIDA64 On Digital Frame http://bbs.yleee.com.cn/thread-30787-1-1.html  </description>
    </item>
    
    <item>
      <title>Hacking SteelSeries Engine 3 USB Mouse Under Linux(2)</title>
      <link>http://purplepalmdash.github.io/2016/02/15/hacking-steelseries-engine-3-usb-mouse-under-linux-2/</link>
      <pubDate>Mon, 15 Feb 2016 18:11:54 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/15/hacking-steelseries-engine-3-usb-mouse-under-linux-2/</guid>
      <description>Interact with Mouse Just some tips on newly-discovered items.
The needed python modules should be get and compiled as following:
https://github.com/andrepl/rivalctl
# git clone https://github.com/andrepl/rivalctl.git # sudo python setup.py install  Be sure to make changes to the correct HID ID.
Ipython scripts:
# sudo ipython Python 2.7.6 (default, Jun 22 2015, 17:58:13) Type &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information. IPython 1.2.1 -- An enhanced Interactive Python. ? -&amp;gt; Introduction and overview of IPython&#39;s features.</description>
    </item>
    
    <item>
      <title>Reading In 2015</title>
      <link>http://purplepalmdash.github.io/2016/02/06/reading-in-2015/</link>
      <pubDate>Sat, 06 Feb 2016 21:55:47 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/06/reading-in-2015/</guid>
      <description>What I have read in pasted 2015.
102547607 流冰之恋 (日)渡边淳一著 I313.4/1852 2016-01-25 103994448 苏丝黄的世界 (英)理查德·梅森(Richard Mason)著 I561.4/2374 2016-01-25 102679289 睡美人 (日)川端康成著 I313.4/1909 2016-01-25 103282447 河童 (日)芥川龙之介著 I313.4/2129 2016-01-25 102542457 晚年 (日)太宰治著 I313.4/1787 2016-01-25 102542553 维庸之妻 (日)太宰治著 I313.4/1786 2016-01-25 103721231 西线无战事 (德)埃里希·玛丽亚·雷马克(E. M. Remarque)著 I516.44/L23-5/[3] 2016-01-25 103818078 失乐园：名著插图本 (英)约翰·弥尔顿(John Milton)著 I561/191 2016-01-25 100884493 近代中国人的生活掠影 (英)约翰·麦高恩著 I561/133 2016-01-25 103545690 天国之秋 (美)裴士锋(Stephen R. Platt)著 K254/63 2016-01-25 101125097 从清华到联大 朱自清著 K825.6/1972 2016-01-25 102500618 我的人生故事：周有光著作精选 周有光[著] K825.</description>
    </item>
    
    <item>
      <title>Hacking SteelSeries Engine 3 USB Mouse Under Linux</title>
      <link>http://purplepalmdash.github.io/2016/02/03/hacking-steelseries-engine-3-usb-mouse-under-linux/</link>
      <pubDate>Wed, 03 Feb 2016 18:36:19 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/02/03/hacking-steelseries-engine-3-usb-mouse-under-linux/</guid>
      <description>Background Since SteelSeries Engine 3 USB mouse have only driver for Windows/MAC, I want to enable the changing color under Linux, following is the hacking steps.
Catching Packets Using Wireshark for capturing the USB Packages of mouse, at the meantime, use another mouse for clicking the setting color area, to capture the setting color events, After this we sent the captured packets to Linux machine for analysing.
Setting Color With the filter and continue for anlysing, found each setting step includes 3 steps.</description>
    </item>
    
    <item>
      <title>virtio-gpu working tips</title>
      <link>http://purplepalmdash.github.io/2016/01/31/virtio-gpu-working-tips/</link>
      <pubDate>Sun, 31 Jan 2016 11:49:13 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/01/31/virtio-gpu-working-tips/</guid>
      <description>System Install Fedora 23, select fedora server and install the system, then using the lastest development kernel via:
$ curl -s https://repos.fedorapeople.org/repos/thl/kernel-vanilla.repo | sudo tee /etc/yum.repos.d/kernel-vanilla.repo $ sudo dnf --enablerepo=kernel-vanilla-mainline update  Checking the running kernel via:
$ uname -r 4.5.0-0.rc1.git0.1.vanilla.knurd.1.fc23.x86_64  Running the system which have kernel version newer than 4.4 is the basis for enable the virt-io.
Install packages $ sudo dnf install -y gcc zlib-devel glib2-devel pixman-devel libfdt-devel \ lzo-devel snappy-devel bzip2-devel libseccomp-devel gtk2-devel gtk3-devel \ gnutls-devel vte-devel SDL-devel librdmacm-devel libuuid-devel \ libcap-ng-devel libcurl-devel ceph-devel libssh2-devel libaio-devel \ glusterfs-devel glusterfs-api-devel numactl-devel gperftools-devel \ texinfo libiscsi-devel spice-server-devel libusb-devel usbredir-devel \ libnfs-devel libcap-devel libattr-devel  virglrenderer coprs have the repository for this:</description>
    </item>
    
    <item>
      <title>Read Digest On KVM</title>
      <link>http://purplepalmdash.github.io/2016/01/26/read-digest-on-kvm/</link>
      <pubDate>Tue, 26 Jan 2016 09:12:26 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/01/26/read-digest-on-kvm/</guid>
      <description>Some Words VMM: (Virtual Machine Monitor)
VMX: (Virtual Machine eXtensions): instructions on processors with x86 virtualization.
Virtualization software: is most often used to emulate a complete computer system in order to allow a guest operating system to be run, for example allowing Linux to run as a guest on top of a PC that is natively running a Microsoft Windows operating system (or the inverse, running Windows as a guest on Linux).</description>
    </item>
    
    <item>
      <title>Tips On Setup Mesos Cluster</title>
      <link>http://purplepalmdash.github.io/2016/01/18/tips-on-setup-mesos-cluster/</link>
      <pubDate>Mon, 18 Jan 2016 10:01:17 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/01/18/tips-on-setup-mesos-cluster/</guid>
      <description>Prerequisition Install on Ubuntu14.04, so first we update to the latest version via:
$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y  Prepare the repository of mesos via:
# sudo apt-key adv --keyserver keyserver.ubuntu.com --recv E56151BF # DISTRO=$(lsb_release -is | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;) # CODENAME=$(lsb_release -cs) # echo &amp;quot;deb http://repos.mesosphere.io/${DISTRO} ${CODENAME} main&amp;quot; | sudo tee /etc/apt/sources.list.d/mesosphere.list  mesos depends on java8, so we should install java8 on ubuntu machine via following command:</description>
    </item>
    
    <item>
      <title>Linux Tips(4)</title>
      <link>http://purplepalmdash.github.io/2016/01/15/linux-tips-4/</link>
      <pubDate>Fri, 15 Jan 2016 18:37:03 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/01/15/linux-tips-4/</guid>
      <description>1. Run ansible commands Run commands in all hosts:
# ansible all -i inventory.ini -m command -u root --args &amp;quot;uptime&amp;quot;  2. mesos introduction http://www.infoq.com/cn/articles/analyse-mesos-part-02
3. Limit ansible run hosts # ansible-playbook -i inventory_mesos_cluster changehostname.yml -u root -k -vvvv --list-hosts playbook: changehostname.yml play #1 (master1): host count=1 10.47.58.31 # ansible-playbook -i inventory_mesos_cluster changehostname.yml -u root -k -vvvv --limit=&amp;quot;master1&amp;quot;  4. Configure the dhcp configuration of libvirtd First edit the net configuration:</description>
    </item>
    
    <item>
      <title>Vlan Experiment</title>
      <link>http://purplepalmdash.github.io/2016/01/15/vlan-experiment/</link>
      <pubDate>Fri, 15 Jan 2016 09:16:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/01/15/vlan-experiment/</guid>
      <description>Recently I am busy with configurating the LXC networking in Cloudstack, so following is how I understanding the vlan experiment on how to understand the public/private/management networking in CloudStack.
Prerequisite Prepare 2 virtual machine of CentOS6.7, each connected to a seperated networking.
Machine 1, dhcp, got 10.47.58.203. Named vlan1.
Machine 2, dhcp, got 10.47.58.214. Named vlan2.
Install Software For easily configure 802.1Q vlan tagging networking in CentOS7, install following packages.</description>
    </item>
    
    <item>
      <title>Tips on Veewee and Vagrant</title>
      <link>http://purplepalmdash.github.io/2016/01/03/tips-on-veewee-and-vagrant/</link>
      <pubDate>Sun, 03 Jan 2016 15:56:09 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2016/01/03/tips-on-veewee-and-vagrant/</guid>
      <description>Install Veewee First you should get rvm avaiable, then use rvm for install ruby-2.2.1:
Note: you should import gpg signature via commandline.
$ proxychains4 curl -k --insecure -L https://get.rvm.io | bash -s stable --ruby $ proxychains4 rvm install ruby-2.2.1  Install the veewee via:
$ proxychains4 gem install bundler $ git clone https://github.com/jedi4ever/veewee.git $ cd veewee $ proxychains4 gem install i18n -v &#39;0.7.0&#39; $ proxychains4 bundle install  After installation createing an alias for quickly refers to veewee:</description>
    </item>
    
    <item>
      <title>rtl-sdr steps</title>
      <link>http://purplepalmdash.github.io/2015/12/30/rtl-sdr-steps/</link>
      <pubDate>Wed, 30 Dec 2015 16:52:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/30/rtl-sdr-steps/</guid>
      <description>Installing and configurating steps:
$ git clone https://github.com/balint256/gr-baz $ sudo apt-get install libboost-all-dev gr-osmosdr gnuradio-dev liblog4cpp5-dev $ cd gr-baz $ mkdir build $ cd build $ cmake .. $ make &amp;amp;&amp;amp; sudo make install  Install rtl-sdr:
$ git clone git://git.osmocom.org/rtl-sdr.git $ cd rtl-sdr $ mkdir build $ cd build/ $ cmake ../ -DINSTALL_UDEV_RULES=ON $ sudo make install $ sudo ldconfig  Now you could use sudo rtl_eeprom for probing the rtl equipments.</description>
    </item>
    
    <item>
      <title>Integrate FreeNAS</title>
      <link>http://purplepalmdash.github.io/2015/12/30/integrate-freenas/</link>
      <pubDate>Wed, 30 Dec 2015 09:56:50 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/30/integrate-freenas/</guid>
      <description>Use Virtualbox for integrating FreeNAS.
Add Disks Add a new SCSI controller and two disks:
Then in FreeNAS, import this new disks via:
Volume Manager Add volume of added 2 disks:
Continue:
After added:
ISCSI Sharing Create new sharing:
Add portal:
Add Initiator:
Add Target:
Add Extent:
Extend options:
Associate:
Enable the iscsi service:
Integration Integaration with cloudstack would be looked like following:</description>
    </item>
    
    <item>
      <title>elastistor data</title>
      <link>http://purplepalmdash.github.io/2015/12/28/elastistor-data/</link>
      <pubDate>Mon, 28 Dec 2015 22:01:03 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/28/elastistor-data/</guid>
      <description>Using NFS for testing.
dash@agent:/sdb4$ echo &amp;quot;iops 5&amp;quot; iops 5 dash@agent:/sdb4$ time cp Kinetis\ SDK\ 1.3.0\ Mainline\ -\ Windows.exe /mnt/ real 1m1.908s user 0m0.002s sys 0m0.156s dash@agent:/sdb4$ time cp Kinetis\ SDK\ 1.3.0\ Mainline\ -\ Windows.exe /mnt/2.exe real 0m59.375s user 0m0.001s sys 0m0.154s dash@agent:/sdb4$ rm -f /mnt/ 2.exe Kinetis SDK 1.3.0 Mainline - Windows.exe dash@agent:/sdb4$ rm -f /mnt/* dash@agent:/sdb4$ echo &amp;quot;iops 50&amp;quot; iops 50 dash@agent:/sdb4$ time cp Kinetis\ SDK\ 1.3.0\ Mainline\ -\ Windows.</description>
    </item>
    
    <item>
      <title>Re-Scan XenServer NICs</title>
      <link>http://purplepalmdash.github.io/2015/12/28/re-scan-xenserver-nics/</link>
      <pubDate>Mon, 28 Dec 2015 15:25:45 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/28/re-scan-xenserver-nics/</guid>
      <description>Since OpenXenManager could not scan the NICs, we need to scan the newly added NICs under terminal.
# xe pif-list # xe host-list # xe pif-scan host-uuid=a7991728-a86f-4a9c-a163-9b819e444488  Via xe host-list we could get the host-uuid, then pif-scan it via this host-uuid.
Now you could see the newly added NICs in openxenmanager:</description>
    </item>
    
    <item>
      <title>CloudMonkey Issue</title>
      <link>http://purplepalmdash.github.io/2015/12/22/cloudmonkey-issue/</link>
      <pubDate>Tue, 22 Dec 2015 21:18:21 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/22/cloudmonkey-issue/</guid>
      <description>Could not start cloudmonkey After installing cloudstack, cloudmonkey couldnot be used, the reason is listed as following:
% cloudmonkey Traceback (most recent call last): File &amp;quot;/usr/local/bin/cloudmonkey&amp;quot;, line 5, in &amp;lt;module&amp;gt; from pkg_resources import load_entry_point File &amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&amp;quot;, line 2603, in &amp;lt;module&amp;gt; working_set.require(__requires__) File &amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&amp;quot;, line 666, in require needed = self.resolve(parse_requirements(requirements)) File &amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&amp;quot;, line 565, in resolve raise DistributionNotFound(req) # XXX put more info here pkg_resources.DistributionNotFound: requests  The solution is via:</description>
    </item>
    
    <item>
      <title>NetScaler VPX初始化配置</title>
      <link>http://purplepalmdash.github.io/2015/12/17/netscaler-vpxchu-shi-hua-pei-zhi/</link>
      <pubDate>Thu, 17 Dec 2015 14:08:35 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/17/netscaler-vpxchu-shi-hua-pei-zhi/</guid>
      <description>初始化配置 启动虚拟机以后，通过nsroot/nsroot登录入VPX.
清除所有配置:
如下，做IP配置:
初始化配置完毕以后，即可在web后台进行配置。
License 申请license的时候注意，选择的MAC地址不能有任何的:符号， 例如52:54:00:这种就不能通过成 功。 在Netscaler上可以通过以下命令查看host id:
root@ns# lmutil lmhostid lmutil - Copyright (c) 1989-2013 Flexera Software LLC. All Rights Reserved. The FlexNet host ID of this machine is &amp;quot;xxxxxxx&amp;quot;  查看激活后的license情形:
&amp;gt; sh license License status: Web Logging: YES Surge Protection: YES Load Balancing: YES Content Switching: YES ....  参考:
http://sam.yeung.blog.163.com/blog/static/222663482013811102013782/</description>
    </item>
    
    <item>
      <title>用Graphite呈现广州空气质量(4)</title>
      <link>http://purplepalmdash.github.io/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-4/</link>
      <pubDate>Wed, 16 Dec 2015 16:29:43 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-4/</guid>
      <description>Tessera 直接导入Graphite中定义好的dashboard即可，值得注意的是，如何创建模板，或者说，如何创建一 个template用于渲染我们导入的各个数据？
导入的时候出现了如下的问题:
可见tessera中对数据的定制化是必须的。
Grafana 安装及配置为自动启动:
$ wget https://grafanarel.s3.amazonaws.com/builds/grafana_2.6.0_amd64.deb $ sudo dpkg -i grafana_2.6.0_amd64.deb $ sudo service grafana-server start $ sudo update-rc.d grafana-server defaults 95 10  默认用户名/密码为 admin/admin.
现在添加graphite数据源，例如：</description>
    </item>
    
    <item>
      <title>用Graphite呈现广州空气质量(3)</title>
      <link>http://purplepalmdash.github.io/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-3/</link>
      <pubDate>Wed, 16 Dec 2015 14:18:25 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-3/</guid>
      <description>当前节点无数据 我们的脚本加入crontab运行后，最开始是可以得到数据的，后面两小时它挂了，查原因，有以下的 报错信息:
# /home/adminubuntu/GuangzhouPM25.py Traceback (most recent call last): File &amp;quot;/home/adminubuntu/GuangzhouPM25.py&amp;quot;, line 112, in &amp;lt;module&amp;gt; airdata = get_air_data(positionsets) File &amp;quot;/home/adminubuntu/GuangzhouPM25.py&amp;quot;, line 80, in get_air_data PM25 = int(pattern.match(soup.find(&#39;td&#39;,{&#39;id&#39;: &#39;pmtow&#39;}).contents[0]).group()) ValueError: invalid literal for int() with base 10: &#39;&#39;  此时selenium控制的浏览器停在以下图例:
可以看到，如果当前节点的数据为--， 则我们的python脚本运行会出现问题。因而我们在代码中 要加入少量修改。
错误处理 以下的代码更改添加了错误处理，如果该监测点的数值为空，则不提交任何数据:
@@ -66,9 +66,9 @@ def get_air_data(positionsets): hourdata = {} # Calling selenium, need linux X browser = Firefox() - # Added 10 seconds for waiting page for loading.</description>
    </item>
    
    <item>
      <title>用Graphite呈现广州空气质量(2)</title>
      <link>http://purplepalmdash.github.io/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-2/</link>
      <pubDate>Wed, 16 Dec 2015 12:11:21 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-2/</guid>
      <description>更改后的脚本 以下脚本可以用于取回网页上的数据，并将其写入到Graphite远程服务器。
#!/usr/bin/env python #-*-coding:utf-8 -*- ################################################################################## # For fetching back the Air Quality Data and write it into Graphite on local server # Graphite Data Definition, this is the general definition among every city # air.city.citypoint.so2 # air.city.citypoint.no2 # air.city.citypoint.pm10 # air.city.citypoint.co # air.city.citypoint.o38h # air.city.citypoint.pm25 # air.city.citypoint.aqi # air.city.citypoint.firstp # air.city.citypoint.overp # When running this script in crontab, be sure to give it a display # Example, execute this script every hour at xx:05 # 5 */1 * * * export DISPLAY=:0;/home/adminubuntu/GuangzhouPM25.</description>
    </item>
    
    <item>
      <title>用Graphite呈现广州空气质量</title>
      <link>http://purplepalmdash.github.io/2015/12/15/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang/</link>
      <pubDate>Tue, 15 Dec 2015 10:05:39 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/15/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang/</guid>
      <description>数据源准备 数据源地址在:
http://210.72.1.216:8080/gzaqi_new/RealTimeDate.html
但是这个地址取回数据比较困难。而在http://www.gzepb.gov.cn/ 右侧的栏里可以通过点击，打开某个监测点当前的空气质量指数,例如海珠湖的数据位于:
http://210.72.1.216:8080/gzaqi_new/DataList2.html?EPNAME=%E6%B5%B7%E7%8F%A0%E6%B9%96
Beautiful Soup Beautiful Soup可以被理解为网页爬虫，用于爬取某个页面并取回所需信息。在Ubuntu/Debian系统 中，安装命令如下。同时为了使用对XML解析速度更快的lxml解析器，我们安装python-lxml:
$ sudo apt-get install -y python-bs4 $ sudo apt-get install -y python-lxml  现在我们打开某个终端，开始用命令行交互的方式，取回海珠湖监测点的数据:
首先，引入所需的库：
# python Python 2.7.6 (default, Jun 22 2015, 17:58:13) [GCC 4.8.2] on linux2 Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information. &amp;gt;&amp;gt;&amp;gt; from bs4 import BeautifulSoup &amp;gt;&amp;gt;&amp;gt; import urllib2 &amp;gt;&amp;gt;&amp;gt; response = urllib2.urlopen(&#39;http://210.72.1.216:8080/gzaqi_new/DataList2.html?EPNAME=%E6%B5%B7%E7%8F%A0%E6%B9%96&#39;) &amp;gt;&amp;gt;&amp;gt; print response.info() Content-Length: 10216 Content-Type: text/html Last-Modified: Wed, 13 May 2015 08:12:28 GMT Accept-Ranges: bytes ETag: &amp;quot;b680828d548dd01:da2&amp;quot; Server: Microsoft-IIS/6.</description>
    </item>
    
    <item>
      <title>把玩TL-SG108E</title>
      <link>http://purplepalmdash.github.io/2015/12/12/ba-wan-tl-sg108e/</link>
      <pubDate>Sat, 12 Dec 2015 11:02:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/12/ba-wan-tl-sg108e/</guid>
      <description>前段时间黑色星期五在美国亚马逊败了个TP-LINK TL-SG108E, 直邮到手人民币200不到. 本意是拿来以后在家里跑虚拟机时,虚拟机可以在不同的VLAN里作用,譬如单独的存储/管 理网络等.
配置 更改IP地址, 随意指定原有局域网内的某IP地址给交换机即可. 随后所有的节点均可添加 在交换机上.
VLAN VLAN可以实现的功能, 位于不同交换机上的机器可以位于同一局域网内.
默认在交换机上打开的VLAN是基于端口的VLAN(Port Based VLAN), 我们这里配置的是 802.1Q VLAN, 打开以后,基于端口的VLAN将自动被禁止.
默认的配置页面如下:
Tag 与 Untagged方式的差别:
端口接收数据时：
如果端口是tagged方式，当数据包本身不包含VLAN的话，输入的数据包就加上该缺省 vlan；如果数据包本身已经包含了VLAN，那么就不再添加。
如果是untagged方式，输入的数据包全部都要加上该缺省vlan。不管输入的数据包是否 已经有VLAN标记。
端口发送数据时：
如果端口是tagged方式，如果端口缺省VLAN等于发送的数据包所含的VLAN，那么就会将 VLAN标记从发送的数据包中去掉；如果不相等，则数据包将带着VLAN发送出去，实现VLAN 的透传。
如果是untagged方式，则不管端口缺省VLAN为多少，是否等于要输出的数据包的VLAN， 都会将VLAN ID从数据包中去掉。
配置了vlan 22和33, 分别在7口和8口上.
OVS 后的VLAN TAG 在7口上接入一台Ubuntu服务器,配置为open-vswitch桥接, 虚拟机通过以下配置, 制定 VLAN ID为22.
# virsh edit Gentoo &amp;lt;interface type=&#39;bridge&#39;&amp;gt; &amp;lt;mac address=&#39;52:54:00:fd:03:e9&#39;/&amp;gt; &amp;lt;source bridge=&#39;ovsbr0&#39;/&amp;gt; &amp;lt;vlan trunk=&#39;yes&#39;&amp;gt; &amp;lt;tag id=&#39;22&#39; nativeMode=&#39;untagged&#39;/&amp;gt; &amp;lt;/vlan&amp;gt; &amp;lt;virtualport type=&#39;openvswitch&#39;&amp;gt; &amp;lt;parameters interfaceid=&#39;fb3e7f34-6fcd-41dc-8fed-c3ffe0d54b18&#39;/&amp;gt; &amp;lt;/virtualport&amp;gt; &amp;lt;model type=&#39;virtio&#39;/&amp;gt; &amp;lt;address type=&#39;pci&#39; domain=&#39;0x0000&#39; bus=&#39;0x00&#39; slot=&#39;0x03&#39; function=&#39;0x0&#39;/&amp;gt; &amp;lt;/interface&amp;gt; # virsh start Gentoo  这样启动后的虚拟机Gentoo就处于VLAN ID 22隔离的网络里.</description>
    </item>
    
    <item>
      <title>OpenVswitch On Ubuntu14.04</title>
      <link>http://purplepalmdash.github.io/2015/12/10/openvswitch-on-ubuntu14-dot-04/</link>
      <pubDate>Thu, 10 Dec 2015 15:33:24 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/10/openvswitch-on-ubuntu14-dot-04/</guid>
      <description>Installation Install openvswitch via:
# apt-get update # apt-get install -y openvswitch-common openvswitch-switch  List the installed module via:
# lsmod | grep open openvswitch 66901 0 gre 13808 1 openvswitch vxlan 37619 1 openvswitch libcrc32c 12644 1 openvswitch # ovs-vsctl --version ovs-vsctl (Open vSwitch) 2.0.2 Compiled May 13 2015 18:49:53  Configuration Edit the configuration of the networking:
$ sudo vim /etc/network/interfaces ########################################### ## By using openVswitch, we enabled the following ########################################### auto ovsbr0 iface ovsbr0 inet static address 192.</description>
    </item>
    
    <item>
      <title>tessera how-to</title>
      <link>http://purplepalmdash.github.io/2015/12/08/tessera-how-to/</link>
      <pubDate>Tue, 08 Dec 2015 10:26:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/08/tessera-how-to/</guid>
      <description>Installation Installation steps are listed as following:
# apt-get install -y python-virtualenv # git clone git@github.com:urbanairship/tessera.git # cd tessera # virtualenv . # . bin/activate # cd tessera-server/ # pip install -r requirements.txt # pip install -r dev-requirements.txt # cd ../tessera-frontend # apt-get install -y npm # npm install -g grunt-cli # npm install # ln -s /usr/bin/nodejs /usr/bin/node # grunt # which inv /root/Code/second/tessera/bin/inv  Start Start the service via:</description>
    </item>
    
    <item>
      <title>Rundeck Tips</title>
      <link>http://purplepalmdash.github.io/2015/12/07/rundeck-tips/</link>
      <pubDate>Mon, 07 Dec 2015 11:58:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/07/rundeck-tips/</guid>
      <description>Installation Install the rundeck under CentOS 7:
# rpm -Uvh http://repo.rundeck.org/latest.rpm # yum install rundeck  Configuration Configure some properties:
# vim /etc/rundeck/framework.properties framework.server.name = 192.168.0.79 framework.server.hostname = 192.168.0.79 framework.server.port = 4440 framework.server.url = http://192.168.0.79:4440 # vim /etc/rundeck/rundeck-config.properties grails.serverURL=http://192.168.0.79:4440  Start the service:
# service rundeckd start Starting rundeckd (via systemctl): [ OK ]  You could check the status via # systemctl status rundeckd.
Now visit the server via http://192.</description>
    </item>
    
    <item>
      <title>Bluetooth NAP How-To</title>
      <link>http://purplepalmdash.github.io/2015/12/05/bluetooth-nap-how-to/</link>
      <pubDate>Sat, 05 Dec 2015 20:03:41 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/05/bluetooth-nap-how-to/</guid>
      <description>Notice Notice, this way is only for Bluez-5!!!!
Refers to:
https://wiki.gentoo.org/wiki/Bluetooth_Network_Aggregation_Point
https://wiki.gentoo.org/wiki/Bluetooth
http://blog.fraggod.net/2015/03/28/bluetooth-pan-network-setup-with-bluez-5x.html
Bluez-4 could be much more easier via pand. For example, in ubuntu you could setup the bluetooth PAN via:
http://blog.sumostyle.net/2009/11/ubuntu-tethering-via-bluetooth-pan/
RF-KILL Use rfkill for unblock the soft-blocked bluetooth adapter:
[root@xxxx dash]# rfkill list bluetooth 2: hp-bluetooth: Bluetooth Soft blocked: yes Hard blocked: no 5: hci1: Bluetooth Soft blocked: yes Hard blocked: no [root@xxxx dash]# rfkill unblock bluetooth # rfkill list bluetooth 2: hp-bluetooth: Bluetooth Soft blocked: no Hard blocked: no 5: hci1: Bluetooth Soft blocked: no Hard blocked: no  bluetoothctl Use bluetoothctl for configurating the bluetooth adapter:</description>
    </item>
    
    <item>
      <title>On Bluetooth PAN</title>
      <link>http://purplepalmdash.github.io/2015/12/04/on-bluetooth-pan/</link>
      <pubDate>Fri, 04 Dec 2015 10:51:10 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/04/on-bluetooth-pan/</guid>
      <description>AIM For sharing the internet connection from working PC to Surface Pro.
Setup And Configuration SurfacePro Install bluez/bluez-libs/bluez-utils:
$ sudo pacman -S bluez bluez-utils bluez-libs  Modprobe the bnep kernel module:
[root@surfacepro ~]# modprobe bnep [root@surfacepro ~]# lsmod | grep bnep bnep 20480 0 bluetooth 450560 6 bnep,btbcm,btrtl,btusb,btintel [root@surfacepro ~]# modprobe btusb  Start the bluetooth.service via:
$ sudo systemctl start bluetooth.service  bluetoothctl will give access for configurating bluetooth equipment, following steps shows how to connect to a bluetooth keyboard:</description>
    </item>
    
    <item>
      <title>Customize SurfacePro Kernel</title>
      <link>http://purplepalmdash.github.io/2015/12/03/customize-surfacepro-kernel/</link>
      <pubDate>Thu, 03 Dec 2015 17:44:32 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/12/03/customize-surfacepro-kernel/</guid>
      <description>Preparation Get the kernel and patch file:
To be Written  Build Prepare for compiliation:
$ make mrproper  Get the current running configuration:
$ zcat /proc/config.gz &amp;gt; .config $ make menuconfig $ make -j3 $ make modules_install  Install Kernel, you newly generated kernel will be named as vmlinuz-4.1.13-surfacepro3(Though surfacepro, surfacepro3 will remains its name) :
$ sudo cp -v arch/x86/boot/bzImage /boot/vmlinuz-4.1.13-surfacepro3  Generate the initial RAM disk:</description>
    </item>
    
    <item>
      <title>Awesome&#39;s Battery Indicator</title>
      <link>http://purplepalmdash.github.io/2015/11/25/awesomes-battery-indicator/</link>
      <pubDate>Wed, 25 Nov 2015 12:18:29 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/11/25/awesomes-battery-indicator/</guid>
      <description>Background I installed ArchLinux+Awesome On my SurfacePro, while the charger of Surface Pro is not so tight to the pad. Thus I have to use a battery indicator in Awesome.
Software Refers to:
http://www.everythingisvoid.com/uncategorized/simple-battery-status-indicator-awesome-window-manager
Install steps on ArchLinux:
$ sudo pacman -S luarocks5.1 gobject-introspection acpi $ sudo luarocks-5.1 install battery_status  You could manually run show_battery_status or add it into your own rc.lua file:
$ vim ~/.config/awesome/rc.lua ----..................... autorunApps = { --.</description>
    </item>
    
    <item>
      <title>Tips On ArchLinux On SSD For SurfacePro</title>
      <link>http://purplepalmdash.github.io/2015/11/18/tips-on-archlinux-on-ssd-for-surfacepro/</link>
      <pubDate>Wed, 18 Nov 2015 16:59:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/11/18/tips-on-archlinux-on-ssd-for-surfacepro/</guid>
      <description>Hardware Surface Pro, KingShare 128G SSD(USB).
Picture will be updated after successfully installed.
Virtualbox Way Make a vmdk file which actually points to the USB Disk:
$ sudo VBoxManage internalcommands createrawvmdk -filename ./rawusb1.vmdk -rawdisk \ /dev/disk/by-id/usb-KINGSHAR_KS-CUTS25W_123456789010-0:0 $ sudo chown -R YourName rawusb1.vmdk  Now using this rawdisk for starting the VirtualBox based machine.
Installation The system installation is refers to following links:
https://wiki.archlinux.org/index.php/Microsoft_Surface_Pro_3
https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_a_USB_key
Updated Configuration Finally I installed the surface pro by using a usb dongle which burned the archlinux installation iso, put it into the surface pro and startup the machine pressing power key and volume down key, it will goes into the installtion steps.</description>
    </item>
    
    <item>
      <title>Spice Client</title>
      <link>http://purplepalmdash.github.io/2015/11/16/spice-client/</link>
      <pubDate>Mon, 16 Nov 2015 21:20:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/11/16/spice-client/</guid>
      <description>Image Conversion Convert the vdi files into qcow2 file:
$ qemu-img convert -f vdi -O qcow2 Windows81.vdi Windows81.qcow2  Then continue to create the virtual machine via importing the img.
Spice Client Using virtviewer for view the remote machine.
$ sudo pacman -S virtviewer $ remote-viewer spice://localhost:5900  Or you could view the desktop via spicec.
The listening port could be view via netstat -anp | grep 5900.</description>
    </item>
    
    <item>
      <title>Win10 Tips For Using Xshell</title>
      <link>http://purplepalmdash.github.io/2015/11/13/win10-tips-for-using-xshell/</link>
      <pubDate>Fri, 13 Nov 2015 15:59:16 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/11/13/win10-tips-for-using-xshell/</guid>
      <description>Won&amp;rsquo;t change the size of the window when you disable the window size:
When using vim, the wrappered module should be disable, thus won&amp;rsquo;t cause you mis-editing the content of the file:
The configuration should be applied to each session.</description>
    </item>
    
    <item>
      <title>Variety</title>
      <link>http://purplepalmdash.github.io/2015/11/13/variety/</link>
      <pubDate>Fri, 13 Nov 2015 11:05:05 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/11/13/variety/</guid>
      <description>参考 http://peterlevi.com/variety/how-to-install/
安装 Ubuntu上，从ppa安装:
$ sudo add-apt-repository ppa:peterlevi/ppa $ sudo apt-get update $ sudo apt-get install variety  配置 安装完毕后，在终端下键入variety即可开始配置该软件，第一次会询问是否创建一个用于多终端 主机之间同步桌面壁纸的账户:
这一步是可选的，我们在这里先注册上. 需要注意的是，用翻墙后的浏览器完成注册.
一般情况下这里就能使用了，但是awesome桌面环境下需要增加一下这行:
$ vim /home/XXXXXXX/.config/variety/scripts/set_wallpaper ### Finally we comes to awesome! awsetbg &amp;quot;$WP&amp;quot; 2&amp;gt; /dev/null  Or: if you use newer version of awesome, awsetbg won&amp;rsquo;t take effect, use feh instead:
feh --bg-scale &amp;quot;$WP&amp;quot; 2&amp;gt;/dev/null  进一步美化 Awesome下就只能换换壁纸，本身终端也不支持透明度的配置，如果是gnome之类的桌面环境，可以 把terminal emulator的透明度打开，能获得很好的视觉效果。
默认的更新频率是5分钟更新一次，当然在配置界面下可以更改为更短/更长的时限。</description>
    </item>
    
    <item>
      <title>Good Material</title>
      <link>http://purplepalmdash.github.io/2015/11/05/good-material/</link>
      <pubDate>Thu, 05 Nov 2015 10:41:22 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/11/05/good-material/</guid>
      <description>Movie Sorted by director:
http://pan.baidu.com/share/home?uk=72456331&amp;amp;view=share#category/type=0
Good BookMark Of Zhihu http://www.zhihu.com/collection/38938285?page=2
Linux Wondering http://i.linuxtoy.org/docs/guide/index.html
Oh My Zsh https://github.com/robbyrussell/oh-my-zsh
http://www.kafeitu.me/shell/2012/03/25/oh-my-zsh.html
https://github.com/robbyrussell/oh-my-zsh/wiki/themes
http://segmentfault.com/a/1190000002658335
Wondering In Guangzhou http://www.zhihu.com/question/36159147
Impress.js Use this javascript for writing the PPT.
https://github.com/impress/impress.js
Programming On Dialog http://www.cyberciti.biz/tips/spice-up-your-unix-linux-shell-scripts.html
https://techbase.kde.org/Development/Tutorials/Shell_Scripting_with_KDE_Dialogs
Remote Control Of Arduino http://www.geek-workshop.com/thread-25230-1-1.html
Processing http://open.sina.com.cn/course/id_300/lesson_4094/
KVM Hardware http://www.cnblogs.com/sammyliu/p/4548194.html
OVS Howto http://roan.logdown.com/posts/191801-set-openvswitch
http://openvswitch.org/support/config-cookbooks/vlan-configuration-cookbook/
http://notes.yuwh.net/%E5%9C%A8centos7%E4%B8%8A%E9%85%8D%E7%BD%AEopen-vswitch%E5%92%8Cvxlan/
Good Books http://pan.baidu.com/share/home?uk=2704770694&amp;amp;view=share#category/type=0
http://www.hi-pda.com/forum/viewthread.php?tid=1774264&amp;amp;extra=page%3D1
TOP 5 NEW python module blog.rtwilson.com/my-top-5-new-python-modules-of-2015
NSX http://182.92.228.21:8080/chat/ZhibOrDianb?videoNu=video2015_12_02&amp;amp;userId=#rd&amp;amp;sukey=7f8f3cb2e9b0da45ed3acfb7ec91e76ac7b569b3d3190e352be587f5c2a9299faa83829a51886d2e5093f49a8ea542db
http://blog.remibergsma.com/2015/04/04/adding-a-kvm-cluster-with-nsx-networking-to-cloudstack/
http://dailyhypervisor.com/blog-posts/
Improve VM Performance http://download.</description>
    </item>
    
    <item>
      <title>FRDM-KL02Z Tips(1)</title>
      <link>http://purplepalmdash.github.io/2015/11/05/frdm-kl02z-tips-1/</link>
      <pubDate>Thu, 05 Nov 2015 09:53:38 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/11/05/frdm-kl02z-tips-1/</guid>
      <description>Reference Material:
http://www.freescale.com/zh-Hans/products/arm-processors/kinetis-cortex-m/l-series/freedom-development-platform-for-the-kinetis-kl02-family:FRDM-KL02Z?tab=In-Depth_Tab
Minicom 115200/data-bit: 8/ no parity/stop bit 1.</description>
    </item>
    
    <item>
      <title>Thinking In VR</title>
      <link>http://purplepalmdash.github.io/2015/10/29/thinking-in-vr/</link>
      <pubDate>Thu, 29 Oct 2015 16:00:39 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/29/thinking-in-vr/</guid>
      <description>Restriction of the connections.
http://www.cnblogs.com/cmt/archive/2013/03/13/2957583.html http://bbs.m0n0china.org/viewthread.php?tid=16459 http://my.oschina.net/u/1169079/blog/397705  </description>
    </item>
    
    <item>
      <title>Use AutoHotKey Together With Synergy</title>
      <link>http://purplepalmdash.github.io/2015/10/29/use-autohotkey-together-with-synergy/</link>
      <pubDate>Thu, 29 Oct 2015 09:07:18 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/29/use-autohotkey-together-with-synergy/</guid>
      <description>Recently I am using Surface Pro as my second screen, my main screen runs Linux, whose Copy/Paste could be done via mouse(mouse left key for selecting and copy to clipboard, middle key for pasting). While the Windows doesn&amp;rsquo;t have the same configuration for Copy/Paste(You could only use Ctrl+c/Ctrl+v), which makes me feels so low-efficiency. That&amp;rsquo;s why I use AutoHotKey.
Installation Download the AutoHotKey from
http://www.autohotkey.com/
Install it on Windows 8.</description>
    </item>
    
    <item>
      <title>OpenStack Liberty安装(1)</title>
      <link>http://purplepalmdash.github.io/2015/10/25/openstack-libertyan-zhuang-1/</link>
      <pubDate>Sun, 25 Oct 2015 12:05:58 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/25/openstack-libertyan-zhuang-1/</guid>
      <description>初始化准备 用Packer.io制作Ubuntu14.04的qcow2文件镜像, 设定磁盘大小为100G, lvm分区.
网络: 在virt-manager中制作一个网段为10.0.0.0/24的网段. 所有创建虚拟机的eth0均 加入到此网络中.
To be Continued.</description>
    </item>
    
    <item>
      <title>Tips On Ceph On Docker</title>
      <link>http://purplepalmdash.github.io/2015/10/23/tips-on-ceph-on-docker/</link>
      <pubDate>Fri, 23 Oct 2015 22:32:17 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/23/tips-on-ceph-on-docker/</guid>
      <description>Installation Pull the docker image via:
$ sudo docker pull ceph/demo  Run Ceph Run the container via:
# sudo docker run -d --net=host -e MON_IP=192.168.10.190 -e CEPH_NETWORK=192.168.10.0/24 ceph/demo  View the docker instance via:
# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES cbe567594adb ceph/demo &amp;quot;/entrypoint.sh&amp;quot; About an hour ago Up About an hour furious_hopper # docker exec -it cbe567594adb  Ceph Operation View the ceph processes:</description>
    </item>
    
    <item>
      <title>ToDoThings(1)</title>
      <link>http://purplepalmdash.github.io/2015/10/19/todothings-1/</link>
      <pubDate>Mon, 19 Oct 2015 20:40:03 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/19/todothings-1/</guid>
      <description>1. Logsnash/Zabbix Use Zabbix for monitoring the CloudStack Agents/Management Node?
2. OpenStack Liberty http://docs.openstack.org/liberty/install-guide-ubuntu/
3. Newly added todoes Added todoes issue in .zshrc:
alias vitodos=&#39;cdheroku &amp;amp;&amp;amp; vim source/_posts/2015-10-19-todothings-1.markdown&#39; alias cattodos=&#39;cdheroku &amp;amp;&amp;amp; cat source/_posts/2015-10-19-todothings-1.markdown&#39;  4. Improve Your Efficiency Improve Linux efficiency
5. BenchMarking ArchLinux Tools For Benchmarking
6. Performance Monitoring nagios and weixin.
7. Data Visualization Draw air pollution in Graphite?
Powermap?
8. Autossh Auto ssh connection for some computer acrossing the internet.</description>
    </item>
    
    <item>
      <title>On VM Performance Test</title>
      <link>http://purplepalmdash.github.io/2015/10/19/on-vm-performance-test/</link>
      <pubDate>Mon, 19 Oct 2015 09:54:45 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/19/on-vm-performance-test/</guid>
      <description>AIM To build the testing Framework.
Reference Material Paper_16-Performance_Evaluation_of_Private_Clouds.pdf
http://www.junauza.com/2012/05/best-system-benchmarking-tools-for.html
Software Install following software:
 # apt-get install -y libx11-dev libgl1-mesa-dev libxext-dev perl perl-modules make gcc nfs-common postgresql-9.1 postgresql-contrib-9.1 mbw iperf  CPU The following software are introduced for testing CPU Performance: * Linpack * Lookbusy
Linpack Note: Only works on INTEL CPU.
Linux
Windows
Mac
Linux Steps:
$ tar xvf l_lpk_p_10.3.4.007.tgz $ cd linpack_10.3.4/benchmarks/linpack $ ./runme_xeon64  You can see the testing result via tail -f lin_xeon64.</description>
    </item>
    
    <item>
      <title>Use OpenWRT Router For Lan Forwarding</title>
      <link>http://purplepalmdash.github.io/2015/10/15/use-openwrt-router-for-lan-forwarding/</link>
      <pubDate>Thu, 15 Oct 2015 11:50:28 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/15/use-openwrt-router-for-lan-forwarding/</guid>
      <description>USB Ethernet Insert the USB Ethernet Dongle into the Ubuntu14.04, it will be automatically recognized and initialized.
$ dmesg | tail [10323.307662] asix 2-2.2:1.0 eth1: register &#39;asix&#39; at usb-0000:00:1d.7-2.2, ASIX AX88772B USB 2.0 Ethernet, 84:xx:xx:xx:xx [10323.307704] usbcore: registered new interface driver asix [10324.285425] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready $ ifconfig eth1 eth1 Link encap:Ethernet HWaddr 84:xx:xx:xx:  Be care to see the udev rules definition:
$ cat /etc/udev/rules.</description>
    </item>
    
    <item>
      <title>Tips For 20151014</title>
      <link>http://purplepalmdash.github.io/2015/10/14/tips-for-20151014/</link>
      <pubDate>Wed, 14 Oct 2015 21:20:22 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/14/tips-for-20151014/</guid>
      <description>Things to be done in tomorrow:
1. Install CloudStack On Ubuntu:
http://www.greenhills.co.uk/2015/02/23/cloudstack-4.4-single-server-on-ubuntu-14.04.1-with-kvm.html
2. Create local repository for specified DEBs:
http://askubuntu.com/questions/170348/how-to-make-my-own-local-repository
http://linuxconfig.org/easy-way-to-create-a-debian-package-and-local-package-repository
http://unix.stackexchange.com/questions/87130/how-to-quickly-create-a-local-apt-repository-for-random-packages-using-a-debian
3. All-In-One CloudStack Environment On Ubuntu14.04.
4. OpenWRT Based Wireless AP, and Synergy for Surface Pro and WorkingMachine.
https://synergy-project.org/nightly
Use the nightly built synergy you could got the keyboard sharing working well.</description>
    </item>
    
    <item>
      <title>Tips on Cloud-Init and CloudStack(2)</title>
      <link>http://purplepalmdash.github.io/2015/10/14/tips-on-cloud-init-and-cloudstack/</link>
      <pubDate>Wed, 14 Oct 2015 11:36:51 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/14/tips-on-cloud-init-and-cloudstack/</guid>
      <description> Cloudmonkey Resize First deploy the VM in stopped status:
(local) mycloudmonkey&amp;gt; deploy virtualmachine startvm=false serviceofferingid=683f31f8-a939-468e-b4de-4512a8ccff8e templateid=13fb2961-533e-4a7d-80f9-21d860269aad zoneid=78509dc3-c828-429c-8154-9fffbc09384c networkids=7c6e7e6b-6aa2-4f95-a835-8d18bf930061 name=testuserdata50G userdata=&#39;...`  Now resize the root volume into 50G size:
 deploy virtualmachine serviceofferingid=ff775183-282b-48d7-b08e-eff51fef7683 templateid=67ca66ea-b021-4f91-ac8c-ff95f2576c9d zoneid=1a258852-831c-4612-94f4-2551a98667bb name=testuserdata userdata=&#39;Q29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7IGJvdW5kYXJ5PSI9PT09PT09PT09PT09PT0xOTk5MDU5OTcyMjA5ODg1MjY2PT0iCk1JTUUtVmVyc2lvbjogMS4wCgotLT09PT09PT09PT09PT09PTE5OTkwNTk5NzIyMDk4ODUyNjY9PQpDb250ZW50LVR5cGU6IHRleHQveC1zaGVsbHNjcmlwdDsgY2hhcnNldD0idXMtYXNjaWkiCk1JTUUtVmVyc2lvbjogMS4wCkNvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmc6IDdiaXQKQ29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudDsgZmlsZW5hbWU9ImhlbGxvX3dvcmxkLnNoIgoKIyEvYmluL2Jhc2gKZWNobyAiaGVsbG8gd29ybGQhIiA+PiAvcm9vdC90ZXN0CgotLT09PT09PT09PT09PT09PTE5OTkwNTk5NzIyMDk4ODUyNjY9PQpDb250ZW50LVR5cGU6IHRleHQvY2xvdWQtY29uZmlnOyBjaGFyc2V0PSJ1cy1hc2NpaSIKTUlNRS1WZXJzaW9uOiAxLjAKQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZzogN2JpdApDb250ZW50LURpc3Bvc2l0aW9uOiBhdHRhY2htZW50OyBmaWxlbmFtZT0ibXktdXNlci1kYXRhIgoKI2Nsb3VkLWNvbmZpZwpncm93cGFydDoKICBtb2RlOiBhdXRvCmNocGFzc3dkOiB7IGV4cGlyZTogRmFsc2UgfQpzc2hfcHdhdXRoOiBUcnVlCgpzc2hfYXV0aG9yaXplZF9rZXlzOgogLSBzc2gtcnNhIEFBQUFCM056YUMxeWMyRUFBQUFEQVFBQkFBQUJBUUNzMFA4aFNCM05qN2tmd2lRT01PQ0Z2RXVqd3JLZjVuUFdmdzdzbmplVzd3TnhCYi9pTHhqbGxIK0tJdjdpS0dRaGI5WGtpZ3dXelhjdktSRk9OQTF0UU5CUHBsUE9RQXhHYUpoYzcxYlhZTVRabWsxcmZ5L0U4bUZIQmJ3U0trdm04Z3oxaFVqQWFITHdiZ21iaUE3eUNDUkVXbVR1SWpudm1FZnJXYU92WERRZFFPb2RkSzFhZThKM3BnRUNtQ21mRldrQmR3Y1JaN05jTUxBSkVkYTNpYWtJbWdaR2NqTWNCc1hjUUNOcjN1RGlKbERvc1V6Mjg4L3grTnZteTlzcHZnc2x4RXVUV0VQWFRGY1l5eVBrUHdkTnlpQm5TaWFoZTExcUdUZkk0Z2IyWllEb3JDZU5Ca1QxdkVaY0psL1JqT3NKRUFXT04rbno3Nm16MmdhZCByb290QHItOS1WTSAKCnRpbWV6b25lOiBBc2lhL0Nob25ncWluZwoKLS09PT09PT09PT09PT09PT0xOTk5MDU5OTcyMjA5ODg1MjY2PT0tLQo=&#39;  </description>
    </item>
    
    <item>
      <title>Cloud-Init Grow Partition</title>
      <link>http://purplepalmdash.github.io/2015/10/13/cloud-init-grow-partition/</link>
      <pubDate>Tue, 13 Oct 2015 14:37:57 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/13/cloud-init-grow-partition/</guid>
      <description>Resize QCOW2 Resize qcow2 file via:
$ qemu-img info my_vm.img image: my_vm.img file format: qcow2 virtual size: 2.2G (2361393152 bytes) disk size: 904M cluster_size: 65536 Format specific information: compat: 1.1 lazy refcounts: false $ qemu-img resize my_vm.img +100G Image resized. $ qemu-img info my_vm.img image: my_vm.img file format: qcow2 virtual size: 102G (109735575552 bytes) disk size: 904M cluster_size: 65536 Format specific information: compat: 1.1 lazy refcounts: false  Enlarge Partition Modify the meta-data, and enable the partition grow options in user-data:</description>
    </item>
    
    <item>
      <title>Linux Tips 3</title>
      <link>http://purplepalmdash.github.io/2015/10/13/linux-tips-3/</link>
      <pubDate>Tue, 13 Oct 2015 10:43:51 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/13/linux-tips-3/</guid>
      <description>1. Tips on Cloud-Init http://www.cnblogs.com/smallcoderhujin/p/4238609.html
2. Access CloudStack VR Get the VR IP address from the CloudStack Web Interface:
Then get the ssh connection via(On Agent Node):
[root@csmgmt ~]# ssh -i .ssh/id_rsa.cloud -p3922 169.254.1.177 Linux r-9-VM 3.2.0-4-amd64 #1 SMP Debian 3.2.65-1+deb7u2 x86_64 ....... root@r-9-VM:~#  3. Cloudmonkey issue Couldnot start cloudmonkey, use virtualenv for starting:
$ yum install -y python-virtualenv $ virtualenv venv --python=python2.6 $ . venv/bin/activate $ pip install cloudmonkey  Then you could start cloudmonkey in venv environment.</description>
    </item>
    
    <item>
      <title>Tips On OZ</title>
      <link>http://purplepalmdash.github.io/2015/10/12/tips-on-oz/</link>
      <pubDate>Mon, 12 Oct 2015 12:27:04 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/12/tips-on-oz/</guid>
      <description>Reference The reference URL is located at:
http://www.chenshake.com/oz-making-centos-mirror/
Installation On CentOS 7, install oz via:
# yum install -y oz # rpm -qa | grep oz- oz-0.14.0-1.el7.noarch  Configuration The configuration file for oz should be configured as:
# vim /etc/oz/oz.cfg [paths] output_dir = /var/lib/libvirt/images data_dir = /var/lib/oz screenshot_dir = /var/lib/oz/screenshots # sshprivkey = /etc/oz/id_rsa-icicle-gen [libvirt] uri = qemu:///system #image_type = raw image_type = qcow2 # type = kvm bridge_name = virbr0 cpus = 1 memory = 1024  The configuration file for the oz should have one tdl file and one kickstart file:</description>
    </item>
    
    <item>
      <title>Tips On Cloud-Init</title>
      <link>http://purplepalmdash.github.io/2015/10/12/tips-on-cloud-init/</link>
      <pubDate>Mon, 12 Oct 2015 10:50:53 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/12/tips-on-cloud-init/</guid>
      <description>参考 主要参考了
http://huang-wei.github.io/programming/2013/12/23/run-cloud-init-in-local-kvm.html
这里主要记录的是操作步骤。
介绍 红帽介绍:
Cloud-Init 是一个用来自动配置虚拟机的初始设置（如主机名，网卡和密钥）的工具。它可以在 使用模板部署虚拟机时使用，从而达到避免网络冲突的目的。
在使用这个工具前，cloud-init 软件包必须在虚拟机上被安装。安装后，Cloud-Init 服务会在系 统启动时搜索如何配置系统的信息。您可以使用只运行一次窗口来提供只需要配置一次的设置信息 ；或在 新建虚拟机、编辑虚拟机和编辑模板窗口中输入虚拟机每次启动都需要的配置信息。
cloud-init安装 Ubuntu 14.04上可以通过以下命令来安装cloud-init:
$ apt-cache search cloud-utils cloud-utils - metapackage for installation of upstream cloud-utils source $ sudo apt-get install cloud-utils  镜像准备 在http://cloud-images.ubuntu.com/releases/ 可以找到Ubuntu制作的ubuntu cloud image, image分版本, 这里使用14.04的image。
$ wget http://cloud-images.ubuntu.com/releases/14.04.3/ release-20151008/ubuntu-14.04-server-cloudimg-amd64-disk1.img  取回来后的镜像可以直接使用，但解压开后读取速度会更快:
$ qemu-img convert -O qcow2 ubuntu-14.04-server-cloudimg-amd64-disk1.img my_vm.img  对比两个镜像大小可以看到:
$ qemu-img info ubuntu-14.04-server-cloudimg-amd64-disk1.img image: ubuntu-14.04-server-cloudimg-amd64-disk1.img file format: qcow2 virtual size: 2.</description>
    </item>
    
    <item>
      <title>20151009备注</title>
      <link>http://purplepalmdash.github.io/2015/10/09/20151009bei-zhu/</link>
      <pubDate>Fri, 09 Oct 2015 22:21:11 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/09/20151009bei-zhu/</guid>
      <description>Mirantis 定时任务，更新Mirantis镜像
Autossh Issue 取远端服务器上的某个值，若该值为真，则临时建立反向链接。</description>
    </item>
    
    <item>
      <title>20151008备注</title>
      <link>http://purplepalmdash.github.io/2015/10/08/20151008bei-zhu/</link>
      <pubDate>Thu, 08 Oct 2015 18:42:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/08/20151008bei-zhu/</guid>
      <description>Docker markdowncv容器启动以后，用python执行一个简单的http server，这时候需要更改其默 认主页，并且做端口映射到主机。
墙外楼推送 用Python的Beautiful Soup或其他的模块，抠到墙外楼上每天更新的文章，同步到某个信 箱，或者直接推送到NOOK?
Cloud-Init 这个东西可以用来管理用户名和密码的更新，从而需要引入新的数据库管理机制之类，可 以在这个星期做一下研究。
Auto-Run Task 启动时，自动同步几个仓库的情况，需要用expect来做，并且添加到awesome启动中。
Synergy Integration How to move the mouse from the 1.4&amp;rsquo;s Synergy Server to 1.3&amp;rsquo;s Synergy Client?</description>
    </item>
    
    <item>
      <title>Dockerize Markdown Written CV</title>
      <link>http://purplepalmdash.github.io/2015/10/08/dockerize-markdown-written-cv/</link>
      <pubDate>Thu, 08 Oct 2015 10:08:02 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/10/08/dockerize-markdown-written-cv/</guid>
      <description>Tips Manually run the commands for generating the CVs.
$ sudo apt-get install -y build-essential $ sudo apt-get install -y pandoc $ sudo apt-get install -y wkhtmltopdf $ sudo apt-get install xvfb $ echo &#39;xvfb-run --server-args=&amp;quot;-screen 0, 1024x768x24&amp;quot; /usr/bin/wkhtmltopdf $*&#39; &amp;gt; \ /usr/bin/wkhtmltopdf.sh $ chmod a+x /usr/bin/wkhtmltopdf $ chmod a+x /usr/bin/wkhtmltopdf.sh $ ln -s /usr/bin/wkhtmltopdf.sh /usr/local/bin/wkhtmltopdf $ apt-get install -y ttf-wqy-zenhei $ apt-get install -y git $ apt-get install -y rubygems-integration ruby-dev $ apt-get install -y libimage-exiftool-perl $ gem install compass $ gem install susy $ git clone https://github.</description>
    </item>
    
    <item>
      <title>Sharing Mouse/Keyboard among 3 Nodes</title>
      <link>http://purplepalmdash.github.io/2015/09/22/sharing-mouse-slash-keyboard-among-3-nodes/</link>
      <pubDate>Tue, 22 Sep 2015 20:42:04 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/09/22/sharing-mouse-slash-keyboard-among-3-nodes/</guid>
      <description>I have 3 computers which runs ArchLinux/Ubuntu15.04 Mate, they both connected to the same ethernet, I&amp;rsquo;d like to use only one mouse/keyboard for controlling them, following are the steps for how-to.
Network Configuration The 3 computer are listed as following:
* 192.168.1.11/dashArch/ArchLinux * 192.168.1.13/dash32G/Ubuntu15.04 * 192.168.1.10/dashMate/Ubuntu15.04
Edit the /etc/hosts in 192.168.1.11:
$ sudo vim /etc/hosts 192.168.1.13 dash32G 192.168.1.14 dashMate  In 192.168.1.13, Edit /etc/hosts:
$ sudo vim /etc/hosts 192.168.1.11 dashArch  Synergy Server I use ArchLinux for Synergy Server, install it simply via:</description>
    </item>
    
    <item>
      <title>Trouble-Shooting On ChromeOS&#39;s crouton Updating</title>
      <link>http://purplepalmdash.github.io/2015/09/10/trouble-shooting-on-chromeoss-crouton-updating/</link>
      <pubDate>Thu, 10 Sep 2015 10:17:17 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/09/10/trouble-shooting-on-chromeoss-crouton-updating/</guid>
      <description>Problem After updating of ChromeOS itself, the crouton failed to start with following message:
Entering /mnt/stateful_partition/crouton/chroots/xxxxxx... ERROR: ld.so: object &#39;/usr/local/lib/croutonfreon.so&#39; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. _XSERVTransmkdir: Owner of /tmp/.X11-unix should be set to root  Solution First setup the proxy for acrossing the Fucking Great Fire Wall.
In another PC which have the socket proxy, install privoxy:
$ sudo apt-get install -y privoxy  Oh sorry I have to delete the whole chroot environment, delete it via:</description>
    </item>
    
    <item>
      <title>Tips On Remove maas-dhcp</title>
      <link>http://purplepalmdash.github.io/2015/08/31/tips-on-remove-maas-dhcp/</link>
      <pubDate>Mon, 31 Aug 2015 12:07:37 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/31/tips-on-remove-maas-dhcp/</guid>
      <description>Solution Previous I always encounter problems in removing maas-dhcp, so I checked some materials show the result is because I disabled apparmor, the solution is:
$ vim /etc/default/grub GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;security=selinux selinux=1 apparmor=1 security=apparmor&amp;quot;  Add apparmor related, and reboot the computer.
Now you could remove the maas-dhcp and install new softwares.
TIPS apparmor status View apparmor status:
sudo apparmor_status  Track Reason Via restart you could know the exact reason:</description>
    </item>
    
    <item>
      <title>Tips For SSD Installation</title>
      <link>http://purplepalmdash.github.io/2015/08/30/tips-for-ssd-installation/</link>
      <pubDate>Sun, 30 Aug 2015 14:45:24 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/30/tips-for-ssd-installation/</guid>
      <description>Refers to:
https://wiki.archlinux.org/index.php/Beginners&amp;rsquo;guide%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29
Partition Check if you are in efi mode:
# efivar -l  Then format your disk using parted:
# parted /dev/sda (parted) mkpart ESP fat32 1M 513M (parted) set 1 boot on (parted) mkpart primary ext4 513M 100%  Check if your partition is aligned:
# blockdev --getalignoff /dev/sda 0  I have 2 disks, one for ssd, the other for hdd, so I want to share the swap partition, and locate the /var directory in the hdd, modify it via:</description>
    </item>
    
    <item>
      <title>GPT/SSD on ArchLinux Installation</title>
      <link>http://purplepalmdash.github.io/2015/08/30/gpt-slash-ssd-on-archlinux-installation/</link>
      <pubDate>Sun, 30 Aug 2015 09:18:15 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/30/gpt-slash-ssd-on-archlinux-installation/</guid>
      <description>Since I met so many problems in archlinux installation on SSD, plus UEFI issues, I use following virt machine for re-produce the problem and try to find out the solution.
Prepare Prepare two disk, one for SSD, the second is the oridinary one.
$ qemu-img create -f qcow2 -o cluster_size=4k ArchSSD.qcow2 100G $ qemu-img create -f qcow2 ArchHDD.qcow2 80G $ virt-manage  UEFI Support In Virt-Manager Follow the tips in https://fedoraproject.</description>
    </item>
    
    <item>
      <title>Use Jenkins For Building Packer Images</title>
      <link>http://purplepalmdash.github.io/2015/08/26/use-jenkins-for-building-packer-images/</link>
      <pubDate>Wed, 26 Aug 2015 16:36:20 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/26/use-jenkins-for-building-packer-images/</guid>
      <description>Installation Jenkins Refers to https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu
$ wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add - $ sudo sh -c &#39;echo deb http://pkg.jenkins-ci.org/debian binary/ &amp;gt; /etc/apt/sources.list.d/jenkins.list&#39; $ sudo apt-get update $ sudo apt-get install -y jenkins  Install Packer Plugins Manually(But failed), so finally I use the web-backed for installing.
$ wget https://ci.jenkins-ci.org/jnlpJars/jenkins-cli.jar $ java -jar jenkins-cli.jar -s http://localhost:8080 help $ java -jar jenkins-cli.jar -s http://localhost:8080 list-plugins $ java -jar jenkins-cli.</description>
    </item>
    
    <item>
      <title>Enable Trusty KickStart For SpaceWalk</title>
      <link>http://purplepalmdash.github.io/2015/08/25/enable-trusty-kickstart-for-spacewalk/</link>
      <pubDate>Tue, 25 Aug 2015 16:06:17 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/25/enable-trusty-kickstart-for-spacewalk/</guid>
      <description>Import distro-tree Copy iso content into the distro-tree:
# mount -t iso9660 -o loop /mnt/iso/ubuntu-14.04.3-server-amd64.iso /mnt1/ # mkdir /var/distro-trees/ubuntu-14.04.3-amd64 # chmod 755 /var/distro-trees/ubuntu-14.04.3-amd64/ # cp -ar /mnt1/* /var/distro-trees/ubuntu-14.04.3-amd64/  We will copy the pxeboot startup file from CentOS7 into ubuntu14.04 distro tree for cheating the spacewalk:
# mount -t iso9660 -o loop /mnt/iso/CentOS-7-x86_64-Everything-1503-01.iso /mnt2/ # mkdir -p /var/distro-trees/ubuntu-14.04.3-amd64/images/pxeboot/ # cp /mnt2/images/pxeboot/{initrd.img,vmlinuz} /var/distro-trees/ubuntu-14.04.3-amd64/images/pxeboot/ # ls /var/distro-trees/ubuntu-14.04.3-amd64/images/pxeboot/ -l -h ....  Kickstarting Now in spacewalk go to Systems-&amp;gt;Kickstart-&amp;gt;Distributions, with the parameters like following picture:</description>
    </item>
    
    <item>
      <title>Add CentOS Client into SpaceWalk</title>
      <link>http://purplepalmdash.github.io/2015/08/25/add-centos-client-into-spacewalk/</link>
      <pubDate>Tue, 25 Aug 2015 14:30:44 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/25/add-centos-client-into-spacewalk/</guid>
      <description>Installation Take i386 architecture for example, first download the rpm package then install it:
$ wget /yum.spacewalkproject.org/2.3-client/RHEL/6/i386/spacewalk-client-repo-2.3-2.el6.noarch.rpm $ rpm -ivh spacewalk-client-repo-2.3-2.el6.noarch.rpm  If your architecture is x86_64, then select x86_64 corresponding rpm and install it.
Enable EPEL:
# BASEARCH=$(uname -i) # rpm -Uvh http://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm  Now install the spacewalk client via:
# yum install -y rhn-client-tools rhn-check rhn-setup rhnsd m2crypto yum-rhn-plugin  Configuration Install Spacewalk server&amp;rsquo;s CA certificate on the server to enable SSL communication:</description>
    </item>
    
    <item>
      <title>Enable Game-KeyBoard Rapoo V5 Pro In Ubuntu Trusty</title>
      <link>http://purplepalmdash.github.io/2015/08/24/enable-game-keyboard-rapoo-v5-pro-in-ubuntu-trusty/</link>
      <pubDate>Mon, 24 Aug 2015 12:13:42 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/24/enable-game-keyboard-rapoo-v5-pro-in-ubuntu-trusty/</guid>
      <description>Problem A Game KeyBoard Rapoo V5 Pro could work propery under windows, but in Ubuntu 14.04(Trusty) it could not be identified. Following are the steps for enable it.
The dmesg shows following message(similar message):
[ 272.865245] hid-generic 0003:04D9:A04A.0007: input,hidraw4: USB HID v1.10 Keyboard [xxxxxxxxxxxxxx] on usb-0000:00:1d.0-1/input0 [ 272.874127] hid-generic 0003:04D9:A04A.0008: usage index exceeded [ 272.874142] hid-generic 0003:04D9:A04A.0008: item 0 2 2 2 parsing failed [ 272.874187] hid-generic: probe of 0003:04D9:A04A.</description>
    </item>
    
    <item>
      <title>Customize Kickstart For SpaceWalk</title>
      <link>http://purplepalmdash.github.io/2015/08/22/customize-kickstart-for-spacewalk/</link>
      <pubDate>Sat, 22 Aug 2015 18:53:09 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/22/customize-kickstart-for-spacewalk/</guid>
      <description>Software Selection An example is listed as:
@ Base firefox @ Gnome ibus-table-cangjie ibus-table-erbi ibus-table-wubi python-dmidecode python-hwdata @X Window System @gnome-desktop @graphics @input-methods @remote-desktop-clients @internet-browser @multimedia @web-server @x11  Defined in:
More detailed configuration could be found at the DVD-ROM of the CentOS7:
# ls /var/distro-trees/centos7_64/repodata 175ddec2056ec6b5ef267cea35f8ec679314afbfb019957e53f71725bcc5d829-c7-x86_64-comps.xml  This xml file include all of the possible groups.</description>
    </item>
    
    <item>
      <title>Move SpaceWalk Server Into A New Network</title>
      <link>http://purplepalmdash.github.io/2015/08/22/move-spacewalk-server-into-a-new-network/</link>
      <pubDate>Sat, 22 Aug 2015 16:49:19 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/22/move-spacewalk-server-into-a-new-network/</guid>
      <description>Env Move from one isolated network to another isolated network. Experiment is done on virt-manager, from 10.9.10.0/24 to 10.47.58.0/24 network. Following are the steps for migration.
Steps First shutdown the machine and connect the existing network card to new network, boot on the computer.
Modify the ip address(static IP Address):
$ sudo vim /etc/sysconfig/network-scripts/ifcfg-eth0 - IPADDR=10.9.10.13 - GATEWAY=10.9.10.1 + IPADDR=10.47.58.3 + GATEWAY=10.47.58.1  Modify the hostname:
# vim /etc/hosts - 10.</description>
    </item>
    
    <item>
      <title>mrepo tips for syncing CentOS repositories</title>
      <link>http://purplepalmdash.github.io/2015/08/21/mrepo-tips-for-syncing-centos-repositories/</link>
      <pubDate>Fri, 21 Aug 2015 14:48:30 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/21/mrepo-tips-for-syncing-centos-repositories/</guid>
      <description>Refers to the mirrorlist website, don&amp;rsquo;t use aliyun, cause their webserver will forbidden lftp from fetching the infos. I switches to 163.com and ustc.edu.cn for different repositories, following are the configuration file.
CentOS6 An example is listed as:
# cat /etc/mrepo.conf.d/centos6.conf [centos6] name = CentOS $release ($arch) release = 6 arch = x86_64 metadata = yum repomd #iso = http://mirrors.163.com/centos/$release/isos/$arch/CentOS-6.6-x86_64-bin-DVD?.iso # os = http://mirrors.163.com/centos/$release/os/$arch/Packages/ # updates = http://mirrors.163.com/centos/$release/updates/$arch/Packages/ # extras = http://mirrors.</description>
    </item>
    
    <item>
      <title>Setup Squid</title>
      <link>http://purplepalmdash.github.io/2015/08/21/setup-squid/</link>
      <pubDate>Fri, 21 Aug 2015 11:33:13 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/21/setup-squid/</guid>
      <description>Installation And Configuration # yum install -y squid # vim /etc/squid/squid.conf http_port 3072 #acl localnet src 192.168.0.0/16 # RFC1918 possible internal network # Squid normally listens to port 3128 http_port 3072 cache_mem 64 MB maximum_object_size 4 MB # Cache 3GB cache_dir ufs /home/juju/SquidCache 3072 16 256 access_log /var/log/squid/access.log auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd auth_param basic children 5 auth_param basic kspc-01 proxy auth_param basic credentialsttl 2 hours acl myacl proxy_auth REQUIRED http_access allow myacl http_access deny all visible_hostname squid.</description>
    </item>
    
    <item>
      <title>Kickstarting Ubuntu In SpaceWalk</title>
      <link>http://purplepalmdash.github.io/2015/08/20/kickstarting-ubuntu-in-spacewalk/</link>
      <pubDate>Thu, 20 Aug 2015 11:58:14 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/20/kickstarting-ubuntu-in-spacewalk/</guid>
      <description>Preparation You have to use apt-mirror for getting the packages to local repository, so that you could directly install the system via http method. The configuration file for apt-mirror is listed as following:
$ cat /etc/apt/mirror.list set base_path /mnt/myrepo set nthreads 20 set _tilde 0 #################Trusty Repository Starts ######################## deb-amd64 http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse main/debian-installer restricted/debian-installer multiverse/debian-installer universe/debian-installer deb-amd64 http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse main/debian-installer restricted/debian-installer universe/debian-installer deb-amd64 http://mirrors.</description>
    </item>
    
    <item>
      <title>Auto Configure SpaceWalk Ubuntu Agent</title>
      <link>http://purplepalmdash.github.io/2015/08/17/auto-configure-spacewalk-ubuntu-agent/</link>
      <pubDate>Mon, 17 Aug 2015 17:21:31 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/17/auto-configure-spacewalk-ubuntu-agent/</guid>
      <description>Create the Auto-Deployment Material Directory structure is listed as following:
adminubuntu@bee3:~/Code$ ls -F deb/ deb_osad/ deb_remote/ first.sh* second.sh* sources.list xmlrpclib.py adminubuntu@bee3:~/Code$ ls * autoChange.sh autoChange.sh~ hostname sources.list xmlrpclib.py deb: apt-transport-spacewalk_1.0.6-4.1_all.deb python-rhn_2.5.55-2_all.deb rhnsd_5.0.4-3_i386.deb python-ethtool_0.11-2_i386.deb rhn-client-tools_1.8.26-4_i386.deb deb_osad: osad_5.11.27-1ubuntu1~precise5_all.deb pyjabber_0.5.0-1.4ubuntu3~precise1_all.deb deb_remote: rhncfg_5.10.14-1ubuntu1~precise2_all.deb  The deb files in deb should be compiled manually:
apt-get install debhelper build-essential gcc devscripts git intltool quilt automake python-all-dev libnl-route-3-dev asciidoc pkg-config libxml2-utils docbook-xml xsltproc sgml-data docbook-xsl apt-get -f install git clone git://anonscm.</description>
    </item>
    
    <item>
      <title>Preseed Partition Configuration</title>
      <link>http://purplepalmdash.github.io/2015/08/13/preseed-partition-configuration/</link>
      <pubDate>Thu, 13 Aug 2015 21:55:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/13/preseed-partition-configuration/</guid>
      <description> Regular Partition Use regular configuration of the partion:
d-i partman-auto/disk string /dev/vda d-i partman-auto/method string regular d-i partman-auto/choose_recipe \ select All files in one partition (recommended for new users) d-i partman/confirm_write_new_label boolean true # d-i partman/choose_partition \ select Finish partitioning and write changes to disk d-i partman/confirm boolean true d-i partman/confirm_nooverwrite boolean true  </description>
    </item>
    
    <item>
      <title>Build nbd Kernel Module On CentOS7</title>
      <link>http://purplepalmdash.github.io/2015/08/13/build-nbd-kernel-module-on-centos7/</link>
      <pubDate>Thu, 13 Aug 2015 17:02:53 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/13/build-nbd-kernel-module-on-centos7/</guid>
      <description>Get Source Code First check your kernel version via:
$ uname -r 3.10.0-229.7.2.el7.x86_64  Then find the corresponding kernel source rpm under vault.centos.org, download its rpm and install it.
$ wget http://vault.centos.org/7.1.1503/updates/Source/SPackages/kernel-3.10.0-229.7.2.el7.src.rpm # useradd builder # groupadd builder $ rpm -ivh kernel-3.10.0-229.7.2.el7.src.rpm  Build Preparation As a normal user, do following:
$ mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS} $ echo &#39;%_topdir %(echo $HOME)/rpmbuild&#39; &amp;gt; ~/.rpmmacros $ cd ~/rpmbuild/SPECS $ rpmbuild -bp --target=$(uname -m) kernel.</description>
    </item>
    
    <item>
      <title>Automatically Create Virtual Machine</title>
      <link>http://purplepalmdash.github.io/2015/08/13/automatically-create-virtual-machine/</link>
      <pubDate>Thu, 13 Aug 2015 16:21:23 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/13/automatically-create-virtual-machine/</guid>
      <description>Just record the whole scripts for create/define/start the vm machine.
#!/bin/bash # $1: The name of the virtual machine. ### 1. Check Input Parameters. if [ $# != 1 ] then echo &amp;quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&amp;quot; echo &amp;quot;!! Parameters error !!&amp;quot; echo &amp;quot;!! Example: ./createvm.sh name !!&amp;quot; echo &amp;quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&amp;quot; exit 1 fi ### 2. Create the qcow2 file in local directory. echo $1 qemu-img create -f qcow2 -b /home/juju/img/WolfHunter/SpaceWalk/Base/packer-ubuntu-1204-server-i386 $1.qcow2 ### 3. Generate Random MAC Address.</description>
    </item>
    
    <item>
      <title>Create Channel/Repository In SpaceWalk</title>
      <link>http://purplepalmdash.github.io/2015/08/12/create-channel-slash-repository-in-spacewalk/</link>
      <pubDate>Wed, 12 Aug 2015 16:36:51 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/12/create-channel-slash-repository-in-spacewalk/</guid>
      <description>Package Preparation First you should enable the repository via:
# wget http://yum.spacewalkproject.org/2.3/RHEL/6/x86_64/spacewalk-repo-2.3-4.el6.noarch.rpm # rpm -ivh spacewalk-repo-2.3-4.el6.noarch.rpm # vim /etc/yum.repos.d/jpackage-repo.repo [jpackage-generic] name=JPackage generic #baseurl=http://mirrors.dotsrc.org/pub/jpackage/5.0/generic/free/ mirrorlist=http://www.jpackage.org/mirrorlist.php?dist=generic&amp;amp;type=free&amp;amp;release=5.0 enabled=1 gpgcheck=1 gpgkey=http://www.jpackage.org/jpackage.asc  Install the spacewalk-remote-utils package:
# yum install -y spacewalk-remote-utils  WebUI Create Repository Create an ia32-debian based channel, in WebUI:
Continue to create some child channel:
Now create the repository like following:
Until you created all of the ia32 based repositories:</description>
    </item>
    
    <item>
      <title>Trouble Shooting On SpaceWalk OSAD On Ubuntu Clients</title>
      <link>http://purplepalmdash.github.io/2015/08/12/trouble-shooting-on-spacewalk-osad-on-ubuntu-clients/</link>
      <pubDate>Wed, 12 Aug 2015 11:25:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/12/trouble-shooting-on-spacewalk-osad-on-ubuntu-clients/</guid>
      <description>Problem On Clients(Ubuntu nodes), you will see lots of the following message in /var/log/osad:
$ tail /var/log/osad 2015-08-11 19:31:14 jabber_lib.main: Unable to connect to jabber servers, sleeping 78 seconds 2015-08-11 19:32:32 jabber_lib.main: Unable to connect to jabber servers, sleeping 117 seconds  When restart the osda service you will see following error message:
# service osad restart OSAD SpaceWalk Deamon osad Traceback (most recent call last): File &amp;quot;/usr/share/rhn/osad/jabber_lib.py&amp;quot;, line 252, in setup_connection c = self.</description>
    </item>
    
    <item>
      <title>Added Precise Repository In SpaceWalk</title>
      <link>http://purplepalmdash.github.io/2015/08/11/added-precise-repository-in-spacewalk/</link>
      <pubDate>Tue, 11 Aug 2015 16:26:32 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/11/added-precise-repository-in-spacewalk/</guid>
      <description>SpaceWalk Backend Configruation First Create the Channel:
Then Create the Repository like following:
Associate the channel together with repository:
Install packages Do following for the prerequisition for syncing the repository.
# yum update python-debian # vim /usr/lib/python2.6/site-packages/debian/debfile.py PART_EXTS = [&#39;gz&#39;, &#39;xz&#39;, &#39;lzma&#39;] # wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm # rpm -ivh epel-release-6-8.noarch.rpm # cat epel-testing.repo | more [epel-testing] name=Extra Packages for Enterprise Linux 6 - Testing - $basearch #baseurl=http://download.fedoraproject.org/pub/epel/testing/6/$basearch #mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=testing-epel6&amp;amp;arch=$basearch baseurl=http://mirrors.aliyun.com/epel/testing/6/x86_64/ failovermethod=priority  Sync With Local Repository An example of precise-backports is listed like following, take this example for example, create other 3 shell scripts:</description>
    </item>
    
    <item>
      <title>Add Ubuntu Agent into SpaceWalk</title>
      <link>http://purplepalmdash.github.io/2015/08/10/add-ubuntu-agent-into-spacewalk/</link>
      <pubDate>Mon, 10 Aug 2015 14:53:28 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/10/add-ubuntu-agent-into-spacewalk/</guid>
      <description>Install via:
$ sudo apt-get install debhelper build-essential gcc devscripts git intltool quilt \ automake python-all-dev libnl-route-3-dev asciidoc pkg-config libxml2-utils \ docbook-xml xsltproc sgml-data docbook-xs $ sudo apt-get install apt-transport-spacewalk rhnsd  Fix the bug of XMLRPCLib:
--- /usr/lib/python2.7/xmlrpclib.py 2013-05-28 20:44:38.000000000 +0200 +++ new/xmlrpclib.py 2013-05-28 20:44:24.000000000 +0200 @@ -654,8 +654,8 @@ f(self, value, write) def dump_nil (self, value, write): - if not self.allow_none: - raise TypeError, &amp;quot;cannot marshal None unless allow_none is enabled&amp;quot; +# if not self.</description>
    </item>
    
    <item>
      <title>Build Kickstartable ISO</title>
      <link>http://purplepalmdash.github.io/2015/08/06/build-kickstartable-iso/</link>
      <pubDate>Thu, 06 Aug 2015 22:11:44 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/06/build-kickstartable-iso/</guid>
      <description>Installation # mount -t iso9660 -o loop ./ubuntu1404.iso /mnt # cp -rT /mnt/ iso/  Make a kickstart file use system-config-kickstart, and copy it to:
$ cp ks.cfg ./ $ vim isolinux/langlinux en $ vim isolinux/txt.cfg default install label install menu label ^Install Ubuntu Server kernel /install/vmlinuz append file=/cdrom/preseed/ubuntu-server.seed initrd=/install/initrd.gz ks=cdrom:/ks.cfg --  Make ISO Make the iso.
$ chmod a+w ./iso/isolinux/isolinux.bin $ mkisofs -J -l -b isolinux/isolinux.bin -no-emul-boot -boot-load-size 4 -boot-info-table -z -iso-level 4 -c isolinux/isolinux.</description>
    </item>
    
    <item>
      <title>Enlarge RootFS In CentOS7</title>
      <link>http://purplepalmdash.github.io/2015/08/06/enlarge-rootfs-in-centos7/</link>
      <pubDate>Thu, 06 Aug 2015 14:48:50 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/06/enlarge-rootfs-in-centos7/</guid>
      <description>Disk Preparation Create a new disk via following command in host machine:
# qemu-img create -f qcow2 Added.qcow2 200G  Boot the machine and you will have the newly added disk as /dev/vdb, format it via fdisk.
[root@spacewalker ~]# fdisk /dev/vdb Welcome to fdisk (util-linux 2.23.2). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Device does not contain a recognized partition table Building a new DOS disklabel with disk identifier 0x694e59ec.</description>
    </item>
    
    <item>
      <title>Setup SpaceWalker Trusty Channel</title>
      <link>http://purplepalmdash.github.io/2015/08/06/setup-spacewalker-trusty-channel/</link>
      <pubDate>Thu, 06 Aug 2015 11:47:31 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/06/setup-spacewalker-trusty-channel/</guid>
      <description>Channel Definition The definition for this channel should includes Architecture to &amp;lsquo;amd64-debian&amp;rsquo;, and Yum Repository to SHA256:
Yum Repository Checksum Type sha256 Architecture AMD64 Debian
Channel Definition The definition for this channel should includes Architecture to &amp;lsquo;amd64-debian&amp;rsquo;, and Yum Repository to SHA256:
Yum Repository Checksum Type sha256 Architecture AMD64 Debian  Then create more channels with its parent channel to your named channel.
Also create trusty-security and trusty-backports, after all configuration, your channel would be looks like following:</description>
    </item>
    
    <item>
      <title>Enable DHCP/DNS Server For SpaceWalker Server</title>
      <link>http://purplepalmdash.github.io/2015/08/05/enable-dhcp-slash-dns-server-for-spacewalker-server/</link>
      <pubDate>Wed, 05 Aug 2015 11:28:21 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/05/enable-dhcp-slash-dns-server-for-spacewalker-server/</guid>
      <description>DHCP Server Install the dhcp server via:
# yum install -y dhcp  Then edit the configuration of /etc/dhcp/dhcpd.conf, like following:
# # DHCP Server Configuration file. # see /usr/share/doc/dhcp*/dhcpd.conf.example # see dhcpd.conf(5) man page # # specify name server&#39;s hostname or IP address option domain-name-servers 10.9.10.13; # default lease time default-lease-time 600; # max lease time max-lease-time 7200; # this DHCP server to be declared valid authoritative; # specify network address and subnet mask subnet 10.</description>
    </item>
    
    <item>
      <title>Tips On Using SpaceWalker For Deploying CentOS7</title>
      <link>http://purplepalmdash.github.io/2015/08/04/tips-on-using-spacewalker-for-deploying-centos7/</link>
      <pubDate>Tue, 04 Aug 2015 15:57:47 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/04/tips-on-using-spacewalker-for-deploying-centos7/</guid>
      <description>Configuration After SpaceWalker has been setup, the configuration we need to done is listed as following:
In /etc/rhn/rhn.conf change the value of the parameter cobbler.host to the ip address of the spacewalk server. In /etc/cobbler/settings change the value of the parameters server and redhat_management_server to the ip-address of the spacewalk server.  Install cobbler bootloaders via:
# yum install -y cobbler-loaders  Build Customized ISO via cobbler buildiso, and in the same folder you will get generated.</description>
    </item>
    
    <item>
      <title>Install SpaceWalk 2.2 Steps</title>
      <link>http://purplepalmdash.github.io/2015/08/04/install-spacewalk-2-dot-2-steps/</link>
      <pubDate>Tue, 04 Aug 2015 09:18:15 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/08/04/install-spacewalk-2-dot-2-steps/</guid>
      <description>Network Configuration Make sure the following configuration in CentOS6:
# cat /etc/hosts 10.9.10.10 spacewalk 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters # cat /etc/sysconfig/network NETWORKING=yes NETWORKING_IPV6=no HOSTNAME=localhost.localdomain # cat /etc/hostname spacewalk  Examine the result via:
[root@spacewalk ~]# hostname spacewalk [root@spacewalk ~]# hostname --fqdn spacewalk  Packages Installation First you should only have the following repo definition in the /etc/yum.repos.d/:
# wget -O /etc/yum.</description>
    </item>
    
    <item>
      <title>Ubuntu1504&#39;s Cobbler Server</title>
      <link>http://purplepalmdash.github.io/2015/07/29/ubuntu1504-s-cobbler-server/</link>
      <pubDate>Wed, 29 Jul 2015 21:23:44 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/29/ubuntu1504-s-cobbler-server/</guid>
      <description> Installation The newest version is 2.6.9.
# wget -qO - http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/xUbuntu_15.04/Release.key | sudo apt-key add - # sudo add-apt-repository &amp;quot;deb http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/xUbuntu_15.04/ ./&amp;quot; # sudo apt-get install cobbler  </description>
    </item>
    
    <item>
      <title>Trying SpaceWalk</title>
      <link>http://purplepalmdash.github.io/2015/07/29/trying-spacewalk/</link>
      <pubDate>Wed, 29 Jul 2015 16:43:23 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/29/trying-spacewalk/</guid>
      <description>Server Installation &amp;amp;&amp;amp; Configration Server have 2-core and 3072MB, running CentOS6.6, IP address is 10.9.10.2.
Installation:
# rpm -Uvh http://yum.spacewalkproject.org/2.3/RHEL/6/x86_64/spacewalk-repo-2.3-4.el6.noarch.rpm # wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo # yum update # yum install -y spacewalk-postgresql  Now add a new repository:
# cat /etc/yum.repos.d/jpackage-generic.repo [jpackage-generic] name=JPackage generic #baseurl=http://mirrors.dotsrc.org/pub/jpackage/5.0/generic/free/ mirrorlist=http://www.jpackage.org/mirrorlist.php?dist=generic&amp;amp;type=free&amp;amp;release=5.0 enabled=1 gpgcheck=1 gpgkey=http://www.jpackage.org/jpackage.asc  Met some problems on CentOS6.6, mainly the dependencies problem, switches to CentOS7(10.9.10.100) :
Install it via:
# rpm -Uvh http://yum.</description>
    </item>
    
    <item>
      <title>WorkTips On LandScape</title>
      <link>http://purplepalmdash.github.io/2015/07/28/worktips-on-landscape/</link>
      <pubDate>Tue, 28 Jul 2015 16:10:49 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/28/worktips-on-landscape/</guid>
      <description>Installation Landscape is now in PPA repository, add it via:
$ sudo apt-get install software-properties-common $ sudo add-apt-repository ppa:landscape/15.01 $ sudo apt-get update $ sudo apt-get install landscape-server-quickstart  During the installation will ask you the configuration of postfix, specify local.
Configuration First time you login into the LandScape Root machine, you have to setup your email address and your password.
Then you could visit https://YourIPAddress for the configuration page.</description>
    </item>
    
    <item>
      <title>Tips On Packer</title>
      <link>http://purplepalmdash.github.io/2015/07/27/tips-on-packer/</link>
      <pubDate>Mon, 27 Jul 2015 12:18:46 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/27/tips-on-packer/</guid>
      <description>Installation Install Packer via:
$ wget https://dl.bintray.com/mitchellh/packer/packer_0.8.2_linux_amd64.zip $ unzip packer_0.8.2_linux_amd64.zip $ mv packer* ~/bin $ export PATH=~/bin:$PATH  KVM Based Image Build Fetch the kickstart configuration file.
$ mkdir ~/Code/packer $ wget https://gist.githubusercontent.com/mitchellh/7328271/raw/9035b8e26d001f14a2a960d3cec65eceb0e716ea/centos6-ks.cfg # vim centos6-ks.cfg ### Replace your own repository URL  Create the json definition file for the packer build:
$ packer validate first.json Template validated successfully. $ cat first.json { &amp;quot;builders&amp;quot;: [ { &amp;quot;type&amp;quot;: &amp;quot;qemu&amp;quot;, &amp;quot;iso_url&amp;quot;: &amp;quot;/media/opensuse/dash/iso/CentOS-6.</description>
    </item>
    
    <item>
      <title>Chromebook Kernel Issue</title>
      <link>http://purplepalmdash.github.io/2015/07/25/chromebook-kernel-issue/</link>
      <pubDate>Sat, 25 Jul 2015 11:34:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/25/chromebook-kernel-issue/</guid>
      <description> Issues Chromebook could not support:
* bluetooth LAN * NFS
* ETC
So I re-compile the Chromebook kernel for soving these issue.
Kernel Version # uname -r 3.10.18  Get The SourceCode # git clone --branch v3.10.18 https://chromium.googlesource.com/chromiumos/third_party/kernel  </description>
    </item>
    
    <item>
      <title>Libvirtd Trouble-Shooting On CentOS7.1</title>
      <link>http://purplepalmdash.github.io/2015/07/22/libvirtd-trouble-shooting-on-centos7-dot-1/</link>
      <pubDate>Wed, 22 Jul 2015 09:54:59 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/22/libvirtd-trouble-shooting-on-centos7-dot-1/</guid>
      <description> Problem Description When upgraded from CentOS6.6 to CentOS7, the libvirtd will encounter following error:
Simply remove:
# virsh edit nodename - &amp;lt;feature policy=&#39;require&#39; name=&#39;invtsc&#39;/&amp;gt;  </description>
    </item>
    
    <item>
      <title>On Migration of KVM</title>
      <link>http://purplepalmdash.github.io/2015/07/19/on-migration-of-kvm/</link>
      <pubDate>Sun, 19 Jul 2015 13:31:03 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/19/on-migration-of-kvm/</guid>
      <description>Migration First create the qemu based vm:
$ pwd /media/arch/home/juju/img/migration $ qemu-img create -f qcow2 ubuntu1504.qcow2 100G $ sudo qemu-system-x86_64 -enable-kvm -m 512 -smp 4 -name ubuntu1504 -monitor stdio -boot c -drive file=/media/arch/home/juju/img/migration/ubuntu1504.qcow2,if=none,id=drive-virtio-disk0,boot=on -device virtio-blk-pci,bus=pci.0,addr=0x4,drive=drive-virtio-disk0,id=virtio-disk0 -drive file=/media/arch/home/dash/iso/ubuntu-15.04-server-amd64.iso,if=none,media=cdrom,id=drive-ide0-1-0 -device ide-drive,bus=ide.1,unit=0,drive=drive-ide0-1-0,id=ide0-1-0 -device virtio-net-pci,vlan=0,id=net0,mac=52:54:00:13:08:96 -net tap -vnc 127.0.0.1:3  After Installation, startup the vm via(didn&amp;rsquo;t attach the file):
$ sudo qemu-system-x86_64 -enable-kvm -m 512 -smp 4 -name ubuntu1504 -monitor stdio -boot c -drive file=/media/arch/home/juju/img/migration/ubuntu1504.</description>
    </item>
    
    <item>
      <title>ISCSI Installed Debian Jessie</title>
      <link>http://purplepalmdash.github.io/2015/07/17/iscsi-installed-debian-jessie/</link>
      <pubDate>Fri, 17 Jul 2015 14:24:20 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/17/iscsi-installed-debian-jessie/</guid>
      <description>FreeNAS Installation And Configuration Install Procedure ignored, because it&amp;rsquo;s simple.
Following steps are used for adding iscsi partition.
Manually setup the volumn and now you could add your volumn into the FreeNAS System.
Configure iscsi:
Add the name of iqn.onecloud.iscsi, next we add portal:
Add Authorized Access Now:
Add Initator:
Create target:
Add extent:
LUM RPMs could also be spcified:
Associate Targets:
Enable the iscsi service:
Better you change the IP Address into static IP address.</description>
    </item>
    
    <item>
      <title>WH Worktips(11)</title>
      <link>http://purplepalmdash.github.io/2015/07/13/wh-worktips-11/</link>
      <pubDate>Mon, 13 Jul 2015 21:12:14 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/13/wh-worktips-11/</guid>
      <description>CentOS7 Based Following modification need to be done:
On Deployed node:
$ sudo vim /etc/hosts 10.47.58.157	node157  There will be iptables issue. for you have to install following packages:
# yum install -y install iptables-utils iptables-services # reboot  Now begin to install again, and it will be ok.
Add the client, and make sure the &amp;ldquo;COPY CPU configuration&amp;rdquo; is selected in the menu.
Or, your system vm won&amp;rsquo;t startup.</description>
    </item>
    
    <item>
      <title>WH Worktips(9)</title>
      <link>http://purplepalmdash.github.io/2015/07/10/wh-worktips-9/</link>
      <pubDate>Fri, 10 Jul 2015 20:21:13 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/10/wh-worktips-9/</guid>
      <description>Cobbler In Non-DHCP Server Networking Sometimes you want to deploy system with cobbler server, in some restricted network which dhcp service is not allowed(considering broadcasting storm, security, etc.) Following are the steps of how-to:
Change Cobbler server setting:
$ sudo vim /etc/cobbler/settings manage_dhcp: 0 $ sudo cobbler sync $ sudo service dhcpd stop  Add the node definition in cobbler(useless):
# cobbler system add --name=node2 --profile=CentOS6.5-x86_64 --mac=52:54:00:71:59:64 --interface=eth0 --static=1 --ip-address=10.</description>
    </item>
    
    <item>
      <title>WH Worktips(7)</title>
      <link>http://purplepalmdash.github.io/2015/07/07/wh-worktips-7/</link>
      <pubDate>Tue, 07 Jul 2015 15:22:23 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/07/wh-worktips-7/</guid>
      <description>Cloudstack Agent Repository Setup the CloudStack Agent Repository via:
# yum install yum-plugin-downloadonly # vim /etc/yum.repos.d/cloudstack.repo [cloudstack] name=cloudstack baseurl=http://cloudstack.apt-get.eu/rhel/4.3/ enabled=1 gpgcheck=0 # mkdir Code # yum install --downloadonly --downloaddir=/root/Code/ cloud-agent  Now all of the installation rpm packages has been downloaded to directory, simply upload them to a server, use createrepo . to generate the repository, and link them to nginx&amp;rsquo;s root directory.
Mine is under:
http://192.168.0.79&amp;frasl;4.4.3CloudStackAgent/
Agent Installation Steps In a new deployed machine:</description>
    </item>
    
    <item>
      <title>Add Private NAT Networking In XenServer</title>
      <link>http://purplepalmdash.github.io/2015/07/06/add-private-nat-networking-in-xenserver/</link>
      <pubDate>Mon, 06 Jul 2015 11:42:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/06/add-private-nat-networking-in-xenserver/</guid>
      <description>Create Networking In XenCenter Create the networking under the XenCenter UI&amp;rsquo;s tab &amp;ldquo;Networking&amp;rdquo;.
Networking Setting Enable the ip forward:
# vim /etc/sysctl.conf net.ipv4.ip_forward = 1 # sysctl -p # cat /proc/sys/net/ipv4/ip_forward 1  Use iptables for forwarding the network flow:
# iptables -A FORWARD --in-interface xapi0 -j ACCEPT # iptables --table nat -A POSTROUTING --out-interface eth0 -j MASQUERADE  But this didn&amp;rsquo;t bring up the internal networking, after discussing with college, edit the file:</description>
    </item>
    
    <item>
      <title>Preseed File For Ubuntu1404 In CobblerServer</title>
      <link>http://purplepalmdash.github.io/2015/07/04/preseed-file-for-ubuntu1404-in-cobblerserver/</link>
      <pubDate>Sat, 04 Jul 2015 14:57:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/04/preseed-file-for-ubuntu1404-in-cobblerserver/</guid>
      <description>Proseed File d-i time/zone string Asia/Shanghai # Setup the installation source d-i mirror/country string manual d-i mirror/http/hostname string $http_server #d-i mirror/http/directory string $install_source_directory d-i mirror/http/directory string /cobbler/ks_mirror/Ubuntu-14.04-x86_64/ubuntu d-i mirror/http/proxy string d-i apt-setup/security_host string $http_server d-i apt-setup/security_path string /cobbler/ks_mirror/Ubuntu-14.04-x86_64/ubuntu  Local Repository In one installed machine, do following for getting the repository of all of the installed packages:
$ sudo apt-get install dselect $ dpkg --get-selections | grep -v deinstall&amp;gt;InstalledPackage.txt $ awk {&#39;print $1&#39;} InstalledPackage.</description>
    </item>
    
    <item>
      <title>Try raid0 installation on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2015/07/03/try-raid0-installation-on-ubuntu/</link>
      <pubDate>Fri, 03 Jul 2015 10:58:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/07/03/try-raid0-installation-on-ubuntu/</guid>
      <description>Preparation Prepare the disks:
[root:/home/juju/img]# mkdir Raid0 [root:/home/juju/img]# cd Raid0/ [root:/home/juju/img/Raid0]# ls [root:/home/juju/img/Raid0]# qemu-img create -f qcow2 disk0.qcow2 10G Formatting &#39;disk0.qcow2&#39;, fmt=qcow2 size=10737418240 encryption=off cluster_size=65536 [root:/home/juju/img/Raid0]# qemu-img create -f qcow2 disk1.qcow2 10G Formatting &#39;disk1.qcow2&#39;, fmt=qcow2 size=10737418240 encryption=off cluster_size=65536 [root:/home/juju/img/Raid0]# qemu-img create -f qcow2 disk2.qcow2 10G Formatting &#39;disk2.qcow2&#39;, fmt=qcow2 size=10737418240 encryption=off cluster_size=65536  Prepare the Virtual Machine:
Partition Raid Configure the Software Raid0:
After Configuration of SoftRaid1, the screen displayed like:</description>
    </item>
    
    <item>
      <title>Insert public key into Cobbler Deployed System</title>
      <link>http://purplepalmdash.github.io/2015/06/29/insert-public-key-into-cobbler-deployed-system/</link>
      <pubDate>Mon, 29 Jun 2015 14:13:08 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/29/insert-public-key-into-cobbler-deployed-system/</guid>
      <description>First edit your kickstart file, add following line before the end of your kickstart:
[root@z_WHServer kickstarts]# pwd /var/lib/cobbler/kickstarts [root@z_WHServer kickstarts]# cat sample_end.ks # Start final steps + $SNIPPET(&#39;publickey_root&#39;) $SNIPPET(&#39;kickstart_done&#39;) # End final steps %end  And the publickey_root should be edited as following:
[root@z_WHServer snippets]# pwd /var/lib/cobbler/snippets [root@z_WHServer snippets]# cat publickey_root # Install CobblerServer&#39;s(10.47.58.2) public key for root user cd /root mkdir --mode=700 .ssh cat &amp;gt;&amp;gt; .ssh/authorized_keys &amp;lt;&amp;lt; &amp;quot;PUBLIC_KEY&amp;quot; ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA3B3GtGuKY0l2Ak9+WSkorY7R+Cx5/u3RMua/7GrvP05IPywQdkR+mqwdRydNjyhB96nHlYZtr8Fbfn5iwqn0j8dz8wmTZicBNeRqIdbe/YUje5NjXxDXjYda63VfDhpgzJ53KICTx6pBhGaeOKS/U5HqCpDbF7ODP8siU7bRhk1LkIQ6VwZYUg7b0oR+Sw6XJ31Z7gs4CWF6zfjfQQoF7EoMA+dnqvt2K4PQPXNSBJQx3qb9jyXIXvo333PcfIX6mD1TW1wDAIXLm4qz4mi7C8Ax9h+T/D98r08WX360vC5Tzr8feXMs6H4il4s4Ftq7RVoqCNKmG3AB1LTp4AQAzw== root@z_WHServer PUBLIC_KEY chmod 600 .</description>
    </item>
    
    <item>
      <title>Linux Tips(2)</title>
      <link>http://purplepalmdash.github.io/2015/06/29/linux-tips-2/</link>
      <pubDate>Mon, 29 Jun 2015 09:27:17 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/29/linux-tips-2/</guid>
      <description>1. XenCenter Installation Just use your windows&amp;rsquo;s browser point to your XenServer IP Address, Download the XenCenter, and install it.
Update Some tools on XenServer:
$ vim /etc/yum.repos.d/CentOS-Base.repo ... enabled=1 ... $ yum install -y lm_sensors  After installation of lm_sensors you could see more detailed information on XenServer.
2. Disable Specified Repository Since citrix have no data in its repository, simply disable it.
$ yum update --disablerepo=citrix  3.</description>
    </item>
    
    <item>
      <title>Install Newest Version Of Cobbler</title>
      <link>http://purplepalmdash.github.io/2015/06/24/install-newest-version-of-cobbler/</link>
      <pubDate>Wed, 24 Jun 2015 09:38:50 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/24/install-newest-version-of-cobbler/</guid>
      <description>Background Cobbler has changed its homepage from www.cobblerd.org to http://cobbler.github.io/, thus some configuration will be be failed. In order to solve these problems, we have to upgrade to the newest version, current newest version is 2.6.9.
Download And Install Go to http://cobbler.github.io/downloads/2.6.x.html for selecting your distribution, and download them to your folder. Mine is configured via:
$ wget http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-6/home:libertas-ict:cobbler26.repo $ cp home\:libertas-ict\:cobbler26.repo /etc/yum.repos.d/cobbler26.repo $ yum install -y cobbler cobbler-web  Configuration After installation, configure your newest cobbler via:</description>
    </item>
    
    <item>
      <title>Import More ISOs in Cobbler</title>
      <link>http://purplepalmdash.github.io/2015/06/23/import-more-isos-in-cobbler/</link>
      <pubDate>Tue, 23 Jun 2015 20:52:09 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/23/import-more-isos-in-cobbler/</guid>
      <description>Ubuntu12.04 Since you have the iso files, import it via:
[root@CobblerServer iso]# mount -t iso9660 -o loop /mnt/iso/ubuntu-12.04.3-server-amd64.iso /mnt1 [root@CobblerServer iso]# cobbler import --name=Ubuntu-12.04 --arch=x86_64 --path=/mnt1/ [root@CobblerServer iso]# cobbler profile list CentOS-7-x86_64 Ubuntu-12.04-x86_64 Ubuntu14.04-x86_64  To make it quickly deployment, visit:
http://purplepalmdash.github.io/blog/2015/05/18/my-configuration-on-cobbler-for-deploying-ubuntu12-dot-04/
Edit its profile like following:
[root@CobblerServer kickstarts]# cobbler profile edit --name=Ubuntu-12.04-x86_64 --kickstart=/var/lib/cobbler/kickstarts/ubuntu1204.seed  Create a new virtual machine for testing.
[root@CobblerServer kickstarts]# cobbler system add --name=test1204 --profile=Ubuntu-12.04-x86_64 --mac=52:54:00:e4:2c:df --interface=eth0 --ip-address=10.</description>
    </item>
    
    <item>
      <title>WH Worktips(5)</title>
      <link>http://purplepalmdash.github.io/2015/06/19/wh-worktips-5/</link>
      <pubDate>Fri, 19 Jun 2015 15:29:56 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/19/wh-worktips-5/</guid>
      <description>This worktips will enable the visibility for ansible deployed nodes.
[root@z_WHServer Code]# cd ansible-tower-setup-2.1.5/ [root@z_WHServer ansible-tower-setup-2.1.5]# ls ansible.cfg configure group_vars host_vars README.md roles setup.sh site.yml  Later I will finish this. But remember the tutorial pdf works well.</description>
    </item>
    
    <item>
      <title>Use VirtualEnv For Downloading PIP Packages</title>
      <link>http://purplepalmdash.github.io/2015/06/18/use-virtualenv-for-downloading-pip-packages/</link>
      <pubDate>Thu, 18 Jun 2015 20:56:30 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/18/use-virtualenv-for-downloading-pip-packages/</guid>
      <description>In order to use offline installation of pip, I tried following steps for retrieving the packages.
Fetch Packages First install virtualenv packages on CentOS7.
$ sudo yum install -y python-virtualenv $ virtualenv venv New python executable in venv/bin/python Installing Setuptools..............................................................................................................................................................................................................................done. Installing Pip.....................................................................................................................................................................................................................................................................................................................................done. $ ls venv bin include lib lib64 $ source venv/bin/activate (venv)$ (venv)$ pip install --download-cache=/home/dash/pipcache cloudmonkey (venv)$ ls pipcache/ https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2Fa%2Fargcomplete%2Fargcomplete-0.8.9.tar.gz https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2Fa%2Fargcomplete%2Fargcomplete-0.8.9.tar.gz.content-type https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2Fc%2Fcloudmonkey%2Fcloudmonkey-5.3.1-0.tar.gz https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2Fc%2Fcloudmonkey%2Fcloudmonkey-5.3.1-0.tar.gz.content-type https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2FP%2FPrettyTable%2Fprettytable-0.7.2.tar.bz2 ...... (venv)$ mkdir ~/pipcache2 (venv)$ pip install cloudmonkey --download=/home/dash/pipcache2 (venv)$ ls pipcache2 argcomplete-0.</description>
    </item>
    
    <item>
      <title>WH Worktips(2)</title>
      <link>http://purplepalmdash.github.io/2015/06/18/wh-worktips-2/</link>
      <pubDate>Thu, 18 Jun 2015 10:20:48 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/18/wh-worktips-2/</guid>
      <description>Cobbler Web Visit the following website:
http://10.47.58.2/cobbler_web
You will see:
Added More Profiles The default kickstart configuration file could found under:
/var/lib/cobbler/kickstarts/sample_end.ks, copy it to your own.
$ cp /var/lib/cobbler/kickstarts/sample_end.ks CentOS65Desktop.cfg $ vim CentOS65Desktop.cfg # Allow anaconda to partition the system as needed # autopart # 1G Swap and remains others to be ext4 part swap --fstype=&amp;quot;swap&amp;quot; --size=1024 part / --asprimary --fstype=&amp;quot;ext4&amp;quot; --grow --size=1 ....... %packages # Added from here @additional-devel @basic-desktop @chinese-support @desktop-platform @development @fonts @general-desktop @input-methods @x11 git -ibus-table-cangjie -ibus-table-erbi -ibus-table-wubi # End of added $SNIPPET(&#39;func_install_if_enabled&#39;) %end  More configurations could be customized.</description>
    </item>
    
    <item>
      <title>WH Worktips(1)</title>
      <link>http://purplepalmdash.github.io/2015/06/17/wh-worktips-1/</link>
      <pubDate>Wed, 17 Jun 2015 14:55:39 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/17/wh-worktips-1/</guid>
      <description>Preparation Hardware: 2G Memory, 1-Core, the Cobbler Server, which runs CentOS6.6.
Network: Use a 10.47.58.0/24(Its name is WHNetwork), no dhcp server in this network.
Cobbler Server Preparation First Change its IP address to 10.47.58.2, gateway to 10.47.58.1.
[root@z_WHServer ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 TYPE=Ethernet UUID=a6e5b56f-661f-4128-ab8c-c575a9623245 ONBOOT=yes NM_CONTROLLED=yes BOOTPROTO=none IPADDR=10.47.58.2 GATEWAY=10.47.58.1 ...... [root@z_WHServer ~]# cat /etc/sysconfig/network NETWORKING=yes HOSTNAME=z_WHServer # vim /etc/selinux/config #SELINUX=enforcing SELINUX=disabled # reboot  Install and configure Cobbler Server via:</description>
    </item>
    
    <item>
      <title>XenServer Tips</title>
      <link>http://purplepalmdash.github.io/2015/06/16/xenserver-tips/</link>
      <pubDate>Tue, 16 Jun 2015 14:52:20 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/16/xenserver-tips/</guid>
      <description>Recently I want to research desktop virtualization on Xen, so this blog records all of the tips for Xen Hypervisor related info.
Nested Virtualization I place 4 core(Copy Host Configuration on CPU parameter), but the XenServer refuse to start, by using a none-hosted-configuration CPU configuration, it will fail on starting the machine, So I choose to install xen hypervisor on Ubuntu14.04.
Ubuntu and Xen Install via:
$ sudo apt-get install xen-hypervisor-amd64 $ sudo reboot  The Ubuntu will automatically choose xen for startup, so verify it via:</description>
    </item>
    
    <item>
      <title>Use 8188eu and Hostapd For Setting Soft-AP Router</title>
      <link>http://purplepalmdash.github.io/2015/06/11/use-8188eu-and-hostapd-for-setting-soft-ap-router/</link>
      <pubDate>Thu, 11 Jun 2015 16:25:51 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/11/use-8188eu-and-hostapd-for-setting-soft-ap-router/</guid>
      <description>HostAPD Install HostAPD via following commands:
$ sudo apt-get autoremove hostapd $ wget https://github.com/jenssegers/RTL8188-hostapd/archive/v2.0.tar.gz $ tar -zxvf v2.0.tar.gz $ cd RTL8188-hostapd-2.0/hostapd $ sudo make $ sudo make install $ sudo service hostapd restart [ ok ] Stopping advanced IEEE 802.11 management: hostapd. [ ok ] Starting advanced IEEE 802.11 management: hostapd.  dhcpd We need a dhcp server for assigning a new IP address to the clients who joins the ap:</description>
    </item>
    
    <item>
      <title>A Quick Setup For Chef Server/Client/Workstation</title>
      <link>http://purplepalmdash.github.io/2015/06/08/a-quick-setup-for-chef-server-slash-client-slash-workstation/</link>
      <pubDate>Mon, 08 Jun 2015 20:39:17 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/08/a-quick-setup-for-chef-server-slash-client-slash-workstation/</guid>
      <description>Machine Preparation QuickServer: 172.16.0.11, QuickClient: 172.16.0.12
QuickServer Machine:
xxx@QuickServer:~$ cat /etc/hostname QuickServer xxx@QuickServer:~$ cat /etc/hosts 127.0.0.1 localhost 127.0.1.1 QuickServer 172.16.0.11 QuickServer 172.16.0.12 QuickClient # The following lines are desirable for IPv6 capable hosts ::1 localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters xxx@QuickServer:~$ cat /etc/network/interfaces # This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). # The loopback network interface auto lo iface lo inet loopback # The primary network interface auto eth0 iface eth0 inet static address 172.</description>
    </item>
    
    <item>
      <title>Chef TroubleShooting 2</title>
      <link>http://purplepalmdash.github.io/2015/06/08/chef-troubleshooting-2/</link>
      <pubDate>Mon, 08 Jun 2015 19:43:13 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/08/chef-troubleshooting-2/</guid>
      <description>The ssl checking for adding new nodes is still a horrible procedure, following shows the correct steps for adding new node:
On Chef Workstation, add node via its ip address rather than via its hostname:
$ knife bootstrap 172.16.0.12 -x username_on_12 -P password_on_12 --sudo  The example knife.rb file should be written like following:
current_dir = File.dirname(__FILE__) log_level :info log_location STDOUT node_name &amp;quot;nodename&amp;quot; client_key &amp;quot;#{current_dir}/node.pem&amp;quot; validation_client_name &amp;quot;nodename&amp;quot; validation_key &amp;quot;#{current_dir}/node_org.pem&amp;quot; chef_server_url &amp;quot;https://tmpChefServer/organizations/nodename&amp;quot; syntax_check_cache_path &amp;quot;#{ENV[&#39;HOME&#39;]}/.</description>
    </item>
    
    <item>
      <title>OpenVSwitch and VXLAN How-to</title>
      <link>http://purplepalmdash.github.io/2015/06/08/openvswitch-and-vxlan-how-to/</link>
      <pubDate>Mon, 08 Jun 2015 09:48:20 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/08/openvswitch-and-vxlan-how-to/</guid>
      <description>Following records the steps for my setup for OpenVSwitch environment and configure VXLAN on it.
Preparation I use two VMs for this experiment, created a new virtual network, it&amp;rsquo;s 10.94.94.0/24, every vm machines adds into this network.
VM1, VM2, both have 1G Memory. 1 Core.
VM1: 10.94.94.11, VM2: 10.94.94.12.
$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get -y upgrade $ sudo apt-get install build-essential$ $ sudo reboot $ uname -a $ uname -a Linux OpenVSwitchVM1 3.</description>
    </item>
    
    <item>
      <title>Quickly Change CentOS Networking</title>
      <link>http://purplepalmdash.github.io/2015/06/07/quickly-change-centos-networking/</link>
      <pubDate>Sun, 07 Jun 2015 14:44:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/07/quickly-change-centos-networking/</guid>
      <description>When adding the existing qcow2 files to a new machine, following steps needs to be done to enable the new configuration for the networking:
Change udev rules Change the eth1 to eth0, and disable the previous defined eth0:
[root@CentOSVM1 ~]# cat /etc/udev/rules.d/70-persistent-net.rules # This file was automatically generated by the /lib/udev/write_net_rules # program, run by the persistent-net-generator.rules rules file. # # You can modify it, as long as you keep each rule on a single # line, and change only the value of the NAME= key.</description>
    </item>
    
    <item>
      <title>Tips on using vagrant and chefdk</title>
      <link>http://purplepalmdash.github.io/2015/06/03/tips-on-using-vagrant-and-chefdk/</link>
      <pubDate>Wed, 03 Jun 2015 21:00:20 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/03/tips-on-using-vagrant-and-chefdk/</guid>
      <description>You should install all of the gem of berkshelf via:
  $ gem install berkshelf $ /opt/chef/embedded/bin/gem install berkshelf $ /opt/vagrant/embedded/bin/gem install berkshelf   Besure to add following into your PATH:
  $ echo $PATH /opt/chefdk/bin:/home/kkk/.rvm/gems/ruby-2.2.1/bin:/home/kkk/.rvm/gems/ruby-2.2.1@global/bin:/home/kkk/.rvm/rubies/ruby-2.2.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/kkk/.rvm/bin:/home/kkk/.rvm/bin:/home/kkk/.rvm/bin  So now you could continue with vagrant up or other steps.</description>
    </item>
    
    <item>
      <title>Chef Trouble-Shooting</title>
      <link>http://purplepalmdash.github.io/2015/06/02/chef-trouble-shooting/</link>
      <pubDate>Tue, 02 Jun 2015 16:16:42 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/02/chef-trouble-shooting/</guid>
      <description>Error Could not Add new nodes.
Reason This is because the chefDK remains the old version of chef-client,
[dash@~/chef-repo]$ chef --version Chef Development Kit Version: 0.6.0 chef-client version: ERROR berks version: ERROR kitchen version: 1.4.0  Solution In node, manually get verified via following command:
$ knife ssl fetch --config /etc/chef/client.rb $ chef-client -l debug -S https://ChefServer/organizations/xxxxx -K /xxx/xxx/xxxxx.pem  Now bootstrap again, and you will see the node could be added into the Chef-Server&amp;rsquo;s system.</description>
    </item>
    
    <item>
      <title>Chef For Deploying OpenStack</title>
      <link>http://purplepalmdash.github.io/2015/06/01/chef-for-deploying-openstack/</link>
      <pubDate>Mon, 01 Jun 2015 11:19:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/06/01/chef-for-deploying-openstack/</guid>
      <description>Following article records all of the steps for using chef for deploying OpenStack.
Refers to:
http://ehaselwanter.com/en/blog/2014/10/15/deploying-openstack-with-stackforge-chef-zero-style/
Change vbox files Edit the Vagrantfile for bring up the vbox, then startup the machine, modify its content , save it.
$ vim Vagrantfile # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant::Config.run do |config| config.vm.box = &amp;quot;Trusy64&amp;quot; config.vm.box_url = &amp;quot;http://xxx.xxx.xxx.xxx/opscode_ubuntu-14.04_chef-provisionerless.box&amp;quot; config.vm.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, 1024] end  Login to the running machine and modify its default repository from official to local repository.</description>
    </item>
    
    <item>
      <title>Chef Setup</title>
      <link>http://purplepalmdash.github.io/2015/05/26/chef-setup/</link>
      <pubDate>Tue, 26 May 2015 16:17:14 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/26/chef-setup/</guid>
      <description>For automatically deploying OpenStack, I use Chef for deployment, following records the steps for setting up the whole environment.
Machine Preparation Chef Server: 2-Core, 3G Memory, IP address: xxx.xxx.10.211, Ubuntu14.04.
Chef Workstation: 4-Core, 8G Memory, a physical machine, IP address: xxx.xxx.0.119, Ubuntu14.04.
Install Server Install the chef-server package, which downloaded from chef.io website, after installation, simply reconfigure it, this finishes the installation and configuration.
$ sudo dpkg -i chef-server-core_12.0.8-1_amd64.deb $ sudo chef-server-ctl reconfigure  Configure the permit file, also create the user and organization for the chef:</description>
    </item>
    
    <item>
      <title>Tips on deleteing neutron subnet and router</title>
      <link>http://purplepalmdash.github.io/2015/05/25/tips-on-deleteing-neutron-subnet-and-router/</link>
      <pubDate>Mon, 25 May 2015 21:44:54 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/25/tips-on-deleteing-neutron-subnet-and-router/</guid>
      <description>Get the existing subnet:
root@Controller:~# neutron subnet-list +--------------------------------------+-------------+----------------+--------------------------------------------------+ | id | name | cidr | allocation_pools | +--------------------------------------+-------------+----------------+--------------------------------------------------+ | 98725e3a-7ee2-4e3f-83e3-eaca0236918f | demo-subnet | 192.168.1.0/24 | {&amp;quot;start&amp;quot;: &amp;quot;192.168.1.2&amp;quot;, &amp;quot;end&amp;quot;: &amp;quot;192.168.1.254&amp;quot;} | +--------------------------------------+-------------+----------------+--------------------------------------------------+  Delete it via:
root@Controller:~# neutron subnet-delete --name demo-subnet Unable to complete operation on subnet 98725e3a-7ee2-4e3f-83e3-eaca0236918f. One or more ports have an IP allocation from this subnet. (HTTP 409) (Request-ID: req-7d729bcc-ec50-4de6-83d9-5d2b98332127)  Because we have the router, so we list the router via:</description>
    </item>
    
    <item>
      <title>三节点搭建OpenStack Juno(4)</title>
      <link>http://purplepalmdash.github.io/2015/05/25/san-jie-dian-da-jian-openstack-juno-4/</link>
      <pubDate>Mon, 25 May 2015 20:11:17 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/25/san-jie-dian-da-jian-openstack-juno-4/</guid>
      <description>Neutron和nova-network的区别在于，nova-network可以让你在每个instance上部署一种网络类型，适合基本的网络功能。而Neutron则使得你可以在一个instance上部署多种网络类型，并且以插件的方式支持多种虚拟化网络。
详细的介绍，以后慢慢加，理解吃透了再加上来，这里单单提操作步骤。
准备 数据库准备如下:
root@Controller:~# mysql -u root -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 39 Server version: 5.5.43-MariaDB-1ubuntu0.14.04.2 (Ubuntu) Copyright (c) 2000, 2015, Oracle, MariaDB Corporation Ab and others. Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement. MariaDB [(none)]&amp;gt; CREATE DATABASE neutron; Query OK, 1 row affected (0.00 sec) MariaDB [(none)]&amp;gt; GRANT ALL PRIVILEGES ON neutron.</description>
    </item>
    
    <item>
      <title>三节点搭建OpenStack Juno(3)</title>
      <link>http://purplepalmdash.github.io/2015/05/25/san-jie-dian-da-jian-openstack-juno-3/</link>
      <pubDate>Mon, 25 May 2015 16:51:01 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/25/san-jie-dian-da-jian-openstack-juno-3/</guid>
      <description>Nova Nova数据库 创建nova数据库:
# mysql -u root -p CREATE DATABASE nova; GRANT ALL PRIVILEGES ON nova.* TO &#39;nova&#39;@&#39;localhost&#39; \ IDENTIFIED BY &#39;NOVA_DBPASS&#39;; GRANT ALL PRIVILEGES ON nova.* TO &#39;nova&#39;@&#39;%&#39; \ IDENTIFIED BY &#39;NOVA_DBPASS&#39;; quit;  创建nova用户:
# source /home/dash/admin-openrc.sh root@Controller:~# keystone user-create --name nova --pass xxxxxx +----------+----------------------------------+ | Property | Value | +----------+----------------------------------+ | email | | | enabled | True | | id | 4a3768e3f4754cd0b9d47c6fadb22c7e | | name | nova | | username | nova | +----------+----------------------------------+  为admin角色添加nova用户:</description>
    </item>
    
    <item>
      <title>LXCize the KVM machine</title>
      <link>http://purplepalmdash.github.io/2015/05/25/lxcize-the-kvm-machine/</link>
      <pubDate>Mon, 25 May 2015 11:46:28 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/25/lxcize-the-kvm-machine/</guid>
      <description>In order to make exsiting kvm based machine to be lxc container, following is the steps.
Refers to:
https://www.stgraber.org/2012/03/04/booting-an-ubuntu-12-04-virtual-machine-in-an-lxc-container/
Convert Disk Formats First we want to convert the qcow2 format image to raw format, by following command:
$ qemu-img convert u12-debug-ui.qcow2 Contrail.raw  This will take a very long time, because qcow2 file will expand to a whole images, like mine, the Contrail.raw in fact expands to 100G size.</description>
    </item>
    
    <item>
      <title>三节点搭建OpenStack Juno(2)</title>
      <link>http://purplepalmdash.github.io/2015/05/24/san-jie-dian-da-jian-openstack-juno-2/</link>
      <pubDate>Sun, 24 May 2015 22:37:28 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/24/san-jie-dian-da-jian-openstack-juno-2/</guid>
      <description>MySQL数据库 绝大多数的OpenStack服务使用SQL数据库来存储信息，一般情况下数据库运行在控制节点上，这里我们使用MariaDB或者MySQL来作为SQL数据库。
安装, 注意安装过程中需要输入密码:
# apt-get install mariadb-server python-mysqldb  配置, 主要是更改了bind的地址，添加了一些有用选项，并支持UTF-8编码:
$ sudo vim /etc/mysql/my.cnf [mysqld] ... bind-address = 10.55.55.2 ... default-storage-engine = innodb innodb_file_per_table collation-server = utf8_general_ci init-connect = &#39;SET NAMES utf8&#39; character-set-server = utf8  完成安装，包括重启服务及加密数据库服务:
# service mysql restart # mysql_secure_installation  消息服务器 OpenStack使用message broker用来在各种服务器之间调度操作和协调状态信息，通常情况下消息服务器也运行在控制节点上，OpenStack支持RabbitMQ, Qpid和ZeroMQ, 这里使用RabbitMQ.
安装:
# apt-get install rabbitmq-server  配置，首先我们需要设定rabbitMQ使用的密码:
# rabbitmqctl change_password guest RABBIT_PASS Changing password for user &amp;quot;guest&amp;quot; ... .</description>
    </item>
    
    <item>
      <title>三节点搭建OpenStack Juno(1)</title>
      <link>http://purplepalmdash.github.io/2015/05/24/san-jie-dian-da-jian-openstack-juno/</link>
      <pubDate>Sun, 24 May 2015 14:36:34 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/24/san-jie-dian-da-jian-openstack-juno/</guid>
      <description>目的 最近在研究解耦OpenStack，以及OpenStack的各种网络模型，下面是一个最简单的用于搭建OpenStack Juno的过程。
硬件及网络准备 物理服务器 物理服务器: i5-4460/32G 内存，128G SSD+3T IDE，事实上这个教程跑完你也用不到这么强悍的配置，理论上在8G的物理机器上就可以运行完本文。
物理服务器操作系统: Ubuntu14.04
虚拟机： 虚拟机1, Controller: 1 processor, 2 GB memory, and 5 GB storage.
虚拟机2, Network: 1 processor, 512 MB memory, and 5 GB storage.
虚拟机3, Compute: 1 processor, 2 GB memory, and 10 GB storage.
网络规划 Management: 10.55.55.0/24, 只用于管理的网络，公网无法访问。简单来说，这个网络用于OpenStack各个组件之间的相互通信。
Tunnel: 10.66.66.0/24, 用于计算节点和网络节点之间的通信。这个隧道使得虚拟机的实例可以和相互通信。
External: 192.168.1.0/24, 用于虚拟机实例的Internet访问。
当然我们可以添加额外的存储网络，这里为了简单起见我们不使用cinder服务，使用单纯的虚拟机镜像即可。
节点网络名规划 Controller节点: controller.openstack.local, 10.55.55.2(管理网络), N/A, N/A.
Network节点: Network.openstack.local, 10.55.55.3(管理网络), 10.66.66.3(隧道网络), 192.168.1.3(Internet公网). Compute节点: Compute.</description>
    </item>
    
    <item>
      <title>Use apt-cacher For Speeding Up Deployment</title>
      <link>http://purplepalmdash.github.io/2015/05/23/use-apt-cacher-for-speeding-up-deployment/</link>
      <pubDate>Sat, 23 May 2015 08:27:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/23/use-apt-cacher-for-speeding-up-deployment/</guid>
      <description>Installation Install apt-cacher via following command:
$ sudo apt-get install apt-cacher  Choose &amp;ldquo;Daemon&amp;rdquo; When you see following picture:
Configuration Make sure the configuration AUTOSTART=1 in /etc/default/apt-cacher.
Enable allowed_hosts=* in /etc/apt-cacher/apt-cacher.conf.
Now restart the machine, and check the apt-cacher service via following command:
$ ps -ef | grep apt www-data 825 1 0 20:34 ? 00:00:00 /usr/bin/perl /usr/sbin/apt-cacher -R 3 -d -p /var/run/apt-cacher.pid $ sudo netstat -anp | grep 3142 tcp6 0 0 :::3142 :::* LISTEN 825/perl  Now when you setup the machines, point the http-proxy into this machine, it will automatically cache the packages.</description>
    </item>
    
    <item>
      <title>Change Cobbler Profile For Using Local Repository</title>
      <link>http://purplepalmdash.github.io/2015/05/22/change-cobbler-profile-for-using-local-repository/</link>
      <pubDate>Fri, 22 May 2015 14:12:58 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/22/change-cobbler-profile-for-using-local-repository/</guid>
      <description>Cobbler Profiles For getting the profiles and get the detailed information of the profile.
# cobbler profile list ubuntu1404-x86_64 # cobbler profile help usage ===== cobbler profile add cobbler profile copy cobbler profile dumpvars cobbler profile edit cobbler profile find cobbler profile getks cobbler profile list cobbler profile remove cobbler profile rename cobbler profile report # cobbler profile report ubuntu1404-x86_64 ...... Kickstart : /var/lib/cobbler/kickstarts/sample.seed ......  Use Local Repository For adding the repository via following command, you could use your local repository:</description>
    </item>
    
    <item>
      <title>Setup CentOS6/7 Local Repository</title>
      <link>http://purplepalmdash.github.io/2015/05/20/setup-centos6-slash-7-local-repository/</link>
      <pubDate>Wed, 20 May 2015 11:32:56 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/20/setup-centos6-slash-7-local-repository/</guid>
      <description>For speeding up the deployment, I have to setup the local repository for CentOS6/7, following is the steps for setting up such two repositories.
The steps are followed by following URL:
https://support.opennodecloud.com/wiki/doku.php?id=usrdoc:os:repomirror
# cd /etc/yum.repos.d/ # curl -O https://copr.fedoraproject.org/coprs/baurzhanm/mrepo/repo/epel-6/baurzhanm-mrepo-epel-6.repo # vim baurzhanm-mrepo-epel-6.repo # yum update # yum -y install screen lftp httpd mrepo # vim mrepo.conf ### Configuration file for mrepo ### The [main] section allows to override mrepo&#39;s default settings ### The mrepo-example.</description>
    </item>
    
    <item>
      <title>Setup Local Repository</title>
      <link>http://purplepalmdash.github.io/2015/05/19/setup-local-repository/</link>
      <pubDate>Tue, 19 May 2015 11:57:19 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/19/setup-local-repository/</guid>
      <description>Ubuntu After using apt-mirror syncing all of the packages from the repository website, setup a ftp site:
# apt-get install -y proftpd # cat conf.d/anonymous.conf &amp;lt;Anonymous ~ftp&amp;gt; User ftp Group nogroup UserAlias anonymous ftp RequireValidShell off # MaxClients 10 &amp;lt;Directory *&amp;gt; &amp;lt;Limit WRITE&amp;gt; DenyAll &amp;lt;/Limit&amp;gt; &amp;lt;/Directory&amp;gt; &amp;lt;/Anonymous&amp;gt; # mount --bind /mnt/myrepo/mirror/mirrors.aliyun.com/ /srv/ftp/ # service proftpd restart  Now Open your browser to ftp://Your_URL/, you will find the repository available.</description>
    </item>
    
    <item>
      <title>My Configuration On Cobbler For Deploying Ubuntu12.04</title>
      <link>http://purplepalmdash.github.io/2015/05/18/my-configuration-on-cobbler-for-deploying-ubuntu12-dot-04/</link>
      <pubDate>Mon, 18 May 2015 18:15:47 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/18/my-configuration-on-cobbler-for-deploying-ubuntu12-dot-04/</guid>
      <description>Configuration file for preseed, put it under: /var/lib/cobbler/kickstarts/autoinstall.seed:
# BASIC d-i debian-installer/locale string en_US.UTF-8 d-i debian-installer/splash boolean false d-i console-setup/ask_detect boolean false d-i console-setup/layoutcode string us d-i console-setup/variantcode string d-i clock-setup/utc boolean true d-i clock-setup/ntp boolean true # DISKPART d-i partman-auto/method string regular d-i partman-lvm/device_remove_lvm boolean true d-i partman-lvm/confirm boolean true d-i partman/confirm_write_new_label boolean true d-i partman/choose_partition select Finish partitioning and write changes to disk d-i partman/confirm boolean true d-i partman/confirm_nooverwrite boolean true d-i partman/default_filesystem string ext3 # SOFTWARE # /var/www/cobbler/ks_mirror/Ubuntu12.</description>
    </item>
    
    <item>
      <title>Re-Orgnize Blog</title>
      <link>http://purplepalmdash.github.io/2015/05/16/re-orgnize-blog/</link>
      <pubDate>Sat, 16 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/16/re-orgnize-blog/</guid>
      <description>Since my last blog touched something special, I have to delete the whole repository and re-orgnize the structure again. This time I also use Octopress, but the version has been upgraded to the 3.0, this article records the steps.
Github Account Register a new account, and verrify the email, add your own ssh key, test it via ssh -T git@github.com
Repository Get the latest repository via:
$ git clone https://github.</description>
    </item>
    
    <item>
      <title>Setup A More intelligent OpenWRT Router</title>
      <link>http://purplepalmdash.github.io/2015/05/14/setup-a-more-intelligent-openwrt-router/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/14/setup-a-more-intelligent-openwrt-router/</guid>
      <description>Openssh-Server The default sshd is provided by dropbear, the functionality is not good, so I have to replace it with openssh-server.
root@OpenWrt:~# uci set dropbear.@dropbear[0].Port=2222 root@OpenWrt:~# uci commit dropbear root@OpenWrt:~# /etc/init.d/dropbear restart root@OpenWrt:~# opkg install openssh-server root@OpenWrt:~# opkg install openssh-client  Configure the OpenSSH:
# /etc/init.d/sshd enable # /etc/init.d/sshd start # /etc/init.d/dropbear disable # /etc/init.d/dropbear stop  The next time you login will ask you for changing your password, do it and continue for using ssh.</description>
    </item>
    
    <item>
      <title>Setup the Cobbler Server</title>
      <link>http://purplepalmdash.github.io/2015/05/14/setup-the-cobbler-server/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/14/setup-the-cobbler-server/</guid>
      <description>The reference material is mainly from:
http://www.cobblerd.org/manuals/quickstart/
Prepartion First install the CentOS6.6, choose the basic server.
After installation, update to the latest system via yum -y update.
Disable the SELinux via:
# vim /etc/selinux/config #SELINUX=enforcing │ SELINUX=disabled  Then restart the compute.
Add epel repository:
# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo # yum update # yum install -y cobbler cobbler-web  Configuration Change the default password:
# openssl passwd -1 │ Password: │ Verifying - Password: │ igaowugoauwgoueougo [root@CobblerServer ~]# vim /etc/cobbler/settings default_password_crypted: &amp;quot;agowuoguwoawoguwoe&amp;quot;  Set the Server and Next_Server to the specified IP Address, DO NOT use 0.</description>
    </item>
    
    <item>
      <title>Automatically Recover SSH Connection</title>
      <link>http://purplepalmdash.github.io/2015/05/11/automatically-recover-ssh-connection/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/11/automatically-recover-ssh-connection/</guid>
      <description>Thanks for the Great File Wall, my ssh connection to my vps is not stable, so I use following scripts for automatically maintain the ssh conneciton, once the connection down, it will restart immediately.
$ vim autokeepssh.sh #!/bin/bash while [ &#39;&#39; == &#39;&#39; ] do # Use ssh -R for reverse ssh ssh_d_process_num=`ps aux|grep -E &#39;ssh -NfR&#39; |grep -v grep |wc -l` if [ &amp;quot;$ssh_d_process_num&amp;quot; == &amp;quot;0&amp;quot; ]; then # Automatically start the ssh proxy echo &amp;quot;Autostart!</description>
    </item>
    
    <item>
      <title>Setup PXE Server</title>
      <link>http://purplepalmdash.github.io/2015/05/11/setup-pxe-server/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/11/setup-pxe-server/</guid>
      <description>This article record how to setup the pxe server and setup the CentOS quick installation repository, using it we could quickly setup the CentOS on new machine.
Installation To install following packages for preparing the environment:
$ sudo apt-get install dnsmasq tftpd-hpa apache2 system-config-kickstart  Configure the apache2&amp;rsquo;s default configuration file:
$ sudo vim /etc/apache2/sites-enabled/000-default.conf DocumentRoot /var/www/  Configure the dnsmasq via following command:
$ sudo vim /etc/dnsmasq.conf bogus-priv filterwin2k interface=eth0 domain=nova.</description>
    </item>
    
    <item>
      <title>Tips For Setting Up CentOS Local Repository</title>
      <link>http://purplepalmdash.github.io/2015/05/11/tips-for-setting-up-centos-local-repository/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/11/tips-for-setting-up-centos-local-repository/</guid>
      <description>The material is learned from:
http://paulcodr.co/blog/2015/yumrepo-server-local/
Steps Local ISO Preparation:
[root@localhost ~]# mkdir isos bin [root@localhost ~]# ls isos CentOS-6.6-x86_64-bin-DVD1.iso CentOS-6.6-x86_64-bin-DVD2.iso  Download the scripts:
# cd bin # wget http://paulcodr.co/download/yum-scripts.zip # unzip yum-scripts.zip Archive: yum-scripts.zip creating: yum-scripts/ inflating: yum-scripts/yum-create-server-centos6.6.sh inflating: yum-scripts/yum-rsync-minimal-centos6.6.sh  Change the priviledges:
[root@localhost bin]# chown -R root:root /root/isos [root@localhost bin]# chmod 750 -R /root/bin  Execute the script:
[root@localhost bin]# mv yum-scripts/* ./ [root@localhost bin]# ls yum-create-server-centos6.</description>
    </item>
    
    <item>
      <title>使用Fuel部署OpenContrail(6)</title>
      <link>http://purplepalmdash.github.io/2015/05/06/shi-yong-fuelbu-shu-opencontrail-6/</link>
      <pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/06/shi-yong-fuelbu-shu-opencontrail-6/</guid>
      <description>前面在HA类型的Fuel OpenStack基础上集成了OpenContrail，然而在实际的开发和测试中，用HA类型比较浪费硬件资源，因此这次我把部署节点从7个压缩到3个，做多节点上非HA类型的OpenStack集成OpenContrail.
先决条件 这次只用三台机器来做部署，分别为:
2-Core, 3G内存, 100G硬盘, 用于安装OpenStack Controller.
2-Core, 2G内存, 100G硬盘, 用于安装OpenStack Compute. 注意这台机器需要Copy Host CPU configuration, 以激活KVM。
2-Core, 3G内存, 100G硬盘, 用于安装Contrail.
创建出来的两个用于部署的OpenStack环境如下:
值得注意的是，在OpenStack的配置中，我们激活了Ceilometer，用于统计，所以需要额外增加一台2G内存大小的虚拟机。
安装 安装过程和HA的过程大同小异，配置好网络以后，现在I3OpenStack中部署好OpenStack，而后用provision的方式将I3Contrail中的Contrail部署节点机器安装为Ubuntu的格式。
这里的具体配置过程可以参考《使用Fuel部署OpenContrail(1)》到《使用Fuel部署OpenContrail(3)》.
一切就绪后，我们进入到配置过程.
配置 详细配置如下:
(Contrail) 配置Contrail部署节点 删除不用的网络端口, 并配置ifccfg-eth4后重启:
# cd /etc/network/interfaces.d/ # rm -f ifcfg-eth1 # rm -f ifcfg-eth2 # rm -f ifcfg-eth3 # vim ifcfg-eth4 auto eth4 iface eth4 inet static address 10.77.77.100 netmask 255.255.255.0 gateway 10.77.77.1 post-up ethtool -K eth4 gso off gro off || true # reboot  确保在Contrail部署节点上，可以ping通OpenStack Controller的10.</description>
    </item>
    
    <item>
      <title>Building ChromeOS Steps</title>
      <link>http://purplepalmdash.github.io/2015/05/05/building-chromeos-steps/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/05/05/building-chromeos-steps/</guid>
      <description>My aim is for enable the bluetooth Networking in my Chromebook, AKA BNEP, so first I have to build out some experimentation platforms for investigation, following is the steps for building out the ChromeOS Images and let it run under kvm based virtual machine.
Prerequistites I use a 6-Giga-Byte memory machine for building, first install following packages:
$ sudo apt-get install git-core gitk git-gui subversion curl  Since I am in china mainland, the connection to googlesourcecode is blocked by Great Fire Wall(Fuck you!</description>
    </item>
    
    <item>
      <title>Modification SWAP on RPI Installation</title>
      <link>http://purplepalmdash.github.io/2015/04/30/modification-on-rpi-installation/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/30/modification-on-rpi-installation/</guid>
      <description>First disable the swap partition, for it will save your sd card:
Know where is your swap file:
$ cat /proc/swap*  Disable it via change the S to K under /etc/rcx.d, and reboot the services:
$ sudo mv S02dphys-swapfile K02dphys-swapfile  </description>
    </item>
    
    <item>
      <title>Build CentOS Image For MAAS</title>
      <link>http://purplepalmdash.github.io/2015/04/29/build-centos-image-for-maas/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/29/build-centos-image-for-maas/</guid>
      <description>MAAS could only deploy Ubuntu in its official support, this artcle will introduce how to Build CentOS based images.
Preparation First you need a Ubuntu14.04 machine with kvm enabled.
$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get -y upgrade &amp;amp;&amp;amp; sudo apt-get -y dist-upgrade $ sudo apt-get install build-essential  Get Build Scripts Get the source code from the launchpad, and run following command for preparing the building environment.
$ bzr branch lp:maas-image-builder $ cd maas-images-builder $ make install-dependencies  For speed-up building, I use china mainland&amp;rsquo;s repository,</description>
    </item>
    
    <item>
      <title>Trouble Shooting On Juju&#39;s Local Deployment</title>
      <link>http://purplepalmdash.github.io/2015/04/28/trouble-shooting-on-jujus-local-deployment/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/28/trouble-shooting-on-jujus-local-deployment/</guid>
      <description>When deploying juju, after juju bootstrap, use juju ssh for login, it will hint me:
$ juju ssh 1 ...... Permission denied (publickey).  That could be solved by specify the id_rsa.pub key:
$ ssh-keygen -t rsa -b 2048 $ juju bootstrap $ juju bootstrap $ juju deploy wordpress $ juju deploy mysql $ juju add-relation wordpress mysql $ juju status $ juju expose wordpress  By doing this you could make your juju deployment on local successfully.</description>
    </item>
    
    <item>
      <title>Use reave for testing wireless security</title>
      <link>http://purplepalmdash.github.io/2015/04/28/use-reave-for-testing-wireless-security/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/28/use-reave-for-testing-wireless-security/</guid>
      <description> For those who want to test the wireless security(Wireless Router), following is a serial of tools for automatically scan the WIFI and try to find the entrance to inner network.
Preparation Install following packages:
$ sudo apt-get install macchanger aircrack-ng reaver  Testing Suppose the wireless port in our equipment is mlan0, following are the detailed steps:
# macchanger -m 00:11:22:33:44:55 mlan0 # airmon-ng start mlan0 # ifconfig mlan0mon down # macchanger -m 00:11:22:33:44:55 mlan0mon # ifconfig mlan0mon up # airodump-ng mlan0mon # reaver -i mlan0mon -b xx:xx:xx:xx:xx -vv -dh-small  </description>
    </item>
    
    <item>
      <title>使用Fuel部署OpenContrail(2)</title>
      <link>http://purplepalmdash.github.io/2015/04/27/shi-yong-fuelbu-shu-opencontrail-2/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/27/shi-yong-fuelbu-shu-opencontrail-2/</guid>
      <description>本节在前面部署完Fuel 控制节点的基础上，接着部署一个OpenStack HA环境，并准备好OpenContrail的三个部署节点。
节点初始化准备 所有加入到Fuel控制节点里的机器，在加入前都需要进行初始化配置，而后才可以被Fuel所识别.
在所有配置好的机器里，点击Details-&amp;gt; Boot Options, 设置如下：
因为第一次启动的时候，磁盘里是没有内容的，机器会自动从第二选项启动(PXE). 机器将自动侦测5个网段上的PXE Server， 因为Fuel Controller接管了10.20.0.0/24 网段上的PXE请求，它将会把机器从PXE变成可部署的状态。
OpenStack HA环境创建 创建一个OpenStack HA环境，如下步骤，因为是HA，所以需要至少三个OpenStack Controller节点和一个OpenStack Compute节点。
点击界面里的New OpenStack Environment, 在弹出的窗口中，命名需要部署的HA环境名，并选择部署所需要的镜像，这里我们选择Ubuntu作为部署OpenStack的基础镜像。
点击下一步，选择HA模式：
点击下一步，选择计算节点模式，这里选择qemu或者kvm问题都不大，不要选vcenter就是了:
点击下一步，进入到网络模式选择，选择Legacy Network(nova-network), 先部署成这种形式，接下来我们会使用neutron和contrail的组合重新规划网络:
点击下一步，Storage Backend，因为我们不打算引入任何存储节点，这里选择Default，直接进入下一步， Additional Service里我们也不打算启任何额外的服务，一路Next直到最后Create出整个OpenStack环境。
依次创建另一个OpenStack HA环境，用来部署三台Contrail Controller的节点机.
OpenStack环境网络 Fuel默认的网络配置会激活三个物理端口，第一个端口接入PXE网络，第二个接入Public网络，第三个上启三个VLAN，分别接入到Management/Storage/Private网络。我认为VLAN的配置增加了配置和部署的复杂度，更改为五个物理网络，分别使用我们在Virt-Manager中创建出的五个物理网卡接入。更改方法如下:
点击Network, 更改Management下的CIDR，手动填入10.55.55.0/24，然后去掉前面的Use VLAN Tag:
依次修改Storage网络和Private网络，更改完毕后，你的配置应该看起来是这样的:
对于Public网络我们不需要有任何修改，保持172.16网段的配置即可。
确认Network的配置为FlatDHCP Manager:
建立OpenStack HA环境 经PXE启动的虚拟机会把自己加入到&amp;rdquo;Unallocated Nodes&amp;rdquo;的队列里，在创建好的环境里，点击Node后，可以看到Fuel对角色的分配，添加一个OpenStack Controller的步骤如下：
在Assign Roles里选择&amp;rdquo;Controller&amp;rdquo;, 下面的备选节点里选择一台机器后，Apply Changes按钮会变绿，点击进入下一步.
在切换到的页面中，点击节点最右边的齿轮，配置该节点机器的网络、存储等，这里只配置网络：
点击Configure Network配置网络:
可以看到前4个节点已经配置好了，我们只需要把VM(Fix)这个框从eth0拖动到eth4即可:
添加完毕后，网络配置应该如下图:
点击Apply后，保存当前配置，然后点击Back to node list可以顺次添加其他节点。
下面是一个添加好的OpenStack HA环境示例(3 Controller + 2 Compute):</description>
    </item>
    
    <item>
      <title>使用Fuel部署OpenContrail(3)</title>
      <link>http://purplepalmdash.github.io/2015/04/27/shi-yong-fuelbu-shu-opencontrail-3/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/27/shi-yong-fuelbu-shu-opencontrail-3/</guid>
      <description>在OpenStack HA部署好的基础上集成OpenContrail是一个比较繁琐的过程，所以这一节里我们主要做集成前的准备工作，准备网络拓扑和创建好OpenContrail本地部署仓库。
网络规划 在Miranti提供的集成参考里，有如下的图，定义了整个环境的网络拓扑。
从图中可以看到各个节点所接入到的物理网络。我们根据这些节点接入网络的不同，来定义对应系统上的网络配置。
在安装完毕后的虚拟机里，可以看到该节点的DNS名称，例如node-19, node-20之类，在Fuel Controller上可以通过ssh root@node-19来登入相应角色的机器上。
以下是三个OpenStack节点的网络部署, N/A代表不需要配置，可以直接把对应的接口文件删除:
对应的接口分别是从eth0 ~ eth4.
OS1: node-19, PXE:10.20.0.14, Public: 172.16.0.6, Management: 10.55.55.6, Storage: 10.66.66.5, Private: N/A.
OS2: node-20, PXE:10.20.0.15, Public: 172.16.0.7, Management: 10.55.55.7, Storage: 10.66.66.6, Private: N/A.
OS3: node-22, PXE:10.20.0.16, Public: 172.16.0.8, Management: 10.55.55.8, Storage: 10.66.66.7, Private: N/A.
Compute: node-18, PXE: 10.20.0.13, Public: 172.16.0.5, Management: 10.55.55.5, Storage: 10.66.66.4, Private: N/A.
Contrail1: node-24, PXE: 10.20.0.10, Public: N/A, Management: N/A, Storage: N/A, Private: 10.</description>
    </item>
    
    <item>
      <title>使用Fuel部署OpenContrail(4)</title>
      <link>http://purplepalmdash.github.io/2015/04/27/shi-yong-fuelbu-shu-opencontrail-4/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/27/shi-yong-fuelbu-shu-opencontrail-4/</guid>
      <description>前面已经准备好了集成OpenContrail的所有事宜，接下来就是真正部署OpenContrail的过程了。部署OpenContrail需要修改所有的Contrail Controller节点，OpenStack Controller节点， OpenStack Compute节点，为了避免混淆，本节主要完成在Contrail Controller上的部署工作。
OpenStack Controller节点部署后配置 在所有的OpenStack Controller节点(OS1,OS2,OS3)上，打开/usr/lib/ocf/resource.d/mirantis/ns_haproxy文件，编辑以下字段:
OCF_Parameters部分:
OCF_RESKEY_private_network_default=&amp;quot;10.55.55.0/24&amp;quot; OCF_RESKEY_private_network_gateway_default=&amp;quot;10.55.55.1&amp;quot;  在meta_data()函数中，添加以下内容:
&amp;lt;parameter name=&amp;quot;private_network&amp;quot;&amp;gt; &amp;lt;longdesc lang=&amp;quot;en&amp;quot;&amp;gt; Private L3 network that should be configured inside the namespace &amp;lt;/longdesc&amp;gt; &amp;lt;shortdesc lang=&amp;quot;en&amp;quot;&amp;gt;Namespace private network&amp;lt;/shortdesc&amp;gt; &amp;lt;content type=&amp;quot;string&amp;quot; default=&amp;quot;${OCF_RESKEY_private_network_default}&amp;quot; /&amp;gt; &amp;lt;/parameter&amp;gt; &amp;lt;parameter name=&amp;quot;private_network_gateway&amp;quot;&amp;gt; &amp;lt;longdesc lang=&amp;quot;en&amp;quot;&amp;gt; Private L3 network gateway that should be configured inside the namespace. &amp;lt;/longdesc&amp;gt; &amp;lt;shortdesc lang=&amp;quot;en&amp;quot;&amp;gt;Namespace private gateway network&amp;lt;/shortdesc&amp;gt; &amp;lt;content type=&amp;quot;string&amp;quot; default=&amp;quot;${OCF_RESKEY_private_network_gateway_default}&amp;quot; /&amp;gt; &amp;lt;/parameter&amp;gt;  set_ns_routing()函数中，添加一下内容:
nsip route list | grep -q &amp;quot;${OCF_RESKEY_private_network}&amp;quot; if [ $?</description>
    </item>
    
    <item>
      <title>使用Fuel部署OpenContrail(5)</title>
      <link>http://purplepalmdash.github.io/2015/04/27/shi-yong-fuelbu-shu-opencontrail-5/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/27/shi-yong-fuelbu-shu-opencontrail-5/</guid>
      <description>本节主要用于配置OpenStack使用OpenContrail作为其网络配置器，主要涉及到OpenStack Controller和OpenStack Compute上的配置.
OpenStack Controller配置 !!! 以下的所有操作，需要在每个OpenStack Controller节点上进行！！！ OpenStack Controller不需要使用Private 网络，所以我们可以删除ifcfg-eth0文件:
# rm -f /etc/network/interface.d/ifcfg-eth4 # service networking restart  为了保险，最好重启更改完网络后的节点。
配置/etc/nova/nova.conf文件中的以下字段:
# vim /etc/nova/nova.conf [DEFAULT] network_api_class = nova.network.neutronv2.api.API neutron_url = http://10.77.77.9:9696 neutron_admin_tenant_name = services neutron_admin_username = neutron neutron_admin_password = rVlaAKUs neutron_url_timeout = 300 neutron_admin_auth_url = http://10.55.55.4:35357/v2.0/ firewall_driver = nova.virt.firewall.NoopFirewallDriver enabled_apis = ec2,osapi_compute,metadata security_group_api = neutron service_neutron_metadata_proxy = True  neutron_admin_password的值还是我们以前取得的admin token.
更改完上述配置后，重启以下服务:
# service nova-api restart # service nova-scheduler restart # service nova-conductor restart  在任一OpenStack Controller节点上，使用以下命令，在数据库中删除nova-network服务的定义。</description>
    </item>
    
    <item>
      <title>使用Fuel部署OpenContrail(1)</title>
      <link>http://purplepalmdash.github.io/2015/04/22/shi-yong-fuelbu-shu-opencontrail-1/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/22/shi-yong-fuelbu-shu-opencontrail-1/</guid>
      <description>最近在做OpenContrail的解耦合操作，因为官方提供的OpenContrail一键安装包里诸多组件都是用的默认的推荐，通过解耦合可以做到更灵活的安装和配置，有利于更方便的部署和后续的维护。所以这一系列文章是关于如何用Fuel在部署完OpenStack的基础上完成OpenContrail的部署。
先决条件 先决条件主要是用于准备用于部署的硬件环境和软件包。
硬件环境:
i5-4460(3.2GHz/4核/6M三级缓存), 32G 内存。
系统:
Ubuntu 14.04 LTS
软件:
$ sudo apt-get install libvirtd virt-manager  从Miranti网站下载： MirantisOpenStack-6.0.iso
从Contrail网站下载: contrail-install-packages_2.0-22~icehouse_all.deb
contrail-neutron-plugin仓库:
git clone https://github.com/Juniper/contrail-neutron-plugin.git  CPU/内存/磁盘规划 需要构建一共8台虚拟机用于在部署好的Mirantis OpenStack上集成OpenContrail. CPU/内存/磁盘规划如下:
1台Mirantis Fuel控制节点机,2核,划分3G内存, 100G磁盘。 3个OpenStack Controller节点, 2核,各划分3G内存, 100G磁盘。
1个OpenStack Compute节点，2核(嵌套虚拟化),划分3G内存, 100G磁盘。
3个OpenContrail节点，2核,各划分4G内存, 100G磁盘。
一共需要27G内存。磁盘格式为qcow2，实际占用远小于这个数，各个节点最大也就是在5G左右大小。
其中，关于嵌套虚拟化的CPU设置，如下图, 记得选择Copy host CPU Configuration:
启用嵌套虚拟化需要在BIOS设置，并添加相应的内核模块。
网络规划 Fuel OpenStack规划了5个网络，分别是:
Admin(PXE)
Public
Management
Storage
Private
我们在Virt-Manager里也同样创建出这样的五个子网:
Admin(PXE) &amp;ndash; FuelNAT &amp;ndash; 10.20.0.0/24
Public &amp;ndash; FuelPublic &amp;ndash; 172.</description>
    </item>
    
    <item>
      <title>Glusterfs Howto</title>
      <link>http://purplepalmdash.github.io/2015/04/17/glusterfs-howto/</link>
      <pubDate>Fri, 17 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/17/glusterfs-howto/</guid>
      <description>I want to expand my storage size on DigitalOcean, the droplet I have on DO one have 11G, and the other have 15G size, so if I could combine them together, I could do much more development on it. Following is how-to.
Glusterfs Setup Install it under Ubuntu via:
# apt-get install glusterfs-server  In both node, install the same software, and then add following lines into your /etc/hosts:</description>
    </item>
    
    <item>
      <title>Build fuel icehouse iso</title>
      <link>http://purplepalmdash.github.io/2015/04/16/build-fuel-icehouse-iso/</link>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/16/build-fuel-icehouse-iso/</guid>
      <description>Fuel6.0 didn&amp;rsquo;t support icdhouse by default, so we have to build it manually, the steps are listed as following:
apt-get install git mkdir ~/fuel cd ~/fuel git clone https://github.com/stackforge/fuel-main.git cd fuel-main ./prepare-build-env.sh export MIRROR_BASE=http://mirror.fuel-infra.org/fwm/6.0-icehouse make iso  After making the iso which have icehouse will be available.
TroubleShooting Some modifications should be made before we make them:
Trusty@ubuntu1204:~/code/fuel6.0/fuel-main$ git checkout stable/6.0 Branch stable/6.0 set up to track remote branch stable/6.</description>
    </item>
    
    <item>
      <title>Quickly play puppet</title>
      <link>http://purplepalmdash.github.io/2015/04/16/quickly-play-puppet/</link>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/16/quickly-play-puppet/</guid>
      <description>Server and Client In server, install following packages:
$ sudo apt-get install puppet puppetmaster  In client, only install puppet is enough.
After installation, added the each other&amp;rsquo;s name into /etc/hosts, let them ping each other via name rather than via ip address.
Sign In client, do following:
$ clouder@pc121:/etc/puppet$ puppet agent --test --server=pc119 Exiting; no certificate found and waitforcert is disabled  Then in server, listed all of the certification request:</description>
    </item>
    
    <item>
      <title>Fuel Build Issues</title>
      <link>http://purplepalmdash.github.io/2015/04/15/fuel-build-issues/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/15/fuel-build-issues/</guid>
      <description>I started to deploy OpenContrail use fuel, so following are some tips for building the plugins.
Fule-Plugin-Builder I encounter following errors when building the plugins of the contrail:
# fuel-plugin-builder --build ./ Unexpected error Wrong package version &amp;quot;2.0.0&amp;quot;  This is because the FPB on PyPI is too old for building the 2.0.0 version of the fuel-plugins.
Work-around is we manually create the fpb via following steps:
# git clone https://github.</description>
    </item>
    
    <item>
      <title>Using Fuel For Deploying OpenStack</title>
      <link>http://purplepalmdash.github.io/2015/04/15/using-fuel-for-deploying-openstack/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/15/using-fuel-for-deploying-openstack/</guid>
      <description>Network Configuration Fuel network configuration is listed as following pictures:
PXE network, for using fuel controller to control all of the nodes, 10.20.0.0/24:
Public network, or floating ip network 172.16.0.0/24 Admin network, 192.168.0.0/24:
Fuel Controller Installation Create a virtual machine, which have 2-Core, 3072MB Memory, and 100G Hard-disk, 3 ethernet port available for using, startup using the iso file, and then beging installing.</description>
    </item>
    
    <item>
      <title>安装Icehouse@Ubuntu14.04(6)</title>
      <link>http://purplepalmdash.github.io/2015/04/14/an-zhuang-icehouse-at-ubuntu14-dot-04-6/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/14/an-zhuang-icehouse-at-ubuntu14-dot-04-6/</guid>
      <description>这里我们安装horizon服务，使得我们对OpenStack的管理做到可视化.
###安装horizon 在Controller节点上，安装需要的包:
root@JunoController:~# apt-get -y install openstack-Trustyboard apache2 libapache2-mod-wsgi memcached python-memcache  建议删除ubuntu提供的主题，这个主题会使得一些翻译失效:
root@JunoController:~# apt-get remove --purge openstack-Trustyboard-ubuntu-theme  配置DashBoard的本地配置文件:
root@JunoController:~# vim /etc/openstack-Trustyboard/local_settings.py OPENSTACK_HOST = &amp;quot;10.17.17.211&amp;quot; TIME_ZONE = &amp;quot;Asia/Shanghai&amp;quot;  重新启动服务:
root@JunoController:~# service apache2 restart root@JunoController:~# service memcached restart  访问http://10.17.17.211/horizon登入到DashBoard以管理OpenStack.
查看OpenStack版本 节点机器起名错误，应该是IcehouseController/IcehouseCompute/IcehouseNetwork之类，但是这里可以通过以下命令来查看OpenStack安装的版本：
root@JunoController:~# dpkg -l | grep nova-common ii nova-common 1:2014.1.4-0ubuntu2 all OpenStack Compute - common files  2014.1.4就是我们要关注的版本信息，在:
https://wiki.openstack.org/wiki/Releases
可以查到，它属于Icehouse.</description>
    </item>
    
    <item>
      <title>安装Icehouse@Ubuntu14.04(7)</title>
      <link>http://purplepalmdash.github.io/2015/04/14/an-zhuang-icehouse-at-ubuntu14-dot-04-7/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/14/an-zhuang-icehouse-at-ubuntu14-dot-04-7/</guid>
      <description>接下来在OpenStack Icehouse的基础上，部署OpenContrail, OpenContrail能提供更为强大的网络功能。
首先从Juniper的官网上下载安装文件:
	contrail-install-packages_2.10-39~ubuntu-14-04icehouse_all.deb  Contrail可以被安装到已经部署好的OpenStack环境中，只要在安装Contrail的时候，根据已有的OpenStack组件的部署情况作相应的调整就可以。
Hook Contrail用到的钩子(Hook)有：
core_plugin &amp;ndash; 它被用在neutron的配置中，用于指向ContrailPlugin组件。
libvirt_vif_driver &amp;ndash; 它被用在nova计算节点配置中，用来指向Contrail的VRouterVIFDriver.
MQ broker IP and Port &amp;ndash; 如果现有的OpenStack提供RabbitMQ那么将相应的IP和端口在neutron和nova的配置中指过去。
Contrial部署涉及组建 列举如下，对应的文件需要做修改，或者创建。
api_service.conf - This file needs to be edited to provide details of existing OpenStack keystone. plugin.ini - This file needs proper keystone URL, token and credentials. neutron.conf - This file needs auth_host credentials to connect OpenStack keystone. config.global.js - This file contains IP and PORT for image (glance), compute (nova), identity (keystone), storage (cinder) OpenStack controller nova config to point to Contrail neutron OpenStack controller neuron service endpoint to point to contrail neutron.</description>
    </item>
    
    <item>
      <title>安装Icehouse@Ubuntu14.04(1)</title>
      <link>http://purplepalmdash.github.io/2015/04/13/an-zhuang-icehouse-at-ubuntu14-dot-04-1/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/13/an-zhuang-icehouse-at-ubuntu14-dot-04-1/</guid>
      <description>项目的需要，手动基于多台Ubuntu虚拟机部署OpenStack Icehouse, 然后在部署好的Icehouse的基础上，部署OpenContrail, 最终达到OpenContrail解耦的过程。
环境准备 物理机: i7-3770/24G Memory/CentOS 6.6
软件: virt-manager/qemu等
节点机(虚拟机):
节点机1: 控制节点(JunoController), 2 CPU+3G内存+单网卡(管理网络,10.17.17.211).
节点机2: 网络节点(JunoNetwork), 1 CPU+1G内存+3 网卡(管理网络:10.17.17.212, GRE Tunnel网络:10.19.19.212, 外部网络:10.22.22.212).
节点机3: 计算节点(JunoCompute), 2 CPU(Nested)+2G内存+2 网卡(管理网络:10.17.17.213, GRE Tunnel网络:10.19.19.213).
网络配置:
Virt-manager里需要配置三个网络，一个是管理网络10.17.17.0/24, 另一个GRE Tunnel网络10.19.19.0/24, 外部网络为10.22.22.0/24.
参考资料:
不错的指南文件:http://godleon.github.io/blog/2015/02/10/install-openstack-juno-in-ubuntu-basic-environment-setting/
官方文档:http://docs.openstack.org/icehouse/install-guide/install/apt/content/
虚拟机准备 用以下命令创建三台虚拟机的磁盘，而后按照上面的节点机配置完毕后，启动三台虚拟机。
# pwd /home/juju/img/OpenStack # qemu-img create -f qcow2 -b ./UbuntuBase1404.qcow2 JunoController.qcow2 # qemu-img create -f qcow2 -b ./UbuntuBase1404.qcow2 JunoNetwork.qcow2 # qemu-img create -f qcow2 -b ./UbuntuBase1404.qcow2 JunoCompute.qcow2  更改节点机的/etc/hostname文件，更改各自的名字为JunoController, JunoNetwork和JunoCompute.</description>
    </item>
    
    <item>
      <title>安装Icehouse@Ubuntu14.04(2)</title>
      <link>http://purplepalmdash.github.io/2015/04/13/an-zhuang-icehouse-at-ubuntu14-dot-04-2/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/13/an-zhuang-icehouse-at-ubuntu14-dot-04-2/</guid>
      <description>安装Identity服务 首先创建keystone所需数据库:
root@JunoController:~# mysql -u root -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 28 Server version: 5.5.41-MariaDB-1ubuntu0.14.04.1 (Ubuntu) Copyright (c) 2000, 2014, Oracle, MariaDB Corporation Ab and others. Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement. MariaDB [(none)]&amp;gt; CREATE DATABASE keystone; Query OK, 1 row affected (0.00 sec) MariaDB [(none)]&amp;gt; GRANT ALL PRIVILEGES ON keystone.</description>
    </item>
    
    <item>
      <title>安装Icehouse@Ubuntu14.04(3)</title>
      <link>http://purplepalmdash.github.io/2015/04/13/an-zhuang-icehouse-at-ubuntu14-dot-04-3/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/13/an-zhuang-icehouse-at-ubuntu14-dot-04-3/</guid>
      <description>Image Service 用于提供给用户用于快速启动虚拟机的镜像文件，这样的服务称为glance服务。
Glance服务数据库设定 在mysql中创建glance数据库:
root@JunoController:~# mysql -u root -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 33 Server version: 5.5.41-MariaDB-1ubuntu0.14.04.1 (Ubuntu) Copyright (c) 2000, 2014, Oracle, MariaDB Corporation Ab and others. Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement. MariaDB [(none)]&amp;gt; CREATE DATABASE glance; Query OK, 1 row affected (0.01 sec) MariaDB [(none)]&amp;gt; GRANT ALL PRIVILEGES ON glance.</description>
    </item>
    
    <item>
      <title>安装Icehouse@Ubuntu14.04(4)</title>
      <link>http://purplepalmdash.github.io/2015/04/13/an-zhuang-icehouse-at-ubuntu14-dot-04-4/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/13/an-zhuang-icehouse-at-ubuntu14-dot-04-4/</guid>
      <description>这里将配置计算节点。计算节点我们使用了一台2G内存的虚拟机，并使用了嵌套虚拟化，可以通过lscpu来看到CPU的VMX/VT-X标志都已经被下发到虚拟机中。
数据库准备 使用下列命令来创建nova所需数据库:
root@JunoController:~# mysql -u root -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 35 Server version: 5.5.41-MariaDB-1ubuntu0.14.04.1 (Ubuntu) Copyright (c) 2000, 2014, Oracle, MariaDB Corporation Ab and others. Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement. MariaDB [(none)]&amp;gt; CREATE DATABASE nova; Query OK, 1 row affected (0.00 sec) MariaDB [(none)]&amp;gt; GRANT ALL PRIVILEGES ON nova.</description>
    </item>
    
    <item>
      <title>安装Icehouse@Ubuntu14.04(5)</title>
      <link>http://purplepalmdash.github.io/2015/04/13/an-zhuang-icehouse-at-ubuntu14-dot-04-5/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/13/an-zhuang-icehouse-at-ubuntu14-dot-04-5/</guid>
      <description>Neutron Database Follow following steps for create the database:
root@JunoController:~# mysql -u root -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 58 Server version: 5.5.41-MariaDB-1ubuntu0.14.04.1 (Ubuntu) Copyright (c) 2000, 2014, Oracle, MariaDB Corporation Ab and others. Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement. MariaDB [(none)]&amp;gt; CREATE DATABASE neutron; Query OK, 1 row affected (0.</description>
    </item>
    
    <item>
      <title>Deploy OpenContrail On CentOS With Docker As Hypervisor</title>
      <link>http://purplepalmdash.github.io/2015/04/07/deploy-opencontrail-on-centos-with-docker/</link>
      <pubDate>Tue, 07 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/07/deploy-opencontrail-on-centos-with-docker/</guid>
      <description>Reference:
https://software.intel.com/en-us/blogs/2014/12/28/experimenting-with-openstack-sahara-on-docker-containers
I wanna enable the docker as hypervisor then it would greatly save the resources, and benefit with docker&amp;rsquo;s rich resources. Following is the steps:
Preparation First create the image file via:
# qemu-img create -f qcow2 CentOSOpenContrail.qcow2 100G Formatting &#39;CentOSOpenContrail.qcow2&#39;, fmt=qcow2 size=107374182400 encryption=off cluster_size=65536 [root:/home/juju/img/CentOSOpenContrail]# pwd /home/juju/img/CentOSOpenContrail  Then create a virtual machine based on KVM, allocate 8G Memory, 4-core, which copies the host CPU configuration.
Installation After installation, update the installed software via:</description>
    </item>
    
    <item>
      <title>Build qemu for supporting glustfs</title>
      <link>http://purplepalmdash.github.io/2015/04/01/build-qemu-for-supporting-glustfs/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/04/01/build-qemu-for-supporting-glustfs/</guid>
      <description>Following is the build procedure.
$ sudo apt-get build-dep qemu $ sudo apt-get install libvde-dev libvdeplug2-dev libcap-ng-dev libattr1-dev $ wget http://wiki.qemu-project.org/download/qemu-2.0.2.tar.bz2 $ tar xjvf qemu-2.0.2.tar.bz2 $ cd qemu-2.0.2/ $ mkdir -p bin/debug/native $ cd bin/debug/native $ sudo apt-get install libjpeg-turbo8-dev $ sudo apt-get install glusterfs-common ../../../configure --enable-sdl --audio-drv-list=alsa,oss --enable-curses --enable-vnc-jpeg --enable-curl --enable-fdt --enable-kvm --enable-tcg-interpreter --enable-system --enable-user \\n --enable-linux-user --enable-guest-base --enable-pie --enable-uuid --enable-vde --enable-linux-aio --enable-cap-ng --enable-attr --enable-docs --enable-vhost-net --enable-rbd \\n --enable-guest-agent --enable-glusterfs --target-list=x86_64-softmmu,i386-softmmu .</description>
    </item>
    
    <item>
      <title>Whole Process For Deploying Contrail</title>
      <link>http://purplepalmdash.github.io/2015/03/30/whole-process-for-deploying-contrail/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/30/whole-process-for-deploying-contrail/</guid>
      <description>Following are the steps, enjoy them:
# First bootstrap the environment. juju bootstrap --metadata-source ~/.juju/metadata --upload-tools -v --show-log --constraints=&amp;quot;mem=3G&amp;quot; ##################################################### # Machine 0, hold 9 services. 3G mem. trusty # Memory: 3G # Service: 10 ##################################################### # Since machine 0 is ready for using, deploy services to this node via following commands: # Juju-gui is for monitoring the status and the components # 1. juju-gui juju deploy --to 0 --repository=/home/Trusty/charms/ local:trusty/juju-gui # 2.</description>
    </item>
    
    <item>
      <title>Add SBH BlueTooth to Linux</title>
      <link>http://purplepalmdash.github.io/2015/03/27/add-sbh-bluetooth-to-linux/</link>
      <pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/27/add-sbh-bluetooth-to-linux/</guid>
      <description>I bought a SBH Sony Bluetooth headset, following is the steps for adding it to system.
Ubuntu Installation Install bluetooth related software:
$ sudo apt-get install -y blueman-manager bluetooth $ vim ~/.config/awesome/rc.lua autorunApps = { --......... &amp;quot;blueman-manager&amp;quot;, &amp;quot;fcitx&amp;quot;,  Add Device Use Blueman for adding the equiment, first click the SBH headset to let it enter discover mode, also in blueman we enable the discover mode too, when setup the equipment, the code you have to enter is 0000.</description>
    </item>
    
    <item>
      <title>juju tips</title>
      <link>http://purplepalmdash.github.io/2015/03/26/juju-tips/</link>
      <pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/26/juju-tips/</guid>
      <description>Add Specified Machine We could add the specified name of the machine:
$ juju add-machine MaasOpenContrail6.maas  While the name of MaasOpenContrail6.maas is the name which we could get from the MAAS webUI.
Get/Set Constraints We could dynamically set constraints for adding/removing new machines or unit, get/set it via:
$ juju get-constraints mem=3072M $ juju set-constraints &amp;quot;mem=1024M&amp;quot; $ juju get-constraints mem=1024M  Tags Sometimes we need to add tags to specified maas units, the following webpage is for reference:</description>
    </item>
    
    <item>
      <title>Deploy MAAS(11)</title>
      <link>http://purplepalmdash.github.io/2015/03/24/deploy-maas-11/</link>
      <pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/24/deploy-maas-11/</guid>
      <description>Since the deployment meets some problem, I have to consider doing some tricks in the MAAS controller, to let the deployment much more easier and time-saving, following is the steps for setting up such environment.
Resize Maas Controller Disk Since the Mass Controller machine only have 40G size harddisk, it will be not enough if we enable the repository cache for guest machines, thus we have to resize the disk.</description>
    </item>
    
    <item>
      <title>Deploy Local Service Using Juju</title>
      <link>http://purplepalmdash.github.io/2015/03/23/deploy-local-service-using-juju/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/23/deploy-local-service-using-juju/</guid>
      <description>Since the OpenContrail deploy is using local deployment, that means, directly deploy to local machine. But the lab lack of the environment of the local ubuntu based machine, so I want to deploy a service to local first, then transform the whole project from local deployment to MAAS deployment.
In a Ubuntu14.04 machine, do following steps.
$ sudo add-apt-repository ppa:juju/stable $ sudo vim /etc/apt/source.list # This is for juju deb http://ppa.</description>
    </item>
    
    <item>
      <title>Using Juju for deploying OpenContrail</title>
      <link>http://purplepalmdash.github.io/2015/03/23/using-juju-for-deploying-opencontrail/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/23/using-juju-for-deploying-opencontrail/</guid>
      <description>Preparation First we have to create 4 images which will hold our own opearating system.
 1016 qemu-img create -f qcow2 OpenContrail0.qcow2 40G 1017 qemu-img create -f qcow2 OpenContrail1.qcow2 40G 1018 qemu-img create -f qcow2 OpenContrail3.qcow2 40G 1019 qemu-img create -f qcow2 OpenContrail2.qcow2 40G 1020 ls 1021 history # pwd /home/juju/img/OpenContrail # qemu-img create -f qcow2 OpenContrail0.qcow2 40G # qemu-img create -f qcow2 OpenContrail1.qcow2 40G # qemu-img create -f qcow2 OpenContrail3.</description>
    </item>
    
    <item>
      <title>Deploy MAAS(10)</title>
      <link>http://purplepalmdash.github.io/2015/03/19/deploy-maas-10/</link>
      <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/19/deploy-maas-10/</guid>
      <description>Continue to deploy OpenContrail based on OpenStack.
First we install the bzr for fetching back the charms:
$ sudo apt-get install bzr  Clone the repository to local Mass Controller Machine:
$ bzr branch lp:~robert-ayres/+junk/contrail-deployer  Install juju-deployer for deploying:
$ sudo apt-get install juju-deployer  Change the memory size.</description>
    </item>
    
    <item>
      <title>Migration of OpenContril</title>
      <link>http://purplepalmdash.github.io/2015/03/18/migration-of-opencontril/</link>
      <pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/18/migration-of-opencontril/</guid>
      <description>This article is not for opencontril itself, but for migration of the existing environment to local machines.
Environment Machine configuration is listed as:
192.168.10.233 u12-control 192.168.10.234 u12-compute1 192.168.10.235 u12-compute2 192.168.1.79 s179  The control node and 2 compute nodes are running in machine s179, the tasks for me to do is for moving them from s179 to 2 physical machine.
Use Remote KVM Server First we copy our ssh-key to the remote s179 machine, so next time we won&amp;rsquo;t enter any passwd for accessing the remote libvirtd:</description>
    </item>
    
    <item>
      <title>Deploy MAAS(7)</title>
      <link>http://purplepalmdash.github.io/2015/03/17/deploy-maas-7/</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/17/deploy-maas-7/</guid>
      <description>This will record the complete steps for deploying MAAS in a newly installed machine.
Installation The start point should be at Ubuntu14.04.
$ sudo add-apt-repository ppa:maas-maintainers/maas-test $ sudo vim /etc/apt/sources.list # Add maas repository deb http://ppa.launchpad.net/maas-maintainers/testing/ubuntu trusty main deb-src http://ppa.launchpad.net/maas-maintainers/testing/ubuntu trusty main $ sudo add-apt-repository ppa:juju/stable $ sudo vim /etc/apt/sources.list # Add juju repository deb http://ppa.launchpad.net/juju/stable/ubuntu trusty main deb-src http://ppa.launchpad.net/juju/stable/ubuntu trusty main $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade $ sudo apt-get install maas-test maas-dhcp maas-dns juju juju-core juju-local juju-quickstart firefox git  Tips: for enable the vncserver on Ubuntu, do following:</description>
    </item>
    
    <item>
      <title>Deploy MAAS(8)</title>
      <link>http://purplepalmdash.github.io/2015/03/17/deploy-maas-8/</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/17/deploy-maas-8/</guid>
      <description>This part is for deploying OpenStack using Juju and let it run in single node.
Environment Preparation 2 virtual machines created using virt-manager, each of them has 2 core, 3Gigabyte Memory, around 60G Disk space.
Deploy The most of the nodes are deployed in container.
$ juju deploy --to 0 juju-gui $ juju deploy --to lxc:0 mysql $ juju deploy --to lxc:0 keystone $ juju deploy --to lxc:0 nova-cloud-controller $ juju deploy --to lxc:0 glance $ juju deploy --to lxc:0 rabbitmq-server $ juju deploy --to lxc:0 openstack-Trustyboard $ juju deploy --to lxc:0 cinder  The compute node is deployed in a machine which enable the nested virtualization.</description>
    </item>
    
    <item>
      <title>Deploy MAAS(9)</title>
      <link>http://purplepalmdash.github.io/2015/03/17/deploy-maas-9/</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/17/deploy-maas-9/</guid>
      <description>Use Local Charms Retrieve the charms via:
$ sudo apt-get install charm-tools $ cat autocharms.sh juju charm get nova-cloud-controller /home/Trusty/charms/trusty juju charm get keystone /home/Trusty/charms/trusty juju charm get glance /home/Trusty/charms/trusty juju charm get cinder /home/Trusty/charms/trusty juju charm get rabbitmq-server /home/Trusty/charms/trusty juju charm get openstack-Trustyboard /home/Trusty/charms/trusty juju charm get nova-compute /home/Trusty/charms/trusty # juju charm get nova-compute /home/Trusty/charms/trusty $ du -hs /home/Trusty/charms/trusty/* 1.5M /home/Trusty/charms/trusty/cinder 1.6M /home/Trusty/charms/trusty/glance 1.7M /home/Trusty/charms/trusty/keystone 824K /home/Trusty/charms/trusty/mysql 1.9M /home/Trusty/charms/trusty/nova-cloud-controller 1.</description>
    </item>
    
    <item>
      <title>Deploy MAAS(6)</title>
      <link>http://purplepalmdash.github.io/2015/03/16/deploy-maas-6/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/16/deploy-maas-6/</guid>
      <description>More Nodes I imported 2 3-G mem size nodes. 2 Nodes were created manually.
First we should set the constraint via:
$ juju bootstrap --metadata-source ~/.juju/metadata --upload-tools -v --show-log --constraints=&amp;quot;mem=3G&amp;quot;  Then we can verify and imported these machines via:
$ juju get-constraints $ juju add-machine $ juju status $ juju deploy --to 1 mysql  Deploy OpenStack In first node, do following:
$ juju deploy --to 0 juju-gui $ juju deploy --to lxc:0 mysql &amp;amp;&amp;amp; juju deploy --to lxc:0 keystone &amp;amp;&amp;amp; juju deploy --to lxc:0 nova-cloud-controller &amp;amp;&amp;amp; juju deploy --to lxc:0 glance &amp;amp;&amp;amp; juju deploy --to lxc:0 rabbitmq-server &amp;amp;&amp;amp; juju deploy --to lxc:0 openstack-Trustyboard &amp;amp;&amp;amp; juju deploy --to lxc:0 cinder  Then deploy the nova-compute node via:</description>
    </item>
    
    <item>
      <title>MAAS Deploy(5)</title>
      <link>http://purplepalmdash.github.io/2015/03/16/maas-deploy-5/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/16/maas-deploy-5/</guid>
      <description>Local Repository Sometimes when I run bootstrap, the procedure will failed, that&amp;rsquo;s because the Fucking GFW somethines will blocking some critical packet flow. Thus I have to setup the local repository.
Refers to:
https://jujucharms.com/docs/howto-privatecloud
Use juju --debug sync-tools we could sync the tools for local usage.
Use local tools for bootstrap is:
First generate the tools under the specified directory:
juju metadata generate-tools -d ~/.juju/metadata  Then use it via:</description>
    </item>
    
    <item>
      <title>MAAS Deploy(2)</title>
      <link>http://purplepalmdash.github.io/2015/03/12/maas-deploy-2/</link>
      <pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/12/maas-deploy-2/</guid>
      <description>We just continue to use MAAS for deploying cluster.
Images Install following packages for enable local installation repository:
$ sudo apt-get install simplestreams ubuntu-cloudimage-keyring apache2 $ sudo apt-get install iptraf nethogs  Run following commands for importing the images of mass from official repository to local webserver.
root@MassTestOnUbuntu1404:~# sstream-mirror --keyring=/usr/share/keyrings/ubuntu-cloudimage-keyring.gpg http://maas.ubuntu.com/images/ephemeral-v2/daily/ /var/www/html/maas/images/ephemeral-v2/daily &#39;arch=amd64&#39; &#39;subarch~(generic|hwe-t)&#39; &#39;release~(trusty|precise)&#39; --max=1  If you have the pre-downloaded packages, simply de-compress it to the corresponding directory.</description>
    </item>
    
    <item>
      <title>MAAS Deploy(3)</title>
      <link>http://purplepalmdash.github.io/2015/03/12/maas-deploy-3/</link>
      <pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/12/maas-deploy-3/</guid>
      <description>Following is the steps for creating virtual nodes and let it be administrated by MAAS Cluster.
Node Creation First create a null iso via touch none.iso, later we will use this iso for booting the node.
Create a new virtual machine -&amp;gt; select &amp;ldquo;Local installation media(ISO images or CDROM) -&amp;gt; Use Local Iso image(/home/Trusty/none.iso) -&amp;gt; Memory 512MB, CPU 1 Core -&amp;gt; Disk 20 GB -&amp;gt; name: MASSTestNode0 -&amp;gt; Customize configuration before install -&amp;gt; Finish.</description>
    </item>
    
    <item>
      <title>MAAS Deploy(4)</title>
      <link>http://purplepalmdash.github.io/2015/03/12/maas-deploy-4/</link>
      <pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/12/maas-deploy-4/</guid>
      <description>From now we will start deploying Juju to our MAAS cluster.
Installation of Juju The installation steps are:
$ sudo add-apt-repository ppa:juju/stable $ sudo apt-get update $ sudo apt-get install juju-quickstart juju-core $ sudo apt-get install juju-local juju  Configuration of Juju First initialize the configuration:
$ juju init A boilerplate environment configuration file has been written to /home/Trusty/.juju/environments.yaml. Edit the file to configure your juju environment and run bootstrap.</description>
    </item>
    
    <item>
      <title>MAAS Deploy(1)</title>
      <link>http://purplepalmdash.github.io/2015/03/11/maas-deploy-1/</link>
      <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/11/maas-deploy-1/</guid>
      <description>This deploy series will record every steps that I deploy OpenStack on Ubuntu based server.
Network Configuration I want to deploy the MAAS environment in a seperated network, thus I have to create the new network in virt-manager via following steps:
First, double-click localhost(QEMU), this will pop-up the configuration of the virt-manager.
Second, in the Virtual Networks, click &amp;ldquo;+&amp;rdquo;, name it, change its ip range addresses to 10.17.17.0/24, de-select Enable DHCPv4, In the last window, select &amp;ldquo;Forwarding to phsical network&amp;rdquo;, select the bridge interface that you have in your physical machine.</description>
    </item>
    
    <item>
      <title>Build SS for WJ</title>
      <link>http://purplepalmdash.github.io/2015/03/08/build-ss-for-wj/</link>
      <pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/08/build-ss-for-wj/</guid>
      <description>For I have a CentOS host machine on DO, I started to build a SS server which could make use of the freedom network in DO, following is the steps.
Python-pip Python-pip located in epel repository, so first we have to enable epel repository:
# rpm -iUvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm # vim /etc/yum.repos.d/epel.repo enable=1 # yum -y update  Install python-pip via:
# yum install python-pip  SS Install ShadowSocks via:</description>
    </item>
    
    <item>
      <title>Enable Bluetooth Playing</title>
      <link>http://purplepalmdash.github.io/2015/03/08/enable-bluetooth-playing/</link>
      <pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/08/enable-bluetooth-playing/</guid>
      <description>First scan the bluetooth adapter via lsusb:
$ lsusb Bus 005 Device 002: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)  Install packages and configure bluetooth:
$ sudo apt-get install bluetooth $ sudo apt-get install bluez-utils $ sudo apt-get install blueman  Then setup the bluetooth headset in blueman&amp;rsquo;s graphical interface.
The more detailed steps are available at:
http://kkkttt.github.io/blog/2013/12/19/bluetooth-headset-on-archlinux/</description>
    </item>
    
    <item>
      <title>Establish Ubuntu Virt Node</title>
      <link>http://purplepalmdash.github.io/2015/03/06/establish-ubuntu-virt-node/</link>
      <pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/06/establish-ubuntu-virt-node/</guid>
      <description>Just some tips on how to establish an Ubuntu Virt Node from existing installed system.
Re-Partition 2T Disk has been allocated to opensuse, thus I have first umount the mounted /home/ partition and use partition from yast for adjust the partition size, I got 1.9 T size of disk for installing new system.
Umount the mounted /home/ partition is via edit /etc/fstab file.
Install Ubuntu Download the iso file of ubuntu x86_64 version, then enable kvm via:</description>
    </item>
    
    <item>
      <title>Rebuild Vrouter</title>
      <link>http://purplepalmdash.github.io/2015/03/01/rebuild-vrouter/</link>
      <pubDate>Sun, 01 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/03/01/rebuild-vrouter/</guid>
      <description>In order to dive into Vrouter&amp;rsquo;s researching, we build the ko by following comands.
$ cp /opt/contrail/contrail_install_repo/contrail-vrouter-source_1.21-74_all.deb ~/Code/ $ cd ~/Code &amp;amp;&amp;amp; ar vx contrail-vrouter-source_1.21-74_all.deb $ tar xzvf control.tar.gz $ tar xzvf data.tar.gz $ cd usr/src/modules/contrail-vrouter/ $ tar xzvf contrail-vrouter-1.21.tar.gz $ make  After building the ko will be available under the folder</description>
    </item>
    
    <item>
      <title>Single Node OpenStack Startup</title>
      <link>http://purplepalmdash.github.io/2015/02/27/single-node-openstack-startup/</link>
      <pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/27/single-node-openstack-startup/</guid>
      <description>Following records the main steps for starting up the single node Openstack environment.
Ubuntu Setup and Configuration Setup Use virt-manager, create a new virtual machine, install the system from ubuntu-12.04.3-server-amd64.iso, allocate 2 CPU and 4096 Memory, allocate the 80GB disk.
Create disk via:
Trusty@pc119:~/Code/Virt-Manager/SingleNode&amp;gt; qemu-img create -f qcow2 SingleNode.qcow2 80G Formatting &#39;SingleNode.qcow2&#39;, fmt=qcow2 size=85899345920 encryption=off cluster_size=65536 lazy_refcounts=off  Configure the networking, bridge, then beging installing.
IP address set to 192.</description>
    </item>
    
    <item>
      <title>Install OpenContrail On Virt-Manager</title>
      <link>http://purplepalmdash.github.io/2015/02/18/install-opencontrail-on-virt-manager/</link>
      <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/18/install-opencontrail-on-virt-manager/</guid>
      <description>Recently I am studying OpenContrail(based on OpenStack), so following includes the steps for me to setup a single-node emulation environment, the host machine is ArchLinux, which is one of my favorite Linux Distribution, and using nested virtualization for setting up a basic run-time environment.
libvirt It seems the most convinient way for using nested virtualization is for using libvirt, so following is for setting up the virtualization environment.
First create libvirt user group and add current user into this group:</description>
    </item>
    
    <item>
      <title>Switch Back To Arch</title>
      <link>http://purplepalmdash.github.io/2015/02/16/switch-back-to-arch/</link>
      <pubDate>Mon, 16 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/16/switch-back-to-arch/</guid>
      <description>Since I Moved the city and changed the job, my laptop had to be returned to company, so I bought another HP 8460P which is almost the same as my old one. But this one got i7 4 core CPU and more powerful.
First I installed Ubuntu and start playing virtualization on it, after successfully installed OpenStack and OpenContrail I started to think change back to my archLinux, so following is the steps.</description>
    </item>
    
    <item>
      <title>Libvirt Network Configuration</title>
      <link>http://purplepalmdash.github.io/2015/02/15/libvirt-network-configuration/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/15/libvirt-network-configuration/</guid>
      <description>Since I want to use bridge network in libvirt, while the standard bridge networking is not available for me to use, so following tips is for creating and managing the networking.
Enable Bridge In host machine(OpenSuse), create bridge via:
$ sudo brctl addbr br0 $ sudo brctl addif br0 eth0  This will add eth0 to bridge 0, while in startup file of OpenSuse we will do following:
# pwd /etc/sysconfig/network # cat ifcfg-eth0 BOOTPROTO=&#39;static&#39; STARTMODE=&#39;ifplugd&#39; IFPLUGD_PRIORITY=&#39;1&#39; NAME=&#39;RTL8111/8168B PCI Express Gigabit Ethernet controller&#39; USERCONTROL=&#39;no&#39; # cat ifcfg-br0 BOOTPROTO=&#39;static&#39; STARTMODE=&#39;auto&#39; IPADDR=&#39;192.</description>
    </item>
    
    <item>
      <title>Libvirt On OpenSuse</title>
      <link>http://purplepalmdash.github.io/2015/02/13/libvirt-on-opensuse/</link>
      <pubDate>Fri, 13 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/13/libvirt-on-opensuse/</guid>
      <description>In order to try OpenContrail, I installed it on Virtualbox based, but it got failed, I think maybe it&amp;rsquo;s because virtualbox&amp;rsquo;s nested virtualization is not OK. So that&amp;rsquo;s why I have to try libvirt.
Installation Install the virt-manager related software via:
$ sudo zypper install kvm libvirt libvirt-python qemu virt-manager $ sudo zypper in patterns-openSUSE-kvm_server  Now if you directly call virt-manager you will got the following hint:
 error: authentication failed: Authorization requires authentication but no agent is available.</description>
    </item>
    
    <item>
      <title>Build OpenContrail On CentOS7(Local)</title>
      <link>http://purplepalmdash.github.io/2015/02/10/build-opencontrail-on-centos7-local/</link>
      <pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/10/build-opencontrail-on-centos7-local/</guid>
      <description>Fresh steps.
$ sudo yum update $ sudo yum install vim $ sudo yum install net-tools $ sudo yum install -y scons git python-lxml wget gcc patch make unzip flex bison gcc-c++ openssl-devel autoconf automake vim python-devel python-setuptools protobuf protobuf-devel protobuf-compiler net-snmp-python libtool kernel-devel bzip2 boost-devel tbb-devel libcurl-devel libxml2-devel scons protobuf protobuf-devel protobuf-compiler $ sudo yum install -y https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm $ sudo sed -i -e &#39;s/enabled=1/enabled=0/&#39; /etc/yum.repos.d/epel.repo $ sudo yum install -y --disablerepo=&amp;quot;*&amp;quot; --enablerepo=&amp;quot;epel&amp;quot; scons protobuf protobuf-devel protobuf-compiler $ sudo yum install -y bzip2 boost-devel tbb-devel libcurl-devel libxml2-devel  As root, Add repositories:</description>
    </item>
    
    <item>
      <title>Play Docker(6) -- Using docker for building</title>
      <link>http://purplepalmdash.github.io/2015/02/09/play-docker-6-using-docker-for-building/</link>
      <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/09/play-docker-6-using-docker-for-building/</guid>
      <description>The steps is for Ubuntu12.04, the purpose of this documentation is for swiftly get the source code and fetch it to local repository.
Preparation Pull back the Ubuntu12.04:
$ sudo docker pull ubuntu12.04  Then run into the ubuntu12.04 via:
$ sudo docker run -it ubuntu12.04 /bin/bash root@7b30cc924bb0:~ #  Install following packages in Ubuntu 12.04 container:
# apt-get install python-software-properties # apt-get install curl # curl https://storage.googleapis.com/git-repo-downloads/repo &amp;gt; /bin/repo # chmod 777 /bin/repo # apt-get update # apt-get install python-pip # apt-get install git # git config --global user.</description>
    </item>
    
    <item>
      <title>Tips for building opencontrail on Ubuntu14.04</title>
      <link>http://purplepalmdash.github.io/2015/02/09/tips-for-building-opencontrail-on-ubuntu14-dot-04/</link>
      <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/09/tips-for-building-opencontrail-on-ubuntu14-dot-04/</guid>
      <description>Dependencies Install the following packages to make scons getting through:
$ sudo apt-get install -y scons git python-lxml wget gcc patch make unzip flex bison g++ libssl-dev autoconf automake libtool pkg-config vim python-dev python-setuptools libprotobuf-dev protobuf-compiler libsnmp-python libboost-dev libboost-chrono-dev libboost-date-time-dev libboost-filesystem-dev libboost-program-options-dev libboost-python-dev libboost-regex-dev libboost-system-dev libcurl4-openssl-dev google-mock libgoogle-perftools-dev liblog4cplus-dev libtbb-dev libhttp-parser-dev libxml2-dev libicu-dev $ sudo apt-get install libxml2-dev $ sudo apt-get install libboost-dev $ sudo apt-get install libboost-filesystem-dev $ sudo apt-get install libboost-program-options-dev $ sudo apt-get install libboost-system-dev libboost-regex-dev libboost-python-dev libboost-chrono-dev libtbb-dev  Then the linking should be OK.</description>
    </item>
    
    <item>
      <title>Play Docker(5)</title>
      <link>http://purplepalmdash.github.io/2015/02/07/play-docker-5/</link>
      <pubDate>Sat, 07 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/07/play-docker-5/</guid>
      <description>Since I enabled OpenSuse, later all of the docker related operation could be operated on OpenSuse13.2.
Installation Install docker via:
$ sudo zypper in docker $ which docker /usr/bin/docker  Specify Storage Location The /var directory has the limitation, thus we have to specify the storage locateion in /etc/sysconfig/docker:
$ pwd /etc/sysconfig $ cat docker ## Path : System/Management ## Description : Extra cli switches for docker daemon ## Type : string ## Default : &amp;quot;&amp;quot; ## ServiceRestart : docker # DOCKER_OPTS=&amp;quot;-g /home/xxxxxx/Code/Virtualization/Docker/docker/&amp;quot;  Now we could use the nearly 2T Size /home partition for storing docker images.</description>
    </item>
    
    <item>
      <title>Build Pidgin And WebQQ</title>
      <link>http://purplepalmdash.github.io/2015/02/06/build-pidgin-and-webqq/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/06/build-pidgin-and-webqq/</guid>
      <description>Strangely my OpenSuse&amp;rsquo;s official installation version&amp;rsquo;s pidgin doesn&amp;rsquo;t support webqq plugins. So I have to build from source and let it run as a webQQ&amp;rsquo;s version of pidgin.
Getting Source. First download the source code from:
http://sourceforge.net/projects/pidgin/files/Pidgin/2.10.11/pidgin-2.10.11.tar.bz2/download?accel_key=62%3A1423272982%3Ahttp%253A//www.pidgin.im/download/source/%3A20b420a2%24f93cd8a6095e965a3448df4a97a1c4786bf0a085&amp;amp;click_id=b8d33c98-ae69-11e4-8d6d-0200ac1d1d8d&amp;amp;source=accel
Install related packages:
$ sudo zypper in intltool $ sudo zypper in gtk3-devel $ sudo zypper in gtk2-devel $ sudo zypper in gstreamer-devel $ sudo zypper in libidn-devel $ sudo zypper in meanwhile-devel $ sudo zypepr in libavahi-devel $ sudo zypper in libavahi-glib-devel $ sudo zypper in libgnutls-openssl-devel $ sudo zypper in tcl-devel $ sudo zypper in tk-devel $ sudo zypper in gtkspell-devel  Configure pidign via:</description>
    </item>
    
    <item>
      <title>Deploy Vagrant</title>
      <link>http://purplepalmdash.github.io/2015/02/04/deploy-vagrant/</link>
      <pubDate>Wed, 04 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/04/deploy-vagrant/</guid>
      <description>Installation Couldn&amp;rsquo;t install the vagrant via rubygems, so we directly download packages in vagrantup.com, rpm for OpenSuse.
https://www.vagrantup.com/downloads.html
https://dl.bintray.com/mitchellh/vagrant/vagrant_1.7.2_x86_64.rpm
Install it via rpm -ivh xxxx.rpm.</description>
    </item>
    
    <item>
      <title>Install GitLab And Gogs</title>
      <link>http://purplepalmdash.github.io/2015/02/03/install-gitlab-and-gogs/</link>
      <pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/03/install-gitlab-and-gogs/</guid>
      <description>For sharing the git managed codes, we need setup the online repositories, we got two options, one is for gitlab, the other is for gogs.
Gitlab The reference URL is listed as in:
https://www.digitalocean.com/community/tutorials/how-to-set-up-gitlab-as-your-very-own-private-github-clone
But following the tutorial you will met the problem, following records the solution:
$ sudo -u git -H bundle install --deployment --without development test postgres Could not find modernizr-2.6.2 in any of the sources $ cd /home/git/gitlab $ wget http://rubygems.</description>
    </item>
    
    <item>
      <title>Prison-Break For Something</title>
      <link>http://purplepalmdash.github.io/2015/02/03/prison-break-for-something/</link>
      <pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/02/03/prison-break-for-something/</guid>
      <description>I&amp;rsquo;ve worked two days on prison-break something, this will greatly improve my working efficiency. There are so many steps for recording, so I will detailed described them in following parts.
Single MOde In Single Mode you could get an terminal with root then you could do anything you want, simply pass init=/bin/bash in Grub then you could do anything.
Question: why Unix-like system enable this command?
Answer: In Unix-like systems, init is the first process to be run, and the ultimate ancestor of all processes ever run.</description>
    </item>
    
    <item>
      <title>Try OpenContrail In Ubuntu</title>
      <link>http://purplepalmdash.github.io/2015/01/31/try-opencontrail-in-ubuntu/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/31/try-opencontrail-in-ubuntu/</guid>
      <description>To be write</description>
    </item>
    
    <item>
      <title>Speed-Up the WP website in TianChao</title>
      <link>http://purplepalmdash.github.io/2015/01/30/speed-up-the-wp-website-in-tianchao/</link>
      <pubDate>Fri, 30 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/30/speed-up-the-wp-website-in-tianchao/</guid>
      <description>Since our Great Fire Wall forbidden the google, thus all of the google related service becomes available in china, this leads to access to wordpress based website which uses google online fonts pretty slow. Following is how to speedup your website without too many changes:
First go to your website&amp;rsquo;s folder, find the files which calls fonts.googleapis.com:
$ grep -i &amp;quot;fonts.googleapis.com&amp;quot; ./ -r ./wp-content/themes/twentytwelve/functions.php:	$font_url = add_query_arg( $query_args, &amp;quot;$protocol://fonts.googleapis.com/css&amp;quot; ); .</description>
    </item>
    
    <item>
      <title>Build Contrial Source Code</title>
      <link>http://purplepalmdash.github.io/2015/01/29/build-contrial-source-code/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/29/build-contrial-source-code/</guid>
      <description>Reference http://juniper.github.io/contrail-vnc/README.html
Hardware &amp;amp;&amp;amp; Software Vitualized machine which have 1G memory and 1 core.
Running 12.04:
# cat /etc/issue Ubuntu 12.04.3 LTS \n \l  Packages You should install following packages:
$ sudo add-apt-repository ppa:opencontrail/ppa $ sudo vim /etc/apt/source.lists deb http://ppa.launchpad.net/opencontrail/ppa/ubuntu precise main deb-src http://ppa.launchpad.net/opencontrail/ppa/ubuntu precise main $ sudo apt-get install -y scons git python-lxml wget gcc patch make unzip flex bison g++ libssl-dev autoconf automake libtool pkg-config vim python-dev python-setuptools libprotobuf-dev protobuf-compiler libsnmp-python libgettextpo0 libxml2-utils debhelper python-sphinx ruby-ronn libipfix python-all libpcap-dev module-assistant libtbb-dev libboost-dev liblog4cplus-dev libghc-curl-dev $ sudo apt-get install python-pip $ sudo pip install gevent bottle netaddr  Getting Source Code Use repo for getting the source code:</description>
    </item>
    
    <item>
      <title>Build Specified Version Of OpenContrail</title>
      <link>http://purplepalmdash.github.io/2015/01/29/build-specified-version-of-opencontrail/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/29/build-specified-version-of-opencontrail/</guid>
      <description>Since the default building of OpenContrail is master branch, while the installation deb file named like contrail-install-packages_1.21-74~havana_all.deb, this gap need to be filled via building.
View Different Branches Repo hold all of the versions locally, simply view them via:
# pwd /root/Code/OpenContrail/.repo/manifests # git branch -a | cut -d / -f 3 * default master -&amp;gt; origin R1.04 R1.05 R1.06 R1.06c1 R1.10 R1.30 R2.0 R2.1 gh-pages master opserver rajreddy_doc_update rajreddy_doc_update2 rajreddy_webui_third  While these branches doesn&amp;rsquo;t contains 1.</description>
    </item>
    
    <item>
      <title>Play Docker(4)</title>
      <link>http://purplepalmdash.github.io/2015/01/29/play-docker-4/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/29/play-docker-4/</guid>
      <description>Fig(Continue) Met some problems in last article, so this part will continue to work on Fig, the correct configuration files are listed as following:
$ ls app.py Dockerfile fig.yml requirements.txt $ cat Dockerfile FROM python:2.7 ADD . /code WORKDIR /code RUN pip install -r requirements.txt $ cat fig.yml web: build: . command: python app.py ports: - &amp;quot;5000:5000&amp;quot; volumes: - .:/code links: - redis redis: image: redis $ cat requirements.txt flask redis $ cat app.</description>
    </item>
    
    <item>
      <title>Play Docker(3)</title>
      <link>http://purplepalmdash.github.io/2015/01/28/play-docker-3/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/28/play-docker-3/</guid>
      <description>Dockerfile Dockerfile is like Vagrantfile, for define the configuration of the docker container.
The steps for creating the Dockerfile is listed as following:
$ mkdir -p ~/Code $ cd ~/Code &amp;amp;&amp;amp; vim Dockerfile FROM ubuntu:13.04 MAINTAINER examples@docker.com RUN echo &amp;quot;deb http://archive.ubuntu.com/ubuntu precise main universe&amp;quot; &amp;gt; /etc/apt/sources.list RUN apt-get update RUN apt-get upgrade -y RUN apt-get install -y openssh-server nginx supervisor RUN mkdir -p /var/run/sshd RUN mkdir -p /var/log/supervisor RUN echo &amp;quot;daemon off;&amp;quot;&amp;gt;&amp;gt;/etc/nginx/nginx.</description>
    </item>
    
    <item>
      <title>Using Teamviewer</title>
      <link>http://purplepalmdash.github.io/2015/01/28/using-teamviewer/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/28/using-teamviewer/</guid>
      <description>Installation CentOS Download the corresponding rpm files, install it via sudo yum install ******.rpm, this will automatically install the dependencies and also install the teamviewer for your centos system.
Ubuntu Only working for 14.04:
First you have to add i686(i386) supporting:
$ dpkg --add-architecture i386 $ apt-get update  Then you have to downloaded the following packages rather than the offcial packages(x64 or i386):
http://download.teamviewer.com/download/teamviewer_linux.deb
Install this teamviewer_linux.deb, and you got teamviewer running on your system.</description>
    </item>
    
    <item>
      <title>Play Docker(1)</title>
      <link>http://purplepalmdash.github.io/2015/01/27/play-docker-1/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/27/play-docker-1/</guid>
      <description>For playing docker and prepare for my presentation, I wrote this series and try to record my tips on playing docker.
Background I created a droplet on DigitalOcean.com, which is running CentOS 7, the memory is only 512M, with one core and 20G size disk, which means its caculation resource is pretty limited, so heavy tasks should be avoid, like building.
Since the memory is only 512M, I allocated 1G swapfile to the machine.</description>
    </item>
    
    <item>
      <title>Play Docker(2)</title>
      <link>http://purplepalmdash.github.io/2015/01/27/play-docker-2/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/27/play-docker-2/</guid>
      <description>Continue, but this time for further topics:
Export/Import From https://registry.hub.docker.com/ to find more interesting images:
Use opensuse:
$ sudo docker pull opensuse $ sudo docker images $ sudo docker images REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE opensuse latest 758c78b4040c 3 weeks ago 622.7 MB opensuse 13.2 758c78b4040c 3 weeks ago 622.7 MB opensuse harlequin 758c78b4040c 3 weeks ago 622.7 MB $ sudo docker run -i -t opensuse /bin/bash :/ # yzpper in vim  After installed commit the changes and verify:</description>
    </item>
    
    <item>
      <title>Trying Docker In Company</title>
      <link>http://purplepalmdash.github.io/2015/01/26/trying-docker-in-company/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/26/trying-docker-in-company/</guid>
      <description>Installation Install docker via:
$ sh -c &amp;quot;wget -qO- https://get.docker.io/gpg | apt-key add -&amp;quot; $ sh -c &amp;quot;echo deb http://get.docker.io/ubuntu docker main\ &amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot; $ apt-get update $ apt-get install lxc-docker $ which docker /usr/bin/docker  Very Beginning Docker pull the docker.cn packages back, the speed is around 500K/
$ docker pull docker.cn/docker/ubuntu  Run into an instance:
# docker run -i -t docker.cn/docker/ubuntu /bin/bash root@3ad7689e600a:/# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 06:27 ?</description>
    </item>
    
    <item>
      <title>Using DO For Building OpenContrail</title>
      <link>http://purplepalmdash.github.io/2015/01/26/using-do-for-building-opencontrail/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/26/using-do-for-building-opencontrail/</guid>
      <description>Since the network environment is not good(In fact, very bad), because of the GFW, so I have to build the opencontrail packages in digitalOcean. Following is the tips and how-to.
Preparation First we have to get the Latest Ubuntu images, and let it OK for building the OpenContrail:
$ docker search ubuntu ..... $ docker pull ubuntu $ docker run -i -t ubuntu /bin/bash root@4c74f2890dbe:/# apt-get update  Now we run into the ubuntu build environment.</description>
    </item>
    
    <item>
      <title>Using New DO System</title>
      <link>http://purplepalmdash.github.io/2015/01/26/using-new-do-system/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/26/using-new-do-system/</guid>
      <description>Since the coreOS met some critical errors, I have to re-construct the DO System using CentOS. So I destroyed the old CoreOS machine, runs CentOS.
Configure Install packages Update and install vim
$ yum update $ yum install vim  Add Swap 512M is not enough for playing, enlarge the swapfile.
# dd if=/dev/zero of=/swapfile bs=1M count=1024 # chmod 600 /swapfile # mkswap /swapfile $ sudo vim /etc/systemd/system/swap.service [Unit] Description=Turn on swap [Service] Type=oneshot Environment=&amp;quot;SWAPFILE=/swapfile&amp;quot; RemainAfterExit=true ExecStartPre=/usr/sbin/losetup -f ${SWAPFILE} ExecStart=/usr/bin/sh -c &amp;quot;/sbin/swapon $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)&amp;quot; ExecStop=/usr/bin/sh -c &amp;quot;/sbin/swapoff $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)&amp;quot; ExecStopPost=/usr/bin/sh -c &amp;quot;/usr/sbin/losetup -d $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)&amp;quot; [Install] WantedBy=multi-user.</description>
    </item>
    
    <item>
      <title>Install OpenFire For LAN Chat</title>
      <link>http://purplepalmdash.github.io/2015/01/23/install-openfire-for-lan-chat/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/23/install-openfire-for-lan-chat/</guid>
      <description>In order to support chat in LAN, install Openfire, following are the steps for installing and configurating.
Local Machine $ wget $ apt-get update &amp;amp;&amp;amp; apt-get install default-jre  Since another people is also installing this. Change it to DigitalOcean.
Dockerize Openfire Get the image via:
docker pull sameersbn/openfire  Since the installation is already done, docker ignored&amp;hellip;</description>
    </item>
    
    <item>
      <title>Enable Apache2 Redirect</title>
      <link>http://purplepalmdash.github.io/2015/01/22/enable-apache2-redirect/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/22/enable-apache2-redirect/</guid>
      <description>Problem Want to redirect from http://xxx/ to http://xxx/a/b
Solution Change the configuration file of the /etc/apache2/sites-enabled/000-default, enable the RedirectMatch:
	# For forwarding all of the request to &#39;/&#39; TO &#39;/bin/view&#39; RedirectMatch ^/$ /a/b  Restart the service of apache2 then everything goes OK.</description>
    </item>
    
    <item>
      <title>Building vrouter</title>
      <link>http://purplepalmdash.github.io/2015/01/21/building-vrouter/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/21/building-vrouter/</guid>
      <description>Preparation First we should get repo, while this little kit has been banned via GFW, thus we should use DO machine for getting it down and ssh to local machine.
$ mkdir ~/bin $ PATH=~/bin:$PATH $ curl https://storage.googleapis.com/git-repo-downloads/repo &amp;gt; ~/bin/repo $ chmod a+x ~/bin/repo $ tail ~/.zshrc # Add our own bin/ folder for using different tools: export PATH=&amp;quot;$PATH:$HOME/bin&amp;quot;  Now we could use repo.
Oops, git is old! The default version of git is too old in CentOS, thus we have to upgrade it.</description>
    </item>
    
    <item>
      <title>Install Chrome On CentOS</title>
      <link>http://purplepalmdash.github.io/2015/01/21/install-chrome-on-centos/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/21/install-chrome-on-centos/</guid>
      <description>Until now I failed in installing chrome on CentOS, for the libstdc++ version is too old in the machine, but record the steps here, later I will continue to work on this issue.
Repository Preparation Add following file in to your /etc/yum.repos.d:
~% cat /etc/yum.repos.d/google-chrome.repo [google-chrome] name=google-chrome baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch enabled=1 gpgcheck=1 gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub  Now install the chrome via:
$ sudo yum install google-chrome-stable Processing Dependency: libstdc++.so.6(GLIBCXX_3.4.15)(64bit) for package: google-chrome-stable-40.0.2214.91-1.x86_64 --&amp;gt; Finished Dependency Resolution Error: Package: google-chrome-stable-40.</description>
    </item>
    
    <item>
      <title>Questions On Contrail</title>
      <link>http://purplepalmdash.github.io/2015/01/21/questions-on-contrail/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/21/questions-on-contrail/</guid>
      <description>Following records my questions on Contrail.
What is L3 OverLay? 对于大二层的互通，还有一种简单有效的方法就是vpn，vpn可以工作在二层（如openvpn中的tap模式，左右两边的子网可以相同，但IP肯定不能同，相当于bridge模式），也可以工作在三层（如openvpn中的tun模式, 要求左右两边子网不同）。IPSec只是一种加密模式，L2TP才是二层的vpn接入层，所以L2TP+IPSec肯定可以实现openvpn的tap模式，但是strongswan因为是三层的vpn应该不行。
More detailed info could be found at:
http://blog.csdn.net/quqi99/article/details/11778413
MPLS? MPLS(Multiprotocol Label Switching, 多协议标记交换)使用标签(Label)进行转发，一个标签是一个短的、长度固定的数值，由报文的头部携带，不含拓扑信息，只有局部意义。MPLS包头包含20比特的标签，3比特的EXP(通常用作Cos)，1比特的S，用于标识此标签是否为最底层标签，8比特的TTL。
More detailed infos here:
http://www.net130.com/netbass/VPN/v111301.htm
GRE? （GRE: Generic Routing Encapsulation）
通用路由封装 （GRE）定义了在任意一种网络层协议上封装任意一个其它网络层协议的协议。
More detailed info could be found here:
http://baike.baidu.com/view/3871502.htm
MPLS Over GRE? MPLS是多协议标签交换的简称，它用短而定长的标签来封装网络层分组。MPLS最初是为提高路由器的转发速度而提出一个协议。
GRE协议是对某些网络层协议的数据报进行封装，使这些被封装的数据报能够在另一个网络层协议中传输。GRE是VPN的第三层隧道协议，在协议层之间采用了一种被称之为Tunnel的技术。
MPLS在VPN中的应用，用MPLS为转发通道运行私网流量，使一个运营商的网络可以同时支撑多个不同客户的IP VPN，这样就要求运营商的网络全程支持MPLS转发。但是在实际运用中，有时由于网络规划的原因，运营商网络的中间设备并不支持MPLS功能，而基本的BGP/MPLS VPN是要求所用到的运营商设备全程支持MPLS功能才可以，这样采用基本的BGP/MPLS VPN方法就行不通了，此时GRE的应用很好的解决了这个问题，只需要运营商边缘设备支持MPLS转发就能实现功能。而且GRE只需要保证两端网络类型相同，中间可以穿越其他类型的网络，也降低了对运营商网络的要求。
More detailed info could be found here:
http://blog.sina.com.cn/s/blog_6dc951ef01015bpm.html
L3 VPN? Layer 3, or VPRN (virtual private routed network), utilizes layer 3 VRF (VPN/virtual routing and forwarding) to segment routing tables for each “customer” utilizing the service.</description>
    </item>
    
    <item>
      <title>Using iMacros For Automatically Access Mail And OA</title>
      <link>http://purplepalmdash.github.io/2015/01/21/using-imacros-for-automatically-access-mail-and-oa/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/21/using-imacros-for-automatically-access-mail-and-oa/</guid>
      <description>First we should install imacros from firefox&amp;rsquo;s Add-Ons, after installation, we will restart the firefox and let it run.
Click the icon of imacros, the window will be available at the left side of the browser.
Rec-&amp;gt; Record for recording the steps
Then do what you want to do in browser.
Save the current macros into another name, next time if you want to re-do the operations, simply click this saved imacros, then everything is OK.</description>
    </item>
    
    <item>
      <title>Things To Be Done From Jan21 To Jan25</title>
      <link>http://purplepalmdash.github.io/2015/01/20/things-to-be-done-from-jan21-to-jan25/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/20/things-to-be-done-from-jan21-to-jan25/</guid>
      <description>Things to be done in this week:
1. Installation documentation for OpenStack, but don&amp;rsquo;t try it myself.
2. Documentation on Contrail.
3. Conceptions on SDN(Software Defined Networking).
4. Books on SDN/PLATFORMs.
5. Enable the CoreOS Access via SurfacePro.
6. Guangzhou Weather/PM2.5/PM10.
7. To enable the key-map on MAC?
8. Build awesome on CentOS, and let it to be my default WM.
If there are more things to be added, type it following.</description>
    </item>
    
    <item>
      <title>Trouble-Shooting On Building Awesome</title>
      <link>http://purplepalmdash.github.io/2015/01/20/trouble-shooting-on-building-awesome/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/20/trouble-shooting-on-building-awesome/</guid>
      <description>When building Awesome following the tutorial of following URL, I met following error:
I installed xcb-proto, but libxcb all the same print &amp;quot;No package &#39;xcb-proto&#39; found&amp;quot;  So the trouble shooting should be done like following, first we found the directory which contains xcb-proto.pc via:
$ cd /usr/ $ find . -name &amp;quot;xcb-proto.pc&amp;quot;  The result indicates this file locates in the /usr/lib/pkgconfig.
Easily we add this directory into our PKG_CONFIG_PATH, via following commands:</description>
    </item>
    
    <item>
      <title>Switching To Blogging Using DO</title>
      <link>http://purplepalmdash.github.io/2015/01/19/switching-to-blogging-using-do/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/19/switching-to-blogging-using-do/</guid>
      <description>Since I changed the working PC, so I need to switch from the old machine to the new machine, while the new machine&amp;rsquo;s network speed is pretty slow, that force me to switching from the local side working to vps-side working, following is the steps for Using DigitalOcean for updating my blog.
Repository First using the git for pulling the repository from the github, following this article for setting the whole octopress system:</description>
    </item>
    
    <item>
      <title>Test in YY</title>
      <link>http://purplepalmdash.github.io/2015/01/19/test-in-yy/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2015/01/19/test-in-yy/</guid>
      <description>See If I could update in YY?</description>
    </item>
    
    <item>
      <title>Trouble Shooting On Lost SSH Connection</title>
      <link>http://purplepalmdash.github.io/2014/12/30/trouble-shooting-on-lost-ssh-connection/</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/30/trouble-shooting-on-lost-ssh-connection/</guid>
      <description>I found lots of ssh connection attack info under the folder of /var/log/btmp, So I decide to change the sshd default listening port, from 22 to xxxx. Following is the steps for doing this:
Change SSHD Listening Port Change the default port from 22 to xxxx
# vim /etc/ssh/sshd_config Change the port from 22 to xxxx # service ssh restart  Now, congratulations, you lost all of your connections, since you have enable the iptables and banned all of the other ports.</description>
    </item>
    
    <item>
      <title>Get Alive Machine In LAN</title>
      <link>http://purplepalmdash.github.io/2014/12/29/get-alive-machine-in-lan/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/29/get-alive-machine-in-lan/</guid>
      <description>For searching all of the alive machine in the LAN, we could use nmap for searching.
Install the nmap via:
sudo pacman -S nmap  Scan the lan for living host:
# nmap -sP 10.0.0.* Starting Nmap 6.47 ( http://nmap.org ) at 2014-12-29 14:25 CST Nmap scan report for www.routerlogin.com (10.0.0.1) Host is up (0.00040s latency). MAC Address: xxx.xxx.xxx.xxx(xxx), Nmap scan report for 10.0.0.20 Host is up (0.00019s latency). MAC Address: xxx.</description>
    </item>
    
    <item>
      <title>Set Tiny Tiny Rss Reader on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/12/29/set-tiny-tiny-rss-reader-on-digitalocean/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/29/set-tiny-tiny-rss-reader-on-digitalocean/</guid>
      <description>Since Google Reader has been closed, many guys cannot find suitable Rss Reader for personal use. Following is a simple guildeline for setting up the Tiny Tiny Rss Reader on DigitalOcean, using docker, it&amp;rsquo;s pretty simple for setting up .
Container Setup Build two containers:
cd code mkdir TinyTinyRss cd TinyTinyRss/ git clone https://github.com/clue/docker-ttrss.git cd docker-ttrss/ docker run -d --name ttrssdb nornagon/postgres docker run -d --link ttrssdb:db -p 8078:80 clue/ttrss  ttrssdb is the dababase name for postgres, while the clue/ttrss is the tinytinyRss Webapp.</description>
    </item>
    
    <item>
      <title>Dockerize Mail Sender</title>
      <link>http://purplepalmdash.github.io/2014/12/24/dockerize-mail-sender/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/24/dockerize-mail-sender/</guid>
      <description>In DigitalOcean VPS, which runs the Ubuntu 14.04.1 LTS, setup a mail sender server.
Installation Install the docker.io via:
# apt-get install docker.io  Git clone the repository from the github, configure it and build the container:
# pwd /root/code/docker_mail # git clone https://github.com/lava/dockermail.git # ls dockermail # cd dockermail # cat mail-base/domains *******.com.cn # cat mail-base/passwords catch-all@xxxxx.com.cn:{PLAIN}password123 admin@xxxxxx.com.cn:{SHA256-CRYPT}$5$3qaCC/fV65Adtfoy$O20EXoSOcgWKf5NyAZnXAtGPQoSgeYRjLm56M25.H12 # make  Run the containers:
root@lilimarleen:~/code/docker_mail/dockermail# make run-all docker run -d -p 0.</description>
    </item>
    
    <item>
      <title>Create Vagrant For JD</title>
      <link>http://purplepalmdash.github.io/2014/12/19/create-vagrant-for-jd/</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/19/create-vagrant-for-jd/</guid>
      <description>Purpose For deploying the development environment in the Vagrant based environment, choose ubuntu 14.04.
Create List the exising Vagrants:
$ vagrant box list panamax-coreos-box-494.4.0 (virtualbox, 0)  Now download the vbox file of 14.04 daily Cloud image i386 from www.vagrantbox.es:
$ wget https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-i386-vagrant-disk1.box  Though this method could starts the vbox, but it&amp;rsquo;s not clean, it will have problems in our deliveris. So use the result from https://atlas.hashicorp.com/boxes/search
$ vagrant init ubuntu/trusty32 $ vagrant up  Current we use 32, because we may have windowsxp users, or 32-bit system users.</description>
    </item>
    
    <item>
      <title>Dockerize Wordpress On DigitalOcean&#39;s CoreOS</title>
      <link>http://purplepalmdash.github.io/2014/12/13/dockerize-wordpress-on-digitaloceans-coreos/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/13/dockerize-wordpress-on-digitaloceans-coreos/</guid>
      <description>Wordpress Install it via:
$ docker pull tutum/wordpress  Run it via:
$ docker run -p 80:80 tutum/wordpress &amp;amp;  Now configure the backend, and you could directly access http://Your_IP_Address for this wordpress website.
Import Database And Static Files Since I have an old website, I want to import it in this container, following is the steps of how-to.
The exising database runs on Debian 7, and its platform is arm-based, see if we could directly retrieve the wordpress and extract them into it.</description>
    </item>
    
    <item>
      <title>Recover My OpenWRT Configuration</title>
      <link>http://purplepalmdash.github.io/2014/12/12/recover-my-openwrt-configuration/</link>
      <pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/12/recover-my-openwrt-configuration/</guid>
      <description>Background I tried to use 192.168.1 network for debugging, but after I change back from 10.0.0. to 192.168.1. the router got no interface for luci and http. So following is the steps for recovering from the fail router.
Solution First I tried to recover the luci and uhttpd, but after a while I think maybe I could swith to a newer version.
The newest version currently is &amp;ldquo; &amp;lsquo;Barrier Breaker&amp;rsquo; &amp;ldquo;, its version number is 14.</description>
    </item>
    
    <item>
      <title>把玩Panamax</title>
      <link>http://purplepalmdash.github.io/2014/12/11/ba-wan-panamax/</link>
      <pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/11/ba-wan-panamax/</guid>
      <description>前提条件 在MAC上把玩Panamax前，需要安装Virtualbox, Vagrant, 而后, 用下列命令安装Panamax:
$ brew install http://download.panamax.io/installer/brew/panamax.rb $ panamax init  这将开始下载CoreOS镜像，需要等一段时间。
In fact the panamax could also be installed on ArchLinux rather than only in Ubuntu, simply run:
$ curl http://download.panamax.io/installer/ubuntu.sh | bash  Trouble Shooting Init failed $ panamix init A different VM with name panamax-vm has been created already. Please re-install or delete panamax-vm VM and try again.  Use following command for listing all of the virtualmachines:</description>
    </item>
    
    <item>
      <title>Re-Write WeatherAPP</title>
      <link>http://purplepalmdash.github.io/2014/12/10/re-write-weatherapp/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/10/re-write-weatherapp/</guid>
      <description>Background Building the Environment First clone the Vagrant Repo from:
$ pwd /media/y/Vagrant/CoreOS $ git clone https://github.com/coreos/coreos-vagrant.git $ cd coreos-vagrant $ cp config.rb.sample config.rb $ cp user-data.sample user-data  Cluster Setting Edit the config.rb, for configurating the instance and the official CoreOS channel:
# Size of the CoreOS cluster created by Vagrant $num_instances=3 # Official CoreOS channel from which updates should be downloaded $update_channel=&#39;stable&#39;  Now start the vagrant and view its status:</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(5)</title>
      <link>http://purplepalmdash.github.io/2014/12/06/tips-on-30days30skills-5/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/06/tips-on-30days30skills-5/</guid>
      <description>Since the RESTful API is a little bit hard for setup, I ignore the Day10 and Day11, jump to Day 12, OpenCV.
Day 12 - OpenCV Get the jar file First download the opencv from: http://sourceforge.net/projects/opencvlibrary/files/latest/download
$ unzip *.zip $ cd opencv-2.4.10 $ cmake -G &amp;quot;Unix Makefiles&amp;quot; -D CMAKE_CXX_COMPILER=/usr/bin/g++ -D CMAKE_C_COMPILER=/usr/bin/gcc -D WITH_CUDA=ON .. $ make -j4 &amp;amp;&amp;amp; make install  Trouble shooting when generating openCV jar file:
Correct output should be:</description>
    </item>
    
    <item>
      <title>Use VCCW For Deploying WP</title>
      <link>http://purplepalmdash.github.io/2014/12/06/use-vccw-for-deploying-wp/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/06/use-vccw-for-deploying-wp/</guid>
      <description>For deploying differenet versions of Wordpress, I searched various kinds of solutions, includeing docker and vagrant, finally I found VCCW(A Wordpress development environment) is what I want, because I could freely changes the WP versions, so following is the guideline for installing and configurating the whole virtualmachine.
Install The installation steps are listed as:
$ vagrant plugin install vagrant-hostsupdater $ wget https://github.com/miya0001/vccw/archive/1.9.1.tar.gz $ tar xzvf 1.9.1.tar.gz $ cd vccw-1.9.1 $ vagrant up  This will start downloading and configrating the VM, it will cost sometimes.</description>
    </item>
    
    <item>
      <title>Flask&amp;amp;AngularJS Blog Tips</title>
      <link>http://purplepalmdash.github.io/2014/12/04/flask-and-angularjs-blog-tips/</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/04/flask-and-angularjs-blog-tips/</guid>
      <description>Background For setup the local blog which used for recording some articles, and provide the RESTful APIs for remote usage.
The tutorial is located at:
http://blog.john.mayonvolcanosoftware.com/building-a-blog-using-flask-and-angularjs-part-1/
Installation of Packages First preapare the environment using virtualenv2:
$ virtualenv2 flask_blog $ source flask_blog/bin/activate  Now write a requirements.txt file, under the current folder, the content is:
Flask==0.10.1 Flask-Bcrypt==0.6.0 Flask-HTTPAuth==2.2.1 Flask-RESTful==0.2.12 Flask-SQLAlchemy==1.0 Flask-WTF==0.10.0 Jinja2==2.7.3 MarkupSafe==0.23 SQLAlchemy==0.9.7 SQLAlchemy-Utils==0.26.9 WTForms==2.0.1 WTForms-Alchemy==0.12.8 WTForms-Components==0.9.5 Werkzeug==0.9.6 aniso8601==0.83 decorator==3.</description>
    </item>
    
    <item>
      <title>Trouble Shooting On Wicd Wireless Connection</title>
      <link>http://purplepalmdash.github.io/2014/12/04/trouble-shooting-on-wicd-wireless-connection/</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/04/trouble-shooting-on-wicd-wireless-connection/</guid>
      <description>Problem Could see the SSID, but could not connect to it.
Trouble Shooting First check the log in /var/log/wicd:
[root@TrustyArch wicd]# cat wicd.log 2014/12/04 20:32:02 :: DHCP connection successful 2014/12/04 20:32:02 :: not verifying 2014/12/04 20:32:02 :: Connecting thread exiting. 2014/12/04 20:32:03 :: Sending connection attempt result success 2014/12/04 20:34:20 :: trying to load backend external 2014/12/04 20:34:20 :: trying to load backend ioctl 2014/12/04 20:34:20 :: WARNING: python-iwscan not found, falling back to using iwlist scan.</description>
    </item>
    
    <item>
      <title>Enable Timestamp In New Octopress Theme</title>
      <link>http://purplepalmdash.github.io/2014/12/03/enable-timestamp-in-new-octopress-theme/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/03/enable-timestamp-in-new-octopress-theme/</guid>
      <description>After installing the flattern theme of octopress, I found the post date missed. Following is the steps for catching it back.
rake install[&#39;flatten&#39;]  Modify the following file:
$ cat .themes/flatten/source/_includes/post/date.html  Then in .themes/flatten/source/_layouts/post.html, modify the following lines:
 &amp;lt;p class=&amp;quot;meta&amp;quot;&amp;gt; //.....// &amp;lt;/p&amp;gt;  After modification, you would see the time is displayed before the comment numbers.
Notice, the modification is not visible in codeblocks because the embedded symbol could not be resolved thus will cause build error, so the detailed code would be only fetched from my github repository but remains blank codeblocks here in this article.</description>
    </item>
    
    <item>
      <title>Use Docker for deploying WP</title>
      <link>http://purplepalmdash.github.io/2014/12/03/use-docker-for-deploying-wp/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/03/use-docker-for-deploying-wp/</guid>
      <description>Just for swiftly deploy WP and test the RESTful API, I did following operations and runs a WP temporately.
PULL Pull following containers:
$ docker pull mysql $ docker pull wordpress $ sudo docker images REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE &amp;lt;none&amp;gt; &amp;lt;none&amp;gt; 480ac552cd39 About an hour ago 192.8 MB mysql latest 98840bbb442c 39 hours ago 235.5 MB wordpress latest 9f51af77fd96 8 days ago 470.5 MB  Configuration Explanation for following commands, --name is the name for our container, -p 8038:80 is mapping the host machine&amp;rsquo;s 8038 port to container wordpress_1:</description>
    </item>
    
    <item>
      <title>用Flask搭建你自己的Restful API</title>
      <link>http://purplepalmdash.github.io/2014/12/03/yong-flaskda-jian-ni-zi-ji-de-restful-api/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/03/yong-flaskda-jian-ni-zi-ji-de-restful-api/</guid>
      <description>背景 最近在过一个《30天学习30种新技术》，过到第10天用Phonegap开发APP的时候，发现作者提供的API不可用，所以费心研究了一下Restful API, 顺利构建出了环境写完了那个APP，下面是一些摘要。
我用的Tutorial来自这里：
http://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask
开发环境是ArchLinux.
Hello Flask 原Tutorial中给出的是一个关于todo-list的实现，我们从最简单的&amp;rdquo;Hello Flask&amp;rdquo;开始：
首先安装python虚拟环境和flask，注意因为Arch默认的python版本是3，所以这里我们使用了virtualenv2来创建python虚拟运行环境。
$ mkdir todo-api $ cd todo-api $ virtualenv2 flask $ source flask/bin/activate (flask) $ pip install flask  在当前目录下建立app.py文件， 输入以下内容：
#!flask/bin/python from flask import Flask app = Flask(__name__) @app.route(&#39;/&#39;) def index(): return &amp;quot;Hello, Flask!&amp;quot; if __name__ == &#39;__main__&#39;: app.run(debug=True)  现在改变文件属性，运行之:
$ chmod a+x app.py $ ./app.py  打开浏览器访问http://127.0.0.1:5000,，我们可以看到Hello Flask已经出现在浏览器里了。
实现最简单的Restful API Flask本身支持很多插件，可以用于实现Restful API，由于我们这里只是做DEMO使用，需求比较简单，我们抛弃那些繁琐的插件，手动来写。
这里我们也不会引入数据库等内容，我们将task任务列表直接保存在内存中，所以一旦断电这些数据就将消失。在实际的生产环境中，我们是需要引入不同的数据库来存储这些数据的。
在上面生成的app.py中添加以下内容:
#!flask/bin/python from flask import Flask, jsonify app = Flask(__name__) tasks = [ { &#39;id&#39;: 1, &#39;title&#39;: u&#39;Buy groceries&#39;, &#39;description&#39;: u&#39;Milk, Cheese, Pizza, Fruit, Tylenol&#39;, &#39;done&#39;: False }, { &#39;id&#39;: 2, &#39;title&#39;: u&#39;Learn Python&#39;, &#39;description&#39;: u&#39;Need to find a good Python tutorial on the web&#39;, &#39;done&#39;: False } ] @app.</description>
    </item>
    
    <item>
      <title>Virtual Node Environment For PhoneGap Development</title>
      <link>http://purplepalmdash.github.io/2014/12/01/virtual-node-environment-for-phonegap-development/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/12/01/virtual-node-environment-for-phonegap-development/</guid>
      <description>Background I met some tutorials which were write one or two years ago, while at that time the corresponding plugins are in an old version, so I need to find a whole &amp;ldquo;virtual&amp;rdquo; environment for developing these tutorials.
Install Nodeenv &amp;ldquo;Node.js virtual environment builder&amp;rdquo; &amp;mdash; is the introduction for Nodeenv.
Install it via:
$ virtualenv2 venv source venv/bin/activate (venv)[Trusty@~/code/30days/PhoneGap2.9.0]$ $ pip install nodeenv (venv)[Trusty@~/code/30days/PhoneGap2.9.0]$ which nodeenv /home/Trusty/code/30days/PhoneGap2.9.0/venv/bin/nodeenv (venv)[Trusty@~/code/30days/PhoneGap2.9.0]$ nodeenv --version 0.</description>
    </item>
    
    <item>
      <title>Setup Dev Env On DO</title>
      <link>http://purplepalmdash.github.io/2014/11/28/setup-dev-env-on-do/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/28/setup-dev-env-on-do/</guid>
      <description> Prepare Install the following packages:
$ sudo apt-get install python-virtualenv $ sudo apt-get install ruby-full ruby $ sudo gem install rhc  Since DO&amp;rsquo;s network is pretty good, so it&amp;rsquo;s very swift for developing on it.
TextBlob $ virtualenv venv --python=python2.7 $ . venv/bin/activate $ pip install textblob $ python -m textblob.download_corpora $ pip install flask  </description>
    </item>
    
    <item>
      <title>Apache Parameter Adjust</title>
      <link>http://purplepalmdash.github.io/2014/11/27/apache-parameter-adjust/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/27/apache-parameter-adjust/</guid>
      <description>Background A wordpress machine runs on DigitalOcean often sudden the mysqld database lost error.
Analyze This is because the memory is exhausted in DO, so first I enable the swap for machine. This method solved the problem for a long time.
But later it seems the robots who sent the rubbish comments continue to attack the system, causing the mysqld halt again, this time, I modified the apahce2&amp;rsquo;s works:</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(3)</title>
      <link>http://purplepalmdash.github.io/2014/11/27/tips-on-30days30skills-3/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/27/tips-on-30days30skills-3/</guid>
      <description>Day 7 - GruntJS(2) GruntJS Markdown Plugin First download the source file:
$ git clone https://github.com/shekhargulati/day7-gruntjs-livereload-example.git $ cd day7-gruntjs-livereload-example $ sudo npm install -g grunt $ grunt $ cd day7-gruntjs-livereload-example $ sudo npm install -g grunt $ npm init $ npm install grunt $ sudo npm install grunt-contrib-uglify grunt-markdown grunt-contrib-watch -g $ grunt &amp;gt;&amp;gt; Local Npm module &amp;quot;grunt-contrib-watch&amp;quot; not found. Is it installed? Running &amp;quot;uglify:build&amp;quot; (uglify) task &amp;gt;&amp;gt; 1 file created.</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(4)</title>
      <link>http://purplepalmdash.github.io/2014/11/27/tips-on-30days30skills-4/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/27/tips-on-30days30skills-4/</guid>
      <description>Day 9 - TextBlob Installation:
Yosemite:TextBlob Trusty$ mkdir myapp Yosemite:TextBlob Trusty$ cd myapp/ Yosemite:myapp Trusty$ virtualenv venv --python=python2.7 Running virtualenv with interpreter /usr/bin/python2.7 New python executable in venv/bin/python Installing setuptools, pip...done. Yosemite:myapp Trusty$ . venv/bin/activate (venv)Yosemite:myapp Trusty$ pip install textblob $ pip install -U textblob $ python -m textblob.download_corpora  After adding the textblob, create flask:
$ pip install flask $ vim app.py $ mkdir templates $ touch templates/index.html  Modify the app.</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(2)</title>
      <link>http://purplepalmdash.github.io/2014/11/26/tips-on-30days30skills-2/</link>
      <pubDate>Wed, 26 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/26/tips-on-30days30skills-2/</guid>
      <description>Day 5 - GruntJS Install via:
$ sudo npm install grunt-cli -g  After running you could see grunt is avaiable:
$ which grunt /usr/local/bin/grunt  Automatically create the package.json via npm init.
Yosemite:GruntJS Trusty$ mkdir blog Yosemite:GruntJS Trusty$ cd blog Yosemite:blog Trusty$ npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sane defaults. See `npm help json` for definitive documentation on these fields and exactly what they do.</description>
    </item>
    
    <item>
      <title>Octopress Tips</title>
      <link>http://purplepalmdash.github.io/2014/11/25/octopress-tips/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/25/octopress-tips/</guid>
      <description>Hide AsideBar Add following lines into your _config.yml:
sidebar: collapse  Then regenerate the whole website.
Changing Navigation Add &amp;ldquo;About Me&amp;rdquo; navigation:
$ cat source/_includes/custom/navigation.html &amp;lt;ul class=&amp;quot;main-navigation&amp;quot;&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/&amp;quot;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/blog/archives&amp;quot;&amp;gt;Archives&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/about&amp;quot;&amp;gt;About Me&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;  Add customized tags:
 &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/blog/categories/linux/&amp;quot;&amp;gt;Linux&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/blog/categories/embedded/&amp;quot;&amp;gt;Embedded&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;  Add Customized Background Edit the sass/cumstom/_style.css, change following content:
html { background: #555555 url(&amp;quot;/images/pagebackground.jpg&amp;quot;); //background: #555555; }  Now regenerate the website, ten you got the modified background website.</description>
    </item>
    
    <item>
      <title>Upgrade OpenWRT on MW151RM3G</title>
      <link>http://purplepalmdash.github.io/2014/11/24/upgrade-openwrt-on-mw151rm3g/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/24/upgrade-openwrt-on-mw151rm3g/</guid>
      <description>Prepare First go to http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/, find the &amp;ldquo;wr703n&amp;rdquo;, download the 2 files.
$ ls -l openwrt* -rw-r----- 1 Trusty root 3932160 Nov 24 13:50 openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin -rw-r----- 1 Trusty root 3342340 Nov 24 13:50 openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin  sysupgrade.bin is for upgrading.
Upgrade System-&amp;gt; Backup/Flash Firmware.
Flash New firmware image, choose File. Select the sysupgrade.bin, Upgrade.
Tehn you have to wait for the changes to be applied, around half a miniutes, then everything will be OK.</description>
    </item>
    
    <item>
      <title>DNSCrypt&#43;ssh</title>
      <link>http://purplepalmdash.github.io/2014/11/23/dnscrypt-plus-ssh/</link>
      <pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/23/dnscrypt-plus-ssh/</guid>
      <description>Sometips for recording how to cross the greatfxxewall:
SSH Use following command for forwarding your flow to remote machine:
alias enablexx=&#39;ssh -C -qTfnN -D 1395 root@xxx.xxx.xxx.xxx  xxx.xxx.xxx.xxx should be the machine outside of China.
Then in your browser set the proxy to 127.0.0.1:1395, while this is the socket proxy, so choose sock4/sock5 for configuration parameters.
DNS Cryption For the DNS flow will be hijacked by greatfxxxewall, we have to encrypt all of the traffics for DNS Querying.</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills(1)</title>
      <link>http://purplepalmdash.github.io/2014/11/23/tips-on-30days30skills/</link>
      <pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/23/tips-on-30days30skills/</guid>
      <description>Day 3 - Flask First install the virtualenv environment via:
$ brew install pyenv-virtualenv  Create the 2.7 virtualenv of python, first you have to install 2.7(before you could use list for listing all of the aviable versions), then use following command for creating the 2.7 virtualenv for developing flask:
$ eval &amp;quot;$(pyenv init -)&amp;quot; $ pyenv install --list $ pyenv install 2.7 $ pyenv virtualenv 2.7 venv_For_Flask_2.7 $ pyenv versions $ pyenv activate venv_For_Flask_2.</description>
    </item>
    
    <item>
      <title>重装手记</title>
      <link>http://purplepalmdash.github.io/2014/11/23/zhong-zhuang-shou-ji/</link>
      <pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/23/zhong-zhuang-shou-ji/</guid>
      <description>昨晚的安装还是没能解决问题，所以今天重新来一次。
安装步骤 1. 插入Yosemite USB安装盘，选择&amp;rdquo;Ignore caches and inject kext&amp;rdquo;后按回车，进入到Yosemite安装界面。这时候的语言界面是意大利语的。分区选择Utility-&amp;gt; Utility Disco, 点击磁盘，按Inizilalizza， 输入Name后按Inizializza. 再一次确认也是Inizilalizza. 分区完毕后点x返回到安装界面，点击Continua-&amp;gt; Continua-&amp;gt; Accetta后选择Hard磁盘, Continua. 这时弹出拷贝窗口，需要等待大概15分钟时间用于拷贝/安装到磁盘。安装完毕后会自动重启。
2. 重启后需要选择&amp;rdquo;Boot Mac OS X from Hard&amp;rdquo;, 空格后选择&amp;rdquo;Ignore caches and inject kext&amp;rdquo; 后回车，这时会进入到一个配置界面。首选选择时区，点击Mostra tuite后选择你要的时区后, Continua, 然后选择键盘布局，USA, Continua, 网络配置选择&amp;rdquo;II mio computer non si connette a Internet&amp;rdquo;, Continua, Continua, 而后选择Non trasferrie informazioni adesso, Continua, Accetto, Accetta, 接着输入用户名/密码， Continua, 再一次Continua后进入Configuro iL Mac界面后，登录成功。
3. 在登录后的界面里，首先安装Clover到系统硬盘Hard,这样下一次我们就可以不用插入优盘以进行引导了。Clover安装时选择Install in UEFI和Drivers64UEFI。而后用UEFI Mount加载上系统真正的UEFI分区后，把根目录下的EFI目录全盘拷贝到系统UEFI分区下。同时使用KextDrop.dmg drop同用的Kext到系统。重启。
4. Drop Yosemite自己的驱动后，重启。这时候的声卡，USB, 蓝牙等应该都已经驱动上了。由于我们使用了修改过的Display驱动，DP口现在也应该是好的。开始安装有线/无线驱动。安装完毕后系统自动要求重启。
5. 重启完毕后可以直接链入网络，为了可以访问App Store， 删除掉系统里所有网络配置，删除掉/Library/Preferences/SystemConfiguration/NetworkInterfaces.</description>
    </item>
    
    <item>
      <title>Moving System on 1T Harddisk(3)</title>
      <link>http://purplepalmdash.github.io/2014/11/22/moving-system-on-1t-harddisk-3/</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/22/moving-system-on-1t-harddisk-3/</guid>
      <description>In fact this series is not only for customization of the surface pro, it becomes the written-tips for what I&amp;rsquo;ve installed on my ArchLinux. So later all of the necessary packages installation I will record them here.
1. postgres
Install via:
sudo pacman -S postgresql  Start postgresql service:
$ sudo systemctl start postgresql  Now begin to configurate the postgres:
$ sudo -i -u postgres [postgres@kkkttt ~]$ initdb --locale en_US.</description>
    </item>
    
    <item>
      <title>Re-install Surface Pro</title>
      <link>http://purplepalmdash.github.io/2014/11/22/re-install-surface-pro/</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/22/re-install-surface-pro/</guid>
      <description>Just for recording the steps, later I will use it for re-installation.
1. Insert the FlashDisk, re-partition the harddisk, and install the system. After everything is OK, restart.
2. Choose start from HardDisk(ignore the caches and eject kext), Now the system will ask you for configuration, Select US-keyboard/Canada, after entering the system, simply change the language from Italian to English.
Install Clover to the Harddisk. The default installtion will failed, then you have to manually mount the EFI partition, and copy the EFI/ folder under the &amp;ldquo;/&amp;rdquo; directory to EFI partition.</description>
    </item>
    
    <item>
      <title>Retrieve Weather Database for further analyze</title>
      <link>http://purplepalmdash.github.io/2014/11/22/retrieve-weather-database-for-further-analyze/</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/22/retrieve-weather-database-for-further-analyze/</guid>
      <description>Heroku Postgres I wrote the weather app which holds at:
http://python-weather-app.herokuapp.com
At around half a year it grows around 7MB, so I begin to think of how to back it and migrate to other platforms.
Following is the steps for viewing and operation on postgres database:
$ heroku login $ heroku config $ heroku addons | grep POSTGRES $ heroku pg:info  Backup Install the addons of pgbackups for backing up the existing databases:</description>
    </item>
    
    <item>
      <title>Tips For Mac</title>
      <link>http://purplepalmdash.github.io/2014/11/22/tips-for-mac/</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/22/tips-for-mac/</guid>
      <description>Set Proxy The proxy setting method is the same as in Linux, just add following lines into the ~/.bashrc:
# Set the proxy alias unsethome=&#39;unset http_proxy https_proxy ftp_proxy ftps_proxy&#39; alias set2383=&#39;unsethome;export http_proxy=http://xxx.xx.xx238:2383;export https_proxy=http://xxx.xx.xx238:2383;export ftp_proxy=http://xxx.xx.xx238:2383;export ftps_proxy=http://xxx.xx.xx238:2383&#39;  So next time simply run set2383 then you could set the proxy for terminal based programs.
Package Management brew is a very good package management tool for MAC, install it via:
ruby -e &amp;quot;$(curl -fsSL https://raw.</description>
    </item>
    
    <item>
      <title>Tips on 30Days30Skills</title>
      <link>http://purplepalmdash.github.io/2014/11/22/tips-on-30days30skills/</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/22/tips-on-30days30skills/</guid>
      <description>This series is the note for learning 30days30skills, the origin web pages could be found at:
http://segmentfault.com/a/1190000000349384
All of these operations should be done under MACOS rather than linux.
Day 1 - bower First install nodejs from following position:
nodejs.org/download/
Git could be installed from APPStore.
Set npm proxy before you do everything, cause I operate under the proxy based network:
npm config set proxy http://xxx.xxx.xxx.xx:xxxx npm config set https-proxy http://xxx.</description>
    </item>
    
    <item>
      <title>GitLab Installation and Configuration</title>
      <link>http://purplepalmdash.github.io/2014/11/21/gitlab-installation-and-configuration/</link>
      <pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/21/gitlab-installation-and-configuration/</guid>
      <description>For sharing the project and holding the status of developing Rohc project, I set this gitlab project.
Installation The detailed guildeline is from following URL:
https://www.digitalocean.com/community/tutorials/how-to-set-up-gitlab-as-your-very-own-private-github-clone
But have some modifications.
Modification Write permission problem:
ERROR: While executing gem ... (Gem::FilePermissionError) You don&#39;t have write permissions for the /usr/local/rvm/gems/ruby  Solved via:
$ sudo chmod -R 777 /usr/local/bin $ sudo chmod -R 777 /usr/local/rvm  We met modernizr missing problem, do following for avoiding this:</description>
    </item>
    
    <item>
      <title>Share Mouse between ArchLinux &amp;amp; Yosemite</title>
      <link>http://purplepalmdash.github.io/2014/11/20/share-mouse-between-archlinux-and-yosemite/</link>
      <pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/20/share-mouse-between-archlinux-and-yosemite/</guid>
      <description>Fixed IP First configure the IP for Yosemite on router, since the Archlinux takes the 221, Yosemite may use 220 for its fixed ip.
ArchLinux Setting I use ArchLinux as the synergy server, so first install synergy via:
$ sudo pacman -S synergy  I want to place Yosemite at the right of the ArchLinux, So just configure the /etc/hosts like following.
$ tail /etc/hosts # For setting Synergy 10.</description>
    </item>
    
    <item>
      <title>Enable Light-Weighted WebServer</title>
      <link>http://purplepalmdash.github.io/2014/11/18/enable-light-weighted-webserver/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/18/enable-light-weighted-webserver/</guid>
      <description>TOP Result Via top we saw:
 2615 mysql 20 0 949.7m 450.7m 0.0 5.7 0:02.62 S mysqld  This caused too much memory be wasted while my blog uses the static pages.
Solution: I will use a light-weighted web-server.
Disable xampp Disble and remove the service of xampp via following command:
[root@kkkktt kkk]# systemctl stop xampp.service [root@kkkktt kkk]# systemctl disable xampp.service Removed symlink /etc/systemd/system/multi-user.target.wants/xampp.service.  lighttpd Install via following command and test its configuration:</description>
    </item>
    
    <item>
      <title>Tips on installing Yosemite</title>
      <link>http://purplepalmdash.github.io/2014/11/18/tips-on-installing-yosemite/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/18/tips-on-installing-yosemite/</guid>
      <description>First get the installation image from the AppStore, then format a flash-disk more than 8G to following format:
Use following commands for creating the installation media:
kkkkkkkktttt-iMac:~ Trusty$ sudo /Applications/Install\ OS\ X\ Yosemite.app/Contents/Resources/createinstallmedia --volume /Volumes/Install --applicationpath /Applications/Install\ OS\ X\ Yosemite.app --nointeraction  Take a coffee, cause this will spend a long time for copying everything you need into the disk.
Install Clover:
Customize Clover installation:
Copy the dsdt &amp;amp; ssdt files to EFI partition:</description>
    </item>
    
    <item>
      <title>Forward x11 via ssh</title>
      <link>http://purplepalmdash.github.io/2014/11/17/forward-x11-via-ssh/</link>
      <pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/17/forward-x11-via-ssh/</guid>
      <description>Since the 5901 port is forbiddended via administrator of the switch, we have to forward the traffic to remote machine via ssh:
First in our machine type following command:
ssh -L 2333:A:5901 A -l Trusty  This will forward the A machines&amp;rsquo; 5901 to local&amp;rsquo;s 2333 port.
Then use a vncviewer software for accessing local machine&amp;rsquo;s 2333 port:
vncviewer localhost:2333  Notice, the virtualbox&amp;rsquo;s is named to vboxgtk in opensuse.</description>
    </item>
    
    <item>
      <title>EBC Exercises on BBB - PWM</title>
      <link>http://purplepalmdash.github.io/2014/11/16/ebc-exercises-on-bbb-pwm/</link>
      <pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/16/ebc-exercises-on-bbb-pwm/</guid>
      <description>PWM Simply enable the P9_21 to PWM, then connect to the LED. The LED connection could refer to EBC Exercises on BBB - Control LED
SLOTS=/sys/devices/bone_capemgr.*/slots echo am33xx_pwm &amp;gt; $SLOTS echo bone_pwm_P9_21 &amp;gt; $SLOTS cd /sys/devices/ocp.3/pwm_test_P9_21.15/ echo 1000000000 &amp;gt; period echo 250000000 &amp;gt; duty echo 1 &amp;gt; run  From now you could see the LED begin to flash. In fact using this pwm we could control servo motor:</description>
    </item>
    
    <item>
      <title>EBC Exercises on BBB -GPIO Via Mmap</title>
      <link>http://purplepalmdash.github.io/2014/11/16/gpio-via-mmap/</link>
      <pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/16/gpio-via-mmap/</guid>
      <description>Operate On Device Tree Turn off the trigger and then shine on the LED USR3 via following command:
root@arm:~# cd /sys/class/leds/beaglebone\:green\:usr3 root@arm:/sys/class/leds/beaglebone:green:usr3# ls brightness device max_brightness power subsystem trigger uevent root@arm:/sys/class/leds/beaglebone:green:usr3# echo none &amp;gt; trigger root@arm:/sys/class/leds/beaglebone:green:usr3# echo 1 &amp;gt; brightness  We could find the gpio is attached to which pin:
# ./findGPIO.js USR3 { name: &#39;USR3&#39;, gpio: 56, led: &#39;usr3&#39;, mux: &#39;gpmc_a8&#39;, key: &#39;USR3&#39;, muxRegOffset: &#39;0x060&#39;, options: [ &#39;gpmc_a8&#39;, &#39;gmii2_rxd3&#39;, &#39;rgmii2_rd3&#39;, &#39;mmc2_dat6&#39;, &#39;gpmc_a24&#39;, &#39;pr1_mii1_rxd0&#39;, &#39;mcasp0_aclkx&#39;, &#39;gpio1_24&#39; ] } USR3 (gpio 56) mode: 7 (gpio1_24) 0x060 pullup pin 24 (44e10860): (MUX UNCLAIMED) (GPIO UNCLAIMED)  gpio1_24 is what we want.</description>
    </item>
    
    <item>
      <title>EBC Exercises on BBB -i2c and BBB</title>
      <link>http://purplepalmdash.github.io/2014/11/16/i2c-and-bbb/</link>
      <pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/16/i2c-and-bbb/</guid>
      <description>Connection HMC5883L magnetometer runs in 400KHZ I2C bus, it&amp;rsquo;s for measuring the magnetic field vector in 3 dimensions.
We use its 4 ports: VCC,GND,SDA, SCL. SDA is for Data, while SCL is for Clock.
Use P9 for connecting the HMC5883L.
P9_02(GND) &amp;lt;----&amp;gt; GND P9_04(VCC) &amp;lt;----&amp;gt; VCC P9_19(I2C2_SCL) &amp;lt;----&amp;gt; SCL	I2C bus 2(pin 19 on header p9 to SCL) P9_20(I2C2_SDA) &amp;lt;----&amp;gt; SDA	 I2C Detect First you should install i2cdetect, then list the avaiable i2c bus via following command:</description>
    </item>
    
    <item>
      <title>EBC Exercises on BBB</title>
      <link>http://purplepalmdash.github.io/2014/11/13/ebc-exercises-on-bbb/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/13/ebc-exercises-on-bbb/</guid>
      <description>Tips on Building Kenrel Via following commands you could build the 3.8 kernel for BBB:
$ git clone git://github.com/RobertCNelson/linux-dev.git $ cd linux-dev $ git checkout origin/am33x-v3.8 -b am33x-v3.8 $ time git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git $ cp system.sh.sample system.sh $ diff system.sh* 15c15 &amp;lt; CC=arm-linux-gnueabi- --- &amp;gt; #CC=arm-linux-gnueabi- 21c21 &amp;lt; LINUX_GIT=~/BeagleBoard/linux-stable/ --- &amp;gt; #LINUX_GIT=/home/user/linux-stable/ 31c31 &amp;lt; ZRELADDR=0x80008000 --- &amp;gt; #ZRELADDR=0x80008000 $ ./build_kernel.sh  U-boot Cross-compile Download the U-boot and cross-compile it.</description>
    </item>
    
    <item>
      <title>EBC Exercises on BBB - Control LED</title>
      <link>http://purplepalmdash.github.io/2014/11/13/ebc-exercises-on-bbb-control-led/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/13/ebc-exercises-on-bbb-control-led/</guid>
      <description>Using Sysfs The easiest way to do general purpose I/O(gpio) on BBB is through the terminal and shell command. sysfs is the virtual file system which exposes the drivers for the hardware so you can directly use them.
# cd /sys/class/leds # ls # beaglebone:green:usr0 beaglebone:green:usr1 beaglebone:green:usr2 beaglebone:green:usr3 # cd beaglebone\:green\:usr0 # cat trigger none nand-disk mmc0 mmc1 timer oneshot [heartbeat] backlight gpio cpu0 default-on transient  If you want to disable the heartbeat:</description>
    </item>
    
    <item>
      <title>EBC Exercises on BBB - Device Tree</title>
      <link>http://purplepalmdash.github.io/2014/11/13/ebc-exercises-on-bbb-device-tree/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/13/ebc-exercises-on-bbb-device-tree/</guid>
      <description>Install js wrapped bonescript For using the javascript wrapped library, first we have to install following packages:
$ sudo apt-get install nodejs npm nodejs-legacy $ npm config set proxy http://1xx.xx.xx.xxx:2xxx $ npm config set https-proxy http://1xx.xx.xx.xx:2xxx $ npm install bonescript  Because my network environment is under the firewall, so I need to set the proxy, if you directly connect to internet, you could ignore the npm config set commands.</description>
    </item>
    
    <item>
      <title>EBC Exercises on BBB - Read Analog</title>
      <link>http://purplepalmdash.github.io/2014/11/13/ebc-exercises-on-bbb-read-analog/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/13/ebc-exercises-on-bbb-read-analog/</guid>
      <description>Connection The wired connection is listed as following:
Pin 34(analog ground) &amp;mdash;&amp;gt; Negative Pin
Pin 32(1.8 V) &amp;mdash;&amp;gt; Positive Pin
Pin 36(AIN5) &amp;mdash;&amp;gt; Wiper
Pin 32: VADC, Pin 34: AGND, Pin36, AIN5.
Operation root@arm:/sys/kernel/debug/pinctrl/44e10800.pinmux# cat /sys/devices/bone_capemgr.*/slots 0: 54:PF--- 1: 55:PF--- 2: 56:PF--- 3: 57:PF--- 4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G 5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI root@arm:/sys/kernel/debug/pinctrl/44e10800.pinmux# SLOTS=/sys/devices/bone_capemgr.*/slots root@arm:/sys/kernel/debug/pinctrl/44e10800.pinmux# PINS=/sys/kernel/debug/pinctrl/44e10800.pinmux/pins root@arm:/sys/kernel/debug/pinctrl/44e10800.pinmux# echo cape-bone-iio &amp;gt; $SLOTS root@arm:/sys/kernel/debug/pinctrl/44e10800.pinmux# cat $SLOTS 0: 54:PF--- 1: 55:PF--- 2: 56:PF--- 3: 57:PF--- 4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G 5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI 7: ff:P-O-L Override Board Name,00A0,Override Manuf,cape-bone-iio root@arm:/sys/kernel/debug/pinctrl/44e10800.</description>
    </item>
    
    <item>
      <title>Server Performance</title>
      <link>http://purplepalmdash.github.io/2014/11/12/server-performance/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/12/server-performance/</guid>
      <description>Get the UnixBench and run
wget http://byte-unixbench.googlecode.com/files/UnixBench5.1.3.tgz tar xvf UnixBench5.1.3.tgz cd UnixBench ./Run  Result:</description>
    </item>
    
    <item>
      <title>Enable Bluetooth Headset On ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/11/10/enable-bluetooth-headset-on-archlinux/</link>
      <pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/10/enable-bluetooth-headset-on-archlinux/</guid>
      <description>Since my operating system upgraded, I have to re-set my bluetooth headset. I use A2DP via Bluez5/Pulseaudio.
Installation First install following packages:
# pacman -S pulseaudio-alsa bluez bluez-libs bluez-utils  Then start the service via systemd:
# systemctl start bluetooth  Configuration I use an expect script for automatically connect to my MW600 and play:
#!/usr/bin/expect # This script is for automatically scan my bluetooth headset, which is Sony-Errison mw-600 # Timeout should be very short in local # set timeout 3 spawn ssh Trusty@localhost -Y expect { &amp;quot;yes/no&amp;quot; { send &amp;quot;yes\n&amp;quot; exp_continue } &amp;quot;assword&amp;quot; { send &amp;quot;xxxxxxx!</description>
    </item>
    
    <item>
      <title>OpenWRT on BBB(3)</title>
      <link>http://purplepalmdash.github.io/2014/11/10/openwrt-on-bbb-3/</link>
      <pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/10/openwrt-on-bbb-3/</guid>
      <description>Building Guideline I found a openwrt-bbb repository on github, so just download it and build:
https://github.com/nc543/openwrt-bbb/wiki
$ git clone https://github.com/nc543/openwrt-bbb.git $ cd openwrt-bbb $ make  When building you will meet the openssl download error, simply change the version from 1.0.1i to 1.0.1h or other version is OK.
I change this because in recent days the download page of openssl.org is not stable, so the download procedure will directly download the tar files from openwrt.</description>
    </item>
    
    <item>
      <title>为BBB编译内核和Linux</title>
      <link>http://purplepalmdash.github.io/2014/11/09/wei-bbbbian-yi-nei-he-he-linux/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/09/wei-bbbbian-yi-nei-he-he-linux/</guid>
      <description>因为原文是英文的缘故，所以这里就直接用中文翻译，并把编译时的步骤和注意事项记载下来。
主要参考了:
https://eewiki.net/display/linuxonarm/BeagleBone+Black
All of the files and folder are located under $BBB/201411 folder.
交叉编译链准备 下载、设置交叉编译链:
wget -c https://releases.linaro.org/14.09/components/toolchain/binaries/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.xz tar xf gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.xz export CC=`pwd`/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-  测试交叉编译链:
# ${CC}gcc --version arm-linux-gnueabihf-gcc (crosstool-NG linaro-1.13.1-4.9-2014.09 - Linaro GCC 4.9-2014.09) 4.9.2 20140904 (prerelease) Copyright (C) 2014 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description>
    </item>
    
    <item>
      <title>Install new image to sd card for BBB</title>
      <link>http://purplepalmdash.github.io/2014/11/08/install-new-image-to-sd-card-for-bbb/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/08/install-new-image-to-sd-card-for-bbb/</guid>
      <description>Mainly for installing the OpenWRT system on the BBB, following is the steps:
# zImage cp /media/y/embedded/BBB/svnco/trunk/bin/omap/openwrt-omap-zImage ./zImage # dtb file cp /media/y/embedded/BBB/svnco/trunk/bin/omap/dtbs/am335x-boneblack.dtb ./dtbs/  </description>
    </item>
    
    <item>
      <title>Setting NFS Server on Ubuntu Container</title>
      <link>http://purplepalmdash.github.io/2014/11/08/setting-nfs-server-on-ubuntu-container/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/08/setting-nfs-server-on-ubuntu-container/</guid>
      <description>Since there are some strange problems in my ArchLinux(Physical Machine), its nfs server will be ignored by the embedded board, while my joggler which runs ubuntu12.04 acts OK. So I try to find a sufficient way for dealing with this issue.
Container Configuration I&amp;rsquo;ve installed Ubuntu_Container which holds 12.04 in my physical machine. So the nfs server would be configured in this container.
$ sudo apt-get update $ sudo apt-get install nfs-kernel-server portmap nfs-common  Then edit the /srv/nfs4, and export its configuration in /etc/exports:</description>
    </item>
    
    <item>
      <title>Automatically Filter SpamBot on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/11/06/automatically-filter-spambot-on-digitalocean/</link>
      <pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/06/automatically-filter-spambot-on-digitalocean/</guid>
      <description>Setup iptables Install iptables-persistent, so that the iptables rules will be saved even reboot the machine:
# apt-get update # apt-get install iptables-persistent  Script for manually add iptables Use following scritp for manually add iptables items:
#!/bin/sh # This script runs once per hour, Directly remove the ips which post comments # more than 4 times per hour. And who comments less than 3 times we should sent # its ip to old ips file.</description>
    </item>
    
    <item>
      <title>Manually delete spam comments for WP</title>
      <link>http://purplepalmdash.github.io/2014/11/06/manually-delete-spam-comments-for-wp/</link>
      <pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/06/manually-delete-spam-comments-for-wp/</guid>
      <description>Login to mysql commandline via:
# mysql -uroot -p mysql&amp;gt; use wordpress ......... Database changed  Display the COLUMNS of wp_comments:
mysql&amp;gt; SHOW COLUMNS FROM wp_comments; +----------------------+---------------------+------+-----+---------------------+----------------+ | Field | Type | Null | Key | Default | Extra | +----------------------+---------------------+------+-----+---------------------+----------------+ | comment_ID | bigint(20) unsigned | NO | PRI | NULL | auto_increment | | comment_post_ID | bigint(20) unsigned | NO | MUL | 0 | | | comment_author | tinytext | NO | | NULL | | | comment_author_email | varchar(100) | NO | MUL | | | | comment_author_url | varchar(200) | NO | | | | | comment_author_IP | varchar(100) | NO | | | | | comment_date | datetime | NO | | 0000-00-00 00:00:00 | | | comment_date_gmt | datetime | NO | MUL | 0000-00-00 00:00:00 | | | comment_content | text | NO | | NULL | | | comment_karma | int(11) | NO | | 0 | | | comment_approved | varchar(20) | NO | MUL | 1 | | | comment_agent | varchar(255) | NO | | | | | comment_type | varchar(20) | NO | | | | | comment_parent | bigint(20) unsigned | NO | MUL | 0 | | | user_id | bigint(20) unsigned | NO | | 0 | | | comment_mail_notify | tinyint(4) | NO | | 0 | | +----------------------+---------------------+------+-----+---------------------+----------------+ 16 rows in set (0.</description>
    </item>
    
    <item>
      <title>Build ChromiumOS</title>
      <link>http://purplepalmdash.github.io/2014/11/05/build-chromiumos/</link>
      <pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/05/build-chromiumos/</guid>
      <description>First Time Build This build failed for I could not get the repository sync.
I setup the environment on 159&amp;rsquo;s /media/nfs:
$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $ export PATH=&amp;quot;$PATH&amp;quot;:`pwd`/depot_tools $ echo $PATH /home/ubuntu/bin:/home/ubuntu/bin:/home/ubuntu/bin:/home/ubuntu/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/media/nfs/ChromiumOS/depot_tools $ cat script.sh #!/bin/sh cat &amp;gt;./sudo_editor&amp;lt;&amp;lt;EOF #!/bin/sh echo Defaults !tty_tickets &amp;gt; $1 echo Defaults timestamp_timeout=180 &amp;gt;&amp;gt; $1 EOF chmod +x ./sudo_editor sudo EDITOR=./sudo_editor visudo -f /etc/sudoers.d/relax_requirements $ export BOARD=x86-generic $ repo init -u https://git.chromium.org/chromiumos/manifest.git $ repo sync  Second Time Build Trusty@Linux59:~/Code/ChromiumOS&amp;gt; pwd /home/Trusty/Code/ChromiumOS Trusty@Linux59:~/Code/ChromiumOS&amp;gt; git clone https://chromium.</description>
    </item>
    
    <item>
      <title>Build OpenWRT For X86</title>
      <link>http://purplepalmdash.github.io/2014/11/05/build-openwrt-for-x86/</link>
      <pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/05/build-openwrt-for-x86/</guid>
      <description>Prepare Install following packages:
$ sudo apt-get install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl  Code Get the source code from OpenWRT.org:
$ git clone git://git.openwrt.org/openwrt.git  Then Prepare for menuconfig:
$ cd openwrt $ ./scripts/feeds update -a $ ./scripts/feeds install -a $ make menuconfig  Select x86 for Target System.
[] ext4&amp;ndash;&amp;gt; Target Images &amp;ndash;&amp;gt; ext4
[] Build VMware image files (VMDK)
You could also select for VDI or other formats.</description>
    </item>
    
    <item>
      <title>Enable nfs server of 53</title>
      <link>http://purplepalmdash.github.io/2014/11/05/enable-nfs-server-of-53/</link>
      <pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/05/enable-nfs-server-of-53/</guid>
      <description>Only enabled the nfs server and use the max disk for building, the nfs server runs Redhat RHEL6.2, the same procedure could be applied to CentOS Based system.
Steps:
Query for installed packages in server:
$ rpm -qa nfs-utils $ rpm -qa rpcbind  Edit the nfs based directory:
# cat /etc/exports /home/Trusty/share/ *(rw,sync,no_subtree_check,no_root_squash)  Start the service and test:
# service rpcbind start # service nfs start  In client machine, just type following command for mount the remote nfs directory:</description>
    </item>
    
    <item>
      <title>MySQL creashes on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/11/05/mysql-creashes-on-digitalocean/</link>
      <pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/05/mysql-creashes-on-digitalocean/</guid>
      <description>Problem The mysql server always keep crash, with following log under /var/log/mysql/error.log:
141104 23:06:46 InnoDB: Fatal error: cannot allocate memory for the buffer pool  So this is the memory problem, we should allocate more memory for our VPS.
Solution Add swap partition:
First check the swap partition:
root@xxx:/var/log# free -m total used free shared buffers cached Mem: 490 464 25 28 61 172 -/+ buffers/cache: 230 259 Swap: 0 0 0 root@xxx:/var/log# swapon -s Filename Type Size Used Priority  Now create a swapfile:</description>
    </item>
    
    <item>
      <title>OpenWRT on BBB(2)</title>
      <link>http://purplepalmdash.github.io/2014/11/04/openwrt-on-bbb-2/</link>
      <pubDate>Tue, 04 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/04/openwrt-on-bbb-2/</guid>
      <description>Cheetsheet For Using NFS Following configuration use the 192.168.1.221&amp;rsquo;s tftp server and 192.168.1.11&amp;rsquo;s nfs server, why I use different nfs server because 192.168.1.11 runs ubuntu and could reached by nfs client easily.
setenv ipaddr 192.168.1.16 setenv serverip 192.168.1.221 tftpboot ${fdtaddr} am335x-boneblack.dtb tftpboot ${kloadaddr} uImage setenv bootargs console=ttyO0,115200n8 root=/dev/nfs rw nfsroot=192.168.1.11:/srv/nfs4/BBBrootfs ip=192.168.1.1 rootwait bootm ${kloadaddr} - ${fdtaddr}  How to start more services Current we only got following output:
procd: - init - //.</description>
    </item>
    
    <item>
      <title>Use TFTP/NFS Testing  BBB Kernel </title>
      <link>http://purplepalmdash.github.io/2014/11/02/use-tftp-slash-nfs-testing-bbb-kernel/</link>
      <pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/02/use-tftp-slash-nfs-testing-bbb-kernel/</guid>
      <description>Prerequisite You have a tftp server and NFS server configured, in my environment these 2 server runs on ArchLinux, ip address is 10.0.0.221, while BBB takes another ip address, for example, 10.0.0.16.
NFS Server Preparation Create the nfs server&amp;rsquo;s rootfs for BBB Black ,and open all of the priviledges :
# pwd /media/y/embedded/BBB/svnco/trunk/bin/omap # mkdir /srv/nfs4/BBBrootfs # tar xzvf openwrt-omap-Default-rootfs.tar.gz -C /srv/nfs4/BBBrootfs/ # chmod 777 -R /srv/nfs4/BBBrootfs/  Now you have the NFS Server available.</description>
    </item>
    
    <item>
      <title>git under proxy</title>
      <link>http://purplepalmdash.github.io/2014/11/02/git-under-proxy/</link>
      <pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/02/git-under-proxy/</guid>
      <description>This changes use the socks proxy for git.
Install connect-proxy in aur:
yaourt -S connect-proxy  Edit the proxy definition file:
[Trusty@~]$ cat socks5.sh #!/bin/sh connect -S 127.0.0.1:1394 &amp;quot;$@&amp;quot;  Now directly set the
export GIT_PROXY_COMMAND=/home/Trusty/socks5.sh  Or change the proxy definition via:
[core] gitproxy = /home/Trusty/socks5.sh  </description>
    </item>
    
    <item>
      <title>OpenWRT on BBB</title>
      <link>http://purplepalmdash.github.io/2014/11/01/openwrt-on-bbb/</link>
      <pubDate>Sat, 01 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/11/01/openwrt-on-bbb/</guid>
      <description>This article will try to build and run OpenWRT on BBB(BeagleBone Black)
Checkout Code Checkout the code from openwrt.org:
[Trusty@/media/y/embedded/BBB/OpenWRT]$ svn checkout -r 40887 svn://svn.openwrt.org/openwrt/trunk/ ...... Checked out revision 40887.  Since the wiki said the only workable version for BBB is r40887, we just checkout this specified version.
Currently only runs with openwrt/trunk (r40887) and kernel 3.14.4. Kernel 3.13.7 (as in r40887 on target/linux/omap) will boot the device, but as soon as you attach a USB device, it will freeze.</description>
    </item>
    
    <item>
      <title>Arduino Performance</title>
      <link>http://purplepalmdash.github.io/2014/10/29/arduino-performance/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/29/arduino-performance/</guid>
      <description>Program Storage Classical Blink program:
/* Blink Turns on an LED on for one second, then off for one second, repeatedly. Most Arduinos have an on-board LED you can control. On the Uno and Leonardo, it is attached to digital pin 13. If you&#39;re unsure what pin the on-board LED is connected to on your Arduino model, check the documentation at http://arduino.cc This example code is in the public domain.</description>
    </item>
    
    <item>
      <title>Expand storage in 59</title>
      <link>http://purplepalmdash.github.io/2014/10/28/expand-storage-in-59/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/28/expand-storage-in-59/</guid>
      <description>I have 2 Servers in LAB, one had only 120G Harddisk, but with powerful CPU/Memory, the other have larger disk, but CPU/mem are not power enough, thus I use samba for sharing its storage.
The samba server runs:
# cat /etc/issue Red Hat Enterprise Linux Server release 6.3 (Santiago) Kernel \r on an \m  Query if samba installed:
# rpm -qa samba samba-3.5.10-125.el6.i686  Then configure it.
# df -h .</description>
    </item>
    
    <item>
      <title>Linux2.6.32 for Utu2440(7)</title>
      <link>http://purplepalmdash.github.io/2014/10/28/linux2-dot-6-32-for-utu2440-7/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/28/linux2-dot-6-32-for-utu2440-7/</guid>
      <description>Watchdog Change the configuraiton of Watchdog in kernel:
Watchdog configuraiton in kernel:
$ grep &amp;quot;CONFIG_S3C2410_WATCHDOG_DEFAULT_TIME&amp;quot; ./ -r ./drivers/watchdog/s3c2410_wdt.c:#define CONFIG_S3C2410_WATCHDOG_DEFAULT_TIME (15)  Test Watchdog:
~ # dmesg | grep watchdog s3c2410-wdt s3c2410-wdt: watchdog inactive, reset disabled, irq enabled ~ # ~ # echo 0&amp;gt;/dev/watchdog s3c2410-wdt s3c2410-wdt: Unexpected close, not stopping watchdog  Then after 15 seconds your board will reset, disable watchdog via:
~ # echo -n V&amp;gt;/dev/watchdog  LED The connection for LED is:</description>
    </item>
    
    <item>
      <title>Linux2.6.32 for Utu2440(6)</title>
      <link>http://purplepalmdash.github.io/2014/10/27/linux2-dot-6-32-for-utu2440-6/</link>
      <pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/27/linux2-dot-6-32-for-utu2440-6/</guid>
      <description>Flash Disk Enable the scsi device support in kernel configuration:
Then enable the usb support:
* Support for Host-side USB * USB device filesystem(DEPRECATED) * OHCI HCD support * USB Mass Storage support  Also enable the filesystem support for FAT/FAT16/FAT32/EXT4:
change the default u-boot parameters:
utu-bootloader=&amp;gt;&amp;gt;&amp;gt;printenv bootcmd bootcmd=nand read.i 0x32000000 0x60000 0x200000; bootm utu-bootloader=&amp;gt;&amp;gt;&amp;gt;setenv bootcmd &#39;tftp 30000000 uImage; bootm&#39; utu-bootloader=&amp;gt;&amp;gt;&amp;gt;printenv bootcmd bootcmd=tftp 30000000 uImage; bootm utu-bootloader=&amp;gt;&amp;gt;&amp;gt;saveenv Saving Environment to NAND.</description>
    </item>
    
    <item>
      <title>ShadowSocks on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/10/27/shadowsocks-on-digitalocean/</link>
      <pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/27/shadowsocks-on-digitalocean/</guid>
      <description>Mainly recorded the steps for installation:
# apt-get install python-pip # pip install shadowsocks # vim /etc/shadowsocks.json { &amp;quot;server&amp;quot;:&amp;quot;1xx.xxx.xxx.xxx&amp;quot;, &amp;quot;server_port&amp;quot;:xxxx, &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &amp;quot;local_port&amp;quot;:1080, &amp;quot;password&amp;quot;:&amp;quot;Pass!Pass!Pass&amp;quot;, &amp;quot;timeout&amp;quot;:300, &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;, &amp;quot;fast_open&amp;quot;: false, &amp;quot;workers&amp;quot;: 1 } # apt-get install supervisor # vim /etc/supervisor/conf.d/shadowsocks.conf [program:shadowsocks] command=ssserver -c /etc/shadowsocks.json autorestart=true user=nobody # vim /etc/default/supervisor ulimit -n 51200 # service supervisor start  Then in client you could use a shadownsocks client for connecting to remote servers and enjoy the free internet.</description>
    </item>
    
    <item>
      <title>System Trouble Shooting</title>
      <link>http://purplepalmdash.github.io/2014/10/27/system-trouble-shooting/</link>
      <pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/27/system-trouble-shooting/</guid>
      <description>SSHD Timeout Trouble When you login to some remote ssh machine, after 1 or 2 minutes, the server will hint you:
Connection closed by foreign host.
Solution This trouble happens on Ubuntu14.04, because we don&amp;rsquo;t set the timeout intervals. So we could add following 2 lines into the /etc/ssh/sshd_config
ClientAliveInterval 60 ClientAliveCountMax 3  AliveInterval means we could keep the client alive for 60 minutes. AliveCountMax means when server send 3 times request to ssh client, if client didn&amp;rsquo;t send back reply message, then the ssh connection will be lost.</description>
    </item>
    
    <item>
      <title>Linux2.6.32 for Utu2440(5)</title>
      <link>http://purplepalmdash.github.io/2014/10/25/linux2-dot-6-32-for-utu2440-5/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/25/linux2-dot-6-32-for-utu2440-5/</guid>
      <description>In this chapter we will continue to migrate driver on LCD, first we want to get the LCD information.
LCD Info From the LCD we could see &amp;ldquo;LTV350QV-F0E&amp;rdquo;, Search it on google and we know it&amp;rsquo;s SAMSUNG TFT 3.5-inch 320*240 LTV350QV-F0E lcd panel.
Its datasheet could be downloaded from:
http://www.datasheet-pdf.com/datasheet-html/L/T/V/LTV350QV-F0E_Samsung.pdf.html
TFT means （Thin Film Transistor）.
Beware, the kernel we should choose is uImage_T1_F0E_320x240_ts, because we bought the Package 1 of the development board, they shipped us with Samsung screen .</description>
    </item>
    
    <item>
      <title>Linux2.6.39 for Utu2440(2)</title>
      <link>http://purplepalmdash.github.io/2014/10/25/linux2-dot-6-39-for-utu2440-2/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/25/linux2-dot-6-39-for-utu2440-2/</guid>
      <description>Serial Port Support Enable the Device Driver&amp;mdash;-&amp;gt; Character deivces &amp;mdash;-&amp;gt; Serial drivers &amp;mdash;-&amp;gt; Samsung related settings, My setting is listed as following:
Then you will see serial output during kernel boot.
DM9000 Support Add following code into the linux/arch/arm/mach-s3c2440/mach-smdk2440.c:
#include &amp;lt;linux/serial_core.h&amp;gt; + /* Added dm9000 support for utu2400 */ + #include &amp;lt;linux/dm9000.h&amp;gt; #include &amp;lt;linux/platform_device.h&amp;gt; #include &amp;lt;plat/common-smdk.h&amp;gt; + /* DM9000 Base address for SMDK2440 */ + #define MACH_SMDK2440_DM9K_BASE (S3C2410_CS3 + 0x300) static struct map_desc smdk2440_iodesc[] __initdata = { + /* Added for dm9000 */ + static struct resource smdk2440_dm9k_resource[] = + { + [0] = + { + .</description>
    </item>
    
    <item>
      <title>Linux2.6.39 for Utu2440(3)</title>
      <link>http://purplepalmdash.github.io/2014/10/25/linux2-dot-6-39-for-utu2440-3/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/25/linux2-dot-6-39-for-utu2440-3/</guid>
      <description>Building Filesystems Use following script for building the basic filesystem:
$ cat mkrootfs #!/bin/sh echo &amp;quot;------Create rootfs directons start...--------&amp;quot; mkdir rootfs cd rootfs echo &amp;quot;--------Create root,dev....----------&amp;quot; mkdir bin boot dev etc home lib mnt proc root sbin sys tmp usr var www mkdir etc/init.d etc/rc.d etc/sysconfig mkdir usr/sbin usr/bin usr/lib usr/modules echo &amp;quot;make node in dev/console dev/null&amp;quot; mknod -m 666 dev/console c 5 1 mknod -m 666 dev/null c 1 3 mkdir mnt/etc mnt/jffs2 mnt/yaffs mnt/data mnt/temp mkdir var/lib var/lock var/run var/tmp chmod 1777 tmp chmod 1777 var/tmp echo &amp;quot;-------make direction done---------&amp;quot;  Run it and you will get an folder which contains the newly created directory structure.</description>
    </item>
    
    <item>
      <title>Linux2.6.39 for Utu2440(4)</title>
      <link>http://purplepalmdash.github.io/2014/10/25/linux2-dot-6-39-for-utu2440-4/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/25/linux2-dot-6-39-for-utu2440-4/</guid>
      <description>RTC Activate RealTime Clock functionality could be easily activated via:
$ vim arch/arm/mach-s3c2440/mach-smdk2440.c static struct platform_device *smdk2440_devices[] __initdata = { &amp;amp;s3c_device_ohci, +	&amp;amp;s3c_device_rtc, &amp;amp;s3c_device_lcd,  Configure the Kernel:
Device Drivers&amp;mdash;-&amp;gt; RealTime Clock &amp;mdash;-&amp;gt; Samsung S3C series Soc RTC
Save and exit, then make Image.
Test RTC Before we have following configuration:
[root@www ~]# date Thu Jan 1 01:07:51 UTC 1970  Now we switch to new kernel which contains RTC support:</description>
    </item>
    
    <item>
      <title>Python call system command</title>
      <link>http://purplepalmdash.github.io/2014/10/24/python-call-system-command/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/24/python-call-system-command/</guid>
      <description>Use Popen for running ls We could use following python scripts for running the bash command ls -l:
&amp;gt;&amp;gt;&amp;gt; from subprocess import * &amp;gt;&amp;gt;&amp;gt; from subprocess import call &amp;gt;&amp;gt;&amp;gt; from subprocess import Popen &amp;gt;&amp;gt;&amp;gt; import subprocess &amp;gt;&amp;gt;&amp;gt; ls_child = Popen([&#39;ls&#39;, &#39;-l&#39;], stdout=subprocess.PIPE, stderr = subprocess.PIPE) &amp;gt;&amp;gt;&amp;gt; ls_result = ls_child.communicate() &amp;gt;&amp;gt;&amp;gt; print ls_result .......  The command I want to call is:
sed -n 1~2p File_Name  This command will get the half of the file contents.</description>
    </item>
    
    <item>
      <title>utu2400&#39;s Kernel Drivers</title>
      <link>http://purplepalmdash.github.io/2014/10/23/utu2400-s-kernel-drivers/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/23/utu2400-s-kernel-drivers/</guid>
      <description> sshd replacement Since busybox enabled the telnetd by default, we could just use telnet for accessing the board.
[root@www ~]# ps -ef | grep telnet 861 root 0:00 /usr/sbin/telnetd -l /bin/login 893 root 0:00 grep telnet  </description>
    </item>
    
    <item>
      <title>Enable sshd on 2440</title>
      <link>http://purplepalmdash.github.io/2014/10/22/enable-sshd-on-2440/</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/22/enable-sshd-on-2440/</guid>
      <description>Package Preparation For openssh requires the following packages, first we have to download them all from internet.
zlib, openssl, openssh.
$ wget http://zlib.net/zlib-1.2.8.tar.gz $ wget https://www.openssl.org/source/openssl-0.9.8zc.tar.gz $ wget http://mirror.internode.on.net/pub/OpenBSD/OpenSSH/portable/openssh-6.7p1.tar.gz  Building Cross-compile zlib We have to manually change the following line in Makefile :
LDSHARED=gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map to LDSHARED=arm-linux-gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map  Then:
$ ./configure --prefix=/media/nfs/rootfs/usr/ $ make CC=arm-linux-gcc AR=arm-linux-ar LD=arm-linux-ld $ make install  Cross-compile openssh Get the openssl&amp;rsquo;s configure help menus:</description>
    </item>
    
    <item>
      <title>Install OpenVPN in RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2014/10/21/install-openvpn-in-raspberrypi/</link>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/21/install-openvpn-in-raspberrypi/</guid>
      <description>Packages Raspberry PI runs ArchLinux, first install related packages.
$ sudo pacman -S openvpn $ sudo pacman -S easy-rsa $ sudo pacman -S dnsmasq  openvpn is the OpenVPN&amp;rsquo;s Kernel.
easy-rsa is used for manage the keys.
dnsmasq will acts like the domain name server.
Configuration First Make the directory and copy the easy-rsa&amp;rsquo;s files:
# mkdir /etc/openvpn/easy-rsa [root@alarmpi ~]# cp -r /usr/share/easy-rsa/* /etc/openvpn/easy-rsa [root@alarmpi ~]# ls /etc/openvpn/easy-rsa/ build-ca	build-key-pkcs12 inherit-inter sign-req build-dh	build-key-server list-crl	vars build-inter	build-req	openssl-1.</description>
    </item>
    
    <item>
      <title>Make Videos in Linux</title>
      <link>http://purplepalmdash.github.io/2014/10/21/make-videos-in-linux/</link>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/21/make-videos-in-linux/</guid>
      <description>Capture Window Sometimes we want to record the window operation, we could use gtk-recordMyDesktop for doing this. Open the gtk-recordMyDesktop then select the window, start and it will automatically capture all of your input, and save it to ogg file.
Add Background Music use Mencoder to add a mp3 file as the background of the captured video:
$ mencoder output.ogv -o video_final.ogv -ovc copy -oac copy -audiofile xxx.mp3  Convert Video Formats Using mencoder for convert the ogv to mp4 file:</description>
    </item>
    
    <item>
      <title>Quick-start for setting up WP and VPN Server on DigitalOcean</title>
      <link>http://purplepalmdash.github.io/2014/10/20/quick-start-for-setting-up-wp-and-vpn-server-on-digitalocean/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/20/quick-start-for-setting-up-wp-and-vpn-server-on-digitalocean/</guid>
      <description>Prerequisite First you should check your Linux Version, for this tutorial is only works for ubuntu, that means, if you run archlinux/centos/debian on DigitalOcean, this tutorial won&amp;rsquo;t be fit for your need.
root@justfordemo:~# cat /etc/issue Ubuntu 14.04.1 LTS \n \l  Upgrade to the newest system via:
root@justfordemo:~# apt-get update &amp;amp;&amp;amp; apt-get upgrade  Enter Y if system asks you to confirm.
NGINX and PHP Following commands refers to:</description>
    </item>
    
    <item>
      <title>Trouble-Shooting on LXC of ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/10/19/trouble-shooting-on-lxc-of-archlinux/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/19/trouble-shooting-on-lxc-of-archlinux/</guid>
      <description>I try to install ubuntu on ArchLinux using LXC, for the nfs server in ArchLinux seems forbidden the nfsv3&amp;rsquo;s client request, but in my joggler(which runs 12.04 server) the nfs server works OK, so I installed this version for validation.
Install method Install the ubuntu machine via following method:
lxc-create -n Ubuntu_Container -t /usr/share/lxc/templates/lxc-ubuntu  Trouble Shooting qemu-debootstrap No debootstrap in Archlinux:
which: no qemu-debootstrap in  Solution: create a soft link from debootstrap to qemu-debootstrap:</description>
    </item>
    
    <item>
      <title>AutoRestart autrace</title>
      <link>http://purplepalmdash.github.io/2014/10/18/autorestart-autrace/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/autorestart-autrace/</guid>
      <description>autrace is a proxy tool which I used for auto-converting the proxy for cross the firewall, it runs in remote server but sometimes it will runs into crash condition. Following is the command for auto-restart this proxy tool.
$ cat autrace.sh #!/bin/sh while true; do /home/xxxxxxxx/code/autrace -s done  Everytime we run autrace.sh like following:
/home/xxxxx/code/autrace.sh &amp;amp;  thus autrace will automatically be restart if it crashes.</description>
    </item>
    
    <item>
      <title>Cross-compile the kernel for utu2440</title>
      <link>http://purplepalmdash.github.io/2014/10/18/cross-compile-the-kernel-for-utu2440/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/cross-compile-the-kernel-for-utu2440/</guid>
      <description>Cross-compiler Preparation The official documentation said use gcc-3.4.1 for compiling the kernel.
$ cat ~/.zshrc | grep -i set341 alias set341=&#39;export PATH=/opt/cross/arm-linux-gcc_3.4.1/bin:$PATH&#39; $ set341 $ pwd /media/y/embedded/utu2440/UTU2440-F-T1-20080328/YC2440CDROM_DM9000_080328/utuLinuxfor2440V1.5.8/utu-linux_for_s3c2440_dm9000_V1.5.8 $ arm-linux-gcc -v Reading specs from /opt/cross/arm-linux-gcc_3.4.1/bin/../lib/gcc/arm-linux/3.4.1/specs Configured with: /work/crosstool-0.27/build/arm-linux/gcc-3.4.1-glibc-2.3.2/gcc-3.4.1/configure --target=arm-linux --host=i686-host_pc-linux-gnu --prefix=/usr/local/arm/3.4.1 --with-headers=/usr/local/arm/3.4.1/arm-linux/include --with-local-prefix=/usr/local/arm/3.4.1/arm-linux --disable-nls --enable-threads=posix --enable-symvers=gnu --enable-__cxa_atexit --enable-languages=c,c++ --enable-shared --enable-c99 --enable-long-long Thread model: posix gcc version 3.4.1  Kernel Compilation Compile the kernel via:
$ make menuconfig &amp;quot;Load an Alternate Configuration File&amp;quot;-&amp;gt; config_480272_ts $ make uImage -j4  Trouble shooting: in ArchLinux, install uboot&amp;rsquo;s mkimage tool via:</description>
    </item>
    
    <item>
      <title>Embedded Environment on Arch</title>
      <link>http://purplepalmdash.github.io/2014/10/18/embedded-environment-on-arch/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/embedded-environment-on-arch/</guid>
      <description>NFS Server Server Setup
$ sudo pacman -S nfs-utils $ sudo vim /etc/idmapd.conf [General] #Verbosity = 0 Verbosity = 1 Pipefs-Directory = /var/lib/nfs/rpc_pipefs Domain = localdomain [Mapping] Nobody-User = nobody Nobody-Group = nobody $ sudo vim /etc/conf.d/nfs-common.conf STATD_OPTS=&amp;quot;-p 32765 -o 32766 -T 32803&amp;quot; $ sudo vim /etc/conf.d/nfs-server.conf MOUNTD_OPTS=&amp;quot;-p 20048&amp;quot; $ sudo mkdir -p /srv/nfs4/music $ cat /etc/exports /srv/nfs4/ 10.0.0.0/24(rw,fsid=root,no_subtree_check) /srv/nfs4/music 10.0.0.0/24(rw,no_subtree_check,nohide) # note the nohide option which is applied to mounted directories on the file system.</description>
    </item>
    
    <item>
      <title>Ethernet Wakeup</title>
      <link>http://purplepalmdash.github.io/2014/10/18/ethernet-wakeup/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/ethernet-wakeup/</guid>
      <description>Purpose I want to wake up my laotop via RaspberryPi, since Rpi&amp;rsquo;s power consumption is extremely low, so this will greatly save the power for laptop.
Check Status On laptop, type following command to see whether your ethernet card support Wake-On-LAN or not:
[Trusty@~]$ sudo ethtool enp0s25 | grep Wake-on Supports Wake-on: pumbg Wake-on: g  The values define what activity to wake on: p (PHY activity), u (unicast activity), m (multicast activity), b (broadcast activity), a (ARP activity), and g (magic packet activity).</description>
    </item>
    
    <item>
      <title>Linux Tips</title>
      <link>http://purplepalmdash.github.io/2014/10/18/linux-tips/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/linux-tips/</guid>
      <description>1. Know the System Installation Date You can use tune2fs to know the installation date of your Linux System, be ware the /dev/sda[] should be the root partition of your disk. See my following example:
tune2fs -l /dev/sda1 or /dev/sdb1* | grep &#39;Filesystem created:&#39; $ sudo tune2fs -l /dev/sda2 | grep &#39;Filesystem created:&#39; Filesystem created: Mon May 5 17:31:40 2014  2. View Thread Status View the thread status via proc filesystem.</description>
    </item>
    
    <item>
      <title>Linux2.6.39 for utu2440</title>
      <link>http://purplepalmdash.github.io/2014/10/18/linux2-dot-6-39-for-utu2440/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/linux2-dot-6-39-for-utu2440/</guid>
      <description>Kernel Preparation First download the kernel source from kernel.org:
$ wget https://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.39.tar.bz2 $ tar xjvf lnux-2.6.39.tar.bz2  Change the Makefile:
$ cat Makefile export KBUILD_BUILDHOST := $(SUBARCH) ARCH	?= $(SUBARCH) CROSS_COMPILE	?= $(CONFIG_CROSS_COMPILE:&amp;quot;%&amp;quot;=%) # Added our own cross-compiler here. ARCH	?= arm CROSS_COMPILE	?= arm-linux- # End of added own cross-compiler.  Change the pltf input clock:
$ vim arch/arm/mach-s3c2440/mach-smdk2440.c static void __init smdk2440_map_io(void) { s3c24xx_init_io(smdk2440_iodesc, ARRAY_SIZE(smdk2440_iodesc)); //s3c24xx_init_clocks(16934400); // Change the input clock adjust to utu2440 s3c24xx_init_clocks(12000000); s3c24xx_init_uarts(smdk2440_uartcfgs, ARRAY_SIZE(smdk2440_uartcfgs)); }  Change the machine code(this code is the same as the bootloader&amp;rsquo;s parameter, bootloader transfer 5244 to Linux Kernel.</description>
    </item>
    
    <item>
      <title>tftpd on ubuntu</title>
      <link>http://purplepalmdash.github.io/2014/10/18/tftpd-on-ubuntu/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/18/tftpd-on-ubuntu/</guid>
      <description>For updating the kernel on s3c2440 board, I have to setup the tftpd server.
tftpd server Install tfpd-hpa:
sudo apt-get install tftpd-hpa  Setup the directory name and edit the /etc/default/tftpd-hpa:
root@joggler:/etc# cat /etc/default/tftpd-hpa # /etc/default/tftpd-hpa TFTP_USERNAME=&amp;quot;tftp&amp;quot; TFTP_DIRECTORY=&amp;quot;/media/nfs/rootfs&amp;quot; TFTP_ADDRESS=&amp;quot;0.0.0.0:69&amp;quot; TFTP_OPTIONS=&amp;quot;--secure&amp;quot;  Then restart the server:
service tftpd-hpa restart  Other commands:
service tftpd-hpa status service tftpd-hpa stop service tftpd-hpa start service tftpd-hpa restart service tftpd-hpa force-reload  Testing In the same machine, use following commands for testing the tftpd server(Make sure you have the get.</description>
    </item>
    
    <item>
      <title>Blueman</title>
      <link>http://purplepalmdash.github.io/2014/10/16/blueman/</link>
      <pubDate>Thu, 16 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/16/blueman/</guid>
      <description>Since I installed the ArchLinux around 3 months ago, but I am too busy to enable the bluetooth headset, now I am free finally, so this is the steps for enable the bluetooth headset.
Software Installation Install blueman:
$ sudo pacman -S blueman $ sudo pacman -S bluez-utils bluez-libs python2-pybluez  Wait, this method is not OK for current bluez5, so I need to switch to other method.
Use official website, named&amp;rdquo;Bluetooth headset&amp;rdquo; on ArchLinux Wiki.</description>
    </item>
    
    <item>
      <title>Building Android On Server</title>
      <link>http://purplepalmdash.github.io/2014/10/15/building-android-on-server/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/15/building-android-on-server/</guid>
      <description>New LXC Machine Building Android need a Ubuntu machine, so I created the LXC machine which runs Ubuntu.
Install the bootstrap:
zypper in bootstrap  Then create the Ubuntu LXC via:
export LANG=en_US.UTF-8 Linux59:~ # lxc-create -n Ubuntu_Container -t /usr/share/lxc/templates/lxc-ubuntu  Start the container, username and password are ubuntu:
lxc-start -n Ubuntu_Container  Configure the LXC Machine Better we have the static IP, and let the Container startup when machine boot.</description>
    </item>
    
    <item>
      <title>Serial Port on BBB</title>
      <link>http://purplepalmdash.github.io/2014/10/15/serial-port-on-bbb/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/15/serial-port-on-bbb/</guid>
      <description>Serial Port Settings Use following settings for the serial monitor software:
The default serial port settings for the board are: Baud 115,200 Bits 8 Parity N Stop Bits 1 Handshake None  Connection The serial port in BBB is listed as following:</description>
    </item>
    
    <item>
      <title>Trouble-Shooting on Docker</title>
      <link>http://purplepalmdash.github.io/2014/10/15/trouble-shooting-on-docker/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/15/trouble-shooting-on-docker/</guid>
      <description>The guideline I follow is from :
https://wiki.archlinux.org/index.php/Docker
Working behind Proxy When docker runs under the proxy, it will be blocked by the firewall, thus in the ArchLinux we have to kill the systemd started docker daemon, and manually set the proxy configuration for the docker daemon, following is the tips:
$ systemctl stop docker.service $ sudo HTTP_PROXY=http://1xx.*.*.2xx:2xx3 docker -d &amp;amp;  Then you run the docker for create the new machine will be OK.</description>
    </item>
    
    <item>
      <title>Run BBB building in server</title>
      <link>http://purplepalmdash.github.io/2014/10/14/run-bbb-building-in-server/</link>
      <pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/14/run-bbb-building-in-server/</guid>
      <description>Background Since building is heavy task to CPU, I decide to use the server in lab for building
Packages We need to install following packages for setting up the building environment:
zypper in git patch u-boot-tools git ncurses-devel dpkg dpkg-devel dpkg-lang  Use git for acrossing the firewall of company:
&amp;gt; git config --global user.email xxxx@gmail.com &amp;gt; git config --global user.name xxxx &amp;gt; cat ~/.gitconfig [user] email = xxxx@gmail.com name = xxx  Then we compile a cross Firewall tool and tell git for using it.</description>
    </item>
    
    <item>
      <title>Tips for deploying ArchLinux on BBB</title>
      <link>http://purplepalmdash.github.io/2014/10/14/tips-for-deploying-archlinux-on-bbb/</link>
      <pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/14/tips-for-deploying-archlinux-on-bbb/</guid>
      <description>The detailed installation guideline could be found at:
http://archlinuxarm.org/platforms/armv7/ti/beaglebone-black
But while there are some tips in changing the uEnv.txt, to enable the boot from 2nd mmc partition. following is the configuration file:
[root@alarm mnt]# cat uEnv.txt optargs=coherent_pool=1M #u-boot eMMC specific overrides; Angstrom Distribution (BeagleBone Black) 2013-06-20 kernel_file=zImage initrd_file=uInitrd loadzimage=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${kernel_file} loadinitrd=load mmc ${mmcdev}:${mmcpart} 0x81000000 ${initrd_file}; setenv initrd_size ${filesize} loadfdt=load mmc ${mmcdev}:${mmcpart} ${fdtaddr} /dtbs/${fdtfile} # console=ttyO0,115200n8 # If you want to boot from usb #mmcroot=/dev/sda1 ro # If you want to boot from SD card mmcroot=/dev/mmcblk0p2 ro mmcrootfstype=ext4 rootwait fixrtc  Now reboot and then you could see the BBB runs into the ArchLinux.</description>
    </item>
    
    <item>
      <title>Verified to github</title>
      <link>http://purplepalmdash.github.io/2014/10/14/verified-to-github/</link>
      <pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/14/verified-to-github/</guid>
      <description>General Method When you were denied by github, use following method for get through:
Generate the key-gen
ssh-keygen  Then Creat the following files:
# cat /home/Trusty/.ssh/config Host github.com User xxx@xxx.com Hostname ssh.github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa Port 443  Now use following command for setting the connection:
ssh -T git@github.com  Under firewall First add the ~/.ssh/id_rsa.pub to the github&amp;rsquo;s &amp;ldquo;SSH keys&amp;rdquo;.
If your machine runs under the firewall, you have to do things like following:</description>
    </item>
    
    <item>
      <title>Switch from BBB to RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2014/10/13/switch-from-bbb-to-raspberrypi/</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/10/13/switch-from-bbb-to-raspberrypi/</guid>
      <description>Background I have BeagleBone Black and RaspberryPi, both of them are cute board. Previous I use BBB for home server, which holds my own Weather APP website, also serves as a sshd server, dynamic dns server, etc. While Rpi serves like a File server and download server.
Now I want to use BBB for developing some funny things, that means I will transfer all of the functionalities which runs in BBB to Rpi.</description>
    </item>
    
    <item>
      <title>Convert different format in python</title>
      <link>http://purplepalmdash.github.io/2014/09/24/convert-different-format-in-python/</link>
      <pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/09/24/convert-different-format-in-python/</guid>
      <description>The following commands is for directly convert ascii, numbers in python:
$ python2 &amp;gt;&amp;gt;&amp;gt; str(unichr(97)) &#39;a&#39; &amp;gt;&amp;gt;&amp;gt; str(unichr(0x68)) &#39;h&#39; &amp;gt;&amp;gt;&amp;gt; str(unichr(0x5a)) &#39;Z&#39; &amp;gt;&amp;gt;&amp;gt; bin(0x2711) &#39;0b10011100010001&#39; &amp;gt;&amp;gt;&amp;gt; 0x2711 10001 &amp;gt;&amp;gt;&amp;gt; hex(1127) &#39;0x467&#39;  </description>
    </item>
    
    <item>
      <title>Big-Little Endian</title>
      <link>http://purplepalmdash.github.io/2014/09/17/big-little-endian/</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/09/17/big-little-endian/</guid>
      <description>An elegant way for juding big-endian or little-endian of processor:
eCCM2-root-root&amp;gt; python -c &amp;quot;import sys;sys.exit(0 if sys.byteorder==&#39;big&#39; else 1)&amp;quot; eCCM2-root-root&amp;gt; echo $? 0 [Trusty@~]$ python -c &amp;quot;import sys;sys.exit(0 if sys.byteorder==&#39;big&#39; else 1)&amp;quot; [Trusty@~]$ echo $? 1  So we could see powerpc is the big-endian, while PC is little-endian.</description>
    </item>
    
    <item>
      <title>Compare pkg content</title>
      <link>http://purplepalmdash.github.io/2014/09/03/compare-pkg-content/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/09/03/compare-pkg-content/</guid>
      <description>Use dpkg for reading the content and compare with the official ones:
 dpkg -c ../../xxxxx_name.deb | awk &#39;{print $3 $6}&#39; | sort -n  Scripts for listing all of the content in the directory:
for i in `ls *.deb` do echo $i dpkg -c $i done  </description>
    </item>
    
    <item>
      <title>OpenSuse vlan configuration modification</title>
      <link>http://purplepalmdash.github.io/2014/09/03/opensuse-vlan-configuration-modification/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/09/03/opensuse-vlan-configuration-modification/</guid>
      <description>The command is listed as following:
linux:/etc/udev # cd rules.d/ linux:/etc/udev/rules.d # ls 10-network.rules 55-libsane.rules 56-sane-backends-autoconfig.rules 70-kpartx.rules 70-persistent-net.rules 99-iwlwifi-led.rules linux:/etc/udev/rules.d # cat 70-persistent-net.rules SUBSYSTEM==&amp;quot;net&amp;quot;, ATTR{address}==&amp;quot;00:xx:xx:xx:xx&amp;quot;, NAME=&amp;quot;eth1&amp;quot;, DRIVERS==&amp;quot;?*&amp;quot; linux:/etc/udev/rules.d # cat /usr/lib/systemd/system/vlan.service [Unit] Description=Add Vlan Configure Type=idle [Service] ExecStart=/usr/bin/vconfig.sh [Install] WantedBy=multi-user.target  Change persistent name from enp0s25 to eth1 and let it possible to add vlan on this interface.
And start the vlan configuration at the very last of the systemd working.</description>
    </item>
    
    <item>
      <title>LXC On OpenSuse</title>
      <link>http://purplepalmdash.github.io/2014/09/01/lxc-on-opensuse/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/09/01/lxc-on-opensuse/</guid>
      <description>LXC 相关操作 列出本机已有的容器：
# lxc-ls xxxxxyyySimulator1 xxxxxyyySimulator2  开启虚拟机：
# lxc-start -n xxxxxyyySimulator1  本机开启终端连接到开启后的虚拟机：
# lxc-console --name xxxxxyyySimulator1 Type &amp;lt;Ctrl+a q&amp;gt; to exit the console, &amp;lt;Ctrl+a Ctrl+a&amp;gt; to enter Ctrl+a itself Welcome to openSUSE 12.3 &amp;quot;Dartmouth&amp;quot; - Kernel 3.11.10-21-default (tty1). xxxxxyyySimulator1 login: root Password: Last login: Fri Aug 29 15:40:54 from xxx.xxx.xx.59 Have a lot of fun... xxxxxyyySimulator1:~ #  用户名和密码都是&amp;rdquo;root&amp;rdquo;. ctrl+a后按q即可退出该终端。
销毁容器:
lxc-destroy -n XXXXXXXXXX  克隆容器:</description>
    </item>
    
    <item>
      <title>LXC Computer</title>
      <link>http://purplepalmdash.github.io/2014/08/27/lxc-computer-in-lab/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/08/27/lxc-computer-in-lab/</guid>
      <description>Network Configuration Add the rules in udevd:
linux-:~ # cd /etc/udev/rules.d/ linux-:/etc/udev/rules.d # cat 10-network.rules SUBSYSTEM==&amp;quot;net&amp;quot;, ACTION==&amp;quot;add&amp;quot;, ATTR{address}==&amp;quot;00:22:22:22:22&amp;quot;, NAME=&amp;quot;eth1&amp;quot; SUBSYSTEM==&amp;quot;net&amp;quot;, ACTION==&amp;quot;add&amp;quot;, ATTR{address}==&amp;quot;00:22:22:22:22&amp;quot;, NAME=&amp;quot;eth0&amp;quot; SUBSYSTEM==&amp;quot;net&amp;quot;, ACTION==&amp;quot;add&amp;quot;, ATTR{address}==&amp;quot;00:22:22:22:22&amp;quot;, NAME=&amp;quot;eth2&amp;quot; SUBSYSTEM==&amp;quot;net&amp;quot;, ACTION==&amp;quot;add&amp;quot;, ATTR{address}==&amp;quot;00:22:22:22:22&amp;quot;, NAME=&amp;quot;eth3&amp;quot;  Add following network configuration:
linux-:/etc/sysconfig # cd network/ linux-:/etc/sysconfig/network # cat ifcfg-eth0 # Loopback (lo) configuration IPADDR=1xx.xx.xx.xxx NETMASK=255.255.255.0 BROADCAST=1xx.xx.xx.xxx STARTMODE=auto USERCONTROL=yes FIREWALL=no  Default Gateway Setup:
linux-:~ # cat /etc/sysconfig/network/ifroute-br0 # Destination Dummy/Gateway Netmask Device # default	xxx.</description>
    </item>
    
    <item>
      <title>Puppet on ArchLinux(2)</title>
      <link>http://purplepalmdash.github.io/2014/08/13/puppet-on-archlinux-2/</link>
      <pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/08/13/puppet-on-archlinux-2/</guid>
      <description>Add Arch step1, add the hosts into /etc/hosts:
# Puppet 10.0.0.88	puppet 10.0.0.89	client  step2, edit the /etc/puppet/puppet.conf:
[agent] # add server [agent] server = puppet  Restart the puppet.service:
systemctl restart puppet.service systemctl enable puppet.service  step3, in 10.0.0.88(server), add the ssl certification of archlinux:
root@Ubuntu88:/home/Trusty# !44 puppet cert --list Warning: Setting templatedir is deprecated. See http://links.puppetlabs.com/env-settings-deprecations (at /usr/lib/ruby/vendor_ruby/puppet/settings.rb:1095:in `block in issue_deprecations&#39;) &amp;quot;XXXyyy.lan&amp;quot; (SHA256) 8XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX root@Ubuntu88:/home/Trusty# puppet cert --sign XXXyyy.</description>
    </item>
    
    <item>
      <title>Virtualbox Modprobe Problem</title>
      <link>http://purplepalmdash.github.io/2014/08/13/virtualbox-modprobe-problem/</link>
      <pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/08/13/virtualbox-modprobe-problem/</guid>
      <description>After upgrading the Linux Kernel, my virtualbox cannot automatically load the kernel modules for virtualbox. Following is the steps for finding out the problems and solving them.
Locating Problem I could manually modprobe the virtualbox driver, but failed to load at boot, so I first check the status of the systemd&amp;rsquo;s output.
Checking the systemd&amp;rsquo;s modules load service status:
# systemctl status systemd-modules-load.service ● systemd-modules-load.service - Load Kernel Modules Loaded: loaded (/usr/lib/systemd/system/systemd-modules-load.</description>
    </item>
    
    <item>
      <title>Puppet On ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/08/11/puppet-on-archlinux/</link>
      <pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/08/11/puppet-on-archlinux/</guid>
      <description>Installation Install via;
sudo pacman -S puppet  Configurate this machine into server mode.
Install new Virtual Machine Install a new ubuntu14.04 using qemu, and install puppet in it.
Generate the configuration file for mirror.list of Ubuntu.
Finally use the vdi file in the Ubuntu.
Install puppet in Ubuntu14.04:
http://linuxconfig.org/puppet-installation-on-linux-ubuntu-14-04-trusty-tahr
Make Ubuntu use a fixed IP.
$ cat /etc/network/interface # s file describes the network interfaces available on your system # and how to activate them.</description>
    </item>
    
    <item>
      <title>7 Weeks 7 Databases Reading Digest</title>
      <link>http://purplepalmdash.github.io/2014/08/10/7-weeks-7-databases-reading-digest/</link>
      <pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/08/10/7-weeks-7-databases-reading-digest/</guid>
      <description>This chapter will introduct postgresql.
Installation in ArchLinux Install it via:
# pacman -S postgresql  Then configure the initial configuration:
# su - postgres [postgres]$ initdb --locale en_US.UTF-8 -E UTF8 -D &#39;/var/lib/postgres/data&#39; # systemctl enable postgresql  Create the user:
[root@Arch_Container ~]# su - postgres [postgres@Arch_Container ~]$ createuser --interactive Enter name of role to add: root Shall the new role be a superuser? (y/n) y [postgres@Arch_Container ~]$ exit logout  Now using a test command for verifying your postgresql runs OK:</description>
    </item>
    
    <item>
      <title>LXC ArchLinux Tutorial</title>
      <link>http://purplepalmdash.github.io/2014/08/10/lxc-archlinux-tutorial/</link>
      <pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/08/10/lxc-archlinux-tutorial/</guid>
      <description>Installation Install lxc, bridge-utils, netctl from the official repository.
$ sudo pacman -S lxc bridge-utils netctl  For creating ArchLinux Container, install arch-install-scripts:
$ sudo pacman -S arch-install-scripts  Check Configurations:
$ lxc-checkconfig  Network Configuration Since I use systemd for bridged network, so this step remains blank, the official Arch Wiki use netctl.
Creating Container Using Template List all of the available templates:
$ ls /usr/share/lxc/templates lxc-alpine lxc-centos lxc-fedora lxc-oracle lxc-ubuntu-cloud lxc-altlinux lxc-cirros lxc-gentoo lxc-plamo lxc-archlinux lxc-debian lxc-openmandriva lxc-sshd lxc-busybox lxc-download lxc-opensuse lxc-ubuntu  Now using the template for creating the Linux Container:</description>
    </item>
    
    <item>
      <title>Configure Network in rc.local</title>
      <link>http://purplepalmdash.github.io/2014/08/08/configure-network-in-rc-dot-local/</link>
      <pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/08/08/configure-network-in-rc-dot-local/</guid>
      <description>Following is the configuration of the vlan and whole network:
In rc.local, RHEL.
#!/bin/sh # # This script will be executed *after* all the other init scripts. # You can put your own initialization stuff in here if you don&#39;t # want to do the full Sys V style init stuff. touch /var/lock/subsys/local echo VLAN=yes &amp;gt; /etc/sysconfig/network /sbin/vconfig add eth1 10 /sbin/vconfig add eth1 11 /sbin/vconfig add eth1 12 /sbin/vconfig add eth1 13 /sbin/vconfig add eth1 30 /sbin/vconfig add eth1 40 /sbin/vconfig add eth1 100 /sbin/vconfig add eth1 110 /sbin/vconfig add eth1 120 /sbin/vconfig add eth1 130 /sbin/vconfig add eth1 200 /sbin/ifconfig eth1.</description>
    </item>
    
    <item>
      <title>Moving System on 1T Harddisk(2)</title>
      <link>http://purplepalmdash.github.io/2014/08/08/moving-system-on-1t-harddisk-2/</link>
      <pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/08/08/moving-system-on-1t-harddisk-2/</guid>
      <description>Tips Here are some tips for customize the existing system.
1. Add octopress directory to heroku repository.
Install heroku client tools:
$ yaourt -S heroku-client $ heroku keys:add Found existing public key: /home/Trusty/.ssh/id_rsa.pub Uploading SSH public key /home/Trusty/.ssh/id_rsa.pub... done  Now in the copied octopress directory we could use git push command for pushing our website onto herokuapp.
2. MTP Device
sudo pacman -S libmtp  3. libvirt
sudo pacman -S libvirt  4.</description>
    </item>
    
    <item>
      <title>Moving System On 1T Harddisk </title>
      <link>http://purplepalmdash.github.io/2014/07/31/moving-system-on-1t-harddisk/</link>
      <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/31/moving-system-on-1t-harddisk/</guid>
      <description>Preparation View the newly added harddisk via:
$ fdisk -l Disk /dev/sdb: 931.5 GiB, 1000204886016 bytes, 1953525168 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 4096 bytes I/O size (minimum/optimal): 4096 bytes / 4096 bytes [Trusty@/dev/disk/by-uuid]$ ls -l /dev/disk/by-id total 0 lrwxrwxrwx 1 root root 9 Jul 31 14:50 ata-WDC_WD10JPVX-00JC3T0_WD-WX31A54D4529 -&amp;gt; ../../sdb  Now we know the id of the harddisk, Create a vmdk file which links to this physical disk.</description>
    </item>
    
    <item>
      <title>Writing Style Under Linux</title>
      <link>http://purplepalmdash.github.io/2014/07/31/writing-style-under-linux/</link>
      <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/31/writing-style-under-linux/</guid>
      <description>Writing Use rake new_post for generate a new blog.
Use vim for editing the article:
Building Building the blogs:
Now build successful:
Browsing View the result in browser:</description>
    </item>
    
    <item>
      <title>在github上部署你的octopress博客</title>
      <link>http://purplepalmdash.github.io/2014/07/30/zai-githubshang-bu-shu-ni-de-octopressbo-ke/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/30/zai-githubshang-bu-shu-ni-de-octopressbo-ke/</guid>
      <description>环境: ArchLinux
准备 ArchLinux上安装git 和 ruby:
$ sudo pacman -S git ruby  安装rvm, 因为我用代理的缘故，所以使用了-k --insecure 选项，如果你的网络未收到任何阻挠，推荐你使用curl -L https://get.rvm.io | bash -s stable --ruby:
$ echo insecure &amp;gt;&amp;gt; ~/.curlrc $ curl -k --insecure -L https://get.rvm.io | bash -s stable --ruby  重新登录终端：
[root@archi386 ~]# which rvm /usr/local/rvm/bin/rvm [root@archi386 ~]# rvm install 1.9.3 [root@archi386 ~]# rvm use 1.9.3 Using /usr/local/rvm/gems/ruby-1.9.3-p547 [root@archi386 ~]# rvm rubygems latest Rubygems 2.2.2 already available in installed ruby, skipping installation, use --force to reinstall.</description>
    </item>
    
    <item>
      <title>Video Card Problem on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/07/20/video-card-problem-on-archlinux/</link>
      <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/20/video-card-problem-on-archlinux/</guid>
      <description>The video card crash problem is caused by acceleration method chosen. My ArchLinux Installed on 2013.06.30, while at that time the default acceleration method is uxa, but now most of it uses sna. So if I choose sna instead of uxa, then problem will be solved.
[Trusty@~]$ cat /var/log/Xorg.0.log | grep -i uxa [ 7841.603] (**) intel(0): Option &amp;quot;AccelMethod&amp;quot; &amp;quot;uxa&amp;quot; [ 7841.638] (II) UXA(0): Driver registered support for the following operations: [ 7841.</description>
    </item>
    
    <item>
      <title>Hightlight Jade File</title>
      <link>http://purplepalmdash.github.io/2014/07/12/hightlight-jade-file/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/12/hightlight-jade-file/</guid>
      <description>Install vim-jade via:
 Bundle &#39;digitaltoad/vim-jade&#39;  Then in vim type :BundleInstall this will automatically install the plugin of vim-jade.
Enable the Highlight of jade file via:
au BufNewFile,BufRead,BufReadPost *.jade set filetype=jade  Now everytime you open jade file, it will be automatically be highlighted.</description>
    </item>
    
    <item>
      <title>Porting Weather APP Into Node.js(3)</title>
      <link>http://purplepalmdash.github.io/2014/07/12/porting-weather-app-into-node-dot-js-3/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/12/porting-weather-app-into-node-dot-js-3/</guid>
      <description>Get the timstamp of the record ObjectID could automatically store the insert timestamp, see following command:
&amp;gt; db.usercollection.find().pretty() ........ ........ &amp;gt; ObjectId(&amp;quot;53be4e7eb5ca215e38c5f651&amp;quot;).getTimestamp() ISODate(&amp;quot;2014-07-10T08:27:42Z&amp;quot;) &amp;gt; ObjectId(&amp;quot;53be4e7cb5ca215e38c5f650&amp;quot;).getTimestamp() ISODate(&amp;quot;2014-07-10T08:27:40Z&amp;quot;)  Time Format Run following commands to get the timestamp since 1970:
&amp;gt; day=new Date() Sat Jul 12 2014 21:15:10 GMT+0800 (CST) &amp;gt; day Sat Jul 12 2014 21:15:10 GMT+0800 (CST) &amp;gt; day.getTime() 1405170910049  The date which we fetched should be multiply 1000.</description>
    </item>
    
    <item>
      <title>Porting Weather APP Into Node.js(2)</title>
      <link>http://purplepalmdash.github.io/2014/07/09/porting-weather-app-into-node-dot-js-2/</link>
      <pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/09/porting-weather-app-into-node-dot-js-2/</guid>
      <description>Add packages dependencies:
 &amp;quot;dependencies&amp;quot;: { &amp;quot;express&amp;quot;: &amp;quot;^4.5.1&amp;quot;, &amp;quot;logfmt&amp;quot;: &amp;quot;^1.1.2&amp;quot;, &amp;quot;static-favicon&amp;quot;: &amp;quot;~1.0.0&amp;quot;, &amp;quot;morgan&amp;quot;: &amp;quot;~1.0.0&amp;quot;, &amp;quot;cookie-parser&amp;quot;: &amp;quot;~1.0.1&amp;quot;, &amp;quot;body-parser&amp;quot;: &amp;quot;~1.0.0&amp;quot;, &amp;quot;debug&amp;quot;: &amp;quot;~0.7.4&amp;quot;, &amp;quot;jade&amp;quot;: &amp;quot;~1.3.0&amp;quot;, &amp;quot;mongodb&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;monk&amp;quot;: &amp;quot;*&amp;quot; },  Then npm install to install the dependencies.
Install the package and save the version in package.json:
npm install forecast --save npm install cron --save npm install http --save npm install cheerio --save  Merge the TestNanjing.js and web.js file, let the fetch to be a function, or to be module.</description>
    </item>
    
    <item>
      <title>My Translator In ArchLinux(3)</title>
      <link>http://purplepalmdash.github.io/2014/07/07/my-translator-in-archlinux-3/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/07/my-translator-in-archlinux-3/</guid>
      <description>Using radis for cache the dictionary.
 # In C, it&#39;s simple to use do...while(), but in python, we need to judge the input, # Fortunately, the input is very simple, because get infos from RedisQue is blocking. # Forever Listening... while True: # Key in RedisQueue is &#39;dic&#39;, and we simply get its content: q = RedisQueue(&#39;dic&#39;) # cmdargs = q.get() # cmdargs = str(sys.argv) ## args to_be_refer_word = q.</description>
    </item>
    
    <item>
      <title>Porting Weather APP Into Node.js</title>
      <link>http://purplepalmdash.github.io/2014/07/07/porting-weather-app-into-node-dot-js/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/07/porting-weather-app-into-node-dot-js/</guid>
      <description>Website Design Use express for generating the whole website.
$ pwd /home/Trusty/code/nodejs/weather [Trusty@~/code/nodejs/weather]$ express weather  The express framework will be generated.
Add following dependencies into the weather/package.json:
 &amp;quot;jade&amp;quot;: &amp;quot;~1.3.0&amp;quot;, &amp;quot;mongodb&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;monk&amp;quot;: &amp;quot;*&amp;quot;  Install packages:
$ cd weather $ npm install  mkdir data, this command will create a directory named data which is used for holding our mongodb.
Now visit http://localhost:3000/ you will see the demo html website.</description>
    </item>
    
    <item>
      <title>Proto Thread In Arduino</title>
      <link>http://purplepalmdash.github.io/2014/07/04/proto-thread-in-arduino/</link>
      <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/04/proto-thread-in-arduino/</guid>
      <description> Recently I want to use RTOS on Arduino, but after reading the material I find it&amp;rsquo;s not so easy to run another &amp;ldquo;OS&amp;rdquo; on Arduino. But I found this library which named &amp;ldquo;Proto Thread&amp;rdquo; which could afford me thread-like operation. Following is the steps for using this library for controlling 2 different threads.
Installation of Proto Thread </description>
    </item>
    
    <item>
      <title>SMTP Problem Solving</title>
      <link>http://purplepalmdash.github.io/2014/07/03/smtp-problem-solving/</link>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/03/smtp-problem-solving/</guid>
      <description>Recently I&amp;rsquo;ve set up a ticket system, OTRS, which uses smtp for sending out email. It works well in my virtual machine, and in my own server. But when deploying it onto the lab PC, it cannot send out email via smtp. Following is the solving procedure for this problem.
SMTP Server When Login into the server, following is how to using smtp for sending out email.
$ telnet localhost 25 Trying 127.</description>
    </item>
    
    <item>
      <title>Turn Joggler into a real Digital Picture Frame</title>
      <link>http://purplepalmdash.github.io/2014/07/03/turn-joggler-into-a-real-digital-picture-frame/</link>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/07/03/turn-joggler-into-a-real-digital-picture-frame/</guid>
      <description>In fact Joggler initially is released as a digital picture frame, but I turned it into a linux server. Now It&amp;rsquo;s time to turn this server back.
Change RunLevel Edit the gdm.conf file:
# cat /etc/init/gdm.conf # gdm - GNOME Display Manager # # The display manager service manages the X servers running on the # system, providing login and auto-login services description &amp;quot;GNOME Display Manager&amp;quot; author &amp;quot;William Jon McCann &amp;lt;mccann@jhu.</description>
    </item>
    
    <item>
      <title>OTRS on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2014/06/29/otrs-on-ubuntu/</link>
      <pubDate>Sun, 29 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/29/otrs-on-ubuntu/</guid>
      <description>First get the source code from official website, and untar it via:
$ sudo tar xjvf otrs-3.3.8.tar.bz2 -C /opt/ $ cd /opt $ sudo mv otrs-3.3.8/ otrs  Check the modules :
$ /opt/otrs/bin/otrs.CheckModules.pl  Install following packages:
$ sudo apt-get install liblwp-useragent-determined-perl libapache2-mod-perl2 libnet-dns-perl libnet-smtp-ssl-perl libnet-smtp-tls-butmaintained-perl libyaml-perl $ sudo apt-get install libgd-text-perl libjson-xs-perl libpdf-api2-perl libtext-csv-xs-perl libxml-parser-perl  Add corresponding users and group:
$ sudo useradd -d /opt/otrs/ -c &#39;OTRS user&#39; otrs $ sudo usermod -G www-data otrs  Create the OTRS Config Files:</description>
    </item>
    
    <item>
      <title>Install And Configure otrs On CentOS</title>
      <link>http://purplepalmdash.github.io/2014/06/28/install-and-configure-otrs-on-centos/</link>
      <pubDate>Sat, 28 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/28/install-and-configure-otrs-on-centos/</guid>
      <description>Prerequisite Install following Packages under CentOS:
$ sudo yum install wget mysql-server mysql php-mysql httpd perl-URI perl-Net-DNS perl-IO-Socket-SSL perl-XML-Parser mod_perl perl-TimeDate perl-Net-DNS procmail perl perl-LDAP perl-Crypt-SSLeay  Now configure the mysqld via:
$ sudo chkconfig --levels 235 mysqld on $ sudo service mysqld start $ sudo /usr/bin/mysql_secure_installation $ sudo chkconfig --levels 235 httpd on  Install otrs Download the otrs from Official website, I downloaed the rpm package for CentOS, then install it via:</description>
    </item>
    
    <item>
      <title>Graphic Card On ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/06/24/graphic-card-on-archlinux/</link>
      <pubDate>Tue, 24 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/24/graphic-card-on-archlinux/</guid>
      <description>Since I got several Intel powered PC, It&amp;rsquo;s is essential to know how graphics card works, thus I could get the fastest performance of my PC or Server.
Detect Graphics Card Use lspci we could get the output of all PCI equipments, get the VGA related information via:
$ lspci | grep VGA 00:02.0 VGA compatible controller: Intel Corporation 2nd Generation Core Processor Family Integrated Graphics Controller (rev 09)  To know the detailed information of this equipment:</description>
    </item>
    
    <item>
      <title>tmux tips</title>
      <link>http://purplepalmdash.github.io/2014/06/24/tmux-tips/</link>
      <pubDate>Tue, 24 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/24/tmux-tips/</guid>
      <description>Following is my tmux cheet sheet, it will be updated from time to time.
Create a new tmux session:
$ tmux new  Given session name:
$ tmux new -s session-name  Detach: ctrl + b, &amp;rsquo;d`.
List existing session:
$ tmux ls  Attached to existing session:
$ tmux a -t session-name  Attached to first session:
$ tmux a  </description>
    </item>
    
    <item>
      <title>Database In Node.js</title>
      <link>http://purplepalmdash.github.io/2014/06/18/database-in-node-dot-js/</link>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/18/database-in-node-dot-js/</guid>
      <description>MongoDB Install MongoDB via:
$ sudo pacman -S mongodb $ sudo systemctl start mongodb $ sudo systemctl enable mongodb $ mongodb  Later I will cover this topic.
MySQL Installation of MySQL The implementation chosen by Arch Linux is called MariaDB, install it via:
$ sudo pacman -S mariadb  Configuration steps:
$ sudo systemctl start mysqld.service [Trusty@~]$ sudo mysql_secure_installation /usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE!</description>
    </item>
    
    <item>
      <title>ArchLinux On Surface Pro</title>
      <link>http://purplepalmdash.github.io/2014/06/16/archlinux-on-surface-pro/</link>
      <pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/16/archlinux-on-surface-pro/</guid>
      <description>Following is the steps for installing ArchLinux on Surface Pro, from the very beginning.
Prerequisite First you have to download the iso from http://www.archlinux.org/download, Mine is 2014.06.01.
Also I use a USB-LAN adapter which holds the following information: ASIX Electronics Corp. AX88772B.
A 8G Flash Disk, 80G USB3.0 USB HardDisk. I also use a 4-Port USB2.0 HUB which carries a AC/DC Adapter for using 3 equipemts(FlashDisk/USB Adapter/USB Disk).
Make the bootable flash disk via:</description>
    </item>
    
    <item>
      <title>ArchLinux On Surface Pro(1)</title>
      <link>http://purplepalmdash.github.io/2014/06/16/archlinux-on-surface-pro-1/</link>
      <pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/16/archlinux-on-surface-pro-1/</guid>
      <description>System Management Users and Groups Install zsh and use zsh as the newly added users&amp;rsquo;s default SHELL:
# pacman -S zsh # useradd -m -g root -G audio -s /bin/zsh Trusty  Then we add the newly added user into the sudo group and configure the sudo parameters:
# pacman -S sudo # visudo Trusty ALL=(ALL) NOPASSWD: ALL Defaults env_keep += &amp;quot;LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET http_proxy https_proxy ftp_proxy ftps_proxy&amp;quot;  Now the user is OK, and you can directly use newly added user for login, I suggest you swiftly switch to the newly added user, because using root is not a good idea, it&amp;rsquo;s not safe.</description>
    </item>
    
    <item>
      <title>On Surface Pro</title>
      <link>http://purplepalmdash.github.io/2014/06/11/on-surface-pro/</link>
      <pubDate>Wed, 11 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/11/on-surface-pro/</guid>
      <description>Yes, two weeks ago I bought a surface pro, following is the steps for me to discover on Surface Pro.
Remote Viewer Since the remote desktop server is not installed on surface pro, I have to install the remote viewer, I choose TeamViewer, the steps is quite easy. But it requires both side(client and server)both could reach internet.
TeamViewer Download:
http://www.teamviewer.com/zhcn/download/windows.aspx
You can also install teamviewer from the yaourt of ArchLinux.</description>
    </item>
    
    <item>
      <title>Upgrade Pidgin For Using Microsoft Lync</title>
      <link>http://purplepalmdash.github.io/2014/06/10/upgrade-pidgin-for-using-microsoft-lync/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/06/10/upgrade-pidgin-for-using-microsoft-lync/</guid>
      <description>Since company has upgrade the IM tools from office communicator into Lync, thus I have to upgrade the pidgin&amp;rsquo;s plugins for using lynx. Folloing is the tips:
Upgrade SIPE Sipe is installed via yaourt:
# yaourt -S pidgin-sipe  Configure Pidgin Edit the existing account via: Edit-&amp;gt;Preference-&amp;gt;Advanced.
The connection type is auto, the authentication scheme is TLS-DSK.
In the &amp;ldquo;User Agent&amp;rdquo;, insert following:
UCCAPI/15.0.4481.1000 OC/15.0.4481.1000  The detailed &amp;ldquo;User Agent&amp;rdquo; descriptions could be refered to following links:</description>
    </item>
    
    <item>
      <title>Moving From Working PC to Own USB-Disk Based 6</title>
      <link>http://purplepalmdash.github.io/2014/05/26/moving-from-working-pc-to-own-usb-disk-based-6/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/26/moving-from-working-pc-to-own-usb-disk-based-6/</guid>
      <description>Kernel As for i686 only support 4GB at most memory, we have to change the existing memory into a new one. PAE based kernel will support up to 64GB memory, so we upgrade our kernel to this one:
yaourt -S linux-pae  Building will take for a while, two tips is:
1. Change the building directory from TMPDIR=&amp;quot;/tmp&amp;quot; to TMPDIR=/real_file_system, this configuration file is /etc/makepkg.conf.
2. Add the MAKEFLAGS=&amp;quot;-j6&amp;quot;, this will speed-up the building procedure.</description>
    </item>
    
    <item>
      <title>How to quickly solve python problems</title>
      <link>http://purplepalmdash.github.io/2014/05/24/how-to-quickly-solve-python-problems/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/24/how-to-quickly-solve-python-problems/</guid>
      <description>问题 在txt里面打印1-10里面随机的9个数。
思路 如何生成随机数？ Google &amp;ldquo;generate random python&amp;rdquo; , 结果如下：
挨个看，马上你会发现下面这个网页有答案：
http://stackoverflow.com/questions/5555712/generate-a-random-number-in-python
启动终端试验之：
$ python Python 2.7.6 (default, Feb 26 2014, 12:07:17) [GCC 4.8.2 20140206 (prerelease)] on linux2 Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information. &amp;gt;&amp;gt;&amp;gt; from random import randint &amp;gt;&amp;gt;&amp;gt; randint(2,9) 3 &amp;gt;&amp;gt;&amp;gt; randint(1,10) 9 &amp;gt;&amp;gt;&amp;gt; randint(1,10) 4  如何循环打印 照样Google, 搜索关键字&amp;rdquo; python loop times&amp;rdquo;,结果如下：
随便点点看， 发现python自己的文档里就已经有很详细的关于loop的例子了:
https://wiki.python.org/moin/ForLoop
试验之:
&amp;gt;&amp;gt;&amp;gt; for x in range(0,3): ... print &amp;quot;hello&amp;quot; .</description>
    </item>
    
    <item>
      <title>Moving From Working PC to Own USB-Disk Based 5</title>
      <link>http://purplepalmdash.github.io/2014/05/24/moving-from-working-pc-to-own-usb-disk-based-5/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/24/moving-from-working-pc-to-own-usb-disk-based-5/</guid>
      <description>Font Customization Install following fonts:
$ sudo pacman -S wqy-bitmapfont wqy-zenhei ttf-arphic-ukai ttf-arphic-uming ttf-fireflysung  And then for more beautiful font, refer to:
http://kkkttt.github.io/blog/2013/12/25/archlinuxzhong-wen-hua-wen-ti/
VIM Customization Vim is my favorite editor, so maintain a configuration file is necessary for deploying it on various machines.
$ sudo pacman -S ctags  Then copy the default vimrc file from /usr/share/vim74/vimrc_example to your own directory, named it into .vimrc. Add folllowing lines into .</description>
    </item>
    
    <item>
      <title>Moving From Working PC to Own USB-Disk Based 4</title>
      <link>http://purplepalmdash.github.io/2014/05/23/moving-from-working-pc-to-own-usb-disk-based-4/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/23/moving-from-working-pc-to-own-usb-disk-based-4/</guid>
      <description>Writing Blog I use octopress for writing blog, so this time in USB system I also want to enable it.
Edit the /etc/hostname and name my computer into &amp;ldquo;USBArch&amp;rdquo;, because we want to setup the id_rsa.pub in next step.
$ ssh-keygen $ cat ~/.ssh/id_rsa.pub  Copy the content and add it into the [&amp;ldquo;https://github.com/settings/ssh&amp;quot;](&amp;quot;https://github.com/settings/ssh&amp;quot;), Then use command ssh -T git@github.com to verify if you can successfully be authenticated.
$ git clone git@github.</description>
    </item>
    
    <item>
      <title>Moving From Working PC to Own USB-Disk Based 3</title>
      <link>http://purplepalmdash.github.io/2014/05/22/moving-from-working-pc-to-own-usb-disk-based-3/</link>
      <pubDate>Thu, 22 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/22/moving-from-working-pc-to-own-usb-disk-based-3/</guid>
      <description>Trouble Shooting Unfortuately the qemu based pysical disk can&amp;rsquo;t bootup the machine correctly, so I re-intall the sytem on USB-Disk from the scratch. This time the problem appears as another: It can startup the machine, but failed to boot-up in qemu.
So I have to changed to use VirtualBox for booting the system.
Get the disk id via:
$ ls -l /dev/disk/by-id lrwxrwxrwx 1 root root 9 May 22 14:45 usb-ATA_ST980811AS_xxxxxxxx-0:0 -&amp;gt; .</description>
    </item>
    
    <item>
      <title>Moving From Working PC To Own USB-Disk Based</title>
      <link>http://purplepalmdash.github.io/2014/05/21/moving-from-working-pc-to-own-usb-disk-based/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/21/moving-from-working-pc-to-own-usb-disk-based/</guid>
      <description>Background Since I want to hava a usb-based OS which could easily be taken by hand, I took this series for resarching how to finish this aim.
Preparation ArchLinux iso file, USB-3.0 HardDisk, 80GB, later I will use a bigger one.
Qemu Script I use qemu firstly to install the system. following is the configuraton file for qemu-i386:
#!/bin/bash USERID=$(whoami) # Get name of newly created TAP device; see https://bbs.</description>
    </item>
    
    <item>
      <title>Moving From Working PC To Own USB-Disk Based 2</title>
      <link>http://purplepalmdash.github.io/2014/05/21/moving-from-working-pc-to-own-usb-disk-based-2/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/21/moving-from-working-pc-to-own-usb-disk-based-2/</guid>
      <description>Install Software Internet Chromium, we need this browser absolutesly:
$ sudo pacman -S chromium Select 1/8  Oh, we forget install X, so first we will install X:
X Window Install xorg first:
$ sudo pacman -S xorg xorg-xinit  Awesome Window Manager;
$ sudo pacman -S awesome  Edit the .xinitrc file, add following lines:
exec awesome  Necessary video driver:
$ sudo pacman -S xf86-video-intel xf86-video-ati  Continue Internet Firefox, another browser, pidgin, for chatting, thunderbird for email, wget for downloading:</description>
    </item>
    
    <item>
      <title>Using HardDisk For Booting RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2014/05/19/using-harddisk-for-booting-raspberrypi/</link>
      <pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/19/using-harddisk-for-booting-raspberrypi/</guid>
      <description>准备 RaspberryPI, SD卡（4G以上), 移动硬盘，操作系统镜像文件，最好有一个外接供电带电路隔离的USB HUB。 鼠标、键盘等。
用SD卡启动 将SD卡插入电脑，将镜像文件写入到SD卡后，将写好的SD卡插入RaspberryPI，加电开机。各种配置（譬如显存大小，是否启动到X等等）完成之后，进入到Linux桌面。
准备硬盘 将硬盘插入USB口，如果之前有分好区的，可以略过这一节，直接到拷贝至硬盘一节。
在RaspberryPI系统里(wheezy or archLinux)，搜索gparted, 这个工具可以在图形化界面下对硬盘进行分区。
命令行下你可以通过下列命令查看已挂载的存储设备信息：
[root@alarmpi ~]# fdisk -l Disk /dev/mmcblk0: 7.3 GiB, 7822376960 bytes, 15278080 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x00047c7a Device Boot Start End Blocks Id System /dev/mmcblk0p1 8192 122879 57344 c W95 FAT32 (LBA) /dev/mmcblk0p2 122880 15278079 7577600 83 Linux Disk /dev/sda: 465.</description>
    </item>
    
    <item>
      <title>Node.js Quick Start</title>
      <link>http://purplepalmdash.github.io/2014/05/14/node-dot-js-quick-start/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/14/node-dot-js-quick-start/</guid>
      <description> Installation Via following command
$ yaourt -S nodejs  Quick Start $ node &amp;gt; console.log(&amp;quot;Hello!&amp;quot;) Hello! undefined  Hit twice &amp;ldquo;Ctrl+c&amp;rdquo; you will get out of the terminal.
A simple example is like:
var http = require(&amp;quot;http&amp;quot;); http.createServer(function(request, response) { response.writeHead(200, {&amp;quot;Content-Type&amp;quot;: &amp;quot;text/plain&amp;quot;}); response.write(&amp;quot;Hello World&amp;quot;); response.end(); }).listen(8888); $ node server.js $ curl http://localhost:8888 Hello World%  </description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(10)</title>
      <link>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-10/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-10/</guid>
      <description>Use Template In Flask To use template in flask, we should put the static file under the templates folder under the root directory. Our index page should looks like following:
So our html file shall wrote like following:
&amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;{{title}}&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;/static/assets/css/styles.css&amp;quot; /&amp;gt; &amp;lt;!--[if IE]&amp;gt;&amp;lt;script src=&amp;quot;assets/js/excanvas.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;![endif]--&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;page&amp;quot;&amp;gt; &amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;Nanjing Weather/PM Statistics&amp;lt;/h2&amp;gt; &amp;lt;div id=&amp;quot;periodDropDown&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;left&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;currentPeriod&amp;quot;&amp;gt;Last 24 hours&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;arrow&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li data-action=&amp;quot;24hours&amp;quot;&amp;gt;Last 24 hours&amp;lt;/li&amp;gt; &amp;lt;li data-action=&amp;quot;7days&amp;quot;&amp;gt;Last 7 Days&amp;lt;/li&amp;gt; &amp;lt;li data-action=&amp;quot;30days&amp;quot;&amp;gt;Last 30 Days&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;temperature section&amp;quot;&amp;gt; &amp;lt;h3&amp;gt;Temperature&amp;lt;/h3&amp;gt; &amp;lt;div id=&amp;quot;plot&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;preloader&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;humidity section&amp;quot;&amp;gt; &amp;lt;h3&amp;gt;Humidity&amp;lt;/h3&amp;gt; &amp;lt;div id=&amp;quot;humi_plot&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;preloader&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;pm2.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(11)</title>
      <link>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-11/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-11/</guid>
      <description>Draw Flot Picture Since the article is mainly on writing apps, I don&amp;rsquo;t want to spend much time on how to use javascript or flot for drawing picture.
Simply checkout the code on github, you will see the code which is used for retrieving the data and start drawing plot pictures.
Fetching 24-hours Data Fetching 24 latest records from the postgres database, and then add them into the chart, chart then has been sent to simplejson which used for updating the flot picture locally .</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(12)</title>
      <link>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-12/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/13/write-python-weather-app-on-heroku-12/</guid>
      <description>Final Effect Following is the final effect of our own app:
There are lots to be finalize and optimized, but currently It could be ful-fill our requirements which retriving the data and generate the flot.
The next series I will try to write some ruby or node.js programs which did the same functionalities, to compare the differencies between app developement.
Also to write a web-proxy is a work full of challenge, this will be took as next consideration of developing apps on heroku .</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(9)</title>
      <link>http://purplepalmdash.github.io/2014/05/12/write-python-weather-app-on-heroku-9/</link>
      <pubDate>Mon, 12 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/12/write-python-weather-app-on-heroku-9/</guid>
      <description>Understanding the flask and Jinja Flask Example hello1.py is listed as following:
from flask import Flask app = Flask(__name__) @app.route(&amp;quot;/&amp;quot;) def index(): return &#39;Index Page&#39; @app.route(&#39;/hello&#39;) def hello(): return &amp;quot;Hello World!&amp;quot; @app.route(&#39;/hello1&#39;) def hello1(): return &amp;quot;Hello World 1!&amp;quot; if __name__ == &amp;quot;__main__&amp;quot;: app.run()  Run this via:
$ python hello1.py  Then use your browser for visiting http://localhost:5000, http://localhost:5000/hello, http://localhost:5000/hello1. You will view different output result.
Jinja Example The sample.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(7)</title>
      <link>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-7/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-7/</guid>
      <description>We will continue to deploy our tasks on heroku. In this article we will finish the data retriving and database insertion.
Honcho Install and Configuration of Honcho:
$ pip install honcho # Regenerate requirement.txt and upload it onto heroku $ mv Procfile ProcfileHoncho # Edit the new Procfile: $ vim Procfile web: honcho -f ProcfileHoncho start  In local, we can also use following command for swiftly verifying our code:</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(8)</title>
      <link>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-8/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/11/write-python-weather-app-on-heroku-8/</guid>
      <description>Deploy on Heroku The deployed version is listed as following:
#!/usr/bin/env python # -*- coding: utf-8 -*- # Set default encoding: utf-8 import sys; reload(sys); # Setting the utf-8 format sys.setdefaultencoding(&amp;quot;utf8&amp;quot;) import os import logging import string from celery import Celery from celery.task import periodic_task from datetime import datetime,timedelta from os import environ # For retrieving temperature/humidity import pywapi import urllib2 from urllib2 import ProxyHandler import re from BeautifulSoup import BeautifulSoup # For using database(Postgresql) # from flash.</description>
    </item>
    
    <item>
      <title>Celery and RabbitMQ on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/05/10/celery-and-rabbitmq-on-archlinux/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/10/celery-and-rabbitmq-on-archlinux/</guid>
      <description>Installation Install and run rabbitmq server via:
$ yaourt rabbitmq $ rabbitmq-server  Install celery in python virtual enviroment:
$ workon venv2 (venv2) $ pip install celery  Run Simple Tasks Following python file, named &amp;ldquo;tasks.py&amp;rdquo; defines two tasks:
from celery import Celery app = Celery(&#39;tasks&#39;, backend=&#39;amqp&#39;, broker=&#39;amqp://&#39;) @app.task(ignore_result=True) def print_hello(): print &#39;hello there&#39; @app.task def gen_prime(x): multiples = [] results = [] for i in xrange(2, x+1): if i not in multiples: results.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(5)</title>
      <link>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-5/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-5/</guid>
      <description>In fact this is a migration from sqlite3 to postgresql.
View the historical sqlite3 We will refer to our own design of database. First fetch the data file, this is a sqlite3 file, so we use sqlite3 to view its structure.
$ sqlite3 SQLite version 3.8.4.3 2014-04-03 16:53:12 Enter &amp;quot;.help&amp;quot; for usage hints. Connected to a transient in-memory database. Use &amp;quot;.open FILENAME&amp;quot; to reopen on a persistent database. sqlite&amp;gt; .</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(6)</title>
      <link>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-6/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/10/write-python-weather-app-on-heroku-6/</guid>
      <description>Risk On Google App Engine it&amp;rsquo;s very convinient to setup a crontab task, while in heroku setting up a crontab task will occupy the material, thus will use another dyno, each dyno will cost $30/month. For avoiding this, we will re-design our Weather App.
Following is the detailed explanation on heroku&amp;rsquo;s dyno:
Heroku allows you to run one free dyno (or actually they give you 720 free dyno hours per month, which corresponds to one dyno constantly running).</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku/</guid>
      <description>Accounting Setting First you should have heroku accounting, then create an app on heroku, write down its repository information, mine is listed as following:
Your app, python-weather-app, has been created. App URL: http://python-weather-app.herokuapp.com/ Git URL: git@heroku.com:python-weather-app.git Use the following code to set up your app for local development:  git clone git@heroku.com:python-weather-app.git -o heroku
Suggested next steps Get started with Heroku. Add some collaborators. Check out some of our great add-ons.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(2)</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-2/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-2/</guid>
      <description>Get Current Weather Data Now we begin to change our APP to a real funny staff. First we change the hello.py and begin to write our own &amp;ldquo;genhtml.py&amp;rdquo;
$ mv hello.py genhtml.py $ cat Procfile web: gunicorn genhtml:app  We know there is an python library which we could install from pip named &amp;ldquo;pywapi&amp;rdquo;, simply install it via:
(venv2) $ pip install pywapi  If your pip&amp;rsquo;s version is 1.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(3)</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-3/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-3/</guid>
      <description>Database Introduction Heroku Postgres Installation Before using postgres, we have to install this add-ons, we call this step &amp;ldquo;attach Heroku POSTGRES to heroku application&amp;rdquo;:
$ heroku addons python-weather-app has no add-ons. $ heroku addons:add heroku-postgresql:dev Adding heroku-postgresql:dev on python-weather-app... done, v7 (free) Attached as HEROKU_POSTGRESQL_OLIVE_URL Database has been created and is available ! This database is empty. If upgrading, you can transfer ! data from another database with pgbackups:restore. Use `heroku addons:docs heroku-postgresql` to view documentation.</description>
    </item>
    
    <item>
      <title>Write Python Weather APP on Heroku(4)</title>
      <link>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-4/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/09/write-python-weather-app-on-heroku-4/</guid>
      <description>Local Database Sync First fetch the remote database to localdb via following command:
$ heroku pg:pull DATABASE_URL mylocaldb --app python-weather-app  This command will pull down your database down and create a copy version locally. You can easily view all of the database via psql mylocaldb.
As root, edit following files:
# pwd /var/lib/postgres/data # vim postgresql.conf listen_addresses = &#39;localhost&#39;	# what IP address(es) to listen on; # comma-separated list of addresses; # defaults to &#39;localhost&#39;; use &#39;*&#39; for all # (change requires restart) port = 5432	# (change requires restart) # vim pb_hba.</description>
    </item>
    
    <item>
      <title>Use Tunnel For Acrossing Something</title>
      <link>http://purplepalmdash.github.io/2014/05/08/use-tunnel-for-acrossing-something/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/08/use-tunnel-for-acrossing-something/</guid>
      <description>Network Envorinment Introduction The network envoriment in daily working envoriment is very bad, thus I have to think for a solution, which could improve my network speed.
Following picture describes the network topology of the daily working.
From the picture we can see, several users shared a very narrow path, and this path have to go through chinese firewall, this firewall is ghastly, because it will filter some sensitive website which is not welcomed by CN gov.</description>
    </item>
    
    <item>
      <title>Wake On LAN</title>
      <link>http://purplepalmdash.github.io/2014/05/08/wake-on-lan/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/08/wake-on-lan/</guid>
      <description>See if your equipment support &amp;ldquo;Wake On LAN&amp;rdquo; feature:
$ ethtool enp0s25 | grep &amp;quot;Wake&amp;quot; Cannot get wake-on-lan settings: Operation not permitted  If you got this feature, then install wol:
$ pacman -S wol  Record the mac address of your equipment which you want to wake up, in a living machine, if you want to wake it, simply use following command:
# wol -i HOSTNAME_OR_IP MACADDRESS  The next consideration is, how to keep a wake-up equipment 24-hours, I suggest you use BeagleBone or Raspberry PI, or you can research how to use arduino and write your own applications.</description>
    </item>
    
    <item>
      <title>Download Android Source Code on RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2014/05/04/download-android-source-code-on-raspberrypi/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/04/download-android-source-code-on-raspberrypi/</guid>
      <description>Just a try. I don&amp;rsquo;t think I will use raspberryPI for developing, but using it for downloading code is a good idea.
###Go Back Home My raspberryPI is behind the router, so I have to use a ssh tunnel to reach raspberryPI.
Setting up tunnel:
$ ssh -L 2230:10.0.0.230:22 Tomcat.xxx.xx.xxx -l root  Login on local port:
$ ssh root@localhost -p 2230  Now we have a terminal which could reach raspberry PI.</description>
    </item>
    
    <item>
      <title>Deploy Snova On Heroku</title>
      <link>http://purplepalmdash.github.io/2014/05/03/deploy-snova-on-heroku/</link>
      <pubDate>Sat, 03 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/03/deploy-snova-on-heroku/</guid>
      <description>###Setting Account First you have to install heroku deploy tool via:
$ heroku plugins:install https://github.com/heroku/heroku-deploy  Then login and create the app:
$ heroku login Enter your Heroku credentials. Email: xxx@gmail.com Password (typing will be hidden): Authentication failed. $ $ heroku apps:create xxx Creating xxx... done, stack is cedar http://xxx.herokuapp.com/ | git@heroku.com:xxx.git  ###Source Code Preparation Download the source code from https://code.google.com/p/snova/, here you need to cross the Greatwall.
wget https://code.</description>
    </item>
    
    <item>
      <title>SD Card Migration</title>
      <link>http://purplepalmdash.github.io/2014/05/02/sd-card-migration/</link>
      <pubDate>Fri, 02 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/05/02/sd-card-migration/</guid>
      <description>Following are the tips for operating a SD card under Linux.
###Backup SD Card We can use dd for backup sd card into an image file.
dd if=/dev/mmcblk0 of=Your_Image_Name.img bs=1M  You need to wait for a moment until all of the data dump working done.
###Write Into SD Card Also use dd for writing the image file into the SD card:
dd if=Your_Image_Name.img os=/dev/mmcblk0 bs=1M  Make sure your SD Card&amp;rsquo;s volumn is bigger than the image file.</description>
    </item>
    
    <item>
      <title>Customize Awesome</title>
      <link>http://purplepalmdash.github.io/2014/04/30/customize-awesome/</link>
      <pubDate>Wed, 30 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/30/customize-awesome/</guid>
      <description>###Wallpaper Setting When switching to big display in awesome, the desktop background will not fill the whole screen, thus we need to automatically set the background when we execute the ./singleview script, ./singleview script is a script which I wrote for switching to big display. Listed as following:
killall conky xrandr --output LVDS1 --off xrandr --newmode $(gtf 1680 1050 60 | grep Modeline | sed s/Modeline\ // | tr -d &#39;&amp;quot;&#39;) xrandr --addmode VGA1 1680x1050_60.</description>
    </item>
    
    <item>
      <title>Customize Awesome Startup Application</title>
      <link>http://purplepalmdash.github.io/2014/04/26/customize-awesome-startup-application/</link>
      <pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/26/customize-awesome-startup-application/</guid>
      <description>Let applications automatically start at boot will greatly save your time in configurating the system. Following is some tips on how to automatically start applications in awesome desktop environment.
###Xinit Way My startup configuration is listed as:
export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=&amp;quot;@im=fcitx&amp;quot; exec awesome  So the awesome environment will be started.
###Awesome Way Run only once in awesome desktop, via following configuration file:
function run_once(cmd) findme = cmd firstspace = cmd:find(&amp;quot; &amp;quot;) if firstspace then findme = cmd:sub(0, firstspace-1) end awful.</description>
    </item>
    
    <item>
      <title>Qemu emulated kali</title>
      <link>http://purplepalmdash.github.io/2014/04/25/qemu-emulated-kali/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/25/qemu-emulated-kali/</guid>
      <description>###Preparation Create the image file:
$ qemu-img create -f qcow2 kali.qcow2 20G Formatting &#39;kali.qcow2&#39;, fmt=qcow2 size=21474836480 encryption=off cluster_size=65536 lazy_refcounts=off $ ls -l -h total 136K -rw-r--r-- 1 Trusty root 193K Apr 25 10:34 kali.qcow2  Since I&amp;rsquo;ve created the kali, ignore this article.</description>
    </item>
    
    <item>
      <title>Deploy XAMPP On ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/04/23/deploy-xampp-on-archlinux/</link>
      <pubDate>Wed, 23 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/23/deploy-xampp-on-archlinux/</guid>
      <description>###Installation On ArchLinux, Install xampp via Yaourt:
yaourt xampp  After installation, you will find the default xampp located in &amp;ldquo;/opt/lampp&amp;rdquo;. Start/Stop/Restart the xampp via:
/opt/lampp/lampp start/stop/restart  ###Adjustment Enable the security via:
/opt/lampp/lampp security  Then you have to use username and password for accessing &amp;ldquo;http://localhost&amp;quot;, the default username is lampp, password is what you selected.
If you want to add your own Directory, add following lines into &amp;ldquo;/opt/lampp/etc/httpd.</description>
    </item>
    
    <item>
      <title>DXG ScreenSaver Hack</title>
      <link>http://purplepalmdash.github.io/2014/04/22/dxg-screensaver-hack/</link>
      <pubDate>Tue, 22 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/22/dxg-screensaver-hack/</guid>
      <description>First, download the ScreenSavers hacker form:
http://www.mobileread.com/forums/showthread.php?t=88004
And unzip this file, copy the &amp;ldquo;Update_ss_0.43.N_dxg_install.bin&amp;rdquo; to the root directory of Kindle.
Then In kindle, [HOME] -&amp;gt; [MENU] &amp;gt; Settings -&amp;gt; [MENU] &amp;gt; Update Your Kindle. The DXG will automatically reboot.
Now mount the DXG into your computer, touch the &amp;ldquo;last&amp;rdquo; file under the linkss folder, as:
	[root@XXXyyy mnt]# cd linkss/ [root@XXXyyy linkss]# ls auto backups cover_cache info.txt overflow screensavers autoreboot bin etc mounted_824x1200 run [root@XXXyyy linkss]# touch last  Now reboot your Kindle Again, your Kindle will remain the last read page as the ScreenSaver.</description>
    </item>
    
    <item>
      <title>My Reading Digest For Git</title>
      <link>http://purplepalmdash.github.io/2014/04/22/my-reading-digest-for-git/</link>
      <pubDate>Tue, 22 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/22/my-reading-digest-for-git/</guid>
      <description>###View Git LOG git log for view your activities:
$ git log --pretty=oneline 1f7ec5eaa8f37c2770dae3b984c55a1531fcc9e7 Added a comment 582495ae59ca91bca156a3372a72f88f6261698b Added a default value 323e28d99a07d404c04f27eb6e415d4b8ab1d615 Using ARGV 94164160adf8faa3119b409fcfcd13d0a0eb8020 First Commit  git log controlling items:
$ git log --pretty=oneline --max-count=2 $ git log --pretty=oneline --since=&#39;5 minutes ago&#39; $ git log --pretty=oneline --until=&#39;5 minutes ago&#39; $ git log --pretty=oneline --author=&amp;lt;your name&amp;gt; $ git log --pretty=oneline --all  try man git-log for more details.</description>
    </item>
    
    <item>
      <title>Install xampp on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/04/18/install-xampp-on-archlinux/</link>
      <pubDate>Fri, 18 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/18/install-xampp-on-archlinux/</guid>
      <description>Install xampp in ArchLinux via:
	yaourt xampp pacman -U xampp-1.8.1-1-x86_64.pkg.tar.xz  Stop and disable the previous installed service:
	systemctl stop httpd.service systemctl stop mysqld systemctl stop vsftpd systemctl disable httpd.service systemctl disable mysqld systemctl disable vsftpd  Start the xampp via:
	/opt/lampp/lampp start  Other commands: start/restart/stop.</description>
    </item>
    
    <item>
      <title>Automatically Mount in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/04/16/automatically-mount-in-archlinux/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/16/automatically-mount-in-archlinux/</guid>
      <description>Use udisk/udisk2/udiskie for automatically mount usb disks.
	pacman -S udisk udisk2 udiskie  Add following line into the .xinitrc:
	udiskie -2 --tray &amp;amp;  If you want to umount all media with the command:
	udiskie-umount -a  umount speicified disk partition:
	udiskie-umount /media/MY_USB_DRIVE  </description>
    </item>
    
    <item>
      <title>Customize First Page of Colorway Theme</title>
      <link>http://purplepalmdash.github.io/2014/04/15/customize-first-page-of-colorway-theme/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/15/customize-first-page-of-colorway-theme/</guid>
      <description>View picture exiv2 info via exiv2 command:
	exiv2 slide-img-1.jpg Image size : 897 x 350  So we must cut out a 897 x 350 picture for displaying as slide show.
Now find out some pictures from internet, and download it to local.
Use convert to fit the image? No, it&amp;rsquo;s not exact, I use gimp</description>
    </item>
    
    <item>
      <title>Miragate Wordpress From Development Machine To Server</title>
      <link>http://purplepalmdash.github.io/2014/04/15/miragate-wordpress-from-development-machine-to-server/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/15/miragate-wordpress-from-development-machine-to-server/</guid>
      <description>First Log on to the development machine, view the configuration file of the Wordpress:
	// ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define(&#39;DB_NAME&#39;, &#39;wordpress&#39;); /** MySQL database username */ define(&#39;DB_USER&#39;, &#39;wordpressuser&#39;); /** MySQL database password */ define(&#39;DB_PASSWORD&#39;, &#39;password&#39;); /** MySQL hostname */ define(&#39;DB_HOST&#39;, &#39;localhost&#39;);  Dump out the database:
mysqldump &amp;ndash;user=wordpressuser -p wordpress &amp;gt;wordpress.</description>
    </item>
    
    <item>
      <title>Install Wordpress on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/04/14/install-wordpress-on-archlinux/</link>
      <pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/14/install-wordpress-on-archlinux/</guid>
      <description>First install wordpress manually:
	cd /srv/http wget https://wordpress.org/latest.tar.gz tar xzvf latest.tar.gz chown -R http wordpress chgrp -R http wordpress  Now add a configuration file on wordpress:
	[Trusty@/etc/httpd/conf/extra]$ pwd /etc/httpd/conf/extra [Trusty@/etc/httpd/conf/extra]$ cat httpd-wordpress.conf Alias / &amp;quot;/srv/http/wordpress/&amp;quot; &amp;lt;Directory &amp;quot;/srv/http/wordpress/&amp;quot;&amp;gt; AllowOverride All Options FollowSymlinks Order allow,deny Allow from all php_admin_value open_basedir &amp;quot;/srv/:/tmp/:/srv/http/wordpress/:/usr/share/webapps/:/etc/webapps:$&amp;quot; &amp;lt;/Directory&amp;gt;  In /etc/httpd/conf/httpd.conf file, add:
	# Include wordpress configuration Include conf/extra/httpd-wordpress.conf  Create the Wordpress Database and User</description>
    </item>
    
    <item>
      <title>Switch To ZSH</title>
      <link>http://purplepalmdash.github.io/2014/04/14/switch-to-zsh/</link>
      <pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/14/switch-to-zsh/</guid>
      <description>###Installation In ArchLinux, install zsh via:
	pacman -S zsh zsh-doc  Duplicate the .bashrc to .zshrc
	cp ~/.bashrc ~/.zshrc  But notice, when using zsh, we should use following command under zshh:
	rake new_post[&amp;quot;Switch To ZSH&amp;quot;] to rake new_post\[&amp;quot;Switch To ZSH&amp;quot;\]  Or, we can use noglob in zsh specified file .zshrc
	alias rake=&#39;noglob rake&#39;  ###Setting More settings on .zshrc:
# Use prompt -l you will see all of the prompt.</description>
    </item>
    
    <item>
      <title>Command and Conquer 2</title>
      <link>http://purplepalmdash.github.io/2014/04/09/command-and-conquer-2/</link>
      <pubDate>Wed, 09 Apr 2014 08:44:23 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/09/command-and-conquer-2/</guid>
      <description>###Position From FullCircle issue 24, to issue 55 ###C&amp;amp;C 11 This chapter tells you how to automatical your tasks using crontab.
Useful commands
	find /var/logs/ -name &amp;quot;*.log&amp;quot; | while read line; do cat &amp;quot;${line}&amp;quot;; done sudo crontab -e root  crontab format:

Example:
*/5 * * * * command Every 5 minutes
00 18 * * sun command Every Sunday at 6
* */2 * * * command Every 2 hours</description>
    </item>
    
    <item>
      <title>Command and Conquer 1</title>
      <link>http://purplepalmdash.github.io/2014/04/08/command-and-conquer-1/</link>
      <pubDate>Tue, 08 Apr 2014 17:19:22 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/08/command-and-conquer-1/</guid>
      <description>###Position: From FullCircle 13, Ended at FullCircle 23.
###C&amp;amp;C 1 Try to run following command:
man man man -k PDF man apropos apropos PDF man --help  Fastly get help from manual, for example, following command will let you dive into regex:
man -k regex re_comp (3) - BSD regex functions re_exec (3) - BSD regex functions regcomp (3) - POSIX regex functions regerror (3) - POSIX regex functions regex (3) - POSIX regex functions regex (7) - POSIX.</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial 6</title>
      <link>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-6/</link>
      <pubDate>Tue, 08 Apr 2014 16:50:56 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-6/</guid>
      <description>###Full Circle C 8 ####Limitation Fibonacci sequence: normally this program limited by the limitation of unsigned long long
#include &amp;lt;stdio.h&amp;gt; typedef unsigned long long fibo_type; #define FIBO_FORMAT &amp;quot;%10llu&amp;quot; void printFibo(fibo_type num) { printf(FIBO_FORMAT, num); } int main() { int num = 0; fibo_type a = 0, b=1, c; printf(&amp;quot;%4d: &amp;quot;, ++num); printFibo(a); printf(&amp;quot;\n&amp;quot;); printf(&amp;quot;%4d: &amp;quot;,++num); printFibo(b); printf(&amp;quot;\n&amp;quot;); c=a+b; while(c&amp;gt;=b) { printf(&amp;quot;%4d: &amp;quot;,++num); printFibo(c); printf(&amp;quot;\n&amp;quot;); a=b; b=c; c=a+b; } printf(&amp;quot;Stopped after %d digits\n&amp;quot;, num); printFibo(c); printf(&amp;quot;\n&amp;quot;); return 0; }  This program will exit when c reach the limitation of definition of unsigned long long ####Using GMP Using gmp to re-write this program:</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial 5</title>
      <link>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-5/</link>
      <pubDate>Tue, 08 Apr 2014 16:17:22 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-5/</guid>
      <description>###Full Circle C 7 ####Example Following is the origin ifstat.c, this program will list the net-interface payloads, and it will print out the net interface statistics every 2 seconds, but notice this program have several bugs:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; typedef unsigned long long ull; int parseDevFile(const char * iface, ull *bRx, ull *pRx, ull *bTx, ull *pTx); void dumpInterfaceUsage(const char * iface); int parseDevFile(const char * iface, ull *bRx, ull *pRx, ull *bTx, ull *pTx) { FILE * fp = NULL; char * line = NULL; unsigned int len = 0; fp = fopen(&amp;quot;/proc/net/dev&amp;quot;, &amp;quot;r&amp;quot;); if(fp == NULL) { return -1; } while(getline(&amp;amp;line, &amp;amp;len, fp) !</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial 4</title>
      <link>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-4/</link>
      <pubDate>Tue, 08 Apr 2014 16:01:06 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-4/</guid>
      <description>###Full Circle C 6 ####Using valgrid for memory check See www.valgrind.org for more information for using the valgrind available tools.
memcheck is the main topic in this chapter.
this tool override libc calls that deal with handling memory. And it will do some bookkeeping. is all memory given back to the system, and is all the allocated memory still reachable?
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; void leak() { char *ptr = malloc(10); printf(&amp;quot;malloc(10) points to: %p\n&amp;quot;, ptr); } int main() { int i = 0; for(i = 0; i&amp;lt;10; i++) { leak(); } char *ptr = malloc(15); printf(&amp;quot;malloc(15) in main: %p\n&amp;quot;, ptr); while(1){} return 0; }  The result shows:</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial 3</title>
      <link>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-3/</link>
      <pubDate>Tue, 08 Apr 2014 09:41:55 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/08/programming-in-c-of-fc-tutorial-3/</guid>
      <description>###Full Circle C 5 ####Callback Use Call Back function for implementing a calculator:
#include &amp;lt;stdio.h&amp;gt; int minus(int a, int b) { return a-b; } int add(int a, int b) { return a+b; } int multiply(int a, int b) { return a*b; } int divide(int a, int b) { return a/b; } typedef int (*mathFun)(int, int); struct operator { char c; mathFun f; }; int main() { struct operator functs[4]; functs[0].c = &#39;-&#39;; functs[0].</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial 2</title>
      <link>http://purplepalmdash.github.io/2014/04/07/programming-in-c-of-fc-tutorial-2/</link>
      <pubDate>Mon, 07 Apr 2014 17:43:26 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/07/programming-in-c-of-fc-tutorial-2/</guid>
      <description>###Full Circle C 3 ####Exercise 1 Collect all the code snippets on this page and turn them into the working program
Pointer:
#include &amp;lt;stdio.h&amp;gt; int main(void) { int anInt = 5; int *anIntPointer = &amp;amp;anInt; printf(&amp;quot;Address: %p Value: %d \n&amp;quot;, &amp;amp;anInt, anInt); printf(&amp;quot;Address of Pointer: %p Address: %p Value: %d\n&amp;quot;, &amp;amp;anIntPointer, anIntPointer, *anIntPointer); printf(&amp;quot;Size of pointer: %d, size of int: %d\n&amp;quot;, sizeof(anIntPointer), sizeof(anInt)); return 0; }  array.c
#include &amp;lt;stdio.h&amp;gt; int main(void) { int i; int anIntArray[5] = {10, 20, 30, 40, 50}; printf(&amp;quot;Address of Array: %p \n&amp;quot;, &amp;amp;anIntArray); printf(&amp;quot;Size of Array: %d\n&amp;quot;, sizeof(anIntArray)); for(i = 0; i&amp;lt;sizeof(anIntArray)/sizeof(int); i++) { printf(&amp;quot;Index: %x Address: %p Value: %d, Value: %d\n&amp;quot;, i, &amp;amp;anIntArray[i], anIntArray[i], *(anIntArray+i)); } return 0; }  string:</description>
    </item>
    
    <item>
      <title>Programming In C New Words</title>
      <link>http://purplepalmdash.github.io/2014/04/07/programming-in-c-new-words/</link>
      <pubDate>Mon, 07 Apr 2014 16:02:47 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/07/programming-in-c-new-words/</guid>
      <description>###Programming In C intermediate: 中级的
hereby: 特此
scary: 恐慌的，提心吊胆的
de facto (法)，事实上的
span: 跨越
interpreted: 可交互的
fanatic: 狂热者
novice: 新手，入门者
concrete: 实际的
prime number: 素数，质数 ternary: 三重的，三元的
intrusive: 侵入的，打扰的
grind: 磨难，磨碎，折磨
confessed: 坦白的
scary: 提心吊胆的，胆小的
apropos: 恰好的
grasp: 掌握
instalment: 分期付款的
gibberish: 乱语，快速而不清楚的话语
condense: 电容器</description>
    </item>
    
    <item>
      <title>Programming in C of FC tutorial</title>
      <link>http://purplepalmdash.github.io/2014/04/07/programming-in-c-of-fc-tutorial/</link>
      <pubDate>Mon, 07 Apr 2014 16:02:08 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/07/programming-in-c-of-fc-tutorial/</guid>
      <description>###Programming In C GCC&amp;rsquo;s funcitionality:
gcc command calls a compiler(which transforms a higher level language into assembler), an assembler translates assembler into object files(machine instructions), and a linker, which combines several object files into an executable.
launchpad.net is a unique collaboration and hosting platform for free software. http://www.launchpad.net.
###Programming In C II Example code:
#include &amp;lt;stdio.h&amp;gt; #define VERSION &amp;quot;1.0&amp;quot; /* * Runs a prime check on a given integer, return * 1 when the integer is a prime number, 0 otherwise */ int isPrime(int prime) { int count = 2; // Catch two special cases if(prime == 1) { return 0; } else if(prime == 2) { return 1; } else { while(prime % count !</description>
    </item>
    
    <item>
      <title>Reading Digest of FC3</title>
      <link>http://purplepalmdash.github.io/2014/04/07/reading-digest-of-fc3/</link>
      <pubDate>Mon, 07 Apr 2014 14:50:58 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/07/reading-digest-of-fc3/</guid>
      <description>###Full Circle 3 1. Page 6 of cn version: DSL(Damn Small Linux), http://www.damnsmalllinux.org, which could be run on 16MB memory&amp;rsquo;s 486 computer, try it.
2. Page</description>
    </item>
    
    <item>
      <title>FC3 New Words</title>
      <link>http://purplepalmdash.github.io/2014/04/07/fc3-new-words/</link>
      <pubDate>Mon, 07 Apr 2014 14:45:26 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/07/fc3-new-words/</guid>
      <description>###Full Circle 3 stunning: 令人惊奇的事物
reveal: 揭露
footrest: 搁脚物
fusion: 融化
compiz+beryl = Compiz Fusion
trawl: 用拖网捕鱼</description>
    </item>
    
    <item>
      <title>Reading Digest of FC2</title>
      <link>http://purplepalmdash.github.io/2014/04/06/reading-digest-of-fc2/</link>
      <pubDate>Sun, 06 Apr 2014 20:41:10 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/06/reading-digest-of-fc2/</guid>
      <description>###Full Circle 2 Things to be done:
1. Page 3, Visit linuxgeekery?
2. Page 4, OpenMOKO, its recent status. Try to visit www.linuxinsider.com
3. Page 5, UbuntuHomeServer? www.ubuntuhomeserver.org
4. Page 16, try VPN, use VPN to reach back home.
5. Page 25, What is GEDCOM?
6. Page 27, What is LDS church?
7. Page 28, Still , try Gramps.
8. Page 29, ipod support on Ubuntu, libgpod. amaroK
9. Page 31, try flock, democracy player, songbird, inkscape</description>
    </item>
    
    <item>
      <title>FC2 New Words</title>
      <link>http://purplepalmdash.github.io/2014/04/06/fc2-new-words/</link>
      <pubDate>Sun, 06 Apr 2014 20:34:16 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/06/fc2-new-words/</guid>
      <description>###Full Circle 2 affiliate: 归纳，使附属
endorse: 签署，赞同，认可
mean-machine: 概念机
editorial: 编辑的，社论的
dose: 剂量
sarcasm: 嘲讽，挖苦
slip: 滑动，slipped，被忽略
niggle: 拘泥小节
darter: 飞奔者，投掷者
infringement: 侵犯，违反
speculation: 投机，推荐，思索，投机买卖
litigation: 诉讼，起诉
barrier: 障碍物
sentiment: 观点，情绪
interoperability: 互用性，互操作性
imminent: 即将到来的，迫近的
Venezuelan: 委内瑞拉
Bolivarian: 玻利瓦尔
KDE: K Desktop Environment
GNOME: GNU Object Model Environment
chunk: 块
prerequisite: 先决条件
wobbling: 颤抖的
eyecandy: 视觉糖果
tray: 任务栏
purge: 移除
decorator: 装饰，装修
nerds: 书呆子
pinkie: 小手指
imprint: 加痕迹的，刻上记号的
tattoo: 纹身，刻花样的</description>
    </item>
    
    <item>
      <title>FC1 reading digest</title>
      <link>http://purplepalmdash.github.io/2014/04/06/fc1-reading-digest/</link>
      <pubDate>Sun, 06 Apr 2014 20:10:15 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/06/fc1-reading-digest/</guid>
      <description>Following is the reading digests for reading the FullCircle 1:
1. Page 5, remember visit www.ubuntutribe.com for recent updates for Ubuntu Tribe Movie.
2. Page 6, OLPC&amp;rsquo;s current status?
3. Page 19, Scribus series.
4. Page 18, MythTV on Ubuntu.
5. Page 29, try GRAMPS, and try to read its sourcecode, and its implementation of the relationships. Its relationship could also be applied to the company structure. And the relationship representation, I mean, its images are well described as the relationship.</description>
    </item>
    
    <item>
      <title>Work At Home</title>
      <link>http://purplepalmdash.github.io/2014/04/06/work-at-home/</link>
      <pubDate>Sun, 06 Apr 2014 16:15:42 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/06/work-at-home/</guid>
      <description>###FullCircle 1 BROCHURE: 小册子
Feisty Fawn: 勇敢的小花鹿
flavor: 情味，风味，推荐
gramps: 爷爷,外公(gramp的复数)
deluge: 洪水，泛滥
roaring: 喧闹的，狂风暴雨的，咆哮
genealogy: 宗谱的、族谱的
speculate: 猜测
spark: 火花，鼓动，求婚，发动，鼓舞
bravo: 好极了
hedgehog: 刺猬
badger: 獾
fawn: 小鹿
edgy: 急躁的
eft: 水蜥，小蜥蜴
metamorphosis: 变形，本质
newt: 蝾螈；笨蛋；新手
species: 物种，种类，物种上的
aquatic: 水生的，水栖的
violate: 违反，侵犯，妨碍，亵渎
patent: 专利
giant: 巨人，伟人
intellectual: 智力的，聪明的，理智的
intellectual property: 知识产权
prosecute: 检举，贯彻，从事，起诉
violation: 违反，妨碍，强奸，违背
problematic: 问题的，有疑问的，不确定的
tribe: 部落
euskara: 巴斯克语
staff: 供给
documentary: 纪录片
cyber: 网络的，计算机的
romantic: 浪漫的</description>
    </item>
    
    <item>
      <title>有关并发(3)</title>
      <link>http://purplepalmdash.github.io/2014/04/04/you-guan-bing-fa-3/</link>
      <pubDate>Fri, 04 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/04/you-guan-bing-fa-3/</guid>
      <description>当一个程序的正确性依赖于一个线程需要在另一个线程到达Y点之前到达它控制流中的x点时，就会发生竞争。竞争是因为程序员假定线程按照某种特殊的轨线穿过执行状态空间，而忘了另一条规则规定的，多线程程序必须对任何可行的轨线都正确工作。
例子如下：
/* * race.c - demonstrates a race condition */ /* $begin race */ #include &amp;quot;csapp.h&amp;quot; #define N 4 void *thread(void *vargp); int main() { pthread_t tid[N]; int i; for (i = 0; i &amp;lt; N; i++) Pthread_create(&amp;amp;tid[i], NULL, thread, &amp;amp;i); //line:conc:race:createthread for (i = 0; i &amp;lt; N; i++) Pthread_join(tid[i], NULL); exit(0); } /* thread routine */ void *thread(void *vargp) { int myid = *((int *)vargp); //line:conc:race:derefarg printf(&amp;quot;Hello from thread %d\n&amp;quot;, myid); return NULL; } /* $end race */  运行结果如下:</description>
    </item>
    
    <item>
      <title>CURL Error in Yaourt</title>
      <link>http://purplepalmdash.github.io/2014/04/03/curl-error-in-yaourt/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/03/curl-error-in-yaourt/</guid>
      <description>When downloading package, the yaourt complains:
	yaourt curl: (60) SSL certificate problem  The solution is via:
Add following lines at the top of the pkg build file:
	DLAGENTS=(&amp;quot;https::/usr/bin/curl -k -o %o %u&amp;quot;)  Then restart the yaourt, you can pass through the building.</description>
    </item>
    
    <item>
      <title>Convert PDF from Markdown</title>
      <link>http://purplepalmdash.github.io/2014/04/03/convert-pdf-from-markdown/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/03/convert-pdf-from-markdown/</guid>
      <description>There are 2 ways for me to convert Markdown into PDF. pandoc Way Simple way for converting:
pandoc a.md -o b.pdf  Convert with embedded font:
pandoc jailbreak.md -o jailbreak.pdf --latex-engine=xelatex -V mainfont=&amp;quot;WenQuanYi Zen Hei&amp;quot;  But if you includes the images, then the format maybe wrong.
RStudio Way Install rstudio in archlinux via:
yaourt -S rstudio-desktop-bin  When installing you will meet curl need ssl certification problem, simply add following line into the pkg make file.</description>
    </item>
    
    <item>
      <title>有关并发(2)</title>
      <link>http://purplepalmdash.github.io/2014/04/02/you-guan-bing-fa-2/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/02/you-guan-bing-fa-2/</guid>
      <description>I/O多路技术可以作为并发事件驱动(event-driver)程序的基础。事件驱动中，流作为某种事件的结果前进。逻辑流可以被转化为状态机。
在服务器中，我们可以用I/O多路复用，借助select函数，检测输入事件的发声。当每个已连接描述符准备好可读时，服务器为相应的状态机执行状态转移。在例子中，就是从描述符读入和写回一个文本行。
###并发事件驱动服务器 首先看代码:
	/* * echoservers.c - A concurrent echo server based on select */ /* $begin echoserversmain */ #include &amp;quot;csapp.h&amp;quot; typedef struct { /* represents a pool of connected descriptors */ //line:conc:echoservers:beginpool int maxfd; /* largest descriptor in read_set */ fd_set read_set; /* set of all active descriptors */ fd_set ready_set; /* subset of descriptors ready for reading */ int nready; /* number of ready descriptors from select */ int maxi; /* highwater index into client array */ int clientfd[FD_SETSIZE]; /* set of active descriptors */ rio_t clientrio[FD_SETSIZE]; /* set of active read buffers */ } pool; //line:conc:echoservers:endpool /* $end echoserversmain */ void init_pool(int listenfd, pool *p); void add_client(int connfd, pool *p); void check_clients(pool *p); /* $begin echoserversmain */ int byte_cnt = 0; /* counts total bytes received by server */ int main(int argc, char **argv) { int listenfd, connfd, port; socklen_t clientlen = sizeof(struct sockaddr_in); struct sockaddr_in clientaddr; static pool pool; if (argc !</description>
    </item>
    
    <item>
      <title>Reading Digests for APP2E</title>
      <link>http://purplepalmdash.github.io/2014/04/01/reading-digests-for-app2e/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/01/reading-digests-for-app2e/</guid>
      <description>###Preparation Download the files from the student&amp;rsquo;s website of app2e via:
	wget http://csapp.cs.cmu.edu/public/ics2/code.tar tar xvf code.tar  Start building the static libs and copy it to system library:
	[Trusty@XXXyyy lib]$ pwd /home/Trusty/code/app2e/practise/lib [Trusty@XXXyyy lib]$ cp /home/Trusty/code/app2e/code/src/csapp.c . [Trusty@XXXyyy lib]$ cp /home/Trusty/code/app2e/code/include/csapp.h . [Trusty@XXXyyy lib]$ gcc -c -o csapp.o csapp.c [Trusty@XXXyyy lib]$ ar rcs libcsapp.a csapp.o [Trusty@XXXyyy lib]$ sudo cp libcsapp.a /usr/lib/ [Trusty@XXXyyy lib]$ sudo cp csapp.h /usr/include/  Now you can directly use libcssapp.</description>
    </item>
    
    <item>
      <title>有关并发</title>
      <link>http://purplepalmdash.github.io/2014/04/01/you-guan-bing-fa/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/04/01/you-guan-bing-fa/</guid>
      <description>app2e中有几个很好的关于并发实现的例子，这里加以详细解析。
###简单的echo服务器 所谓echo服务器就是将客户端的输入简单的通过socket回送回来。代码实现如下：
#include &amp;lt;csapp.h&amp;gt; void echo(int connfd); int main(int argc, char **argv) { int listenfd, connfd, port, clientlen; struct sockaddr_in clientaddr; struct hostent *hp; char *haddrp; if(argc != 2) { fprintf(stderr, &amp;quot;usage: %s &amp;lt;port&amp;gt;\n&amp;quot;, argv[0]); return 1; } port = atoi(argv[1]); listenfd = Open_listenfd(port); while(1) { clientlen = sizeof(clientaddr); connfd = Accept(listenfd, (SA *)&amp;amp;clientaddr, &amp;amp;clientlen); /* determin the domain name and IP address of the client */ hp = Gethostbyaddr((const char*)&amp;amp;clientaddr.</description>
    </item>
    
    <item>
      <title>Remote SSH and VNC Forwarding</title>
      <link>http://purplepalmdash.github.io/2014/03/30/remote-ssh-and-vnc-forwarding/</link>
      <pubDate>Sun, 30 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/30/remote-ssh-and-vnc-forwarding/</guid>
      <description>因为有中转服务器的存在，我们需要建立ssh端口转发，以便一步到位通过中转服务器登录到远程主机。
###ssh转发 建立ssh转发：
	ssh -L 2121:192.168.1xx.xxx.xxx 1xx.xxx.xxx.xxx -l Tomcat  建立以后则可以：
	ssh root@localhost -p 2121  Autossh without entering password:
	cat id_rsa.pub | ssh Tomcat@1xx.xxx.xx.xxx &#39;cat &amp;gt;&amp;gt;.ssh/authorized_keys&#39; # After login on to 170, run: chmod 600 ~/.ssh/authorized_keys  ###VNC设置 配置VNC自动启动:
	vim /etc/init.d/vncserver # 添加： VNCSERVERS=&amp;quot;1:rohc&amp;quot; VNCSERVERARGS[1]=&amp;quot;-geometry 1280x1024&amp;quot; $ chkconfig vncserver on  设置VNC转发：
	ssh -L 2333:192.168.1xx.xxx:5901 1xx.xxx.xxx.xxx -l Tomcat  之后就可以通过:
	vncviewer localhost:5901来访问VNC了。	 </description>
    </item>
    
    <item>
      <title>Configure Davmail and Thunderbird</title>
      <link>http://purplepalmdash.github.io/2014/03/28/configure-davmail-and-thunderbird/</link>
      <pubDate>Fri, 28 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/28/configure-davmail-and-thunderbird/</guid>
      <description>Install davmail via:
$ pacman -S davmail $ davmail &amp;amp; Configure it as:
Now configure the thunderbird:
imap, to the localhost/port/ non-encrypt, Normal passwords
smtp, to the localhost/port/ non-encrypt, Normal passwords
And the usename should be the domain/username.</description>
    </item>
    
    <item>
      <title>Basic ArchLinux Setting(i386)</title>
      <link>http://purplepalmdash.github.io/2014/03/27/basic-archlinux-setting-i386/</link>
      <pubDate>Thu, 27 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/27/basic-archlinux-setting-i386/</guid>
      <description>###ArchLinux Installation First we download the iso from the archlinux.org, then using iso to boot. Partition it into many disks as you like.
Now begin to install:
	$ mount /dev/sda2 /mnt $ swapon /dev/sda1 $ pacstrap /mnt base $ genfstab -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab  Chroot into the newly installed system:
	$ arch-chroot /mnt $ ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime $ vi /etc/locale.gen # enable en_US related $ locale-gen $ vi /etc/mkinitcpio.</description>
    </item>
    
    <item>
      <title>Use Redis For Inter-Communication</title>
      <link>http://purplepalmdash.github.io/2014/03/21/use-redis-for-inter-communication/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/21/use-redis-for-inter-communication/</guid>
      <description>###Play With Redis On ArchLinux, we install redis via:
	$ sudo pacman -S redis  Enalbe and start the redis.service:
	$ sudo systemctl enable redis.service $ sudo systemctl start redis.service $ ps -ef | grep redis redis 7609 1 0 16:03 ? 00:00:00 /usr/bin/redis-server 127.0.0.1:6379  Play with redis:
	[Trusty@DashArch queue]$ redis-cli 127.0.0.1:6379&amp;gt; set name leezk OK 127.0.0.1:6379&amp;gt; get name &amp;quot;leezk&amp;quot; 127.0.0.1:6379&amp;gt; del name (integer) 1 127.0.0.1:6379&amp;gt; exists name (integer) 0 127.</description>
    </item>
    
    <item>
      <title>Re-compile Kernel For Supporting 512M Memory For RaspberryPI In Qemu</title>
      <link>http://purplepalmdash.github.io/2014/03/20/re-compile-kernel-for-supporting-512m-memory-for-raspberrypi-in-qemu/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/20/re-compile-kernel-for-supporting-512m-memory-for-raspberrypi-in-qemu/</guid>
      <description>###Cross Compiler Prepration Get the cross-compiler from github:
	[Trusty@XXXyyy tools]$ pwd /media/y/raspberryPI/tools [Trusty@XXXyyy tools]$ git clone git://github.com/raspberrypi/tools.git  Add the cross-compiler to system path:
	export PATH=&amp;quot;/media/y/raspberryPI/tools/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin:$PATH&amp;quot;  Now input &amp;ldquo;arm-linux-g&amp;rdquo; + tab you will see the cross-compiler is ready.
###Prepare the kernel Get the kernel source from github:
	git clone git://github.com/raspberrypi/linux.git  Now we need to get the patches for supporting the raspberryPI, Torlus has done the patches which could also be downloaded from github:</description>
    </item>
    
    <item>
      <title>Building Qemu Based RaspberryPI Development Environment</title>
      <link>http://purplepalmdash.github.io/2014/03/18/building-qemu-based-raspberrypi-development-environment/</link>
      <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/18/building-qemu-based-raspberrypi-development-environment/</guid>
      <description>First download the latest image from http://www.raspberrypi.org/downloads, mine is Wheezy. And we also have to download the qemu-compatible kernel from following address:
	$ wget http://xecdesign.com/downloads/linux-qemu/kernel-qemu  Change the img file according to http://localhost/blog/2013/09/04/qemu-for-raspberrypi/, follow this tutorial, you have to change the img file size and its content, but we have to do some modifications. The run-qemu file is changed to following: 	#!/bin/bash USERID=$(whoami) # Get name of newly created TAP device; see https://bbs.</description>
    </item>
    
    <item>
      <title>Moving Weather App to BBB</title>
      <link>http://purplepalmdash.github.io/2014/03/18/moving-weather-app-to-bbb/</link>
      <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/18/moving-weather-app-to-bbb/</guid>
      <description>Following is the steps for moving the weather app to BBB(BeagleBone Black)
###Apache Configuration Create the site definition file under /etc/apache2/sites-available: 	$ cp default nanjing  Edit the nanjing file with the following content:
	$ cat nanjing &amp;lt;VirtualHost *:7778&amp;gt; ServerAdmin webmaster@localhost ServerName nanjing ServerAlias nanjing.weather DocumentRoot /srv/www1 &amp;lt;Directory /&amp;gt; Options FollowSymLinks AllowOverride None &amp;lt;/Directory&amp;gt; &amp;lt;Directory /srv/www1/&amp;gt; Options Indexes FollowSymLinks MultiViews AllowOverride None Order allow,deny Allow from all &amp;lt;/Directory&amp;gt; ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/ &amp;lt;Directory &amp;quot;/usr/lib/cgi-bin&amp;quot;&amp;gt; AllowOverride None Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch Order allow,deny Allow from all &amp;lt;/Directory&amp;gt; ErrorLog ${APACHE_LOG_DIR}/error.</description>
    </item>
    
    <item>
      <title>Deploy Weather APP on RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2014/03/17/deploy-weather-app-on-raspberrypi/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/17/deploy-weather-app-on-raspberrypi/</guid>
      <description>Since I enabled the RaspberryPI and disabled the PogoPlug, I have to move the Weather App on RaspberryPI. The main difference lies on the python version, on PogoPlug the default python version is python2.7, while on RaspberryPI it&amp;rsquo;s python3.3, thus I have to use the virtualenvironment of Python. ###Setup the virtualenv Following is the steps for setting up the virtual environment for python2.7 on ArchLinux:
	$ mkdir ~/pyves $ cat &amp;gt;~/.</description>
    </item>
    
    <item>
      <title>Miragating from ASP to Wordpress(2)</title>
      <link>http://purplepalmdash.github.io/2014/03/17/mirageting-from-asp-to-wordpress/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/17/mirageting-from-asp-to-wordpress/</guid>
      <description>Recent days I am doing a data migration from asp website to WordPress, Following is how-to. ###Database First we have to download the whole website content from the server, in my situation, the website contains a database called &amp;ldquo;xxxx.mdb&amp;rdquo;, I downloaded this database and renamed its name to &amp;ldquo;origin.mdb&amp;rdquo;
We can use Microsoft Access for opening this database file, and from the left side panel we can see all of the tables.</description>
    </item>
    
    <item>
      <title>Migrating from ASP to WordPress(1)</title>
      <link>http://purplepalmdash.github.io/2014/03/15/migrating-from-asp-to-wordpress/</link>
      <pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/15/migrating-from-asp-to-wordpress/</guid>
      <description>Recently I will moving an old-style website from ASP to WorldPress, that&amp;rsquo;s a funny work. This series will record the steps for migrating. ###Preparation First I got all of the files which locates in the ASP.NET Server, the database is very simple, it&amp;rsquo;s a mdb file, which could be viewed by Microsoft Access.
The static files and images could also be downloaded from the server, thus the materials is enough for building a whole-new WorldPress based website.</description>
    </item>
    
    <item>
      <title>Trouble-Shotting on Wordpress</title>
      <link>http://purplepalmdash.github.io/2014/03/14/trouble-shotting-on-wordpress/</link>
      <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/14/trouble-shotting-on-wordpress/</guid>
      <description>Since the Wordpress is located at home, there are several problems for dealing with.
###Changeing Apache Listening Port Nanjing Unicom has banned the port 80, thus I have to change the default listening port of apache from 80 to other ports. Following is How-To:
First import an variable in /etc/apache2/envvars:
	export VHOST_PORT_HTTP=7777  Then Change the /etc/apache2/ports.conf: 	# NameVirtualHost *:80 # Listen 80 NameVirtualHost *:${VHOST_PORT_HTTP} Listen ${VHOST_PORT_HTTP}  Finally change the site-enabled:</description>
    </item>
    
    <item>
      <title>Customize Wordpress on BeagleBone Black</title>
      <link>http://purplepalmdash.github.io/2014/03/13/customize-wordpress-on-beaglebone-black/</link>
      <pubDate>Thu, 13 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/13/customize-wordpress-on-beaglebone-black/</guid>
      <description>For Using proxy for Wordpress, we can directly edit the wp-config file:
	$ cat wp-config.php /** Set following for working behind the proxy **/ //define(&#39;WP_PROXY_HOST&#39;, &#39;10.0.0.221&#39;); //define(&#39;WP_PROXY_PORT&#39;, &#39;9001&#39;); #define(&#39;WP_PROXY_BYPASS_HOSTS&#39;,&#39;*.local-intranet&#39;); ## define(&#39;WP_EMMORY_LIMIT&#39;, &#39;64M&#39;);  A trouble shooting, you have to edit the /etc/resolv.conf to change the default dns server, then your wordpress could reach the network and install new plugins or themes. </description>
    </item>
    
    <item>
      <title>Setting Up Wordpress on BeagleBone Black</title>
      <link>http://purplepalmdash.github.io/2014/03/13/setting-up-wordpress-on-beaglebone-black/</link>
      <pubDate>Thu, 13 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/13/setting-up-wordpress-on-beaglebone-black/</guid>
      <description>Since BeagleBone Black&amp;rsquo;s hardware configuration is enough for running LAMP, I decide to run wordpress on it. ###Environment Hardware Configuration:
CPU: Generic AM33XX (Flattened Device Tree)
MEM: MemTotal: 507428 kB
Disk: 1.8&amp;rdquo; USB Disk, 30 GB
I also add 512MB swapfile for swapping partition. Software Configuration:
Kernel: Linux arm 3.8.13-bone30 #1 SMP Mon Nov 18 14:53:22 CST 2013 armv7l GNU/Linux
OS: Debian GNU/Linux 7 \n \l
###LAMP Configuration ####Install Apache</description>
    </item>
    
    <item>
      <title>Migrate BeagleBone Black</title>
      <link>http://purplepalmdash.github.io/2014/03/12/migrate-beaglebone-black/</link>
      <pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/12/migrate-beaglebone-black/</guid>
      <description>Since I want to run wordpress at home, while my RaspberryPI got only 256M RAM, it will be hard to run such a heavy application, I use BeagleBone Black to run it, BeagleBone Black has 512M RAM, which will be enough for run wordpress and etc. ###Setting up NFS Server First I have to setup a nfs server in my LAN, I set it on my RaspberryPI, since I got only 1 USB hub which serves RaspberryPI, a 500GB harddisk has been attached to the USB hub, which is quite enough for serving nfs servers.</description>
    </item>
    
    <item>
      <title>Updating apache configuration</title>
      <link>http://purplepalmdash.github.io/2014/03/11/updating-apache-configuration/</link>
      <pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/11/updating-apache-configuration/</guid>
      <description>Due to ArchLinux&amp;rsquo;s &amp;ldquo;pacman -Syu &amp;ndash;noconfirm&amp;rdquo;, My apache upgraded from 2.2 to 2.4, thus the configuration file won&amp;rsquo;t work for the new version. When using &amp;ldquo;systemctl restart httpd.service&amp;rdquo;, it complains some module won&amp;rsquo;t be loaded. For solving this problem, first make sure you upgraded to the newest version, then go to directory of &amp;ldquo;/etc/httpd/conf&amp;rdquo;, backup your own httpd.conf, then move the httpd.conf.pacnew into httpd.conf, then restart the httpd.service. The configuration of the httpd.</description>
    </item>
    
    <item>
      <title>Linux Container on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/03/07/linux-container-on-archlinux/</link>
      <pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/07/linux-container-on-archlinux/</guid>
      <description>Install lxc on ArchLinux:
	$ sudo pacman -S lxc  After installation, we can check Linux distribution&amp;rsquo;s kernel support for LXC, use lxc-checkconfig to view: 	all of the configurations will be listed here  Create a Ubuntu Server LXC Virtual Computer System: </description>
    </item>
    
    <item>
      <title>Font config in Chromium</title>
      <link>http://purplepalmdash.github.io/2014/03/05/font-config-in-chromium/</link>
      <pubDate>Wed, 05 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/03/05/font-config-in-chromium/</guid>
      <description>When you met chromium font ugly problem, be sure to set the following items:
Settings-&amp;gt;Advanced Settings-&amp;gt; Customize fonts-&amp;gt; Fonts and encoding
Be sure your configuration is listed as the following picture: After the configuration, your chinese fonts will be displayed pretty!</description>
    </item>
    
    <item>
      <title>Things to be done in this weekend</title>
      <link>http://purplepalmdash.github.io/2014/02/28/things-to-be-done-in-this-weekend/</link>
      <pubDate>Fri, 28 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/02/28/things-to-be-done-in-this-weekend/</guid>
      <description>I have to finish the following things:  Python Scripts which fetch back the Baidu disk, finish the exception. RealTime OS on ATMEga328. Python API for fetching back the pm data should be updated. tumx learning. Use markdown for writing the CV. Hard disk cleaning and orgnization. Writing articles for enum feature. Maybe the pelican template should be written.  </description>
    </item>
    
    <item>
      <title>Converting Markdown into PDF under ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/02/26/converting-markdown-into-pdf-under-archlinux/</link>
      <pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/02/26/converting-markdown-into-pdf-under-archlinux/</guid>
      <description>Today I want to convert the webpages which wrote from markdown into PDF format file. Following is the steps for how to convert. Just one command is OK:
	pandoc jailbreak.md -o jailbreak.pdf --latex-engine=xelatex -V mainfont=&amp;quot;WenQuanYi Zen Hei&amp;quot;  But the link will cause the format ugly, then we have to use a template for fixing this, download the template from following URL: https://raw.github.com/tzengyuxio/pages/gh-pages/pandoc/pm-template.latex
Then put it into the same directory, replace the following lines with the fonts which you have installed on your system:</description>
    </item>
    
    <item>
      <title>rip mp3 under ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/02/25/rip-mp3-under-archlinux/</link>
      <pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/02/25/rip-mp3-under-archlinux/</guid>
      <description>First you have to install sound-juicer, by:
	sudo pacman -S sound-juicer  Run &amp;ldquo;sound-juicer&amp;rdquo; will call the sound-juicer out, remember the pulse-audio should be started before the sound-juicer is called.
On start, sound juicer will automatically scan the CD-ROM, and retrieve back the track listing, this will take for a while. Sorry, failed. &amp;hellip;
goobox is only a CD Player
grip is good, just use it for cd mp3 gripping.</description>
    </item>
    
    <item>
      <title>Adding Battery Widget and ACPI Notification in Awesome</title>
      <link>http://purplepalmdash.github.io/2014/02/18/adding-battery-widget-and-acpi-notification-in-awesome/</link>
      <pubDate>Tue, 18 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/02/18/adding-battery-widget-and-acpi-notification-in-awesome/</guid>
      <description>For keeping the &amp;ldquo;Clean Desktop&amp;rdquo;, the cleaner in my office unpluged my laptop&amp;rsquo;s powerline, and the laptop suddenly going to black when I was coding, so I want to write some scripts for calculating the battery&amp;rsquo;s power percentage and got notification when the power of the battery is too low. ###Add an indicator in Awesome Desktop Awesome have a very good 3rd-party library called &amp;ldquo;Vicious&amp;rdquo;, its page is athttp://awesome.naquadah.org/wiki/Vicious, following the guideline for install and configure it.</description>
    </item>
    
    <item>
      <title>Write Local ntp sync server</title>
      <link>http://purplepalmdash.github.io/2014/02/11/write-local-ntp-sync-server/</link>
      <pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/02/11/write-local-ntp-sync-server/</guid>
      <description>Due to frequently query the ntp webserver, the website is banned by the administrator, thus I have to think about another way for updating the local machine&amp;rsquo;s time on OpenWRT.
First, install the coreutils-date: opkg install coreutils-date Add the no-login for local server: cat id_rsa.pub | ssh ddddd@1xx.xxx.xxx.xxx &amp;lsquo;cat &amp;gt;.ssh/authorized_keys&amp;rsquo; Now you can directly call remote command via: ssh ddddd@1xx.xxx.xxx.xxx ls OK, we update the time.sh
#!/bin/sh #echo $http_proxy #echo $https_proxy #date $(wget -O - &amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>Git Management of my repository</title>
      <link>http://purplepalmdash.github.io/2014/01/26/git-management-of-my-repository/</link>
      <pubDate>Sun, 26 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/26/git-management-of-my-repository/</guid>
      <description>For create a new branch in the current repository:
	git branch &amp;lt;name_of_your_new_branch&amp;gt;  Then you can push the branch on github
	git push origin &amp;lt;name_of_your_new_branch&amp;gt;  If you want to switch to your new branch:
	git checkout &amp;lt;name_of_your_new_branch&amp;gt;  See all of the branches via:
	git branch  Also you can add multiply remote url via:
	git remote add &amp;lt;name_of_your_remote&amp;gt; &amp;lt;url&amp;gt;  Push all of your changes</description>
    </item>
    
    <item>
      <title>Set a pelican based blog on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2014/01/26/set-a-pelican-based-blog-on-ubuntu/</link>
      <pubDate>Sun, 26 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/26/set-a-pelican-based-blog-on-ubuntu/</guid>
      <description>Install python-virtualenv:
	sudo apt-get install python-virtualenv  Install the virtualenv Wrapper:
	sudo apt-get install virtualenvwrapper  Now create the directory for holding the virtual environment:
	mkdir ~/pyv  Edit the virtualenv resource file:
	export WORKON_HOME=&amp;quot;/home/Trusty/pyv&amp;quot; export PROJECT_HOME=&amp;quot;/home/Trusty/pyv&amp;quot; #source /usr/bin/virtualenvwrapper.sh  Here we meet the problem, it says cannot find the /usr/bin/virtualenvwrapper.sh, I got the answer from the stackoverflow:
	From /usr/share/doc/virtualenvwrapper/README.Debian: In contrast to the information in /usr/share/doc/virtualenvwrapper/en/html/index.</description>
    </item>
    
    <item>
      <title>Update Qzone(2)</title>
      <link>http://purplepalmdash.github.io/2014/01/24/update-qzone-2/</link>
      <pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/24/update-qzone-2/</guid>
      <description>Install pinyin for we want to use it for generate the title:
	$ pip install pinyin  Write a new post:
	$ python config_blog.py 迁移博客成功 content/posts/2014/01/2014_01_24_qianyibokechenggong.md  Chinese codec:
	cat ~/.bashrc export LANG=&amp;quot;zh_CN.UTF-8&amp;quot; Or &amp;quot;en_US.UTF-8&amp;quot; export LC_ALL=&amp;quot;zh_CN.UTF-8&amp;quot; Or &amp;quot;en_US.UTF-8&amp;quot;  Write the blog:
	vim content/posts/2014/01/2014_01_24_qianyibokechenggong.md  Install BeautifulSoup
	pip install BeautifulSoup  </description>
    </item>
    
    <item>
      <title>Create a new user for updating qzone</title>
      <link>http://purplepalmdash.github.io/2014/01/23/create-a-new-user-for-updating-qzone/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/23/create-a-new-user-for-updating-qzone/</guid>
      <description>###Backgroud Because github only allow one user to login(trusted key), the error message is listed as &amp;ldquo;Error: Key already in use&amp;rdquo;, I have to try another method for updating the qzone.
First I have created a new user on github, and created the corresponding repositories, now I have to create the user on my own machine, named &amp;ldquo;qzone&amp;rdquo; for only updating the repository.
###Create the user Use following command for create a new user:</description>
    </item>
    
    <item>
      <title>Using pelican for blogging(1)</title>
      <link>http://purplepalmdash.github.io/2014/01/20/using-pelican-for-blogging-1/</link>
      <pubDate>Mon, 20 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/20/using-pelican-for-blogging-1/</guid>
      <description>Getting Start Install pelican via pip: pip install pelican Getting started Manual: http://docs.getpelican.com/en/3.1.1/getting_started.html, and the command is listed as following:
	# Make sure your pelican is the newest $ pip install --upgrade pelican $ mkdir ~/code/yoursitename $ cd ~/code/yoursitename $ pelican-quickstart  The &amp;ldquo;pelican-quickstart&amp;rdquo; will ask you some questions, after answer all of the questions, you will have a start-up point for the website.
If your content is OK, run</description>
    </item>
    
    <item>
      <title>Moving blogs from Qzone to My Own website</title>
      <link>http://purplepalmdash.github.io/2014/01/13/moving-blogs-from-qzone-to-my-own-website/</link>
      <pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/13/moving-blogs-from-qzone-to-my-own-website/</guid>
      <description>Since I&amp;rsquo;ve wrote blog for more than 7 year, I decide to use my own website to hold all of the articles. So I will start a task for transferring all of the written articles to a new website. Following will be the steps for transferring.
###Which blog system I will use I decide to use static webiste, since the speed is much more faster than the database-based website, and it doesn&amp;rsquo;t have complicated configuration.</description>
    </item>
    
    <item>
      <title>Update blog from Home Computer</title>
      <link>http://purplepalmdash.github.io/2014/01/12/update-blog-from-home-computer/</link>
      <pubDate>Sun, 12 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/12/update-blog-from-home-computer/</guid>
      <description>First , clone th repository to your home computer via:
	git clone git@github.com/your_name/Your_Repository  Second , configure everything:
	sudo gem install bundler rbenv rehash bundle install rake setup_github_pages  Here you will be asked to provide your accounts, enter it and continue.
Third, do changing the content and deploy .
	rake generate git add . git commit -am &amp;quot;From Home computer&amp;quot; git push origin master rake deploy  In Company computer, run:</description>
    </item>
    
    <item>
      <title>HMC5883L on RaspberryPI(2)</title>
      <link>http://purplepalmdash.github.io/2014/01/09/hmc5883l-on-raspberrypi-2/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/09/hmc5883l-on-raspberrypi-2/</guid>
      <description>Here are some explanation on the code in &amp;ldquo;HMC5883L on RaspberryPI&amp;rdquo;.
The i2clibraries calls the &amp;ldquo;quick2wire&amp;rdquo; library.
	root@rasp:~/code/i2c/pythoncode# grep &amp;quot;quick2wire&amp;quot; ./ -r ./i2clibraries/i2c.py:from quick2wire.i2c import I2CMaster, writing_bytes, reading Binary file ./i2clibraries/__pycache__/i2c.cpython-32.pyc matches Binary file ./i2clibraries/i2c.pyc matches  So we have to include QUICK2WIRE_API_HOME into the PYTHONPATH:
	export QUICK2WIRE_API_HOME=~/code/i2c/quick2wire-python-api/ export PYTHONPATH=$PYTHONPATH:$QUICK2WIRE_API_HOME  So notice you have to specify the correct directory which contains the corresponding code.
	root@rasp:~/code/i2c# tree -d .</description>
    </item>
    
    <item>
      <title>Install parole in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2014/01/05/install-parole-in-archlinux/</link>
      <pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/05/install-parole-in-archlinux/</guid>
      <description>Just 2 steps:
	$ sudo pacman -S parole $ sudo pacman -S gst-libav gst-plugins-bad gst-plugins-ugly gst-plugins-base xulrunner  </description>
    </item>
    
    <item>
      <title>How to manage wordpress based CMS</title>
      <link>http://purplepalmdash.github.io/2014/01/01/how-to-manage-wordpress-based-cms/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2014/01/01/how-to-manage-wordpress-based-cms/</guid>
      <description>What is CMS?
Content Management System.
###登入管理 Click &amp;ldquo;登入管理&amp;rdquo;
###增加新页面 页面会出现在导航栏中，如下：
增加方法：
开始撰写新页面：
点”发布”，可以看到新增加的页面
###如何在父页面下增加新页面 我们需要在这个下拉列表中增加一个“”新增页面“”的页面
新建-&amp;gt; 页面，到撰写窗口
这时候可以看到：
###编辑box内容 Box是该模板使用的小插件，如果需要定制的话，可以依下面步骤进行.
如何自定义Box? 后台点击ifeatures选项：
在出现的页面中点击博客-&amp;gt;盒子精简版：
Wordpress是一个很强大的内容管理系统，更多的特性可以在后台直接摸索出来，例如，添加博客，添加视频等等。Don&amp;rsquo;t afraid of it, Just Enjoy it.</description>
    </item>
    
    <item>
      <title>Add video in Octopress</title>
      <link>http://purplepalmdash.github.io/2013/12/30/add-video-in-octopress/</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/30/add-video-in-octopress/</guid>
      <description>###Add mp4 videos From the link http://octopress.org/docs/blogging/plugins/ we can easily see HTML5 Video has been suported by octopress by-default, we add the video following this format. The details, click the upper link .
###Add Youtube Links Download the plugin from https://github.com/manojlds/octopress-plugins, copy it under the folder plugins.
	\{\% youtube 3dNDUNYT1fY \%\}  Or specify its size via:
	\{\% youtube 3dNDUNYT1fY 640 480 \%\}  ###Add Youku Links First download the plugin from https://gist.</description>
    </item>
    
    <item>
      <title>Testing for Video</title>
      <link>http://purplepalmdash.github.io/2013/12/30/testing-for-video/</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/30/testing-for-video/</guid>
      <description>This is like {% video http://s3.imathis.com/video/zero-to-fancy-buttons.mp4 640 320 http://s3.imathis.com/video/zero-to-fancy-buttons.png %}
Youtube: {% youtube 3dNDUNYT1fY %}
Youku:
{% youku XMjIyNDg0NTcy 480 320 %}</description>
    </item>
    
    <item>
      <title>Use RaspberryPI as a file server</title>
      <link>http://purplepalmdash.github.io/2013/12/30/use-raspberrypi-as-a-file-server/</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/30/use-raspberrypi-as-a-file-server/</guid>
      <description>###Preparation Mount the partition automatically, add following lines into the /etc/fstab:
	/dev/sda3	/media/ntfs ntfs-3g permissions,locale=en_US.utf8 0	2  I decide to use samba to share the files, so I have to install samba
	apt-get install samba  The samba server will start automatically, but we have to configure it to adapte to our situation.
Add the configuration to the samba config file:
	/etc/samba/smb.conf [raspshare] comment = raspberry PI Share path = /media/ntfs valid users = Trusty public = no writable = yes printable = no create mask = 0765  Restart the samba server</description>
    </item>
    
    <item>
      <title>I2C between raspberryPI and Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/29/i2c-between-raspberrypi-and-arduino/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/i2c-between-raspberrypi-and-arduino/</guid>
      <description>###连线 Arduino I2C 连线:
RaspberryPI I2C 连线:
连线图：
	RPI Arduino (Uno/Duemillanove) -------------------------------------------- GPIO 0 (SDA) &amp;lt;--&amp;gt; Pin 4 (SDA) GPIO 1 (SCL) &amp;lt;--&amp;gt; Pin 5 (SCL) Ground &amp;lt;--&amp;gt; Ground  ###Arduino端代码
#include &amp;lt;Wire.h&amp;gt; #define SLAVE_ADDRESS 0x04 int number = 0; int state = 0; void setup() { pinMode(13, OUTPUT); Serial.begin(9600); // start serial for output // initialize i2c as slave Wire.begin(SLAVE_ADDRESS); // define callbacks for i2c communication Wire.onReceive(receiveData); Wire.onRequest(sendData); Serial.</description>
    </item>
    
    <item>
      <title>Little tricky on SPI</title>
      <link>http://purplepalmdash.github.io/2013/12/29/little-tricky-on-spi/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/little-tricky-on-spi/</guid>
      <description>接着上一个日志来，玩一个小tricky，通过SPI总线自己想输入的字符。
主机端，添加下列头文件 #include  这使得可以使用strcpy等函数。
重写transfer()函数
static void transfer_mine(int fd, char *buf) { int ret; uint8_t tx[140]; int len = strlen(buf)+1; memcpy(tx, buf, strlen(buf)+1); tx[strlen(tx)] = &#39;\n&#39;; uint8_t rx[ARRAY_SIZE(tx)] = {0, }; struct spi_ioc_transfer tr = { .tx_buf = (unsigned long)tx, .rx_buf = (unsigned long)rx, //.len = ARRAY_SIZE(tx), .len = len, .delay_usecs = delay, .speed_hz = speed, .bits_per_word = bits, }; ret = ioctl(fd, SPI_IOC_MESSAGE(1), &amp;amp;tr); if (ret &amp;lt; 1) pabort(&amp;quot;can&#39;t send spi message&amp;quot;); }  在main()函数里，改写调用的方式：</description>
    </item>
    
    <item>
      <title>SPI连接raspberryPI和Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/29/spilian-jie-raspberrypihe-arduino/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/29/spilian-jie-raspberrypihe-arduino/</guid>
      <description>下面是使用SPI在RaspberryPI和Arduino Nano w之间进行双机通信的一个例子。借助它可以很好的理解SPI的工作原理。
###背景知识 RaspberryPI GPIO布局图：
从图中我们可以看到，RaspberryPI上与SPI通信相关的主要是GPIO 10（MOSI), GPIO 9(MISO)和GPIO 11(SCLK).
Arduino布局图：
SPI: 10 (SS), 11 (MOSI), 12 (MISO), 13 (SCK). These pins support SPI communication using the SPI library. SS代表Slava Select.
事实上我们要使用的仅仅是11/12/13三个口而已。
###连线图 如下图进行连线，简单来说，R(10 MOSI)-&amp;gt;A(12 MISO), R(9, MISO)-&amp;gt;A(11, MOSI), R(11, SCLK) -&amp;gt;A(13, SCK)：
###Arduino端程序
// Written by Nick Gammon // February 2011 /** * Send arbitrary number of bits at whatever clock rate (tested at 500 KHZ and 500 HZ).</description>
    </item>
    
    <item>
      <title>TSC3200 on Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/28/tsc3200-on-arduino/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/28/tsc3200-on-arduino/</guid>
      <description>###Introduction The detailed information could be seen as in :
http://www.eefocus.com/zhang700309/blog/13-08/296390_6c438.html
###Wiring: Notice we use the interrupt 1.
###Code
#include &amp;lt;TimerOne.h&amp;gt; #define S0 6 // Please notice the Pin&#39;s define #define S1 5 #define S2 4 #define S3 2 #define OUT 3 int g_count = 0; // count the frequecy int g_array[3]; // store the RGB value int g_flag = 0; // filter of RGB queue float g_SF[3]; // save the RGB Scale factor // Init TSC230 and setting Frequency.</description>
    </item>
    
    <item>
      <title>使用超声波传感器控制LED</title>
      <link>http://purplepalmdash.github.io/2013/12/28/shi-yong-chao-sheng-bo-chuan-gan-qi-kong-zhi-led/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/28/shi-yong-chao-sheng-bo-chuan-gan-qi-kong-zhi-led/</guid>
      <description>###Wiring Pictures The UltraSound sensor is like following picture, it only sold at 8RMB on Taobao:
The Wiring Pictures is listed as following:
###Working Principle Trigger Pin will emit the ultra-sound, then Echo Pin will receive the reflected ultra-sound. Calculate its fleeting time then plus the speed of sound we can get the distance.
So the working method is:
a. Trig pin emmit a high signal out.
b. Echo pin will wait for receiving the high signal.</description>
    </item>
    
    <item>
      <title>HC-SR501人体感应模块 &amp;amp; Arduino</title>
      <link>http://purplepalmdash.github.io/2013/12/27/hc-sr501ren-ti-gan-ying-mo-kuai-and-arduino/</link>
      <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/27/hc-sr501ren-ti-gan-ying-mo-kuai-and-arduino/</guid>
      <description>###连线图 led &amp;ndash; pin 6, SR501 pin 7.
###代码
//红外感应 //信号接 7 端口 //LED will be 6 port int sigpin = 7; int ledpin = 6; void setup() { pinMode(sigpin, INPUT); pinMode(ledpin, OUTPUT); digitalWrite(ledpin, HIGH); Serial.begin(9600); // 打开串口，设置波特率为9600 bps } int storefun = 0; int ledstatus = HIGH; void loop() { int in = digitalRead(sigpin); //Change the led ON/OFF accoriding to the status sensor if(in != storefun) { Serial.println(&amp;quot;They are not equal!</description>
    </item>
    
    <item>
      <title>ArchLinux中文化问题</title>
      <link>http://purplepalmdash.github.io/2013/12/25/archlinuxzhong-wen-hua-wen-ti/</link>
      <pubDate>Wed, 25 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/25/archlinuxzhong-wen-hua-wen-ti/</guid>
      <description>本文将涉及到ArchLinux下中文化问题，主要是关于终端字符和vim中代码格式的细调工作。
###Vim 配置 ####Colorscheme配置：
下载几个美观的主题： solarized: https://github.com/altercation/vim-colors-solarized
molokai: https://github.com/tomasr/molokai
phd: http://www.vim.org/scripts/script.php?script_id=3139
将其解压开后，拷贝到~/.vim/colors，然后修改~/.vimrc:
	set background=dark &amp;quot;set background=bright &amp;quot;colorscheme solarized colorscheme molokai  ####Vim字体配置：
Consolas是一种专门为编程人员设计的字体，这一字体的特性是所有字母、数字与符号均能非常容易辨认，而且所有字符都具有相同的宽度，让编人员看着更舒服。但我们用Consolas在显示程序源码时，不可避免要使用中文注释。而Consolas不支持中文，因此中文默认是使用宋体显示的。当使用10点大小的时候，中文就模糊不清了。如果采用斜体显示注释的话，宋体就更加显得支离破碎。
在中文显示上，雅黑字体确实不错，但雅黑不是等宽字体，不能用于源码显示。
使用字体工具将雅黑和Consolas集成在一起后，程序员就可以在Linux环境下的源码中看到优秀的中文显示效果。
下载地址在 :
http://dl.dbank.com/c01bo3a1eo
https://code.google.com/p/uigroupcode/downloads/detail?name=YaHei.Consolas.1.12.zip&amp;amp;can=2&amp;amp;q=
解压缩后，运行以下命令：
	sudo mkdir -p /usr/share/fonts/vista sudo cp YaHei.Consolas.1.12.ttf /usr/share/fonts/vista/  更改权限:
	sudo chmod 644 /usr/share/fonts/vista/*.ttf  安装字体:
	cd /usr/share/fonts/vista/ sudo mkfontscale sudo mkfontdir sudo fc-cache -fv  ###终端字体配置 更改终端模拟器的字体为Yahei Consolas Hybrid即可 gvim中字体设置：
	set guifont=YaHei\ Consolas\ Hybrid\ 11.</description>
    </item>
    
    <item>
      <title>Setup Wordpress on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2013/12/23/setup-wordpress-on-ubuntu/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/23/setup-wordpress-on-ubuntu/</guid>
      <description>###Material Just some items on how to setup a wordpress website on Ubuntu12.04 and Ubuntu13.04.
The tutorial for setting up wordpress on Ubuntu12.04 is located at:
https://www.digitalocean.com/community/articles/how-to-install-wordpress-on-ubuntu-12-04
And a tutorial for setting up LAMP server on Ubuntu12.04 is located at:
https://www.digitalocean.com/community/articles/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu
###TroubleShotting I encountered some problem during setup. Following is the solutions for them.
####Delete the previous installed wordpress
	# mysqladmin -uXXXX -pXXXXXXXX drop wordpress Do you really want to drop the &#39;wordpress&#39; database [y/N] y  Then you can Re-Create the database.</description>
    </item>
    
    <item>
      <title>Try nanoc</title>
      <link>http://purplepalmdash.github.io/2013/12/21/try-nanoc/</link>
      <pubDate>Sat, 21 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/21/try-nanoc/</guid>
      <description>nanoc is a static site generator, fit for building anything from a small personal blog to a large corporate web site.
###Installation Simply do following:
	mkdir nanoc cd nanoc/ gem install nanoc  Then create a tutorial site
	nanoc create-site tutorial  Compile the site out
	nanoc compile  Before your preview, install adsf
	gem install adsf  Now you can preview the website
	nanoc view  </description>
    </item>
    
    <item>
      <title>Using ssh socket proxy under windows</title>
      <link>http://purplepalmdash.github.io/2013/12/20/using-ssh-socket-proxy-under-windows/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/20/using-ssh-socket-proxy-under-windows/</guid>
      <description>1. Download Putty, it&amp;rsquo;s a green software, click it and then you got its configuration window.
2. Configure the ssh Tunnel via following
3. Disable the Command line interface.
4. Now using the configuration you can logon to remote server.
5. Now you can use socket proxy via &amp;ldquo;127.0.0.1&amp;rdquo;, port is 1395.</description>
    </item>
    
    <item>
      <title>Bluetooth Headset on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/12/19/bluetooth-headset-on-archlinux/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/19/bluetooth-headset-on-archlinux/</guid>
      <description>After 4 days struggling, I finally make bluetooth headset working on my ArchLinux. Following is the detailed how-to which shows how to enable bluetooth playing.
###Software Installation Currently blueman is still the best bluetooth management software, we can install it via:
	$ yaourt blueman 1 aur/blueman-bzr 726-2 [installed] (38) GTK+ bluetooth management utility  Then we have to install bluez related items:
	$ pacman -S bluez-utils bluez-libs python2-pybluez $ yaourt -S bluez4 $ yaourt pulseaudio-bluez4  ###Bluetooth Configuration First make sure your bluetooth service is enabled.</description>
    </item>
    
    <item>
      <title>Enable Bluetooth Headset on Jogger(2)</title>
      <link>http://purplepalmdash.github.io/2013/12/19/enable-bluetooth-headset-on-jogger-2/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/19/enable-bluetooth-headset-on-jogger-2/</guid>
      <description>Since trying to enable BT headset failed on Ubuntu12.04 Server, I decide to try xubuntu version. So I download the image from http://joggler.exotica.org.uk/ubuntu/, then extract it to get the image.
###Get the filesystem Use fdisk to get the img layout
	root@joggler:/media/nfs/xubuntu# fdisk -l xubuntu_12.04-v1.4-ext4.img Device Boot Start End Blocks Id System xubuntu_12.04-v1.4-ext4.img1 * 2048 126975 62464 e W95 FAT16 (LBA) xubuntu_12.04-v1.4-ext4.img2 126976 626687 249856 82 Linux swap / Solaris xubuntu_12.</description>
    </item>
    
    <item>
      <title>Enable Bluetooth headset on Joggler</title>
      <link>http://purplepalmdash.github.io/2013/12/18/enable-bluetooth-headset-on-joggler/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/18/enable-bluetooth-headset-on-joggler/</guid>
      <description>###TroubleShooting on alsa Current user canot use alsamixer
	Trusty@joggler:~$ alsamixer cannot open mixer: No such file or directory  This is because the current user is not in the &amp;ldquo;audio&amp;rdquo; group, use root to add current user into &amp;ldquo;audio&amp;rdquo; group:
	root@joggler:~# usermod -a -G audio Trusty  Unmute the channel:
	$ amixer sset Master unmute Simple mixer control &#39;Master&#39;,0 Capabilities: pvolume pswitch penum Playback channels: Front Left - Front Right Limits: Playback 0 - 31 Mono: Front Left: Playback 24 [77%] [-10.</description>
    </item>
    
    <item>
      <title>Fastly search package infos in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/12/17/fastly-search-package-infos-in-archlinux/</link>
      <pubDate>Tue, 17 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/17/fastly-search-package-infos-in-archlinux/</guid>
      <description>You can use pkgfile to view the metadata of the pacman files:
	pacman -Ss pkgfile extra/pkgfile 11-1 [installed] a pacman .files metadata explorer  Usage:
	pkgfile ls  Then you will see &amp;ldquo;ls&amp;rdquo; belogns to which package.</description>
    </item>
    
    <item>
      <title>Alsa Configuration(Adding bluetooth headset</title>
      <link>http://purplepalmdash.github.io/2013/12/16/alsa-configuration-adding-bluetooth-headset/</link>
      <pubDate>Mon, 16 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/16/alsa-configuration-adding-bluetooth-headset/</guid>
      <description>After upgrading 3.12.5, my archlinux dropped its alsa configuration, also I bought a new bluetooth headset MW600, following is the steps for catching back the alsa sound, and let bluetooth headset working together with alsa.
###Fetching back sound Found out the hadware
	$ sudo alsactl init Found hardware: &amp;quot;HDA-Intel&amp;quot; &amp;quot;Intel CougarPoint HDMI&amp;quot; &amp;quot;HDA:111d7605,103c3587,00100105 HDA:11c11040,103c3066,00100200 HDA:80862805,80860101,00100000&amp;quot; &amp;quot;0x103c&amp;quot; &amp;quot;0x161c&amp;quot; Hardware is initialized using a generic method  The acl should be reset via:</description>
    </item>
    
    <item>
      <title>Bluetooth headset in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/12/14/bluetooth-headset-in-archlinux/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/14/bluetooth-headset-in-archlinux/</guid>
      <description>I have a Nokia bluetooth headset BH-105,and a bluetooth usb dongle. And I want to connect them together. Following are the steps.
###Software Preparation On ArchLinux, Install &amp;ldquo;bluez&amp;rdquo; and &amp;ldquo;bluez-utils&amp;rdquo;
	$ sudo pacman -S bluez bluez-utils $ sudo systemctl start bluetooth &amp;amp;&amp;amp; sudo systemctl enable bluetooth  </description>
    </item>
    
    <item>
      <title>Deploy your octopress website on heroku</title>
      <link>http://purplepalmdash.github.io/2013/12/14/deploy-your-octopress-website-on-heroku/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/14/deploy-your-octopress-website-on-heroku/</guid>
      <description>I&amp;rsquo;ve been using octopress for writing blogs for nearly half of a year. The website is hosted on my family computer, which is a arm-based machine, runs Debian Linux. But such machine can sometimes be powered off by accident. That&amp;rsquo;s while I want to put my webpages onto a stable server. Most of the people put their website on github, but github may be banned in china, so I choose heroku, I think it may be much more safer.</description>
    </item>
    
    <item>
      <title>Write Blogger in Linux</title>
      <link>http://purplepalmdash.github.io/2013/12/13/write-blogger-in-linux/</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/13/write-blogger-in-linux/</guid>
      <description>###blogtk Install it via &amp;ldquo;yaourt -S blogtk&amp;rdquo;</description>
    </item>
    
    <item>
      <title>ssh with no password for github</title>
      <link>http://purplepalmdash.github.io/2013/12/13/ssh-with-no-password-for-github/</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/13/ssh-with-no-password-for-github/</guid>
      <description>###Github Account Setting Steps for settingup in your github accounting:
Go to your Settings.
Click &amp;ldquo;SSH Keys&amp;rdquo; in the left sidebar
Click &amp;ldquo;Add SSH key&amp;rdquo;
Paste your key into the &amp;ldquo;Key&amp;rdquo; field
Click &amp;ldquo;Add key&amp;rdquo;
Confirm the action by entering your GitHub password
The public key could be got via:
	$ xclip -sel clip &amp;lt; ~/.ssh/id_rsa.pub  Then see if you were authorized by github:
	[Trusty@XXXyyy debian_octopress]$ ssh -T git@github.</description>
    </item>
    
    <item>
      <title>KALI Linux in Qemu</title>
      <link>http://purplepalmdash.github.io/2013/12/12/kali-linux-in-qemu/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/12/kali-linux-in-qemu/</guid>
      <description>Download the iso from kali websitehttp://www.kali.org/downloads/:
	$ wget http://cdimage.kali.org/kali-images/kali-1.0.5/kali-linux-1.0.5-i386.iso  Create qemu img file:
	$ qemu-img create -f qcow2 kali.qcow2 30G Formatting &#39;kali.qcow2&#39;, fmt=qcow2 size=32212254720 encryption=off cluster_size=65536 lazy_refcounts=off Run installation. Here we use the run-qemu script which has been generated before under the same directory: [Trusty@DashArch kali]$ ./run-qemu -hda ./kali.qcow2 -boot d -cdrom /media/nfs/iso/kali-linux-1.0.5-i386.iso -m 1024 -enable-kvm -usb  Choose &amp;ldquo;Graphic Install&amp;rdquo; because currently we are not familiar with this brand new distribution.</description>
    </item>
    
    <item>
      <title>NTP in LAN based on OPENWRT</title>
      <link>http://purplepalmdash.github.io/2013/12/12/ntp-in-lan-based-on-openwrt/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/12/ntp-in-lan-based-on-openwrt/</guid>
      <description>###Package Installation Disable the system default ntp server and install ntpd, this ntpd is the real ntpd package, not busybox-ntpd
	opkg update opkg install ntpd /etc/init.d/sysntpd disable /etc/init.d/ntpd enable /etc/init.d/ntpd start netstat -l | grep ntp  The client installation, on debian:
	apt-get install ntp  ###Server Configuration Comment all of the possible reference server, use local time source.
	root@OpenWrt:~# cat /etc/ntp.conf # use a random selection of 4 public stratum 2 servers # see http://twiki.</description>
    </item>
    
    <item>
      <title>Western Digital Green Disk on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2013/12/12/western-digits-green-disk-on-ubuntu/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/12/western-digits-green-disk-on-ubuntu/</guid>
      <description>The WD20EARS (and other sizes include 1.0 and 1.5 TB driver in the series) will attempt to park the read heads once every 8 seconds FOR THE LIFE OF THE HDD which is just horrible! To see if you are affected use the smartctl command (part of smartmontools). If the last column changes rapidly, this section applies to your drive.
	# smartctl /dev/sdb -a | grep Load_Cycle 193 Load_Cycle_Count 0x0032 001 001 000 Old_age Always - 597115	 We have to disable this feature.</description>
    </item>
    
    <item>
      <title>BBBlack编译脚本解析</title>
      <link>http://purplepalmdash.github.io/2013/12/11/bbblackbian-yi-jiao-ben-jie-xi/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/11/bbblackbian-yi-jiao-ben-jie-xi/</guid>
      <description>###Preparation Download the &amp;ldquo;linux-dev&amp;rdquo; repository from github:
	git clone git://github.com/RobertCNelson/linux-dev.git  View the downloaded packages:
	[Trusty@XXXyyy mykernel]$ du -hs linux-dev/ 19M	linux-dev/ [Trusty@XXXyyy linux-dev]$ ls build_deb.sh build_kernel.sh build_mainline.sh LICENSE patches patch.sh README repo_maintenance scripts system.sh.sample tools version.sh  Switch to the 3.12 Branch:
	git checkout origin/am33x-v3.12 -b tmp [Trusty@XXXyyy linux-dev]$ ls build_deb.sh build_kernel.sh LICENSE patches patch.sh README repo_maintenance scripts system.sh.sample tools version.sh  ###Walk by lines Since we call .</description>
    </item>
    
    <item>
      <title>Debian on NFS</title>
      <link>http://purplepalmdash.github.io/2013/12/11/debian-on-nfs/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/11/debian-on-nfs/</guid>
      <description>Install some packages:
	$ apt-get install usbutils alsa-base  Use lsusb to view the installed usb equipments:
	Bus 001 Device 006: ID 0e5c:6441 Bitland Information Technology Co., Ltd C-Media Sound Device  Install modules to the filesystem, since our newly-installed filesytem doesn&amp;rsquo;t contains the necessary modules:
	$ pwd /media/x/bbBlack/38/linux-dev/deploy  Copy the firmware tar package and modules tar package to the nfs root directory
	$ tar xzvf 3.</description>
    </item>
    
    <item>
      <title>NFS of beaglebone</title>
      <link>http://purplepalmdash.github.io/2013/12/11/nfs-of-beaglebone/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/11/nfs-of-beaglebone/</guid>
      <description>###Serial Preparation The serial port image is as following: ###Failure information The bootup failure information is listed as following:
	Running uenvcmd ... reading zImage 3345240 bytes read in 383 ms (8.3 MiB/s) reading /dtbs/am335x-boneblack.dtb 24884 bytes read in 10 ms (2.4 MiB/s) Starting kernel ... Uncompressing Linux... done, booting the kernel. Error: unrecognized/unsupported machine ID (r1 = 0x00000e05). Available machine support: ID (hex) NAME ffffffff Generic OMAP4 (Flattened Device Tree) ffffffff Generic AM33XX (Flattened Device Tree) ffffffff Generic OMAP3-GP (Flattened Device Tree) ffffffff Generic OMAP3 (Flattened Device Tree) 0000060a OMAP3 Beagle Board 00000a9d IGEP OMAP3 module 00000928 IGEP v2 board 00000ae7 OMAP4 Panda board Please check your kernel config and/or bootloader.</description>
    </item>
    
    <item>
      <title>BeagleBone boot from NFS</title>
      <link>http://purplepalmdash.github.io/2013/12/10/beaglebone-boot-from-nfs/</link>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/10/beaglebone-boot-from-nfs/</guid>
      <description>###Building Preparation Create a new directory for stroing all of the items related to beaglebone.
	cd /media/nfs/ mkdir beaglebone cd beaglebone/  Download the cross-compiler from linaro toolchain binary website. And add it to the environment variables.
	wget -c https://launchpad.net/linaro-toolchain-binaries/trunk/2013.10/+download/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz tar xJf gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz export CC=`pwd`/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux/bin/arm-linux-gnueabihf- # Test the cross-compiler ${CC}gcc --version  Checkout the U-boot:
	git clone git://git.denx.de/u-boot.git cd u-boot/ git checkout v2013.10 -b tmp  Patching U-boot:</description>
    </item>
    
    <item>
      <title>Enable audio in BeagleBone Black</title>
      <link>http://purplepalmdash.github.io/2013/12/09/enable-audio-in-beaglebone-black/</link>
      <pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/09/enable-audio-in-beaglebone-black/</guid>
      <description>The usb sound card which I want to enable is a legend hub.
###Package Installation Install necessary packages:
	$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade $ sudo apt-get install vim mplayer alsa-base  ###Hardware Configuration View the sound card information:
	root@arm:~# lsusb Bus 001 Device 029: ID 0424:2507 Standard Microsystems Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.</description>
    </item>
    
    <item>
      <title>Listening Pandora under linux</title>
      <link>http://purplepalmdash.github.io/2013/12/09/listening-pandora-under-linux/</link>
      <pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/09/listening-pandora-under-linux/</guid>
      <description>An script named &amp;ldquo;piandbar&amp;rdquo; could let you listen to pandora music in CLI:
	$ yaourt -S pianobar  Or in ubuntu:
	$ apt-get install pianobar  The default configuration file could be found under ~/.config/pianobar:
	$ cat ~/.config/pianobar/config user = xxx@xxx.com password = xxxxxx tls_fingerprint =  The most cool functionality is it could automatically &amp;ldquo;remember&amp;rdquo; all of the played songs.
man pianobar could get more items, for example key-binding, etc.</description>
    </item>
    
    <item>
      <title>raspberryPI GPIO Programming on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/12/08/raspberrypi-gpio-programming-on-archlinux/</link>
      <pubDate>Sun, 08 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/08/raspberrypi-gpio-programming-on-archlinux/</guid>
      <description>###Python Preparation Install python
	$ pacman -S python  Install pip
	$ pacman -S python-pip  Install virtualenv, before install virtualenv, be sure to update your time. 1970&amp;rsquo;s time will get ssl error.
	$ date -s &amp;quot;8 Dec 2013 16:09:40&amp;quot; $ pip install --upgrade virtualenv virtualenvwrapper  Prepare virtualenv:
	[root@alarmpi ~]# mkdir ~/pyv [root@alarmpi ~]# vim ~/.virtualenvrc export WORKON_HOME=&amp;quot;/root/pyv&amp;quot; export PROJECT_HOME=&amp;quot;/root/pyv&amp;quot; source /usr/bin/virtualenvwrapper.sh [root@alarmpi ~]# source ~/.</description>
    </item>
    
    <item>
      <title>Linux Sound</title>
      <link>http://purplepalmdash.github.io/2013/12/07/linux-sound/</link>
      <pubDate>Sat, 07 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/07/linux-sound/</guid>
      <description>###ALSA普通用户无声 只有root才能听到声音，其他一概是哑巴，解决方案：
	$ sudo apt-get install acl $ sudo setfacl -m u:Your_Username:rw /dev/snd/*  等于说赋予了普通用户(Your_Username)访问/dev/snd下所有设备的读写权限。这时候打开mplayer就可以听到MP3播放声了。 ###使用tsocks和ssh转发穿越防火墙
	ssh -qTfnN -D 1394 xxx@xxx.xxx.xxx.xxx  这样可以在本地打开一个socks代理，127.0.0.1:1394 安装tsocks
	$ sudo apt-get install tsocks  配置tsocks
	# vim /etc/tsocks.conf # Local networks # For this example this machine can directly access 192.168.0.0/255.255.255.0 # (192.168.0.*) and 10.0.0.0/255.0.0.0 (10.*) local = 192.168.0.0/255.255.255.0 local = 10.0.0.0/255.0.0.0 server = 127.0.0.1 server_port = 1394 server_type = 5  试听音乐：</description>
    </item>
    
    <item>
      <title>Enable spice for qemu virtual machine</title>
      <link>http://purplepalmdash.github.io/2013/12/06/enable-spice-for-qemu-virtual-machine/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/06/enable-spice-for-qemu-virtual-machine/</guid>
      <description>###Package Installation Install virt-viewer for browsing the virtual machine desktop. For default spicec is not OK.
	$ pacman -S gtk-vnc $ yaourt -S spice-gtk3 $ yaourt -S virt-viewer  Install virt-manager
	[root@DashArch Trusty]# pacman -S virt-manager [root@DashArch Trusty]# systemctl start libvirtd.service [root@DashArch Trusty]# systemctl enable libvirtd.service ln -s &#39;/usr/lib/systemd/system/libvirtd.service&#39; &#39;/etc/systemd/system/multi-user.target.wants/libvirtd.service&#39; [root@DashArch Trusty]# ps -ef | grep libvirt root 8852 1 5 15:23 ? 00:00:00 /usr/bin/libvirtd -p /var/run/libvirtd.pid  ###启动支持spice Server的qemu -vga qxl -spice port=5988,disable-ticketing将使能spice</description>
    </item>
    
    <item>
      <title>Install Qemu virtio driver under windows</title>
      <link>http://purplepalmdash.github.io/2013/12/06/install-qemu-virtio-driver-under-windows/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/06/install-qemu-virtio-driver-under-windows/</guid>
      <description>Download the iso file from the redhat repository:
http://alt.fedoraproject.org/pub/alt/virtio-win/latest/images/images/images/bin/src/
Start the qemu with the following command :
 ./run-qemu -hda fpgawindows.qcow2 -m 1024 -cdrom ./virtio-win-0.1-74.iso -drive file=./fake.qcow2,if=ide  In run-qemu, the actual command is:
	qemu-system-i386 -net nic,model=virtio,macaddr=$macaddr -net tap,ifname=&amp;quot;$IFACE&amp;quot; $*  Then, follow the following images to operate:</description>
    </item>
    
    <item>
      <title>autossh multiple connection?</title>
      <link>http://purplepalmdash.github.io/2013/12/05/autossh-multiple-connection/</link>
      <pubDate>Thu, 05 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/05/autossh-multiple-connection/</guid>
      <description>Strangely, I cannot enable the multiple SSH connections on OpenWRT.
The configuration file is listed as:
	config autossh option ssh	&#39;-N -T -R 4381:localhost:22 root@XXX.xxx.xxx.xxx &#39; option gatetime	&#39;0&#39; option monitorport	&#39;20000&#39; option poll	&#39;600&#39; #config autossh #	option ssh	&#39;-L -N -T 10.0.0.1:9009:1XX.XX.XX.XXX:8000 xxx@xxx.xxx.xxx.xxx &#39; #	option gatetime	&#39;0&#39; #	option monitorport	&#39;20001&#39; #	option poll	&#39;600&#39;  But only 1 connection could be enabled.
I doubt this is because of the startup scripts for /etc/init.</description>
    </item>
    
    <item>
      <title>Configure samba server on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2013/12/02/configure-samba-server-on-ubuntu/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/02/configure-samba-server-on-ubuntu/</guid>
      <description>###Installation Update repository and install samba and samba services.
	$ sudo apt-get update $ sudo apt-get install samba smbfs  ###Configuration Add a new samba user:
	Trusty@joggler:~$ sudo smbpasswd -a Trusty [sudo] password for Trusty: New SMB password: Retype new SMB password:  Editing the /etc/samba/smb.conf:
 [samba] comment = samba for ethernet users path = /media/samba valid users = Trusty public = no writable = yes printable = no create mask = 0765 [homes] comment = Home Directories browseable = no security = user username map = /etc/samba/smbusers  Adding the mapping of the system user to samba user:</description>
    </item>
    
    <item>
      <title>GPIO Advanced in STM32</title>
      <link>http://purplepalmdash.github.io/2013/12/01/gpio-advanced-in-stm32/</link>
      <pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/01/gpio-advanced-in-stm32/</guid>
      <description>直接操作寄存器的好处，最主要的就是看中它的快。缺点在于比较晦涩，因为你需要了解到实现的底层。在官方库中，我们可以找到如下的定义：
//./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h: #define PERIPH_BASE ((uint32_t)0x40000000) /*!&amp;lt; Peripheral base address in the alias region */ //./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h: #define APB2PERIPH_BASE (PERIPH_BASE + 0x10000) //./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h: #define GPIOA_BASE (APB2PERIPH_BASE + 0x0800) //./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h: #define GPIOA ((GPIO_TypeDef *) GPIOA_BASE) // Definition of the GPIO Types /** * @brief General Purpose I/O */ typedef struct { __IO uint32_t CRL; __IO uint32_t CRH; __IO uint32_t IDR; __IO uint32_t ODR; __IO uint32_t BSRR; __IO uint32_t BRR; __IO uint32_t LCKR; } GPIO_TypeDef; /** * IO definitions * * define access restrictions to peripheral registers */ #ifdef __cplusplus #define __I volatile /*!</description>
    </item>
    
    <item>
      <title>STM32 and 25F080</title>
      <link>http://purplepalmdash.github.io/2013/12/01/stm32-and-25f080/</link>
      <pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/12/01/stm32-and-25f080/</guid>
      <description>SST25F080,高达 1M 字节的串行 FLASH 存储器,此芯片为-50 版,即 SPI 速度可达到 50M,利用 STM32 的最高速 SPI 接口(36M),读写速度绝对不比并行 FLASH 慢.
连线图如下：</description>
    </item>
    
    <item>
      <title>RTC on STM32</title>
      <link>http://purplepalmdash.github.io/2013/11/30/rtc-on-stm32/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/30/rtc-on-stm32/</guid>
      <description>RTC(Real Time Clock) 在STM32中可以理解为内置的一个部件，和传说中的DS1302是有差别的。尽管官方发布的程序可以将RTC搞成一个万年历。
###配置RTC RTC需要顺带使用后备寄存器， 因为RTC是一个简单的秒中断定时器，关于年日月分秒的信息需要在掉电保存时依然放在某个地方，这个地方就是STM32的后备寄存器。配置好以后，尽管系统关电，依靠板子上的后备电池，依然可以保存32768的晶振和后备寄存器的数据。
配置RTC的方法：
	#include &amp;quot;stm32f10x_bkp.h&amp;quot; #include &amp;quot;stm32f10x_pwr.h&amp;quot; #include &amp;quot;stm32f10x_rtc.h&amp;quot; //使能一些外设 RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE); PWR_BackupAccessCmd(ENABLE);  ###判断RTC是否被配置过 下面的函数被用于判断RTC是否被配置过：
/************************************************************** ** 函数名:TestRtc ** 功能:测试RTC用 ** 注意事项:用于显示RTC是否已经设置过. ***************************************************************/ void TestRtc(void) { if(RTC_Blank) { USART1_Puts(&amp;quot;The Time is not set\r\n&amp;quot;); } else { USART1_Puts(&amp;quot;Time Setted.\r\n&amp;quot;); } }  这个函数判断RTC_Blank全局变量的值，而全局变量的值则在配置RTC的时候被设定。
void RTC_Configuration(void) { //...... if(BKP_ReadBackupRegister(BKP_DR1) != 0xA5A5) { //...... RTC_Blank=1;	//这个标志代表RTC是没有预设的(或者说是没有上纽扣电池) }  如果RTC后备寄存器的值为设定为0xA5A5，则代表RTC已经被设置过。否则，我们认为它处于未被设置过的状态。
###使用RTC的秒中断 在NVIC中，需要有下列的定义，以标识RTC的秒中断。
	/* RTC */ NVIC_InitStructure.</description>
    </item>
    
    <item>
      <title>STM32中的Systick</title>
      <link>http://purplepalmdash.github.io/2013/11/30/stm32zhong-de-systick/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/30/stm32zhong-de-systick/</guid>
      <description>Cortx-M3特有的SysTick可以很方便的实现定时。系统始终的频率和开启系统时钟中断主要在RCC.c里进行设置：
	//SYSTICK分频--1ms的系统时钟中断 if (SysTick_Config(SystemCoreClock / 1000)) { /* Capture error */ while (1); } // The definition of the SysTick_Config: /** * @brief Initialize and start the SysTick counter and its interrupt. * * @param ticks number of ticks between two interrupts * @return 1 = failed, 0 = successful * * Initialise the system tick timer and its interrupt and start the * system tick timer / counter in free running mode to generate * periodical interrupts.</description>
    </item>
    
    <item>
      <title>STM使用库函数读写Flash</title>
      <link>http://purplepalmdash.github.io/2013/11/30/stmshi-yong-ku-han-shu-du-xie-flash/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/30/stmshi-yong-ku-han-shu-du-xie-flash/</guid>
      <description>代码非常之简单：
#define	FLASH_ADR	0x08008000	//要写入数据的地址 #define	FLASH_DATA	0x5a5a5a5a	//要写入的数据 int main(void) { u32 tmp; ChipHalInit();	//片内硬件初始化 ChipOutHalInit();	//片外硬件初始化 //判断此FLASH是否为空白 tmp=*(vu32*)(FLASH_ADR); if(tmp==0xffffffff) { FLASH_Unlock(); FLASH_ProgramWord(FLASH_ADR,FLASH_DATA); FLASH_Lock(); USART1_Puts(&amp;quot;The destination is empty, Data has been written in!\r\n&amp;quot;); } else if(tmp==FLASH_DATA) { USART1_Puts(&amp;quot;The destination data is the same as certification data!\r\n&amp;quot;); } else { USART1_Puts(&amp;quot;The destination data is not equal to certification data, may caused via written error, or the destination is not empty!\r\n&amp;quot;); FLASH_Unlock(); FLASH_ErasePage(FLASH_ADR); FLASH_Lock(); USART1_Puts(&amp;quot;Erased the written destination!</description>
    </item>
    
    <item>
      <title>STM32上的定时器</title>
      <link>http://purplepalmdash.github.io/2013/11/29/stm32shang-de-ding-shi-qi/</link>
      <pubDate>Fri, 29 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/29/stm32shang-de-ding-shi-qi/</guid>
      <description>使用定时器的好处是，等待某个时隙的同时还可以干别的事，而定时器的时间一到，得到一个中断后对应执行中断函数中的服务例程而已。STM32的定时器非常之复杂而强大，配置和使用都要花很大精力。
打开TIM2线的程序如下：
void TIM_Configuration(void) { //...... /* TIM2 clock enable */ RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); //......  有关定时器的设置如下：
	/* 基础设置*/ TIM_TimeBaseStructure.TIM_Period = 8000;	//计数值 TIM_TimeBaseStructure.TIM_Prescaler = 7200-1; //预分频,此值+1为分频的除数 TIM_TimeBaseStructure.TIM_ClockDivision = 0x0; // TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //向上计数  这里设置的是定时器溢出控制,分频值的计算就是上述代码中提到的预分频的设置。 TIM2属于低速总线，这条总线最高只能达到36M的速度，芯片内部还有一个X2的倍频器，用于将低速的32M倍频成72M， 库中已经默认有实现。所以我们这里使用的TIM2其速度依然是72M， 如果预设分频为7200的话，分频后的结果就是72M/7200=10K(72000000&amp;frasl;7200). 我们可以把这个值变大或变小，以获得更慢或更快的分频速度。
计数值设置的是8000，计数器向上计数到8000的时候会溢出。因而溢出的时间是8000/10K=0.8s 比较值的设置如下：
	u16 CCR1_Val = 4000; u16 CCR2_Val = 2000; u16 CCR3_Val = 1000; u16 CCR4_Val = 500; /* 比较通道1*/ TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Inactive; //输出比较非主动模式 TIM_OCInitStructure.TIM_Pulse = CCR1_Val; TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;	//极性为正 TIM_OC1Init(TIM2, &amp;amp;TIM_OCInitStructure); TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Disable);	//禁止OC1重装载,其实可以省掉这句,因为默认是4路都不重装的.</description>
    </item>
    
    <item>
      <title>关于STM32板上的12864液晶(2)</title>
      <link>http://purplepalmdash.github.io/2013/11/28/guan-yu-stm32ban-shang-de-12864ye-jing-1/</link>
      <pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/28/guan-yu-stm32ban-shang-de-12864ye-jing-1/</guid>
      <description>###有关电路 上一章讲的是12864的基础知识。这一章里来看12864和stm32板的连接和驱动的问题。
有关12864小LCD的连接，在PDF中我们可以找到如下的表项:
   功能模块 占用模块 备注     12864小LCD PC4,PB2,PB11,PB13,PB15 PC4:A0,同时也是 CH375 和 TFT 的 A0;
PB2:BOOT1,LCD 的 CS 脚;
PB11:28J60 和大小 LCD 的复位脚    再结合电路图：
关于GPIO口的设置，我们可以看到有这样的定义：
	typedef enum { GPIO_Mode_AIN = 0x0, GPIO_Mode_IN_FLOATING = 0x04, GPIO_Mode_IPD = 0x28, GPIO_Mode_IPU = 0x48, GPIO_Mode_Out_OD = 0x14, GPIO_Mode_Out_PP = 0x10, GPIO_Mode_AF_OD = 0x1C, GPIO_Mode_AF_PP = 0x18 }GPIOMode_TypeDef;  而在stm32的Datasheet中有如下的配置模式：
最低的8个bit和表中是一一对应的，其中通用输出/复用功能输出的mode1/mode0的值为00.
因为PB15是MOSI2口， PB13是SCK2口，所以这两个管脚需要被设置为AF模式的。AF代表复用功能。PP代表push-pull.
	/* PB15-MOSI2,PB13-SCK2*/ /* Why PB14 should be enabled?</description>
    </item>
    
    <item>
      <title>关于STM32板上的12864液晶(3)</title>
      <link>http://purplepalmdash.github.io/2013/11/28/guan-yu-stm32ban-shang-de-12864ye-jing-3/</link>
      <pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/28/guan-yu-stm32ban-shang-de-12864ye-jing-3/</guid>
      <description>###如何控制液晶屏幕 ASCII码的可打印字符的范围在0x20 ~ 0x7f之间， 0x20 是空格字符，0x7f是delete字符。 最开始我们需要在内存中建立一张关于可打印字符的表。用于表示在液晶屏幕上如何显示出该字符，即该字符的点阵排列。
下图是可以打印的ASCII/Unicode 0-127的值：
点阵数组：
	const u8 Asii8[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x06,0x5F,0x06,0x00,0x00,0x07,0x03,0x00, 0x07,0x03,0x00,0x24,0x7E,0x24,0x7E,0x24, 0x00,0x24,0x2B,0x6A,0x12,0x00,0x00,0x63, 0x13,0x08,0x64,0x63,0x00,0x36,0x49,0x56,  来个例子：
	#: 0x00, 0x24, 0x7e, 0x24, 0x7e, 0x24 00000000 00100100 01111110 00100100 01111110 00100100  对应的1代表将该点的液晶点点上。
要注意，实际的显示应该是倒过来的，即： 把你的脖子顺时针转90度看上面的二进制表达式。
在LCD上设置需要写入的坐标，
	/************************************************************** **函数名 :LcdSetXP **功能:设置坐标** **注意事项:这里设置的坐标不是X,Y,而是X,PAGE.因为黑白屏一次写入的数据为8个点,而且为竖 **	式写入,故纵坐标是以页为单位,64个点共8页 ***************************************************************/ void LcdSetXP(u8 x,u8 page) { LcdCmd((page&amp;amp;0x07)+0xb0);	//设置页指针 LcdCmd((x&amp;gt;&amp;gt;4)|0x10); LcdCmd(x&amp;amp;0x0f); }  128X64的屏幕一共有8192个点， 每一个字符用48个点来表示，即8X6。所以每一个字的X坐标长度应该是6, 而Y坐标应该是8. 一个page代表8个点。
考虑下面代码:
	LcdSetXP(0,1); LcdChar8(&#39;T&#39;); LcdChar8(&#39;E&#39;); LcdChar8(&#39;S&#39;); LcdChar8(&#39;T&#39;); LcdChar8(&#39; &#39;); LcdChar8(&#39;O&#39;); LcdChar8(&#39;K&#39;); LcdChar8(&#39;!</description>
    </item>
    
    <item>
      <title>Auto convert source code to UTF-8 compatiable</title>
      <link>http://purplepalmdash.github.io/2013/11/27/auto-convert-source-code-to-utf-8-compatiable/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/27/auto-convert-source-code-to-utf-8-compatiable/</guid>
      <description>For those code files which contains gb2312 or gbk format, we can use following scripts for automatically convert them to UTF-8 conpatiable format files.
#!/bin/sh export LANG=&amp;quot;zh_CN.utf8&amp;quot; export LC_ALL=&amp;quot;zh_CN.utf8&amp;quot; #for file in `find . -name &amp;quot;*.h&amp;quot;` for file in `find . -name &amp;quot;*.c&amp;quot;` do echo $file enca -L zh_CN -x UTF-8 $file done  </description>
    </item>
    
    <item>
      <title>关于STM32板上的12864液晶</title>
      <link>http://purplepalmdash.github.io/2013/11/27/guan-yu-stm32ban-shang-de-12864ye-jing/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/27/guan-yu-stm32ban-shang-de-12864ye-jing/</guid>
      <description>板子是09年入手的，但是一直没时间好好玩，最近端起来觉得有必要好好研究一番。为了以后翻阅方便，全中文记下来。
###12864 通常所说的12864LCD显示块是所说的点阵液晶显示模块，就是由128X64个液晶显示点组成的一个128列X64行的阵列，所以也就叫成了12864。每个显示点都对应着有一位二进制数，0表示灭，1表示亮。存储这些点阵信息的RAM被称为显示数据存储器。如果要显示某个图形或汉字就是将相应的点阵信息写入到对应的存储单元中。图形或汉字的点阵信息是由自己设计，这时候问题的关键是显示点在液晶屏上的位置与其在存储器中的地址之间的关系。
显示点在64X64液晶屏上的位置由列号（line,0~63）与行号（line,0~63）确定。512X8 bits RAM中某个存储单元的地址由页地址（Xpage,0~7）和列地址（Yaddress,0~63）确定。每个存储单元存储8个液晶点的显示信息。也就是说，一个页的大小是8. 运算关系则是64x64=(64x8)x8=512x8.
由于多数液晶显示模块的驱动电路是由一片行驱动器和两片列驱动器构成，所以12864液晶屏实际上是由左右两块独立的64X64液晶屏拼接而成，每半屏有一个512X8 bits显示数据RAM。左右半屏驱动电路及存储器分别由片选信号CS1和CS2选择。（少数厂商为了简化用户设计，在模块中增加译码电路，使得128X64液晶屏就是一个整屏，只需一个片选信号。）
如如果点亮12864的屏中（20，30）位置上的液晶点，因列地址30小于64，该点在左半屏第29列，所以CS1有效；行地址20除以8取整得2，取余得4，该点在RAM中页地址为2，在字节中的序号为4；所以将二进制数据00010000（也可能是00001000，高低顺序取决于制造商）写入Xpage=2，Yaddress=29的存储单元中即点亮（20，30）上的液晶点。
这是为了为了使液晶点位置信息与存储地址的对应关系更直观关，将64X64液晶屏从上至下8等分为8个显示块，每块包括8行X64列个点阵。每列中的8行点阵信息构成一个8bits二进制数，存储在一个存储单元中。（需要注意：二进制的高低有效位顺序与行号对应关系因不同商家而不同）存放一个显示块的RAM区称为存储页。即64X64液晶屏的点阵信息存储在8个存储页中，每页64个字节，每个字节存储一列(8行)点阵信息。因此存储单元地址包括列地址（Yaddress,0~63）和页地址（Xpage,0~7）。
以上就是对于12864点阵液晶显示器的原理介绍。
在DX32开发板上的液晶是怎么一回事呢？它的封装图如下：
Datasheet有72页，乱七八糟的会讲一大堆。但是事实上我们只需要关注和软件有关的方面，拿一个很简单的开启/关闭LCD的例子来说，DataSheet里有这样的表格：
   Command A0 /RD /WR D7 D6 D5 D4 D3 D2 D1 D0 Function     Display On/OFF 0 1 0 1 0 1 0 1 1 1 1 LCD Display ON   Display On/OFF 0 1 0 1 0 1 0 1 1 1 0 LCD Display OFF    那么会有对应的代码:</description>
    </item>
    
    <item>
      <title>Add vlan to existing machine</title>
      <link>http://purplepalmdash.github.io/2013/11/26/add-vlan-to-existing-machine/</link>
      <pubDate>Tue, 26 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/26/add-vlan-to-existing-machine/</guid>
      <description>增加一个VLAN设备：
	$ ip link add link eth0 name eth0.100 type vlan id 100  查看增加的VLAN设备详情：
	$ ip -d link show eth0.100  增加一个IPV4地址：
	$ ip addr add 192.168.100.1/24 brd 192.168.100.255 dev eth0.100 $ ip link set dev eth0.100 up  关闭一个VLAN设备：
	$ ip link set dev eth0.100 down  移除一个VLAN设备:
	$ ip link delete eth0.100  </description>
    </item>
    
    <item>
      <title>How to setup STM32 Project in eclipse</title>
      <link>http://purplepalmdash.github.io/2013/11/25/how-to-setup-stm32-project-in-eclipse/</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/25/how-to-setup-stm32-project-in-eclipse/</guid>
      <description>###Preparation ####STM Standard Peripheral Lib Download Link for STSW-STM32054STM32F10x standard peripheral library :
http://www.st.com/web/catalog/tools/FM147/CL1794/SC961/SS1743/PF257890
Unsip the downloaded library and you will get several folders, the Libraries folder is the pure libs. ####Cross-Compiler for STM32 Download the cross-compiler from CodeSourcery ARM EABI toolchain - Mentor Graphics:
https://sourcery.mentor.com/sgpp/lite/arm/portal/subscription?@template=lite
You have to choose EABI version. Download and install it, you will get &amp;ldquo;arm-none-eabi-&amp;rdquo; prefixed cross-compiler.
####Eclipse plugins Help-&amp;gt; Install New Software, Add the URL for gnuarm:</description>
    </item>
    
    <item>
      <title>Solution On Joggler</title>
      <link>http://purplepalmdash.github.io/2013/11/25/solution-on-joggler/</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/25/solution-on-joggler/</guid>
      <description>###Hardware Joggler
Intel&amp;reg; Atom&amp;trade; CPU Z520 @ 1.33GHz Dual Core
MemTotal: 504480 kB
Harddisk: 500G External USB.
###System and Software Download the Ubuntu Base/Server 12.04 LTS (Precise) (Joggler Image v1.4 - 09/04/2013) from the
http://joggler.exotica.org.uk/ubuntu/ From the ubuntu website we know 12.04 LTS will supported to 2017, I think that fits my needs.
Unzip the download image:
	gunzip ubuntu_base_12.04-v1.4-ext4.img.gz dd if=./ubuntu_base_12.04-v1.4-ext4.img of=/dev/sdc bs=1M  The use this external usb disk for booting up the joggler.</description>
    </item>
    
    <item>
      <title>Conky Customization</title>
      <link>http://purplepalmdash.github.io/2013/11/22/conky-customization/</link>
      <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/22/conky-customization/</guid>
      <description>###Add existing user to specified group The problem is : why I can&amp;rsquo;t use hddtemp? This is because hddtemp need priviledge for accessing the disk related equipment.
	[Trusty@XXXyyy ~]$ whoami Trusty [Trusty@XXXyyy ~]$ groups root log kvm users vboxusers [Trusty@XXXyyy ~]$ su root Password: [root@XXXyyy Trusty]# groups root bin daemon sys adm disk wheel log  But this didn&amp;rsquo;t solve the problem, I have to add prividge in /etc/sudoes,</description>
    </item>
    
    <item>
      <title>openOCD Configuration</title>
      <link>http://purplepalmdash.github.io/2013/11/22/openocd-configuration/</link>
      <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/22/openocd-configuration/</guid>
      <description>###OpenOCD Device Scan Install and view the OpenOCD:
	$ pacman -S openocd [Trusty@XXXyyy debian_octopress]$ openocd -v Open On-Chip Debugger 0.7.0 (2013-11-02-01:53) Licensed under GNU GPL v2 For bug reports, read http://openocd.sourceforge.net/doc/doxygen/bugs.html  Insert your openJTAG debug board, and view its connection:
	[Trusty@XXXyyy debian_octopress]$ lsusb Bus 001 Device 016: ID 1457:5118 First International Computer, Inc. OpenMoko Neo1973 Debug board (V2+)  From the dmesg information:
	[15767.673553] usb 1-1: new full-speed USB device number 11 using xhci_hcd [15767.</description>
    </item>
    
    <item>
      <title>Setup an embedded development enviroment for STM32</title>
      <link>http://purplepalmdash.github.io/2013/11/21/setup-an-embedded-development-enviroment-for-stm32/</link>
      <pubDate>Thu, 21 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/21/setup-an-embedded-development-enviroment-for-stm32/</guid>
      <description>###Download the toolchain We should download the toolchain from the ARM employee maintained website, the download address is located at: https://launchpad.net/gcc-arm-embedded, use following command:
	$ wget https://launchpad.net/gcc-arm-embedded/4.7/4.7-2013-q3-update/+download/gcc-arm-none-eabi-4_7-2013q3-20130916-linux.tar.bz2  untar the downloaded package and then add it to your system path, my solution is directly add some alias into ~/.bashrc:
	### Add Cross_Compiler for eclipse based stm32 #export PATH=&amp;quot;/media/y/embedded/cortex/gcc-arm-none-eabi-4_7-2013q3/bin:$PATH&amp;quot; alias setstm=&#39;export PATH=&amp;quot;/media/y/embedded/cortex/gcc-arm-none-eabi-4_7-2013q3/bin:$PATH&amp;quot;&#39;  ###Eclipse Configuration We have to install zylin for flashing the stm32 board.</description>
    </item>
    
    <item>
      <title>Two Tips for setting</title>
      <link>http://purplepalmdash.github.io/2013/11/21/two-tips-for-setting/</link>
      <pubDate>Thu, 21 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/21/two-tips-for-setting/</guid>
      <description>###Disable the vim wraping There is a line in ~/.vimrc:
	autocmd FileType text setlocal textwidth=78  comment this line then everything goes OK. ###Change Awesome theme and change the titlebar width Download the 3rd party themes from https://github.com/Morley93/awesome-themes-3.5, then copy them to your own theme location, normally under the &amp;ldquo;/usr/share/awesome/themes/&amp;rdquo;, Choose whatever you want, and edit the ~/.config/awesome/default.rc.lua:
beautiful.init(&amp;quot;/usr/share/awesome/themes/wabbit/theme.lua&amp;quot;)  Save and exit then you got the new theme.</description>
    </item>
    
    <item>
      <title>Using IR-remote for controlling XBMC</title>
      <link>http://purplepalmdash.github.io/2013/11/21/using-ir-remote-for-controlling-xbmc/</link>
      <pubDate>Thu, 21 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/21/using-ir-remote-for-controlling-xbmc/</guid>
      <description>###Wiring The Wiring is listed as following Picture, You got your IR receiver&amp;rsquo;s pins to corresponding pins on raspberry PI. Positive to Pin1(3.3v), negative to Pin6(GND), the signal pins to Pin12(GPIO 18).
###Check the Kernel information Log on to the raspberry PI, then input dmesg to view the startup information, we can see the lirc has been added to kernel.
	$ dmesg [ 4.976752] systemd-udevd[822]: starting version 208 [ 7.</description>
    </item>
    
    <item>
      <title>Generate Your own epub book</title>
      <link>http://purplepalmdash.github.io/2013/11/20/generate-your-own-epub-book/</link>
      <pubDate>Wed, 20 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/20/generate-your-own-epub-book/</guid>
      <description>###Using Wget to fetching the webpages wget could be used to fetch the webpages from a specified website, using following command could fetch all of the wiki related 1st layer pages from &amp;ldquo;awesome Wiki&amp;rdquo;
	$ wget -r -l 1 http://awesome.naquadah.org/wiki/Main_Page  After wget finished, you will found the 1st layer webpatges under your directory. ###Decide which you want for generating the book There are some rubbish pages in downloaed pages, thus we have to write a script for fetching the valuable ones, my script is listed as following:</description>
    </item>
    
    <item>
      <title>Problem of Capcity</title>
      <link>http://purplepalmdash.github.io/2013/11/20/problem-of-capcity/</link>
      <pubDate>Wed, 20 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/20/problem-of-capcity/</guid>
      <description>Image1:
Image2:
Image3:
Image4:
Image5:</description>
    </item>
    
    <item>
      <title>Install OpenELEC on SD Card</title>
      <link>http://purplepalmdash.github.io/2013/11/19/install-openelec-on-sd-card/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/19/install-openelec-on-sd-card/</guid>
      <description>###Partition the SD card Insert the SD card and view the partitions via fdisk -l, then
	[root@XXXyyy Trusty]# parted -s /dev/mmcblk0 mklabel msdos [root@XXXyyy Trusty]# fdisk -l Disk /dev/mmcblk0: 7.4 GiB, 7948206080 bytes, 15523840 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x0002d03c  Make partition 1, fat32, and its size if 16 &amp;ldquo;cyl&amp;rdquo; (cylinders)</description>
    </item>
    
    <item>
      <title>Things to be Done in Nov19</title>
      <link>http://purplepalmdash.github.io/2013/11/19/things-to-be-done-in-nov19/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/19/things-to-be-done-in-nov19/</guid>
      <description>1. Awesome tips, for example, drop-down terminal.
2. Verify the XBMC on Raspberry Pi.
3. Using IRremote on XBMC and know its principle.
4. BeagleBone&amp;rsquo;s old kernel and the old style tutorial.
5. Device tree of kernel on BeagleBone.
6. MP3 Player in IRremote control on Arduino.
7. Awesome Book in mobi or epub and send it to Kindle.
8. How to enable the various display method on Arduino(12864, Nokia5110, etc?</description>
    </item>
    
    <item>
      <title>Use Reverse SSH for Across Something(2)</title>
      <link>http://purplepalmdash.github.io/2013/11/19/use-reverse-ssh-for-across-something-2/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/19/use-reverse-ssh-for-across-something-2/</guid>
      <description>###ssh command Take following command for detailed example of using ssh:
	alias mydaili=&#39;ssh -qTfnN -D &#39; -q Quite Mode -T Disable pseudo-tty allocation -f background the ssh -n redirect the stdin from /dev/null -N Don&#39;t execute a remote command -D Bind address  ###Using rsh rsh could be used for executing the command remotely, thus in my family&amp;rsquo;s debian machine I could write following script:
	cat /bin/remoteON #!/bin/sh rsh -l root localhost -p 4381 ssh -qTfnN -L 1XX.</description>
    </item>
    
    <item>
      <title>Using autossh for keep ssh tunnel</title>
      <link>http://purplepalmdash.github.io/2013/11/19/using-autossh-for-keep-ssh-tunnel/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/19/using-autossh-for-keep-ssh-tunnel/</guid>
      <description>###Preparation Install autossh:
	$ sudo pacman -S autossh  ###Configure [root@DashArch Trusty]# cat /etc/systemd/system/autossh.service
	[Unit] Description=AutoSSH service for port 1394 access to family machine After=network.target [Service] ExecStart=/usr/bin/autossh -M 22000 -N -T -D 1394 root@aaa.aaa.aaa.com [Install] WantedBy=multi-user.target  ###Usage Change the proxy to 127.0.0.1, port is 1394, then you can use the ssh tunnel for browsing.
# crontab -e @reboot xxxx/.sh  </description>
    </item>
    
    <item>
      <title>How to use git behind the firewall</title>
      <link>http://purplepalmdash.github.io/2013/11/18/how-to-use-git-behind-the-firewall/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/18/how-to-use-git-behind-the-firewall/</guid>
      <description>###Tips:
	wget http://www.meadowy.org/~gotoh/ssh/connect.c gcc -o connect connect.c chmod 777 connect &amp;amp;&amp;amp; mv connect /bin/ http-proxy-gw content: /bin/connect -H http://10.0.0.221:9001 $@ git config --global core.gitproxy &amp;quot;http-proxy-gw for *.*&amp;quot; echo &amp;quot;export GIT_PROXY_COMMAND=/bin/http-proxy-gw&amp;quot; &amp;gt;&amp;gt; ~/.bashrc  ###C source code:
/*********************************************************************** * connect.c -- Make socket connection using SOCKS4/5 and HTTP tunnel. * * Copyright (c) 2000-2006 Shun-ichi Goto * Copyright (c) 2002, J. Grant (English Corrections) * * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version.</description>
    </item>
    
    <item>
      <title>Use Reverse SSH for Across Something</title>
      <link>http://purplepalmdash.github.io/2013/11/18/use-reverse-ssh-for-across-something/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/18/use-reverse-ssh-for-across-something/</guid>
      <description>###Enable No Password for Login Generate the public/private rsa key pair.
	root@OpenWrt:~# ssh-keygen -t rsa root@OpenWrt:~# ls ~/.ssh authorized_keys id_rsa id_rsa.pub known_hosts Upload the id_rsa.pub to the Home&#39;s PC. # cat .ssh/id_rsa.pub | ssh USER@HOME_PC &#39;cat &amp;gt;&amp;gt; .ssh/authorized_keys&#39; Check If you can login without entering the password: $ ssh USER@HOME_PC  ###OpenWRT Modification Since the default ssh client is dropbear on OpenWRT, thus the key length is 1024, we have to using the 2048 for most of the cases.</description>
    </item>
    
    <item>
      <title>Using HMC5883L to control Servo</title>
      <link>http://purplepalmdash.github.io/2013/11/18/using-hmc5883l-to-control-servo/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/18/using-hmc5883l-to-control-servo/</guid>
      <description>###Wired __Servo __
5V/GND
Input&amp;ndash;&amp;gt; D4
__HMC5883L __ 3.3V/GND
SCL&amp;ndash;&amp;gt; A5
SDA&amp;ndash;&amp;gt; A4
###Code:
#include &amp;lt;Wire.h&amp;gt; #include &amp;lt;HMC5883L.h&amp;gt; HMC5883L compass; //Definition of servopin int servopin = 4; void setup(){ Serial.begin(9600); Wire.begin(); compass = HMC5883L(); //new instance of HMC5883L library setupHMC5883L(); //setup the HMC5883L pinMode(servopin,OUTPUT);//设定舵机接口为输出接口 } // Our main program loop. void loop(){ float heading = getHeading(); //Serial.println(heading); int angle = (int)heading/2; /* int angle = (int)heading; if(angle &amp;gt; 180) { angle = angle - 180; } */ Serial.</description>
    </item>
    
    <item>
      <title>Run in Winter</title>
      <link>http://purplepalmdash.github.io/2013/11/17/run-in-winter/</link>
      <pubDate>Sun, 17 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/17/run-in-winter/</guid>
      <description>XuanwuLake:
BaiMa Park:
Shoes:
Leaves:
Trees in night:</description>
    </item>
    
    <item>
      <title>HMC5883L on RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2013/11/16/hmc5883l-on-raspberrypi/</link>
      <pubDate>Sat, 16 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/16/hmc5883l-on-raspberrypi/</guid>
      <description>###Make sure you have installed i2c tools Install i2c-tools via:
	# apt-get install i2c-tools # apt-cache search i2c-tools i2c-tools - heterogeneous set of I2C tools for Linux  Check if spi and i2c has been blacklisted in system:
	# cat /etc/modprobe.d/raspi-blacklist.conf # blacklist spi and i2c by default (many users don&#39;t need them) blacklist spi-bcm2708 blacklist i2c-bcm2708  Comment out them, now your i2c will not be blacklisted.</description>
    </item>
    
    <item>
      <title>VMware VMCI problem</title>
      <link>http://purplepalmdash.github.io/2013/11/16/vmware-vmci-problem/</link>
      <pubDate>Sat, 16 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/16/vmware-vmci-problem/</guid>
      <description>Edit the file /etc/init.d/vmware with your favorite text editor, change the definition:
	vmwareLoadModule &amp;quot;$mod&amp;quot;  Change this line to
	vmwareLoadModule &amp;quot;$vmci&amp;quot;  Then Navigate to the other function vmwareLoadModule &amp;ldquo;$mod&amp;rdquo; Under the function definition.
	vmwareLoadModule &amp;quot;$mod&amp;quot;  Change this line to
	vmwareLoadModule &amp;quot;$vsock&amp;quot;  Now we need to find the corresponding Module Unload functions Under the Function vmwareStopVmci() Change
	vmwareUnloadModule &amp;quot;${mod}&amp;quot;  to
	vmwareUnloadModule &amp;quot;${vmci}&amp;quot;  Under the function vmwareStopVsock() Change</description>
    </item>
    
    <item>
      <title>Building Poll circuit on EagleBone</title>
      <link>http://purplepalmdash.github.io/2013/11/15/building-poll-circuit-on-eaglebone/</link>
      <pubDate>Fri, 15 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/15/building-poll-circuit-on-eaglebone/</guid>
      <description>###Background Knowledge 三极管（NPN型）的用法很简单（半圆形平的一面朝自己，引脚朝下），左边接电源中间为触发极，右边输出，有点像开关，只要中间的脚有微弱电流触发，就如同开关被打开，电流就会从左边流向右边。</description>
    </item>
    
    <item>
      <title>Compile Linux kernel for Beaglebone</title>
      <link>http://purplepalmdash.github.io/2013/11/14/compile-linux-kernel-for-beaglebone/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/14/compile-linux-kernel-for-beaglebone/</guid>
      <description>###SourceCode Preparation 1. Get the latest code of beaglebone kernel:
	git clone git://github.com/RobertCNelson/linux-dev.git  2. Check for your cross-compiler:
	$ which arm-linux-gnueabi-gcc /media/y/embedded/gcc-linaro-arm-linux-gnueabi-2012.02-20120222_linux/bin/arm-linux-gnueabi-gcc  3. Start a new branch
	$ git checkout origin/am33x-v3.2 -b am33x-v3.2 Branch am33x-v3.2 set up to track remote branch am33x-v3.2 from origin. Switched to a new branch &#39;am33x-v3.2&#39;  Since the latest kernel has been moved 3.12, we have to checkout am33x-v3.12
	$ git checkout origin/am33x-v3.</description>
    </item>
    
    <item>
      <title>IRRemote on Arduino</title>
      <link>http://purplepalmdash.github.io/2013/11/14/irremote-on-arduino/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/14/irremote-on-arduino/</guid>
      <description>###Preparation of the IRremote library Using the downloaded,
	Trusty@SomethingMissing:~/code/arduino/arduino-1.0.5/libraries$ cp -r ../../library/Arduino_IRremote_master/ ./ Trusty@SomethingMissing:~/code/arduino/arduino-1.0.5/libraries$ pwd /home/Trusty/code/arduino/arduino-1.0.5/libraries  Or using git the get the latest one, in fact this one is not new at all , it updates 2 years ago.
	$ git clone git://github.com/shirriff/Arduino-IRremote.git  Now we can use it for programming. ###Programming insert the code and verify the result.
	#include &amp;lt;IRremote.h&amp;gt; // 使用IRRemote函数库 const int irReceiverPin = 2; // 红外接收器的 OUTPUT 引脚接在 PIN2 接口 定义irReceiverPin变量为PIN2接口 IRrecv irrecv(irReceiverPin); // 设置irReceiverPin定义的端口为红外信号接收端口 decode_results results; // 定义results变量为红外结果存放位置 void setup() { Serial.</description>
    </item>
    
    <item>
      <title>Use Eclipse and C/C&#43;&#43; to develop on Beaglebone</title>
      <link>http://purplepalmdash.github.io/2013/11/14/use-eclipse-and-c-slash-c-plus-plus-to-develop-on-beaglebone/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/14/use-eclipse-and-c-slash-c-plus-plus-to-develop-on-beaglebone/</guid>
      <description>###Local Development on Beaglebone board. On Beagle to verify local development:
	#include &amp;lt;iostream&amp;gt; using namespace std; int main() { cout&amp;lt;&amp;lt;&amp;quot;Hello Beagle World!&amp;quot;&amp;lt;&amp;lt;endl; return 0; }  Compile and run:
	$ g++ -o test test.cpp $ ./test Hello Beagle World!  ###Using Cross-compiler for developing applications for Beaglebone Launch eclipse, then install new software via help-&amp;gt; Install new software, make sure installed CDT. then we will install RSE.
	$ pwd /home/Trusty/.</description>
    </item>
    
    <item>
      <title>Play Music On OpenWRT</title>
      <link>http://purplepalmdash.github.io/2013/11/13/play-music-on-openwrt/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/13/play-music-on-openwrt/</guid>
      <description>1. Install usbutils, this will enable you to use lsusb to detect your usb equipments.
	$ opkg install usbutils  2. Use lsusb to detect your usb audio card.
	# root@OpenWrt:~# lsusb Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 002: ID 1a40:0101 TERMINUS TECHNOLOGY INC. USB-2.0 4-Port HUB Bus 001 Device 003: ID 0781:557c SanDisk Corp. Bus 001 Device 004: ID 0424:2507 Standard Microsystems Corp.</description>
    </item>
    
    <item>
      <title>dhcpd address assignment rules</title>
      <link>http://purplepalmdash.github.io/2013/11/13/dhcpd-address-assignment-rules/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/13/dhcpd-address-assignment-rules/</guid>
      <description>1. Configure the following rules under OpenWRT router:
config host option name &#39;beaglebone&#39; option ip &#39;10.0.0.123&#39;  And in configuration webpage we can see the requiment is like following:
2. Now reboot beagle board, to see the client&amp;rsquo;s caught ip address:
	root@beaglebone:~# ifconfig eth0 Link encap:Ethernet HWaddr xx:cx:gaoguogueogu inet addr:10.0.0.123 Bcast:10.0.0.255 Mask:255.255.255.0 inet6 addr: fe80::9259:afff:fe65:d98c/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1  Also in OpenWRT router we can see the attached pc:</description>
    </item>
    
    <item>
      <title>电子书下载</title>
      <link>http://purplepalmdash.github.io/2013/11/13/dian-zi-shu-xia-zai/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/13/dian-zi-shu-xia-zai/</guid>
      <description>6寸电子书集合：
6寸电子书
8080部经典小说合集：
8080部经典小说合集
1900本书汇:
1900本书汇
科幻魔幻小说集合：
科幻魔幻小说集合</description>
    </item>
    
    <item>
      <title>有关烤派宝典</title>
      <link>http://purplepalmdash.github.io/2013/11/12/you-guan-kao-pai-bao-dian/</link>
      <pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/12/you-guan-kao-pai-bao-dian/</guid>
      <description>Baking Pi一共有11个章节，已经翻译了7章，剩下4章。篇幅也不是很多，但是有点儿倦怠。于是先搁置一段时间，等有空了再把剩下的几张补齐。
手头有了一块新的开发板，Beagle Bone之中国版，中文叫BB-Black，入手两天但是一直在忙着翻译烤派宝典，没时间把玩。所以，剩下的4个章节，将采用一个星期完成一章的进度，慢慢将其翻译完。三天时间翻译完前面那么多章节，确实有点太赶，也难以保证翻译质量。
下一步可以在Beagle上写一个类似于Baking Pie这样的指南的。通过学习《Baking Pie》，也接触到了操作系统的初步， 一个系统写下来，很多概念不知不觉就懂了。在Beagle板子上做同样的事情有更大的挑战性。</description>
    </item>
    
    <item>
      <title>烤派宝典第七章之Screen02</title>
      <link>http://purplepalmdash.github.io/2013/11/12/kao-pai-bao-dian-di-qi-zhang-zhi-screen02/</link>
      <pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/12/kao-pai-bao-dian-di-qi-zhang-zhi-screen02/</guid>
      <description>#烤派宝典第七章之Screen02
Screen02这一章基于Screen01，将教会你如何在屏幕上画直线，还将教会你一个如何生成随机数的技巧。我们设想你已经拥有了烤派宝典第6章之Screen01中介绍的背景知识和代码作为基础。
   内容     1 点   2 线   3 随机数   4 Pi-加索    ###1. 点 既然我们之前已经让屏幕工作起来了，自然我们现在就可以开始创建出形形色色的图形了。如果我们能在上面真正画出点什么来自然是最好的。绘制图形中一个最基础的任务往往是绘制两个点之间的直线，有了直线，我们就可以用直线的组合来创建出更复杂的图形了。
 在执行更复杂的渲染时候，很多系统创建的着色函数可以使用不同颜色来绘制形状。每个像素点可以通过调用着色函数来确定在其上使用怎样的颜色。
 我们将试着在汇编语言中实现这个函数，但是最开始时我们需要另外的一些辅助函数。我们需要一个叫SetPixel的函数用于改变特定像素点的颜色，它的输入值应该是r0和r1。在将来如果我们需要往任意内存中绘图(而不是仅仅往屏幕上绘图)时这个函数将很有用。因此最开始时我们需要一个系统用于控制我们绘制的目标。我觉得最佳的解决方案是我们在内存中开辟一块区域，在里头存储我们需要绘制的目标地址。这一系统运行完毕后，我们将得到一个存储好的地址，这个地址通常指向上一次我们使用过的frame buffer。 我们将在我们的绘图函数中始终使用这一地址。这样一来，如果我们在操作系统中的其他任何地方都可以调用这个函数来绘制出不同的图像，要做的只是改变这个地址使其指向一个新的结构而已，绘制代码则可以不用做任何修改。为了简单起见，我们使用一段数据用来控制我们要画的颜色。
将下列代码拷贝入一个新的文件中，起名为&amp;rsquo;drawing.s&amp;rsquo;.
	.section .data .align 1 foreColour: .hword 0xFFFF .align 2 graphicsAddress: .int 0 .section .text .globl SetForeColour SetForeColour: cmp r0,#0x10000 movhs pc,lr ldr r1,=foreColour strh r0,[r1] mov pc,lr .globl SetGraphicsAddress SetGraphicsAddress: ldr r1,=graphicsAddress str r0,[r1] mov pc,lr  以上代码能实现上面我详细描述过的功能，我们在&amp;rsquo;main.</description>
    </item>
    
    <item>
      <title>烤派宝典第五章之OK05</title>
      <link>http://purplepalmdash.github.io/2013/11/11/kao-pai-bao-dian-di-wu-zhang-zhi-ok05/</link>
      <pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/11/kao-pai-bao-dian-di-wu-zhang-zhi-ok05/</guid>
      <description>#烤派宝典第五章之OK05 OK05这一章基于OK04, 将教会你如何根据摩尔斯码来控制LED的闪烁。LED的闪烁将发出SOS信号，此信号的格式如下：(…—…).我们假设你之前已经拥有了烤派宝典第四章里的所有代码作为基础。
   内容     1 数据   2 你享受乐趣时，光阴似箭    ###数据 迄今为止，我们所传递给Raspberry Pi的都是单纯的指令。 然而某些时候，指令只是故事的一般。我们的操作系统需要数据。
&amp;gt; 有些早期的操作系统不允许在文件中包含数据，这让使用者觉得很受限制。现代的方式让应用程序有更大的灵活性。
通常来说数据指的是重要的数值。你大可把数据想象成一个给定的类型，比如，一个包含有文字的文本文件，一幅含有图像信息的图像文件，等等。事实上这只是概念上的差别而已。计算机中的所有数据都是二进制数，我们和它们打交道的方式就是通过数数字。在本章的例子中，我们要储存的数据是一段用于控制闪烁节奏的数据。
在&amp;rsquo;main.s&amp;rsquo;文件的最后拷贝入下列代码：
	.section .data .align 2 pattern: .int 0b11111111101010100010001000101010  数据和代码的区别在于，我们把所有的代码都放在.data段。我已经在操作系统内存布局图中描述了这一点。这里我把数据段(data)放在代码的最结尾位置。把代码和指令分开放置，以便于我们最终能在操作系统中实现安全机智，我们需要知道代码的哪些部分是可以执行的，哪些是不可以被执行的。
我在这里使用了两个., .align和.inig。 .align确保下列字节以2的2次方对齐。在这个例子中，我使用的就是2的2次方对齐。.align 2意味着数据肯定是在2的2次方，即可整除4的内存位置。我们需要特别注意这一点，因为用于从内存中读取内容的ldr指令之工作在能整除4的内存位置。
&amp;gt; .align num确保下一行地址可以整除2的num次方
.int命令把其后带的常量直接拷贝到输出。这以为者11111111101010100010001000101010将会被放入到输出，因而标签形式事实上把这部分数据标注成了标签。
&amp;gt; .int val输出数字val
正如我以前所提及的，数字可以包含任何你想要的东西。在本例中我们把摩尔斯电码所表示的SOS序列，即&amp;hellip;&amp;mdash;&amp;hellip;用这些方式表达出来。我使用0以代表LED熄灭的时间，用1代表LED点亮的时间。这样一来，我们就可以写出用于表示时间序列的代码，接下来我们要的就是改变数据以显示不同的显示方式了。这是一个很简单的例子，可以用来说明操作系统在任何时候应该做什么；交互和显示数据。
&amp;gt; 这里有个挑战就是找出有效而游泳的表达方式。我们这种用于表达开/关状态的存储序列的方式运行起来很简单，但是很难编辑，因为我们无法在0和1的组合中体现出摩尔斯代码的-或.的含义。
拷贝下面的代码行到&amp;rsquo;main.s&amp;rsquo;中，代码应该放置在 loop$ 标签之前：
	ptrn .req r4 ldr ptrn,=pattern ldr ptrn,[ptrn] seq .req r5 mov seq,#0  上面的代码将闪烁的样式加载到寄存器r4中，同时把r5的值加载为0. r5将用于表征我们的序列位置，以便我们可以跟踪我们已经运行完了多少个样式。</description>
    </item>
    
    <item>
      <title>烤派宝典第六章之Screen01</title>
      <link>http://purplepalmdash.github.io/2013/11/11/kao-pai-bao-dian-di-liu-zhang-zhi-screen01/</link>
      <pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/11/kao-pai-bao-dian-di-liu-zhang-zhi-screen01/</guid>
      <description>#烤派宝典第六章之Screen01 欢迎来到Screen教程系列。在这一系列教程中，你将学会如何在汇编语言中控制Raspberry Pi的屏幕， 如何开始显示随机数据，然后我们将学会如何显示一个固定的图像，显示文字，如何将数字转换为文字。 我们假设你已经完成了之前的OK系列，OK系列里提到过的基本概念在本教程中不会再被提及。
Screen01这一章讲述了一些基本的图像处理理论，我们将在这一章里，在屏幕上或是电视机（TV）上显示出一个渐变颜色的格式。
   内容     1 开始   2 计算机图形   3 邮递员编程   4 我最心爱的图像处理器   5 在一个框架内的连续像素   6 曙光初现    ###1. 开始 我们希望你已经完成了OK系列，OK系列中已经完成的&amp;rsquo;gpio.s&amp;rsquo;和&amp;rsquo;systemTimer.s&amp;rsquo;文件中所撰写的函数会在本系列中被重复调用。如果你还没有这些文件，或者说你更愿意使用标准的参考文件，你可以从下载页面中下载到OK05的解决方案模板。 &amp;lsquo;main.s&amp;rsquo;文件同样是有用的，但是你需要把mov sp,#0x8000之后的内容删除。
###2. 计算机图形 正如你所希望看到的，在很原始的层面上来看，计算机其实是很愚蠢的。它们的指令集是有限的，几乎不会解数学题目。但是不知为何它们拥有近乎无所谓不为的能力。我们目前所需要了解的，计算机如何在屏幕上显示出图像？我们如何将问题翻译成二进制而后扔给计算机去解决？答案非常简单，对于每一种颜色，我们为它编上一个唯一的编号，然后我们在计算机屏幕上的每一个点都储存上这个编号中的一个值。像素就是你屏幕上的这样一个小点，如果你凑近了看，你可能会在自己的屏幕上看到这样的点，你可以看到电脑上的每一幅图像，都是由这样的点的集合所组成的。
随着计算机时代的演进，人们需要越来越复杂的图形，所以显卡被发明出来。显卡可以看作是你的计算机的第二个处理器，它仅仅负责在屏幕上画图。它的主要职责是将像素值信息转换为被送到屏幕上的光强度信息。 在现代计算机中，显卡能干的活儿远远不止这些，比如绘制3D图像也是它的拿手好戏。然而在本教程中，我们之关注于显卡的初级使用；从内存中获取到像素信息，输出到屏幕上。
 有很多种用数字来表达颜色的系统，这里我们使用RGB系统，但是HSL是另一种广泛被使用的系统。
 要注意到的一点是我们系统所使用的色彩编号系统。有很多种选择，每种选择将输出不同质量的图像。为了有助于你的完整理解，我在这里列举出了一些选择。
 尽管这里的图像有很多种颜色，它们都使用了一种被称作空间抖动的技术。这使得它们能用很少的颜色表现出绝佳的图像效果。许多早期的操作系统中都运用了这种技术。
  表 2.1 一些颜色调色板    名称 单色 描述 例子     单色画 2 使用一个位来存储每个像素点，1代表白色，0代表黑色     灰阶 256 使用1byte来表示每个像素点，有255中表示白色的方式，0代表黑色，0～255之间的任意数字都代表两者的线性组合     8位色 8 使用3个位来存储每个像素点，第1个位代表红色通道的值，第2个位代表绿色通道的值，第3个位代表蓝色通道的值。     低彩色 256 使用8个位来存储每个像素点的信息，前3个位代表红色通道的强度，接下来的3个位代表绿色通道的强度，最后2个位代表蓝色通道的强度。     高彩色 65,536 使用16个位来存储每个像素点的信息，前5个位用于表示红色通道的强度，接下来的6个位用于表示绿色通道的强度，最后的5个位用来表示蓝色通道的强度。     真彩色 16,777,216 使用24个位来存储每个像素点的信息，前8个位用于表示红色通道的强度，接下来的8个位用于表示绿色通道强度，最后的8个位用于表示蓝色通道的强度。     RGBA32 16,777,216(256个透明度级别) 使用32个位来存储每个像素点的信息，前8个位用于表示红色通道的强度，接下来的8个位用于表示绿色通道的强度，第3组8个位用于表示蓝色通道的强度，最后的8个位用于表示透明度通道。同名读通道通常用于在一幅图片上绘制另一幅图片，0用于代表后置图片的颜色，255代表当前图片的颜色，所有其之间的值代表两者的组合。      在本指南中我们将使用高彩色。从上面的图片中我们可以看到，高彩彩色已经相当清晰，图片质量也不错，对比于真彩色，它不会占据太大的空间。也就是说，显示一张800x600像素大小的图片，它只会占据大概1M byte的空间。它还有个优势是，它是2的幂次方的大小，对比于真彩图片，很容易得到其信息。</description>
    </item>
    
    <item>
      <title>烤派宝典第四章之OK04</title>
      <link>http://purplepalmdash.github.io/2013/11/11/kao-pai-bao-dian-di-si-zhang-zhi-ok04/</link>
      <pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/11/kao-pai-bao-dian-di-si-zhang-zhi-ok04/</guid>
      <description>#烤派宝典第四章之OK04 OK04 这一章基于OK03，将教会你如何使用定时器(timer)来精确控制’OK’或’ACT’灯的闪烁频率。我们假设你已经拥有了烤派宝典第三章之OK03中的代码和知识储备作为基础。
   内容     1 新的设备   2 实现   3 另一个闪烁灯版本    ###新的设备 到现在为止，我们已经杰出倒了Raspberrry Pi中的一个硬件，也就是GPIO控制器。在前面的章节中，我只是告诉了你现成的答案，需要做什么，里头的主要原理。现在我们来看看一个新的设备，定时器，这回我将手把手教会你如何从硬件手册中理解其工作方式。
和GPIO控制器一样，定时器也有一个地址。在我们的例子中，定时器的地址在2000300016, 通过阅读手册，我们能找到下面的表格:
 定时器是Raspberry Pi上唯一可以保存时间的方式。大多数计算机在主板上都有电池驱动的RTC模块用于在掉电时保持时间。但是Raspberry Pi为了降低成本，去掉了这一部分电路。
   Table 1.1 GPIO控制器寄存器    地址 大小 / Bytes 名字 描述 读/写     20003000 4 控制/状态 用于控制和清除定时器通道比较位  RW   20003004 8 定时器 一个以1MHz递加的定时器。 R   2000300C 4 比较值 0 第0个比较值寄存器 RW   20003010 4 比较值 1 第一个比较值寄存器.</description>
    </item>
    
    <item>
      <title>Table in Octopress</title>
      <link>http://purplepalmdash.github.io/2013/11/09/table-in-octopress/</link>
      <pubDate>Sat, 09 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/09/table-in-octopress/</guid>
      <description>###Table in Markdown Table in markdown can be represent like following:
	| Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 |  Or we can use the pure html code:
	&amp;lt;table&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Foo&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt;  By both method we can create our own table.</description>
    </item>
    
    <item>
      <title>烤派宝典第一章之OK01</title>
      <link>http://purplepalmdash.github.io/2013/11/09/kao-pai-bao-dian-zhi-ok01/</link>
      <pubDate>Sat, 09 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/09/kao-pai-bao-dian-zhi-ok01/</guid>
      <description>#烤派宝典第一章之OK01 OK01 这一章内容涉及了如何起步，并将教会你如何点亮Raspberry PI开发板上的’OK’或是’ACT’ LED灯，这个LED灯靠近RCA和USB口。这个LED灯最开始被命名为OK，在Raspberry Pi第二版时它被改名为ACT。
   内容     1 起步   2 开始   3 第一行代码   4 使能输出   5 生命的迹象   6 从此过上幸福的生活   7 Pi登台    ###1 起步 此时此刻我假设你已经访问了下载页面，并架设好了必要的GNU工具链。下载页面上有一个名为OS Template的文件，请下载并解压到一个新的目录。
###2 开始 现在你已经解压开了模板，接下来请在&amp;rsquo;source&amp;rsquo;文件夹下创建一个名为&amp;rsquo;main.s&amp;rsquo;的新文件。这个文件将包含这个操作系统的代码。特别指明一下，现在你的目录结构看起来应该如下：
	build/ (empty) source/ main.s kernel.ld LICENSE Makefile   &amp;rsquo;.s&amp;rsquo;文件扩展名可以在所有的汇编语言格式中被使用，但是我们要时刻记住现在是在ARMv6架构中写程序。
 在文字编辑器中打开&amp;rsquo;main.s&amp;rsquo;文件，开始敲入汇编代码。Rapberry Pi使用的汇编代码类型被成为ARMv6, ARMv6这就是我们需要写入的代码类型。
粘贴以下代码：
.section .init .globl _start _start:  敲入的这几行代码不能让Raspberry Pi做任何事，它们只是传递给汇编器的指令而已。汇编器是一个用于在人类可理解的汇编代码和Raspberry Pi能理解的二进制代码之间做转换的一个程序。在灰白你代码中，每一行都是一个新的命令。第一行告诉汇编器1在哪里放置我们的代码。我提供的模板使得.</description>
    </item>
    
    <item>
      <title>烤派宝典第三章之OK03</title>
      <link>http://purplepalmdash.github.io/2013/11/09/kao-pai-bao-dian-di-san-zhang-zhi-ok03/</link>
      <pubDate>Sat, 09 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/09/kao-pai-bao-dian-di-san-zhang-zhi-ok03/</guid>
      <description>#烤派宝典第三章之OK03 OK03 这一章基于OK02,将教会你在汇编语言中如何使用函数，函数的引入将使得汇编代码可用性大大提升，并提升代码的可读性。开始本章之前，我们假定你已经有了烤派宝典第二章之OK02的代码作为基础。
   内容     1 可重用的代码   2 第一个函数   3 一个大函数   4 另一个函数   5 新的开始   6 前瞻    ##1 可重用的代码 迄今为止我们写操作系统时代码都是硬生生敲进去的。对于小程序而言无所谓，但倘若我们要把整个系统用这种方式写出来，代码将变得完全不可读。解决方案是我们将使用函数。
有关函数的解释：
&amp;gt; 函数是一小段用于计算出特定答案的、可重用的代码，或者它可以执行一个特定的动作。你可能听过它的不同叫法，例如procedures, routines, subroutines。 这些叫法没有本质上的差别，也没有特定的标准叫法。 你可能早就在数学课上接触过函数的概念了。比如余弦函数将根据给定的角度计算出一个介于-1和1之间的值。我们用标号cos(x)来表明这是参数为x的函数。
在代码中，函数能拥有多个输入值(也可以无输入值)，这可能会有点副作用。比如一个函数可能能完成多个功能：在文件系统上创建一个文件，读入标准输入，保存命名之。
在高级语言譬如C或C++中，函数是语言本身的概念。但是在汇编语言中，函数就是我们所拥有的想法。
理想情况下，我们设想给寄存器某些输入值，而后程序分支跳转到另一地址，执行完该地址的代码后将跳转回代码分支执行的地方，这时候寄存器中会得到输出值。这就是汇编语言中的函数执行流程。难点在于我们如何系统化组织和设置寄存器。如果我们使用我们所能想象到的方式来组织，那么每个程序员所撰写的代码都会变得难以理解。对于编译器而言，如何组织设置寄存器是无所谓的话题，因为它们压根就不知道如何使用函数。为了避免混淆，一种叫ABI（Application Binary Interface，二进制程序接口）的标准被引入，这是任何一种汇编语言中的约定俗成，规定了函数应该如何被运行。如果每个程序员都按照同样的方式来创建函数，那么所有的函数都可以被别人使用。在这里我会讲解这一标准，而且从现在开始我敲入的所有函数代码都将适应这一标准。
标准定义如下：寄存器r0,r1,r2,r3将被依次被用作函数的输入。如果函数无输入值，这些寄存器值就都可以被忽略。如果需要一个参数,则把参数放入r0中。如果需要两个参数，则第一个参数放入r0中，第二个参数放入r1中，依此类推。输出值将被放入r0中。如果函数无输出值，那就可以忽略r0里的值。
此外，标准还要求，函数运行完毕后，r4到r12必须保持函数运行前的取值。这意味着当你调用一个函数时，可以确认的是r4到r12的值不会发生变化，但是对r0到r3的值，我们就没法确保了。
 函数通常被称之为“黑盒子”，我们输入值，然后得到输出值。但是我们不知道黑盒子内部是如何工作的。
 函数执行完毕后需要回到函数被调用的起始点。这意味着我们必须知道代码是从何处被调用的。为方便起见，有一个特殊寄存器，名为lr(link register，链接寄存器)，它总是用于记住指令调用该函数后的地址。
  表 1.1 ARM ABI寄存器用法    寄存器 概述 是否保留 规则    r0 参数和结果 No r0 和 r1被用作传递第一个和第二个参数给函数，并存储在函数中返回的值。如果函数无返回值，则他们的值可为任意值。   r1 参数和结果 No   r2 参数 No r2 和r3被用于传递第3个参数起的两个参数给函数。当函数被运行了，它们可以被改变为其他任意值。    r3 参数 No  r4 通用 Yes r4 到 r12被用作工作值，他们的值在函数调用前后保持一致。   r5 通用 Yes  r6 通用 Yes  r7 通用 Yes  r8 通用 Yes  r9 通用 Yes  r10 通用 Yes  r11 通用 Yes  r12 通用 Yes   lr 返回值 No lr 中存储了函数完成时需要跳转回的地址，这个值在函数完成前保持不变.</description>
    </item>
    
    <item>
      <title>烤派宝典第二章之OK02</title>
      <link>http://purplepalmdash.github.io/2013/11/09/kao-pai-bao-dian-di-er-zhang-zhi-ok02/</link>
      <pubDate>Sat, 09 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/09/kao-pai-bao-dian-di-er-zhang-zhi-ok02/</guid>
      <description>#烤派宝典第二章之OK02 OK02 这一章建立在OK01的基础上，将反复点亮/熄灭’OK’或’ACT’ LED。我们假定你已经有了第一章烤派宝典第一章之OK01提到过的操作系统知识作为基础。
   内容     1 等待   2 整合    ###等待 出乎意料的是，等待在操作系统开发里是一个非常有用的特性。通常操作系统发现自己无事可做时，会选择等待。在我们的例子里，我们需要让LED一闪一灭。如果你只是把管脚状态置为on或是off，那么LED在我们视线里依然是可见的，因为计算机在一秒内会成千上万次的开关该GPIO端口。在以后的章节里我们会涉及到精准定时，但是现在为了效率起见，我们可以简单的把CPU的时间浪费掉。
	mov r2,#0x3F0000 wait1$: sub r2,#1 cmp r2,#0 bne wait1$  上述的代码简单的通过计算一个大数的减法创建了一个延迟，得益于每一块Raspberry Pi基本上都相同，上面得到的延迟时间也差不多。上述代码可以简单解释为，使用mov指令把十六进制数0x3F0000传递给r2，然后对此数执行减1运算，直到变为0。这里引入了3个新指令分别是sub,cmp和bne。
sub是减法指令(substract）的简写，从第一个参数中减第二个参数的值。
&amp;gt; sub reg,#val 意思是从reg存储的值中减掉val大小。
cmp是一条有意思得多的指令。它比较第一个参数和第二个参数的值，将比较的结果存入到一个特殊的寄存器中，这个寄存器叫CPSR寄存器，意思是当前处理器状态寄存器(Current Processor Status Register)。你不需要太担心这个，简单的说，她就是能记住两个数字谁比谁大或是谁比谁小，或是相等[^1]。
&amp;gt; cmp reg,#val 意思是把寄存器reg中的值和数值val做比较。比较的结果在CPSR中。
bne事实上是分支命令的变种。在ARM汇编语言家族里，所有的指令都可以条件执行。这也就是说，指令只有在上一条比较指令有确切的结果才会被执行到。以后的教程中我们将频繁的在有趣的场合使用到它，但现在我们在b指令后加上ne代表只有上一次比较的结果不相等时候才会执行bne后的指令。ne后缀可以在任意命令后被使用，有多达16个条件可以供选择，比较常用的有eq(用于判断是否相等)，和lt（小于)。
&amp;gt; ne后缀使得该条命令只会在上一次比较的结果不等时才会被执行到。
###整合 我以前提起过LED状态可以通过写入GPIO控制器后28位移的地址置为开启状态，也可以通过写入GPIO控制器后40位移的地址置为关闭状态。据此你可以修改OK01中的代码，首先把LED点亮，而后运行等待代码，再将其关闭，再次运行等待代码，而后调用分支代码回到初始状态，以继续循环。需要注意的是，我们不需要再次激活GPIO16口，激活一次就足够了。如果你追求高效的话，我强烈建议你重用r1的值。在所有的课程里，你都可以在下载页面找到完整的解决方案。注意你需要保证在你的代码里，标号都是唯一的。如果你已经定义了wait1$，那么你不能再将另一行也定义为wait1$。
在我的Raspberry Pi上，闪烁频率大约是一秒钟两次。闪烁频率可以很方便的通过改变r2的初始值来调节。然而，不幸的是我们现在还不能非常精确的控制LED灯的闪烁频率。如果你没有得到预期的结果，请翻阅troubleshooting页，如果你成功了，恭喜你！
本章中我们学习了两个汇编指令,sub和cmp，还领略了ARM中的条件执行方法。
下一章烤派宝典之OK03中，，我们将评估我们编程的方式，我们将建立我们的代码规则，以便我们可以重用代码，如果可以的话，我们将同时使用使用C/C++代码来工作。</description>
    </item>
    
    <item>
      <title>烤派宝典第零章-介绍</title>
      <link>http://purplepalmdash.github.io/2013/11/09/kao-pai-bao-dian-di-yi-zhang-jie-shao/</link>
      <pubDate>Sat, 09 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/09/kao-pai-bao-dian-di-yi-zhang-jie-shao/</guid>
      <description>#第零章 介绍 本章为介绍环节，不包含实战环节，主要用于介绍一个操作系统所涉及到的基本概念、什么是汇编语言,以及其他重要的基础性概念。如果你想一步到位直接进入实战环节，你可以忽略掉这一章。
   内容     1 操作系统   2 汇编语言    ##1 操作系统 操作系统是非常复杂的程序。它负责协调计算机上的程序，包括共享计算机时间、内存、硬件和其他资源。你可能听说过的计算机上的大型桌面操作系统包括GNU/Linux, Mac OS X和Microsoft Windows。 其他设备，譬如手机上可能也使用操作系统，譬如Android， iOS和Windows Phone等1。
既然操作系统需要直接和计算机系统的硬件打交道，那它就必须了解系统的硬件配置。为了让系统能运行于不同的计算机平台上，驱动程序的概念被引入。所谓驱动，就是一小段程序，可以被操作系统所调用和挪除，以使得操作系统可以直接和特定的硬件进行“对话”。 在本课程中，我们不会涉及到太多如何创建这种可卸载的驱动程序的话题，我们将专注于Raspberry Pi平台本身。
操作系统设计博大精深，市面上已经有多种不同的设计理念，这门课程只能触及其表面。本门课程里我们只关注于让操作系统通过各种特定的硬件位来直接操作硬件，这通常是最棘手的做法，因为参考文档只能来自于有限的文档，网上也很难找到现成的帮助。
##2 汇编语言 本课程仅使用汇编语言。汇编语言是最接近机器底层的语言，也最容易被机器所理解。计算机工作的原理其实是源自于存在一个叫处理器的小设备用于时刻不停地执行简单的工作，譬如加数操作，同时有一系列或多系列的被称之为RAM（内存）的集成电路用于存储运算数字。计算机加电后，处理器运行传给它的一系列指令，这一系列指令将导致内存中存储的数字发生变化，以便和连接的其他硬件相交互。汇编代码就是被翻译成人类可读格式的这些指令的文字。
通常我们使用编程语言来编程，譬如C++,Java,C#,Basic等语言，程序员撰写的程序通过编译器被转换为汇编语言，接着被转换为二进制代码2。二进制代码是机器能理解的语言，但是不具备可读性，无法被人类理解。汇编语言就好多了，但令人沮丧的是它只有有限的条数，很难被扩展。我们需要记住一个原则：任何一个你输入的汇编指令都能被处理器直接理解，因为汇编指令设计时遵循了精炼的原则，物理电路必须理解并处理每一条指令。
和普通编程语言一样，有许多不同的汇编语言。而与普通编程语言不同的是，汇编语言的多样性是因为存在很多种不同架构的处理器，每种处理器只能理解特定的语言。因而用一种汇编语言代码编写出的程序在另一种机器体系上就完全不能被执行。在大多数情况下，不能重用代码简直是一场灾难，因为为该种机器体系编写的程序都需要被重写，但引入操作系统后问题就变得容易多了，很多操作系统都是用C/C++编写的，它可以很容易被移植到不同的硬件平台上，只有完全用汇编语言编写的程序部分才需要完全重写。
现在你已经完成了第0课，可以挪步到[第一章: OK01](&amp;ldquo;http://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/ok01.html&amp;quot;)了。
 详细的操作系统列表可以参阅: List of operating systems - Wikipedia, the free encyclopaedia
[return] 这里我简化了关于通用编程的解释，事实上编程重度依赖于编程语言和机器平台。如果你感兴趣，你可以参考: Compiler - Wikipedia, the free encyclopedia。 [return]   </description>
    </item>
    
    <item>
      <title>烤派宝典(序)</title>
      <link>http://purplepalmdash.github.io/2013/11/08/kao-pai-bao-dian-xu/</link>
      <pubDate>Fri, 08 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/08/kao-pai-bao-dian-xu/</guid>
      <description>#烤派宝典-操作系统开发 欢迎来到烤派宝典之操作系统开发！这门课由Alex Chadwick撰写，当前版本为V1.0c(2013年7月)。
本宝典将指引你在Raspberry Pi上开发出一个非常基本的操作系统！本宝典主要针对16岁以上读者，当然对未满16岁的小朋友我们也未作访问限制，你可以在助手的引导下访问本网站。适当时候本课程将增加更多的内容。
本宝典将指引你用汇编语言构建出一个基本的操作系统。我们假定手持本宝典的诸位大侠都是初出江湖之辈，之前从未接触过操作系统开发和汇编语言的知识。有编程经验固然可以让你如虎添翼，但是本宝典的设计门槛应该是针对一穷二白完全没有经验的读者。Raspberry Pi论坛中藏龙卧虎，遍布着热心之极的人们，一个个望穿秋水般等着随时给予你以援手，所以当你碰到问题时，尽管去提问好了。本宝典被划分为一系列“章节”，按顺序列举如下。每一“章节”里在介绍理论的同时也将给出一些实际的练习，双管齐下助你事半功倍多快好省的掌握武功秘籍。
本宝典不会涉及到过于细节的内容，也不会顾及到关于创建操作系统知识的方方面面，本宝典中的一系列指南将关注于完成一系列小的任务。我们希望读者在通读并完成本宝典练习的最后，能融汇贯通自己所学，最终具备独立创建一个个性化的操作系统的“神功”。尽管本宝典的章节大多关注于特定的功能实现，但其中也留有大片空间供读者自行发挥。比如，在学习完关于函数的章节后，你可以构思出一种更好的汇编代码组织方式。比如，在阅读完有关图形的章节后，你可以设想下如何开发一个3D操作系统。因为本宝典是讲述操作系统的牛逼内容，你完全可以拥有设计出你喜爱的事情的能力。如果你有了灵光一闪的瞬间，抓住并实现它！计算机科学仍然是一门新兴学科，有的是空间任君遨游。
内容 1 要求
2 章节
1 要求 你需要具备下列物品以完成本宝典：一块附带有SD卡的Raspberry Pi及电源, 一台运行Linux, Microsoft Windows或Mac OS X的开发机， SD卡读写器及读写软件。如果你的Raspberry Pi能连接屏幕就更好了，当然这不是必需条件。
软件方面，你需要准备基于ARMv6的GNU编译工具链。在下载页面里你可以找到下载链接，该页面中也提供了所有练习的参考答案。
2 章节  表 2.1 - 章节列表     名称 描述     0 介绍 本章节不包含实战环节，主要用于介绍一个操作系统所涉及到的基本概念、什么是汇编语言,以及其他重要的基础性概念。如果你想一步到位直接进入实战环节，你可以忽略掉这一章。    OK LED 系列 (初级)   1 OK01 OK01 这一章内容涉及了如何起步，并将教会你如何点亮Raspberry PI开发板上的&#39;OK&#39;或是&#39;ACT&#39; LED灯，这个LED灯靠近RCA和USB口。    2 OK02 OK02 这一章建立在OK01的基础上，将反复点亮/熄灭&#39;OK&#39;或&#39;ACT&#39; LED。    3 OK03 OK03 这一章基于OK02,将教会你在汇编语言中如何使用函数，函数的引入将使得汇编代码可用性大大提升，并提升代码的可读性。    4 OK04 OK04 这一章基于OK03，将教会你如何使用定时器(timer)来精确控制&#39;OK&#39;或&#39;ACT&#39;灯的闪烁频率。    5 OK05 OK05这一章基于OK04, 将教会你如何根据摩尔斯码来控制LED的闪烁。LED的闪烁将发出SOS信号，此信号的格式如下：(.</description>
    </item>
    
    <item>
      <title>Things to be done(5)</title>
      <link>http://purplepalmdash.github.io/2013/11/07/things-to-be-done-5/</link>
      <pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/07/things-to-be-done-5/</guid>
      <description>Following things should be done in recent days:
 RaspberryPI&amp;rsquo;s Operating System make How to change the default theme of octopress Translation of RaspberrPI Cambridge lessons Setup a repository on github which holds raspberryPI relasted code How to view sound card parameters  </description>
    </item>
    
    <item>
      <title>Chinese Localization in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/11/04/chinese-localization-in-archlinux/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/04/chinese-localization-in-archlinux/</guid>
      <description>1. Soving the chinese Garbled in vim:
	set fileencodings=utf8,cp936,gb18030,big5  2. Install chinese fonts:
	wqy-bitmapfont wqy-zenhei ttf-arphic-ukai ttf-arphic-uming ttf-fireflysung wqy-microhei（AUR中） wqy-microhei-lite（AUR中  3. Copy files from linux to windows or other systems:
You should do like following:
mount /dev/sdc /mnt #copy all of the pdf into the directory export LANG=&amp;quot;zh_CN.utf8&amp;quot; export LC_ALL=&amp;quot;zh_CN.utf8&amp;quot; mount /dev/sdc /mnt -t vfat -o iocharset=utf8 cp /chinese/*** /YourDestination  4. Using ftp for uploading files.</description>
    </item>
    
    <item>
      <title>Cut your pdf into 6 inch in Linux</title>
      <link>http://purplepalmdash.github.io/2013/11/04/cut-your-pdf-into-6-inch-in-linux/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/04/cut-your-pdf-into-6-inch-in-linux/</guid>
      <description>###Preparation Yaourt briss will show the following result:
	1 aur/briss 0.9-2 (58) Java tool to crop pages of PDF documents to one or more regions selected with a GUI. ==&amp;gt; Enter n° of packages to be installed (ex: 1 2 3 or 1-3)  Install it and now we will going to cut our pdfs. ###Cutting First you can manually cut your pdf, and set it to fit your own size.</description>
    </item>
    
    <item>
      <title>Enable enc28j60 on Raspberry PI</title>
      <link>http://purplepalmdash.github.io/2013/11/03/enable-enc28j60-on-raspberry-pi/</link>
      <pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/03/enable-enc28j60-on-raspberry-pi/</guid>
      <description>###Kernel Source Preparation Install libncurses5-dev for make menuconfig
	$ sudo apt-get install libncurses5-dev $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y Get the source code and configure the kernel modules git clone --depth 1 https://github.com/raspberrypi/linux.git cd linux zcat /proc/config.gz &amp;gt;.config edit .config and enable  The Configuration image listed as following:
###Wiring Preparation
	ENC - RPi =============== VCC - 3v3 GND - GND CS - CE0 (gpio 8) SI - MOSI (gpio 10) SCK - SCKL (gpio 11) SO - MISO (gpio 9)  Rapsberry PI GPIO Description:</description>
    </item>
    
    <item>
      <title>Things to be done(4)</title>
      <link>http://purplepalmdash.github.io/2013/11/03/things-to-be-done-4/</link>
      <pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/03/things-to-be-done-4/</guid>
      <description>Transfer Chinese to Pinyin using bash or python.
__How to cut the pdf and generate the suitable version in Linux. __</description>
    </item>
    
    <item>
      <title>Correcting My Weather Script</title>
      <link>http://purplepalmdash.github.io/2013/11/02/correcting-my-weather-script/</link>
      <pubDate>Sat, 02 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/02/correcting-my-weather-script/</guid>
      <description>Due to http://haitao.smzdm.com/youhui/88923 Nanjing Environmenmental Monitoring System changed their website, my python script can&amp;rsquo;t fetch the correct data from this page, I have to find another data source, from http://www.cnpm25.cn/city/nanjing.html, but this source has about 1 hour&amp;rsquo;s delay to the official site.
Because the source changes, the previous script can&amp;rsquo;t work any more, I made following changes, following is the changes in python code
	# table which contians the atmosphere information table = soup.</description>
    </item>
    
    <item>
      <title>Deal With Kernel Panic</title>
      <link>http://purplepalmdash.github.io/2013/11/01/deal-with-kernel-panic/</link>
      <pubDate>Fri, 01 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/01/deal-with-kernel-panic/</guid>
      <description>Recently My ArchLinux always crashes at a certain time after boot up. So following is what I am doing to solve this fucking crash problem. ###Enable FSCK I didn&amp;rsquo;t enable fsck at boot up. so now I will open this parameter via:
	[root@XXXyyy Trusty]# tune2fs -c 30 /dev/sda2 tune2fs 1.42.8 (20-Jun-2013) Setting maximal mount count to 30 [root@XXXyyy Trusty]# tune2fs -c 30 /dev/sda3 tune2fs 1.42.8 (20-Jun-2013) Setting maximal mount count to 30  ###Deal with systemd problem Check which serivce is failed during startup:</description>
    </item>
    
    <item>
      <title>Update Linux-ck in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/11/01/update-linux-ck-in-archlinux/</link>
      <pubDate>Fri, 01 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/11/01/update-linux-ck-in-archlinux/</guid>
      <description>###Add CK kernel repository Add repository to your /etc/pacman.conf:
	[repo-ck] Server = http://repo-ck.com/$arch  Update the local repository via:
	pacman -Syy # Check the repo contents: pacman -Sl repo-ck  ###Install the Kernel and related modules Determine the mach of your cpu&amp;rsquo;smach CFLAG via;
	[root@DashArch ]# gcc -c -Q -march=native --help=target | grep march -march= corei7-avx  This indicates the you should install the group ck-sandybridge, according to corei7-avx.</description>
    </item>
    
    <item>
      <title>JailBreaking Kindle DXG</title>
      <link>http://purplepalmdash.github.io/2013/10/31/jailbreaking-kindle-dxg/</link>
      <pubDate>Thu, 31 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/31/jailbreaking-kindle-dxg/</guid>
      <description>Check your DXG Version, make sure you have the something like 2.5.X(Under Menu-&amp;gt;Settings-&amp;gt;Device Infor), Mine is: Kindle 2.5.8.
In setting-&amp;gt;Menu-&amp;gt;Reset to Factory Default. Notice after this step, your personal information will be erased, so make sure you have backed up all of your data.
Download the jailBreak package from dl.dbank.com/c00mask6e2, unzip it and you will get the file named &amp;ldquo;update_jailbreak_0.7.N_k3gb_install.bin&amp;rdquo;, copy it into the root directory of your kindle, then eject your kindle and run &amp;ldquo;settings-&amp;gt;update your kindle&amp;rdquo; , after a little while, your kindle will reboot and now your jailbreak has been done.</description>
    </item>
    
    <item>
      <title>从最近看的两本书谈谈微博对写作的影响</title>
      <link>http://purplepalmdash.github.io/2013/10/30/cong-zui-jin-kan-de-liang-ben-shu-tan-tan-wei-bo-dui-xie-zuo-de-ying-xiang/</link>
      <pubDate>Wed, 30 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/30/cong-zui-jin-kan-de-liang-ben-shu-tan-tan-wei-bo-dui-xie-zuo-de-ying-xiang/</guid>
      <description>先说个引子: 野夫是我很赞赏的作家，初次看到他的作品是罗永浩推荐的《革命时代的爱情》（http://www.aisixiang.com/data/39314.html）， 当年这篇文章老罗推荐时加的评语说让他哭了个稀里哗啦。彼时博客正火，火爆到基本上每个普通青年吃饱喝足了都要在大大小小的博客平台上留下长长大篇的流水帐表达完对自己美好生活的歌颂后还要呼朋唤友的互踩。后来流量越来越便宜，智能手机也自降身段低贱到少吃两顿肉就能收归囊中的程度，博客就日渐被各种富媒体交流平台所代替了。罗永浩的牛博便是当年大大小小博客平台上最为别致的一个，别致的原因是他把服务器架在了美帝国主义的机房，所以长期被有关部门封杀在墙外，而野夫彼时的博文，每次贴出来，总能轻松在博客排行榜上冲到头条的位置， 彼时写的人用心，看的人也认真，光是评论板块，读者们洋洋洒洒一长段的文字就能引人深思老半天。可不像咱们现在，觉得懒点个“赞”就觉得皆大欢喜了&amp;mdash;-这和领导们读完文件划个圈当属同一性质，画着画着圈，领导们的智商就下降到不能走歪路也不能走邪路了，至于点多了“赞”是否会有同等功效，大家就拭目以待好了。
是这样的，前几天我图便宜，在京东上圈了一大堆书回来，里头有两本卖得很火的野夫的作品，《1980年代的爱情》和《身边的江湖》。拿到手后我掂了掂份量，觉得还挺沉，心里有点窃喜：这两晚上应该有好料可以看了哇！
然后我昨天晚上程序写多了睡不着，就把书翻出来看，不看不知道，一看气坏了。《身边的江湖》里80%的文章我都事先在网上看过了，看了看野夫新写的几篇，觉得有些索然无味，有种为着写而写的意思。比如他写的去香格里拉的文章，在我看来就是一篇有名的流水帐。关于台湾之旅变成了自家走访朋友外加自己的一些见闻所感。这样的文字难免让人失望。当然以前看过的文字还是不错的，也就是说，80%我看过的文字，收录在该书中，还是值得细品的。
打开《1980年代的爱情》后我倒吸一口气：这排版也太适合用文字占用篇幅了吧！？ 基本上，这是我看过的排版很费纸的设计。硕大一张纸，也就中间很窄的部分印上字，页眉和页脚留到很空，一页书扫上几秒，就没了。对于我这种看书速度超快的人，基本上看这本书就是在不停的翻页。
《1980年代的爱情》，这个名字很像马尔克斯的名作《霍乱时期的爱情》。马的作品我是在春节休假时在家读完的，读时的感觉，时而感慨、时而期盼、时而愤怒、最后掩卷之时，因为男主和女主历经劫难终于在一起了嘛，有种巨大的幸福感从内心升华而来。马尔克斯自认为自己最经典的作品，果然名不虚传。
而读《1980年代的爱情》我没有丝毫惊喜。这故事太老套，老套到没有任何惊喜。下乡的已有城里对象的男孩遇到青涩时代心目中的女神，两人羞涩懵懂的暧昧了大半年，而后男孩回校深造回城后不了了之；多年后男孩遭遇变故出狱后再见徐娘半老的女神，两个经历过婚姻后的可怜人来了个一夜情后女神消失；再过了多年女神离世，男孩在葬礼上得知一夜情后女神消失的真实原因是不愿意拖累自己。对了，就这么一个故事。
1980年代，本就没什么爱情， 再嚣张点说，直到现在，中国社会里的爱情也不多&amp;mdash;-如果爱情多得遍地都是的话，《非诚勿扰》等诸多相亲节目也就不会大行其道。不管你是否愿意承认，现实而势利是大多数人生活的常态，在一种近乎于顽固的门第观念下用势利的眼光审视交往的对方，难免就陷入了一种无需建立在“爱”基础上的“情”，然后个体就觉得虚弱而无力，没有了勇气，哪门子的所谓爱情？1980年的两个主人公，在最该勇敢的时候仍然抛不开门第观念，而在可以风轻云淡时偏偏选择了激情，这种个体的选择，很多人可能觉得唏嘘，在我看来是在犯傻。你以为多年后干一炮就能弥补当初没能在一起的遗憾了吗？爱情里有买春想象不到的温暖，很抱歉，书里的描写，没什么温暖。对比于马尔克斯的书读完后的那种幸福感，它什么也没有，反而令我觉得困了。
《1980》这本书描写的与其说是爱情，不如说描述出两个脆弱的个体在尘世间的浮沉。我私下觉得，这部书用一篇博文来记载就够了，硬撑到一部小说的长度，又要学着《霍乱时期的爱情》般命名，作者的功底也许还有所欠缺，而这个故事的厚重程度，不足以支撑起如《霍》一般的荡气回肠。
写出这样的书评我固然有些失望，但也在意料之中。我发现一个现象： 博客兴起的这几年里，大多数人已经变得不会写长篇文字了，或者说，写出来长篇文字，大多是憋出来，憋到后面实在憋不下去，就草草安个结尾。我有注意去看我关注的作家和普通人的博客，大多数人已经放弃了更新， 偶尔有更新，绝大多数的文字也不再如几年前般隽永、有嚼头。
为什么？
我想，我们现在的生活，已经被智能手机和智能手机上寄生的诸多新奇应用冲击得七零八落了。几年前，手机还只是手机，用来打电话、收发短信而已，个别的高级用户，用来导航或看电影玩游戏。几年前大家还是肯踏实的坐在电脑前敲入一段文字的 ，那时候玩游戏有PSP之类，看电影还是要动个BT或者电驴来求种找资源的，各类论坛也比之今日更为火爆和更具真正意义上的交流性。而现在，所有的这些：游戏、导航、社交、视频等等，都可以在一块4.3寸或是更大的屏幕上用手指点击来完成。我们面前的是一个更为快速的年代，各种消息闪得太快，而在过快的消息流里，大多数人所能做的也只是更为简单的“复制”和“粘贴”，就是常用的“转发”功能。所以我们可以看到，大多数的空间的博文前面标注着一个红色的“转”字，而微博达人们每天更是转得不亦乐乎。以前我们去到某个地方，会想着用文字来形容其独特之美，现在我们去了哪里，第一件事就是拿出相机或者手机来噼里啪啦乱拍一通，稍做加工后发到网上去。文字的作用，在信息高速流动的富媒体中，越来越被轻视。
野夫这几年的文章，稍微能看得下去的也只有少数几篇。大多数时候，他挂名土家野夫，在微博上转发着各类敏感或是不敏感的消息。我承认作为有影响力、经历牛逼、看问题角度比较独到的人，在微博这类应用上，确实能起到开启民智的作用。但是，于他自身，又得到了什么呢？不客气的说，影响力是大了很多，但是文字却差了很多。微博等重在传输的应用，对字体的严格限制，会无形中抹杀掉人内心中想要表达的欲望。说白了，微博里，你只是在秀，你可能会缺乏深入的思考、以及对文字/段落/总体格局的细致考究。
我的朋友F对博客和微博有着如下的对比，他说：写文章，好比憋了一大泡尿，憋了很长时间后一泡尿出来，尿得很爽，看的人也觉得很爽；而微博就像是小狗撒尿一样，到哪儿都标注下这里是自己的领地。我觉得这个对比很是恰当，博文里所能展示的，除了作者的文笔，还有见识；而微博中，很多时候是在为了秀存在感，或者说为了标明“啊，这里是我的领地”这种类似于小狗圈地的领地概念。博文时代的读者，能独立思考的时候不在少数；而读多了口水段子，倘再来看长篇大论，估计会有些看不下去。
野夫文字水平的下降，我觉得是这个网络阅读时代的必然。他现在的生活太过于热闹，也就难以写出真正震撼心灵的文字。《1980》的书后有写到故事成型是在2003年，10年后等野夫到了德国了才有空整理出来。这个故事说白了很老套，野夫设想的高潮，关于一夜性爱的篇幅,要真对比于诸多用身体写作的作家们，又显得太小儿科。一篇博文要被硬生生撑成一篇长篇小说，就势必被揉合进太多与主题不相干的杂烩，最终也就毁了这个看似宏大的命题。
如果想写出来好文字，那我觉得把微博关掉是个不错的选择，停掉太多的、不必要的、频繁的吐槽，几天不发言后自然能憋出一大泡想法来付诸于文字；如果想让生活过得充实一点，那你最好扔掉智能手机并远离电视，让人爱不释手的消费类电子、变着法儿吸引人眼球的娱乐节目，这些在给你带来感官享受的同时，其实奴役了你的内心。比如，谈到对象的标准，很多人第一反应恐怕会是非诚的舞台, 而谈到唱歌，好声音的那帮孙子把好端端的歌唱毁成了飙泪的煽情类节目。 所见的定势多了，你陷入了一种人云亦云的表演型变态思维，再回过头来看生活里平淡却是真实的的人和事，恐怕就带上了某种立场。文字需要沉淀, 生活需要静思，可惜的是，匆忙而纷乱的生活、高速的设备和网络，并没有给我们留下太多。</description>
    </item>
    
    <item>
      <title>Gstreamer Development envionroment Setup on Ubuntu</title>
      <link>http://purplepalmdash.github.io/2013/10/29/gstreamer-development-envionroment-setup-on-ubuntu/</link>
      <pubDate>Tue, 29 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/29/gstreamer-development-envionroment-setup-on-ubuntu/</guid>
      <description>Install the following packages:
	apt-get install libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev apt-get install libgtk2.0-dev apt-get install gstreamer0.10-* apt-get install gstreamer-plugin*  Then add a Makefile in each project:
CFLAGS=`pkg-config --cflags gtk+-2.0 gstreamer-0.10` LIBS=`pkg-config --libs gtk+-2.0 gstreamer-0.10` all: tutorial clean: rm *.o tutorial tutorial.o: tutorial.c tutorial.h gcc -g -c tutorial.c $(CFLAGS) tutorial: tutorial.o gcc -o tutorial tutorial.o $(LIBS)  </description>
    </item>
    
    <item>
      <title>Download Source Code in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/10/28/download-source-code-in-archlinux/</link>
      <pubDate>Mon, 28 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/28/download-source-code-in-archlinux/</guid>
      <description>Install abs and base-devel
	$ pacman -S abs base-devel  As root, edit /etc/abs.conf to include your desired repositories:
	REPOS=(core extra community multilib !testing !community-testing !multilib-testing !staging !community-staging !gnome-unstable !kde-unstable)  As root, run &amp;ldquo;abs&amp;rdquo; to download the Arch Build System(ABS) tree.
Find out which package the command belongs to, then use pacman -Ss to get the more detailed information, for example:
	[root@XXXyyy abs]# pacman -Qo audacious /usr/bin/audacious is owned by audacious 3.</description>
    </item>
    
    <item>
      <title>Things To be done(3)</title>
      <link>http://purplepalmdash.github.io/2013/10/28/things-to-be-done-3/</link>
      <pubDate>Mon, 28 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/28/things-to-be-done-3/</guid>
      <description>There are following things to be done in recent days:
 Mp3 Player Effect. Algorithm in C. STM based example to Arduino in pure C. Music Emotions. PSP Like Player Effects. 101 BASIC Games. Pacman Games in C/Python, or other languages. Bombing NJ Games. Recording of the MP3 Shield. SwitchOver in Awesome environments. Lyrics player in Python. Sweater icon in Weather and Atomosphere application. RaspberryPI and enc28j60. Cloud Statistics for PogoPlug data.</description>
    </item>
    
    <item>
      <title>Automatically download all of the full-circle magazine</title>
      <link>http://purplepalmdash.github.io/2013/10/27/automatically-download-all-of-the-full-circle-magazine/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/27/automatically-download-all-of-the-full-circle-magazine/</guid>
      <description>Following is a little script which could help you download all of the PDF version of the full-circle magazines:
#!/bin/bash i=0 for i in {0..78} do #echo $i i=`expr $i + 1` #http://dl.fullcirclemagazine.org/issue46_en.pdf url=`echo &amp;quot;http://dl.fullcirclemagazine.org/issue&amp;quot;$i&amp;quot;_en.pdf&amp;quot;` echo $url wget $url done  If we change the url to CN version, then we can download all of the chinese version PDF:
#!/bin/bash i=0 for i in {0..47} do #echo $i i=`expr $i + 1` #http://dl.</description>
    </item>
    
    <item>
      <title>Bricked? Actually not.</title>
      <link>http://purplepalmdash.github.io/2013/10/27/bricked-actually-not/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/27/bricked-actually-not/</guid>
      <description>Yesterday I install wicd, a tool for automatically configure the wired and wireless network, but unfortuately it didn&amp;rsquo;t act proper, then made my pogoplug into a brick-like equipment, I can only log into the terminal for less than 15 seconds, then I will lose the ssh connection. How to de-brick this equipment?
###Solution A In the 15 seconds living terminal, quickly input following command, this will remove the wicd and use the previous configuration of the network.</description>
    </item>
    
    <item>
      <title>Things to be done(2)</title>
      <link>http://purplepalmdash.github.io/2013/10/26/things-to-be-done-2/</link>
      <pubDate>Sat, 26 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/26/things-to-be-done-2/</guid>
      <description>Following things got to be done in recent days:
 Try different distribution and found the difference and package differences between them(edubuntu, opensuse, fedora, etc). Django/mezzanine, and other python based web development framework. Write your own django based or mezzenine based blog/CMS. __Repair my own computer, and run some cloud on it. __ __Pogoplug own kernel image compilation. __ RaspberryPI own distribution developement. __Download all of the Full Circle using my own script, use it for practicing programming skills.</description>
    </item>
    
    <item>
      <title>Wireless on PogoPlug</title>
      <link>http://purplepalmdash.github.io/2013/10/26/wireless-on-pogoplug/</link>
      <pubDate>Sat, 26 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/26/wireless-on-pogoplug/</guid>
      <description>###Hardware Preparation Insert the usb wireless card and view the dmesg information:
	$ dmesg | tail [911884.740000] usb 1-1.3: USB disconnect, device number 4 [911897.530000] usb 1-1.4: new high speed USB device number 5 using oxnas-ehci [911897.640000] usb 1-1.4: New USB device found, idVendor=0bda, idProduct=8179 [911897.640000] usb 1-1.4: New USB device strings: Mfr=1, Product=2, SerialNumber=3 [911897.650000] usb 1-1.4: Product: 802.11n NIC [911897.650000] usb 1-1.4: Manufacturer: Realtek [911897.660000] usb 1-1.4: SerialNumber: 00E04C0001 The model is Mercury FW150US, See details of the lsusb $ lsusb -v -d 0bda:8179 Bus 001 Device 005: ID 0bda:8179 Realtek Semiconductor Corp.</description>
    </item>
    
    <item>
      <title>Use Xapian for creating a local search engine</title>
      <link>http://purplepalmdash.github.io/2013/10/25/use-xapian-for-creating-a-local-search-engine/</link>
      <pubDate>Fri, 25 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/25/use-xapian-for-creating-a-local-search-engine/</guid>
      <description>###Install Xapian-core Xapian-core is the Xapian library itself. We have to install it from source-code
	$ wget http://oligarchy.co.uk/xapian/1.2.15/xapian-core-1.2.15.tar.gz $ tar xzvf xapian-core-1.2.15.tar.gz &amp;amp;&amp;amp; cd xapian-core-1.2.15/ $ ./configure --prefix=/usr/local &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install  ###Install Omega Omega utilities is an application built on Xapianm, consisting of indexers and a CGI search frontend.
	$ wget http://oligarchy.co.uk/xapian/1.3.1/xapian-omega-1.3.1.tar.gz $ tar xzvf xapian-omega-1.3.1.tar.gz &amp;amp;&amp;amp; cd xapian-omega-1.3.1/ $ ./configure --prefix=/usr/local &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install  ###Configure the CGI for apache Change the &amp;ldquo;ScriptAlias /cgi-bin/ &amp;ldquo;/usr/lib/cgi-bin/&amp;rdquo;&amp;ldquo;, so the httpd knows cgi binaries is put in the /usr/lib/cgi-bin directory.</description>
    </item>
    
    <item>
      <title>Using wicd with Awesome</title>
      <link>http://purplepalmdash.github.io/2013/10/25/using-wicd-with-awesome/</link>
      <pubDate>Fri, 25 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/25/using-wicd-with-awesome/</guid>
      <description>###Install packages Install the following packages
	$ sudo pacman -S wicd $ sudo pacman -S wicd-gtk $ sudo pacman -S notification-daemon $ sudo pacman -S python2-notify  ###Configure Add your account to users group
	# gpasswd -a USERNAME users  Start Wicd as System Service:
	$ systemctl start wicd.service  Automatically start service at boot-up:
	$ systemctl enable wicd.service  Add the wicd-client as tray in the rc.</description>
    </item>
    
    <item>
      <title>Run mini_snmpd on OpenWRT</title>
      <link>http://purplepalmdash.github.io/2013/10/24/run-mini-snmpd-on-openwrt/</link>
      <pubDate>Thu, 24 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/24/run-mini-snmpd-on-openwrt/</guid>
      <description>###OpenWRT Configuration Install mini_snmpd:
	$ opkg update $ opkg install mini-snmpd  Configure mini_snmpd: mainly changes: option enabled 1, then change the option contact and location. But infact we can only fetch list interfaces in cacti:
	root@OpenWrt:~# cat /etc/config/mini_snmpd config mini_snmpd option enabled 1 option ipv6 0 option community &#39;public&#39; option contact &#39;gwoguowug@gmail.com&#39; option location &#39;Asia/China/Nanjing&#39; # enable basic disk usage statistics on specified mountpoint list disks &#39;/jffs&#39; list disks &#39;/tmp&#39; # enable basic network statistics on specified interface # 4 interfaces maximum, as named in /etc/config/network list interfaces &#39;loopback&#39; list interfaces &#39;lan&#39; list interfaces &#39;wan&#39;  Restart the mini_snmpd:</description>
    </item>
    
    <item>
      <title>Add optional data into snmpd</title>
      <link>http://purplepalmdash.github.io/2013/10/23/add-optional-data-into-snmpd/</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/23/add-optional-data-into-snmpd/</guid>
      <description>###Prepare the script We get the current system load from /proc/loadavg:
	[Trusty@XXXyyy ~]$ cat /bin/online.sh #!/bin/sh echo .1.3.6.1.4.1.102.8 cat /proc/loadavg | awk {&#39;print $1&#39;}  Then we have to add this script to our /etc/snmp/snmpd.conf:
	extend .1.3.6.1.4.1.2021.53 online_monitor /bin/sh /bin/online.sh  Restart the service:
	systemctl restart snmpd  Use snmpwalk to view the newly added item:
	snmpwalk -v 2c -c public 10.0.0.221 .1.3.6.1.4.1.2021.53  ###Fetch the data See the following data is what we want:</description>
    </item>
    
    <item>
      <title>Cacti and snmpd</title>
      <link>http://purplepalmdash.github.io/2013/10/23/cacti-and-snmpd/</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/23/cacti-and-snmpd/</guid>
      <description>On the machine being monitored, check the snmpd configuration file, you will find some items like following:
	$ cat /etc/snmp/snmpd.conf rocommunity public rwcommunity admin agentaddress tcp:161 If you want to enable Location and contact, add: syslocation Bat. C2 syscontact someone@somewhere.org  On the monitor PC, we can use following command to view the monitored machine&amp;rsquo;s status:
	$ snmpwalk -c Trusty -v 2c 10.0.0.221:661 or $ snmpwalk -c Trusty -v 2c 10.</description>
    </item>
    
    <item>
      <title>NetBSD Start</title>
      <link>http://purplepalmdash.github.io/2013/10/23/netbsd-start/</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/23/netbsd-start/</guid>
      <description>###Installation and Configuration Download the install.iso and install it in the virtualbox.
Then add http_proxy, https_proxy, ftp_proxy, ftps_proxy into the .profile file.
visudo add the current user to the sudo list, then add Defaults env_keep to the http_proxy, etc, because we want to use pkg_add under the sudo priviledge.
###Updating the software repository snapshot Edit the Package path via:
	export PKG_PATH=ftp://filedump.se.rit.edu/pub/OpenBSD/5.3/`machine -a`/  Update the ports configuration database:
	$ cd /tmp $ ftp ftp://filedump.</description>
    </item>
    
    <item>
      <title>My Translator in ArchLinux&#43;Awesome(2)</title>
      <link>http://purplepalmdash.github.io/2013/10/22/my-translator-in-archlinux-plus-awesome-2/</link>
      <pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/22/my-translator-in-archlinux-plus-awesome-2/</guid>
      <description>###Prefix 3 days ago I wrote a simple translator on my ArchLinux which could pop-up a notification window when I query a word. But when I use it at company it failed. Becaus the firewall has banned the communication to Google&amp;rsquo;s API. Thus I have to write another version of translator, which could get the result from the local database. ###Preparation python-stardict is a great library for querying word from stardict&amp;rsquo;s dictionary, you can get it via:</description>
    </item>
    
    <item>
      <title>Things to be done in these days</title>
      <link>http://purplepalmdash.github.io/2013/10/22/things-to-be-done-in-these-days/</link>
      <pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/22/things-to-be-done-in-these-days/</guid>
      <description>There are following things to be done in recent days:
 Using a local dictionary for refering the words [Currently Done] SNMP on different equipments [Currently Done] Try installing and using FreeBSD/NetBSD [Currently Done] Using python to do image manipulation Using Python and other software to generate the big alubum pictures which contains different small pictures How to compare images using Linux scripts How to create a local search engine on my personal web server.</description>
    </item>
    
    <item>
      <title>Install SNMPD in OpenWRT</title>
      <link>http://purplepalmdash.github.io/2013/10/21/install-snmpd-in-openwrt/</link>
      <pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/21/install-snmpd-in-openwrt/</guid>
      <description>###Install snmpd
	$ opkg update &amp;amp;&amp;amp; opkg install snmpd  The configuration file is /etc/config/snmpd, the configure file could be finetuned. while the file /etc/init.d/snmpd script will make snmpd program to load another cutom config
snmpd is too big for embedded system, so we use mini-snmpd for openwrt. ###Install mini-snmpd
	$ opkg update &amp;amp;&amp;amp; opkg install mini-snmpd  The configuration file is located at /etc/config/mini_snmpd, edit this file,for enable the default configration from option enable 0 to option enable 1, this will make mini_snmpd start for default.</description>
    </item>
    
    <item>
      <title>snmp on Raspberry PI</title>
      <link>http://purplepalmdash.github.io/2013/10/21/snmp-on-raspberry-pi/</link>
      <pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/21/snmp-on-raspberry-pi/</guid>
      <description>I want to use snmp for administrating my raspberry PI, for example, its disk usage, cpu usage, and etc. following is the how-to of setting up the monitoring environment.
###Preparation
	$ apt-get upate &amp;amp;&amp;amp; apt-get upgrade $ apt-get install apache2 php5 mysql-client mysql-server You will be prompted to set a password for mysql root user. $ apt-get install php5-mysql php5-snmp rrdtool snmp snmpd  </description>
    </item>
    
    <item>
      <title>My Translator in ArchLinux&#43;Awesome</title>
      <link>http://purplepalmdash.github.io/2013/10/19/my-translator-in-archlinux-plus-awesome/</link>
      <pubDate>Sat, 19 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/19/my-translator-in-archlinux-plus-awesome/</guid>
      <description>###BackGround My requirement is quite simple: I read many english content based website everyday, this means I always encounter many unkown words. My solution is use a translatio software or directly refer them in translate.google.com. But all of these ways were time-consuming process: you have to switch to other software, or you have to open new tabs in your web brower. So do we have a more sufficient way for doing these steps?</description>
    </item>
    
    <item>
      <title>DVB-T on ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/10/17/dvb-t-on-archlinux/</link>
      <pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/17/dvb-t-on-archlinux/</guid>
      <description>First we have to get the description of the DVB-T USB stick, use lsusb will get the result of the inserted DVB Disk:
	$ lsusb Bus 002 Device 004: ID 0bda:2838 Realtek Semiconductor Corp. RTL2838 DVB-T Also we can check the demsg information to get the DVB-T stick information: [44867.951615] usb 2-2: new high-speed USB device number 4 using xhci_hcd [44868.345834] usbcore: registered new interface driver dvb_usb_rtl28xxu [44868.345912] usb 2-2: dvb_usb_v2: found a &#39;Realtek RTL2832U reference design&#39; in warm state [44868.</description>
    </item>
    
    <item>
      <title>Wireless</title>
      <link>http://purplepalmdash.github.io/2013/10/17/wireless/</link>
      <pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/17/wireless/</guid>
      <description>iw dev will show the wireless device:
	[root@XXXyyy Trusty]# iw dev phy#0 Interface wlo1 ifindex 2 wdev 0x1 addr xx:xx:xx:xx:xx:xx type managed  Then use the deivce name got from last step, ip link set it up
	[root@XXXyyy Trusty]# ip link set wlo1 up # Check the status: [root@XXXyyy Trusty]# iw dev wlo1 link Not connected.  Scan the available wireless network:
	[root@XXXyyy Trusty]# iw dev wlo1 scan | more [root@XXXyyy Trusty]# iw dev wlo1 scan | grep SSID SSID: WLAN14 SSID: VISITOR .</description>
    </item>
    
    <item>
      <title>OpenWRT on Mercury MW151RM3G</title>
      <link>http://purplepalmdash.github.io/2013/10/15/wireless-in-archlinux/</link>
      <pubDate>Tue, 15 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/15/wireless-in-archlinux/</guid>
      <description>1. Change Mercury MW151RM3G into TP-Link 703N. You have to download the firmware named &amp;ldquo;MW151rm3G_to_wr703nv1&amp;rdquo; from google searched result. After flashing this onto your Mercury MW151RM3G, In fact you have got a TP-LINK 703N.
2. Download the latest firmware of TP-LINK 703N from openwrt.org. The Download URL is located at http://wiki.openwrt.org/toh/tp-link/tl-wr703n. You can get two files, named &amp;ldquo;squashfs-factory.bin&amp;rdquo; and &amp;ldquo;squashfs-sysupgrade.bin&amp;rdquo;, the factory.bin is for flashing firstly, after flashed this image, flash another named sysupgrade.</description>
    </item>
    
    <item>
      <title>Using SNMP for administ PogoPlug</title>
      <link>http://purplepalmdash.github.io/2013/10/14/using-snmp-for-administ-pogoplug/</link>
      <pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/14/using-snmp-for-administ-pogoplug/</guid>
      <description>###Preparation For using SNMP for administrating PogoPlug, we have to install following packages first:
	# apt-get install snmpd smartmontools super  snmpd is the daemon process for snmp, smartmontools is the monitor tools for harddisk, super let you run daemon process in super priviledge.
###Configuration Configure snmp firstly.
###Client Configuration Install the webserver using the following command:
	$ pacman -S apache php php-apache mariadb  After install the packages, if you want to change the configuration file, directly edit the /etc/httpd/conf/httpd.</description>
    </item>
    
    <item>
      <title>How python interact with RaspberryPI GPIO</title>
      <link>http://purplepalmdash.github.io/2013/10/12/how-python-interact-with-raspberrypi-gpio/</link>
      <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/12/how-python-interact-with-raspberrypi-gpio/</guid>
      <description>Yesterday I use RaspberryPI to control the LED using its GPIO port. with Python code we can directly &amp;ldquo;talk&amp;rdquo; to RaspberryPI, and set LED on and off. But what is the principle in it? How to realize our own library(for example, python/perl/lua based library?), here I will dive into the python library code and find what&amp;rsquo;s really inside the python code.
###Prepare the environment Install the RPi.GPIO via pip, $ pip install RPi,GPIO .</description>
    </item>
    
    <item>
      <title>xively入门(1)</title>
      <link>http://purplepalmdash.github.io/2013/10/11/xivelyru-men-1/</link>
      <pubDate>Fri, 11 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/11/xivelyru-men-1/</guid>
      <description>###What is Xively?
Xively Cloud Services™
The world’s first IoT Public Cloud
###How to get start? Read tutorial and generate an API.
Then you can visit your own APP under: WEB TOOLS-&amp;gt; DEVELOP -&amp;gt; something.
Create a new Development Devices, named &amp;ldquo;Raspberry Pi&amp;rdquo;, xively will automatically generate the API Keys and the feed id for this developement device.
The key issue for using APIs is &amp;ldquo;talk&amp;rdquo; to the APIs and upload the data to the website.</description>
    </item>
    
    <item>
      <title>软之妹纸</title>
      <link>http://purplepalmdash.github.io/2013/10/10/ruan/</link>
      <pubDate>Thu, 10 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/10/ruan/</guid>
      <description>软之妹纸
从前有个软妹纸，她从小就立志要去寻找王纸，于是她骑着电动车出发了。 这天她来到一个国度，这个国度叫程序王国，这里的人个个都很悲伤，于是她问：“发生了什么让你们这么悲伤呢？” 人们告诉她：“我们的王纸被妖女抓走了，他是个帅哥，也很关心偶们，他被抓走后，我们都很伤心” 于是她去见老国王：“国王，我决定，去帮你救回王纸！” 白发苍苍的老国王，悲伤的抬起头：“软妹纸？靠你？我已经派了八队骑士去拯救王纸了，每次回来的都只有他们的马……” “放心吧，国王，我一定救回王纸”
于是软妹纸上路了……
她开着电动车走了七七四十九天，终于接近了妖女的城堡。路过城堡需要经过一座很长的石桥，把守石桥的是一只很凶恶的吃人龙。石桥上摆着被龙吃掉的森森白骨和一大堆盔甲，看来这都是国王派去的骑士们留下来的。 “我要把你吃掉！！！！” “那你试试看”软妹纸把电动车停好在桥头，双手叉腰站成个圆规仰着脖子看着龙 龙一张口，就把软妹纸吞到了肚子里。
故事就这么结束了吗？
木有！！！因为软妹纸是软的，软成什么程度呢，你们可以想象一下口香糖的嘛。她太不好消化了，龙被折腾的上窜下跳，终于受不了软妹纸的折磨，于是张开大口，放软妹纸出来了，并答应做软妹纸的坐骑。
于是软妹纸坐着龙飞过石桥到了城堡门口。她在城堡底下大声的喊“楼上有人吗？“ 王纸从最高一层的房间里探出头来，原来她被妖女关在了最高一层，每天要帮妖女改论文。这个房间有999米高，也没有梯子上去。城堡被施了魔法，龙没法起飞。
软妹纸肿么上去呢？故事就这么结束了吗？
木有！！！ 软妹纸冲着上面喊：“王纸，把你的网线拔了扔下来，我攀上去！“ 然后王纸就把网线拔了仍了下来，软妹纸一路爬着上去了。
有个笨蛋说：王纸既然有网线，自己攀下来不就得了？&amp;mdash;-亲，物理没学好对吧？王纸再苗条，体重也过了100了！知道啥叫百兆网线不！？就是能承受100斤载重的网线。俗话说，好女不过百，软妹纸就是这样一个“好女”。
天黑时候，妖女打完麻将回来了。她一进房间就恶狠狠的问“第四章改完了吗？我等着发表呢！“ “还没有，我的网线没有了，没法查资料！“ “那你就给老纸加班吧，晚上也不要吃饭了，赶紧写！“
“妖女，你太过分了，我要和你决斗！“软妹纸从窗帘后闪了出来 “你是谁？怎么上来的？“ “我叫软妹纸，网线没有，就是因为被我用来当攀爬绳了，放开那个王纸，他应该是自由的！“ “那好，尝尝我的三味白骨火吧，是人都熬不住的！“ 妖女话音刚落，口里就喷出三道火焰来，瞬间软妹纸就被烈焰包围了！
软妹纸死了吗？故事就那么结束了吗？
木有！！！木有！！！！！！ 火烧了30分钟了，软妹纸笑语盈盈从火焰里走了出来。只用眼睛一闪，一道电光向妖女袭去，妖女惨叫一声，倒在地下。 “怎么可能？怎么可能？你居然一点事都没有？“妖女丧心病狂的叫喊着。 “没想到吧？我可是软妹纸哦!“ “在我临死前，告诉我为什么!?“ “好！” 软妹纸拿起自己的头发： “你看，离子烫的，防辐射，防高温，它保护了我的头部” 软妹纸指向自己的鞋子： “你看，UGG，加速效果20%，防高温防辐射防冰冻，你的烈焰一点用处都木有！” 软妹纸指着自己的袜子： “你看，黑丝，有效隔热、防寒、兼美化效果！” “至于胸部的保护，你没听过塑身内衣吗？当年黄蓉的软猬甲，也不过如此！！”
妖女大喊“我不相信，我不相信，至少，你的脸蛋还露在外面！！！还有手臂！” 软妹纸轻蔑的看着妖女： “手臂？防晒霜啊亲！SPI30的哦！” “脸蛋？ 你不晓得现在的软妹纸都打粉底的嘛！我早就料到你的三味白骨火了，特地打了两斤粉才来的！唇膏是炫彩的，直接反射了热量” “最后告诉我，你是用什么招击败我的！？” “无敌电眼&amp;mdash;-你看，我有这个。”软妹纸掏出一个小瓶：“这是睫毛膏”软妹纸又掏出一个小盒子：“这是无敌美瞳”“再加上假睫毛，电压高达三万伏特，所以只放了一次电你就倒了，能死在我无敌电眼下，妖女，你可以瞑目了！” 妖女缓缓的闭上了双眼……
王纸自由了,他再也不用替妖女改文章了！！！ 就这样，软妹纸拯救了会写程序的王纸，他们骑着喷火龙一起回到了程序王国，从此过着幸福安宁的日子。</description>
    </item>
    
    <item>
      <title>Crontab in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/10/09/crontab-in-archlinux/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/09/crontab-in-archlinux/</guid>
      <description>1. Install Crontab in ArchLinux
	$ pacman -S cronie  2. Enable the cronie at startup.
	$ systemctl enable cronie.service $ systemctl start cronie.service # Display the crontab jobs $ crontab -l  3. Edit the crontab jobs:
	MAILTO=your@email LOGFILE=/var/log/cron-pacman.log # 1. minute (0-59) # | 2. hour (0-23) # | | 3. day of month (1-31) # | | | 4. month (1-12) # | | | | 5.</description>
    </item>
    
    <item>
      <title>Use sublime-text in ArchLinux</title>
      <link>http://purplepalmdash.github.io/2013/10/09/use-sublime-text-in-archlinux/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/10/09/use-sublime-text-in-archlinux/</guid>
      <description>1. Install Sublime-text in ArchLinux:
	$ pacman -S sublime-text  2. Now we could install the package control from the https://sublime.wbond.net/installation.
After installed the package control, sublime-text should be reboot for make package control to be used.
3. Install stino for Arduino development. You can refer to https://github.com/Robot-Will/Stino.
Beware that Preferences should be set to the corresponding directory, and because Arduino upload uses the ttyUSB device, you&amp;rsquo;d better use Sublime under root priviledge(directly use root or use sudo subl).</description>
    </item>
    
    <item>
      <title>Android-studio</title>
      <link>http://purplepalmdash.github.io/2013/09/29/android-studio/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/29/android-studio/</guid>
      <description>1.安装步骤
Yaourt市场里可以直接安装:yaourt android-studio， 编译完后即可直接运行之。
官方介绍是：基于IntelliJ IDEA的Android开发环境。 最早发布于2013年5月。
IntelliJ IDEA是JetBrains开发的JAVA IDE. 号称是最好的Java和Polyglot IDE.
Polyglot是一门计算机语言（或者说是脚本），使用C编写，类似于Lisp, Perl或sh
2. Todo LIst
Update android-sdk. because it couldn&amp;rsquo;t be updated behind the proxy.
如果在防火墙后，更新SDK可能会碰到问题，这时候，到安装android-sdk目录下，输入tools/android，更改Tools-&amp;gt;proxy,并使用Force https to https即可
3. Trouble shooting:
如果提示，不能创建NAND， could not create temp file for system NAND disk image:
解决方案为: $ sudo chmod 777 /tmp/android-Trusty/</description>
    </item>
    
    <item>
      <title>判断python中值是否存在</title>
      <link>http://purplepalmdash.github.io/2013/09/28/pan-duan-pythonzhong-zhi-shi-fou-cun-zai/</link>
      <pubDate>Sat, 28 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/28/pan-duan-pythonzhong-zhi-shi-fou-cun-zai/</guid>
      <description>故事背景是这样的，写了一个自动获得美帝大使馆空气质量的python脚本，每隔一个小时取回数据存入数据库(数据库用Sqlite3), 并实时生成网页端的统计图形。然而当原始数据无法取得的时候，该程序会自动退出。因为脚本同时取得两个城市的PM值和温度/湿度，如果一个城市数据失败，另一个城市也将失败。
运行时提示： name &amp;lsquo;AQIdigits&amp;rsquo; is not defined, 这里的AQIdigits就是用来存储北京pm2.5数据的数组。
解决方案，在插入数据前，检查数据是否存在，如果不存在，直接将其设置为0
+ if (not(&#39;bj_temp&#39; in vars() or &#39;bj_temp&#39; in globals())): + bj_temp=0 + if (not(&#39;bj_humi&#39; in vars() or &#39;bj_humi&#39; in globals())): + bj_humi=0 + if (not(vars().has_key(&#39;AQIdigits&#39;))): + AQIdigits = [u&#39;0&#39;] + if (not(vars().has_key(&#39;Concendigits&#39;))): + Concendigits = [u&#39;0&#39;] cur_bj.execute(&#39;insert into foo values(?, ?, ? , ? ,?)&#39;, (bj_temp, bj_humi, AQIdigits[0], Concendigits[0], currenttime_linux)) cur_bj.execute(&#39;select * from foo ORDER BY d_time ASC LIMIT ((Select count([d_time]) from foo)-24),24&#39;)  这个修改做完之后，即便无法取回当前有效的数据值，脚本也会用0来代替需要插入的数据。众所周知，以北京的德行，pm2.</description>
    </item>
    
    <item>
      <title>Python and GPIO on Raspberry PI</title>
      <link>http://purplepalmdash.github.io/2013/09/27/python-and-gpio-on-raspberry-pi/</link>
      <pubDate>Fri, 27 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/27/python-and-gpio-on-raspberry-pi/</guid>
      <description>1. 安装python-dev, 准备环境
$ apt-get install python-dev $ wget https://pypi.python.org/packages/source/R/RPi.GPIO/RPi.GPIO-0.5.3a.tar.gz $ tar xzvf RPi.GPIO-0.5.3a.tar.gz $ python setup.py install  2.</description>
    </item>
    
    <item>
      <title>用python操纵Sqlite3</title>
      <link>http://purplepalmdash.github.io/2013/09/20/yong-pythoncao-zong-sqlite/</link>
      <pubDate>Fri, 20 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/20/yong-pythoncao-zong-sqlite/</guid>
      <description>1. 在命令行下使用sqlite3创建数据库, 运行完以下命令后，在本地目录会生成一个weather.db文件，由于我们什么都没有做，所以这个数据库现在是空的。
$ sqlite3 weather.db SQLite version 3.8.0.2 2013-09-03 17:11:13 Enter &amp;quot;.help&amp;quot; for instructions Enter SQL statements terminated with a &amp;quot;;&amp;quot; sqlite&amp;gt; .tables sqlite&amp;gt; .exit [Trusty@DashArch weather]$ ls weather.db  2.</description>
    </item>
    
    <item>
      <title>用Python生成当前城市的空气/气候数据</title>
      <link>http://purplepalmdash.github.io/2013/09/10/yong-pythonsheng-cheng-dang-qian-cheng-shi-de-kong-qi-slash-qi-hou-shu-ju/</link>
      <pubDate>Tue, 10 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/10/yong-pythonsheng-cheng-dang-qian-cheng-shi-de-kong-qi-slash-qi-hou-shu-ju/</guid>
      <description>最近空气污染很严重，临时写了这个脚本，用来即时生成当前城市的空气质量和温度、湿度等指数。
1. 安装python虚拟运行环境，因为ArchLinux上的python版本是3,需要安装2.x的python，如果你能确认自己机器上的python版本是2,这步可以忽略：
$ mkvirtualenv -p /usr/bin/python2.7 venv2 $ workon venv2  2. 安装beautiful soup和pywapi， pip是python安装环境，BeautifulSoup用来解析html/xml， pywapi是一个用于取得天气数据的库:
$ pip install BeautifulSoup $ pip install pywapi  3. 输入下面的代码, 将此文件存放为/usr/bin/genhtm.py, 并赋予执行权限:
#!/usr/bin/python # -*- coding: utf-8 -*- # Using BeautifulSoup for analyse the html file from BeautifulSoup import BeautifulSoup import urllib2 # Using pywapi for getting the weather data import pywapi import string # Using django for generating the data from django.</description>
    </item>
    
    <item>
      <title>自动获取本机公网地址的方法</title>
      <link>http://purplepalmdash.github.io/2013/09/10/zi-dong-huo-qu-ben-ji-gong-wang-di-zhi-de-fang-fa/</link>
      <pubDate>Tue, 10 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/10/zi-dong-huo-qu-ben-ji-gong-wang-di-zhi-de-fang-fa/</guid>
      <description>此方法适用于主机位于防火墙/路由器后，只有局域网地址的情况。如果在路由器上开启DMZ映射到该主机，则直接可以从公网其他位置访问该主机。
功能:
 主机开机时会将路由器的公网地址发送到指定邮箱。 路由器IP地址发生变化时会将更新后的IP地址发送到指定邮箱。  1. 首先，配置好mutt, 关于mutt的配置，详见：
https://wiki.archlinux.org/index.php/Mutt
2. 保存下面代码到某个文件中，比如/bin/autoip, 而后chmod a+x /bin/autoip:
#!/bin/sh origip=`curl &amp;quot;http://checkip.dyndns.org/&amp;quot; 2&amp;gt;/dev/null | awk &#39;{print $6}&#39;|cut -d &#39;&amp;lt;&#39; -f1` echo $origip | mutt -s &amp;quot;ip is&amp;quot; -- kkkttt@gmail.com while : do publicip=`curl &amp;quot;http://checkip.dyndns.org/&amp;quot; 2&amp;gt;/dev/null | awk &#39;{print $6}&#39;|cut -d &#39;&amp;lt;&#39; -f1` sleep 600 judgeip=`curl &amp;quot;http://checkip.dyndns.org/&amp;quot; 2&amp;gt;/dev/null | awk &#39;{print $6}&#39;|cut -d &#39;&amp;lt;&#39; -f1` if [ &amp;quot;$publicip&amp;quot; != &amp;quot;$judgeip&amp;quot; ] then echo $judgeip | mutt -s &amp;quot;ip changed&amp;quot; -- kkkttt@gmail.</description>
    </item>
    
    <item>
      <title>Arm1136 Kernel For Raspberry PI</title>
      <link>http://purplepalmdash.github.io/2013/09/04/arm1136-kernel-for-raspberry-pi/</link>
      <pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/04/arm1136-kernel-for-raspberry-pi/</guid>
      <description>qemu-system-arm可以直接使用内核用于加载系统。通常情况下我们可以用预编译好的第三方提供的内核来启动系统，然而如果我们需要用到定制的内核，就需要对内核进行编译了。下面的步骤将讲述如何编译出基于arm1136架构的raspberry PI内核。
1. 安装交叉编译链。
ArchLinux中，可以直接从Yaourt仓库里通过“yaourt gnueabihf”查找对应的包，编译的过程不再详述。安装完后，在终端输入arm-(Tab)应该可以看到arm-linux-gnueabihf-开头的编译器。
2. 准备内核源码。
# 从github下载源码 $ git clone https://github.com/raspberrypi/linux.git # Apply Patch $ wget http://xecdesign.com/downloads/linux-qemu/linux-arm.patch $ patch -p1 -d linux/ &amp;lt; linux-arm.patch  3. 配置、编译内核。
# 加载默认配置 $ cd linux $ make ARCH=arm versatile_defconfig # 自定义内核 $ make ARCH=arm menuconfig # 设置编译器 General Setup ---&amp;gt; Cross-compiler tool prefix (arm-linux-gnueabihf-) # 选择正确的CPU System Type ---&amp;gt; [*] Support ARM V6 processor [*] ARM errata: Invalidation of the Instruction Cache operation can fail [*] ARM errata: Possible cache data corruption with hit-under-miss enabled # 激活浮点运算 Floating point emulation ---&amp;gt; [*] VFP-format floating point maths # 激活ARM EABI Enable ARM EABI: Kernel Features ---&amp;gt; [*] Use ARM EABI to compile the kernel [*] Allow old ABI binaries to run with this kernel # 激活QEMU磁盘支持 Bus Support ---&amp;gt; [*] PCI Support Device Drivers ---&amp;gt; SCSI Device Support ---&amp;gt; [*] SCSI Device Support [*] SCSI Disk Support [*] SCSI CDROM support [*] SCSI low-lever drivers ---&amp;gt; [*] SYM53C8XX Version 2 SCSI support # 激活devtmpfs Device Drivers ---&amp;gt; Generic Driver Options---&amp;gt; [*] Maintain a devtmpfs filesystem to mount at /dev [*] Automount devtmpfs at /dev, after the kernel mounted the root # 激活重要的文件系统 Enable the important file systems: &amp;lt;*&amp;gt; Ext3 journalling file system support &amp;lt;*&amp;gt; The Extended 4 (ext4) filesystem # 激活tmpfs File systems ---&amp;gt; Pseudo filesystems---&amp;gt; [*] Virtual memory file system support (former shm fs) # 激活event接口 Device Drivers ---&amp;gt; Input device support---&amp;gt; [*] Event interface # 激活/proc/config.</description>
    </item>
    
    <item>
      <title>Qemu For RaspberryPI</title>
      <link>http://purplepalmdash.github.io/2013/09/04/qemu-for-raspberrypi/</link>
      <pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/04/qemu-for-raspberrypi/</guid>
      <description>我用Qemu来仿真RaspberryPI以便快速测试内核模块的开发。下面是仿真的步骤：
1. 下载镜像文件2013-07-26-wheezy-raspbian.img，并更改其配置使得可以被qemu-system-arm加载：
$ fdisk -l 2013-07-26-wheezy-raspbian.img Disk 2013-05-25-wheezy-raspbian.img: 1939 MB, 1939865600 bytes, 3788800 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x000c7b31 Device Boot Start End Blocks Id System 2013-05-25-wheezy-raspbian.img1 8192 122879 57344 c W95 FAT32 (LBA) 2013-05-25-wheezy-raspbian.img2 122880 3788799 1832960 83 Linux #从上面可以看到，根文件分区的地址偏移为512*122880=62914560 #更改根分区文件里preload信息: $ sudo mount .</description>
    </item>
    
    <item>
      <title>Add Netfilter NAT for pogoplug</title>
      <link>http://purplepalmdash.github.io/2013/09/03/add-netfilter-nat-for-pogoplug/</link>
      <pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/03/add-netfilter-nat-for-pogoplug/</guid>
      <description>Pogoplug上了debian wheezy后，想配置成VPN服务器，在最后一步配置iptables时发现无法激活NAT表。
显示结果为：
$ iptables -t nat -A POSTROUTING -s 10.10.10.0/24 -o eth0 -j MASQUERADE can&#39;t initialize iptables table &#39;NAT&#39;: Table does not exist (do you need to insmod?)  解决方法:重新编译NetFilter模块。
下载Linux3.1.10内核并解压到/usr/src
$ make menuconfig
{% img img /images/2013_09_03_12_53_06_868x411.jpg %}
而后：
{% img img /images/2013_09_03_12_54_08_749x362.jpg %}
确保以下选项被激活：
	CONFIG_NF_CONNTRACK CONFIG_NF_CONNTRACK_IPV4 CONFIG_NF_NAT CONFIG_IP_NF_IPTABLES  而后编译，由于在嵌入式系统上编译速度较慢，所以只是编译目录下对应的模块，其他的则不编：
$ make M=net/netfilter modules # Make all modules in specified dir $ make M=net/netfilter # Same as &#39;make M=dir modules&#39; $ make M=net/netfilter modules_install # Install modules  这样就应该可以了，具体的验证等回家再看。</description>
    </item>
    
    <item>
      <title>ArchLinux Ntp update time</title>
      <link>http://purplepalmdash.github.io/2013/09/03/archlinux-ntp-update-time/</link>
      <pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/03/archlinux-ntp-update-time/</guid>
      <description>1. 安装ntpd
$ pacman -S ntpd  2. 配置ntp服务器
$ vim /etc/ntp.conf server 0.pool.ntp.org iburst server 1.pool.ntp.org iburst server 2.pool.ntp.org iburst server 3.pool.ntp.org iburst  3. 同步时间
$ sudo ntpd -gq  4. 加入守护进程运行
$ sudo systemctl enable ntpd  </description>
    </item>
    
    <item>
      <title>Using tsocks for acrossing the company firewall</title>
      <link>http://purplepalmdash.github.io/2013/09/03/using-tsocks-for-acrossing-the-company-firewall/</link>
      <pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/09/03/using-tsocks-for-acrossing-the-company-firewall/</guid>
      <description>1. 在家庭主机上配置DDNS服务，可以从no-ip.com申请一个免费的动态域名。no-ip同时提供了适用于不同平台的客户端，可以在其主页下载，并在家庭主机上安装之。家里的路由器上也可以配置DDNS，国内的可以用花生壳服务，而后开放DMZ主机给内网的主机即可。家庭主机需要开启sshd服务，这方面可以参考网上的有关ssh服务器的配置攻略
2. 在公司主机上，使用下列命令即可建立ssh代理
ssh -qTfnN -D 1394 xxx@xxx.no-ip.biz  命令详解:
-q Quite模式 -T 不分配伪终端 -f ssh后台运行 -n 将标准输入重定向到/dev/null -N 不执行远程命令 -D 绑定本地端口1394  接下来我们就可以使用本地的端口127.0.0.1:1394作为socket代理服务器了。
3. 安装tsocks, 并配置.
$ pacman -S tsocks $ vim /etc/tsocks.conf server = 127.0.0.1 server_type = 5 server_port = 1394  4. 使用tsocks运行出一个完全自由的终端：
$ tsocks gnome-terminal  在新弹出的终端内，无需设置任何代理即可自由访问各处资源，衍生于该终端的应用程序也可以直接享用家庭网络的自由权限。enjoy it!</description>
    </item>
    
    <item>
      <title>Pure C In Arduino</title>
      <link>http://purplepalmdash.github.io/2013/08/28/pure-c-in-arduino/</link>
      <pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/08/28/pure-c-in-arduino/</guid>
      <description>1. 输入.c文件，用于点亮arduino板上的LED，默认为pin 5口
#include &amp;lt;avr/io.h&amp;gt; #include &amp;lt;util/delay.h&amp;gt; enum { BLINK_DELAY_MS = 1000, }; int main (void) { /* set pin 5 of PORTB for output*/ DDRB |= _BV(DDB5); while(1) { /* set pin 5 high to turn led on */ PORTB |= _BV(PORTB5); _delay_ms(BLINK_DELAY_MS); /* set pin 5 low to turn led off */ PORTB &amp;amp;= ~_BV(PORTB5); _delay_ms(BLINK_DELAY_MS); } return 0; }  2. 编译并生成映像文件：
$ avr-gcc -Os -DF_CPU=16000000UL -mmcu=atmega328p -c -o led.</description>
    </item>
    
    <item>
      <title>Olimex refer</title>
      <link>http://purplepalmdash.github.io/2013/07/25/olimex-refer/</link>
      <pubDate>Thu, 25 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/25/olimex-refer/</guid>
      <description>It seems this board is good:
OpenWRT trunk for imx233-OLinuXino now have 3220 packages http://olimex.wordpress.com/2013/07/24/openwrt-for-imx233-olinuxino-trunk-now-with-3220-packages/ …
Taobao Address: http://item.taobao.com/item.htm?spm=a230r.1.14.7.WT8tYl&amp;amp;id=21117476143</description>
    </item>
    
    <item>
      <title>Arduino笔记(2)</title>
      <link>http://purplepalmdash.github.io/2013/07/15/arduinobi-ji-2/</link>
      <pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/15/arduinobi-ji-2/</guid>
      <description>1. PWM概念： PWM( Pulse Width Modulation).简单来说，在arduino中我们可以理解为就是通过调节占空比来实现不同电压输出。
图片：
2. analogWrite()
描述
从一个引脚输出模拟值（PWM）。可用于让LED以不同的亮度点亮或驱动电机以不同的速度旋转。analogWrite()输出结束后，该引脚将产生一个稳定的特殊占空比方波，直到下次调用analogWrite()（或在同一引脚调用digitalRead()或digitalWrite()）。PWM信号的频率大约是490赫兹。
在大多数arduino板（ATmega168或ATmega328），只有引脚3，5，6，9，10和11可以实现该功能。在aduino Mega上，引脚2到13可以实现该功能。老的Arduino板（ATmega8）的只有引脚9、10、11可以使用analogWrite()。在使用analogWrite()前，你不需要调用pinMode()来设置引脚为输出引脚。
analogWrite函数与模拟引脚、analogRead函数没有直接关系。
通过读取电位器的阻值控制LED的亮度
int ledPin = 9; // LED连接到数字引脚9 int analogPin = 3; //电位器连接到模拟引脚3 int val = 0; //定义变量存以储读值 void setup() { pinMode（ledPin,OUTPUT）; //设置引脚为输出引脚 } void loop() { val = analogRead（analogPin）; //从输入引脚读取数值 analogWrite（ledPin，val / 4）; // 以val / 4的数值点亮LED（因为analogRead读取的数值从0到1023，而analogWrite输出的数值从0到255） }  3. 调节PWM值的程序：
int n=0; void setup () { pinMode(4,INPUT); pinMode(6,OUTPUT); //该端口需要选择有#号标识的数字口 pinMode(10,INPUT); } void loop() { int up =digitalRead(4); //读取4号口的状态 int down = digitalRead(10); //读取10号口的状态 if (up==HIGH) //判断4号口目前是否是高电平 { n=n+5; //每次累加值为5 if (n&amp;gt;=255) { n=255; } //限定最大值为255 analogWrite(6,n); //使用PWM控制6号口输出，变量n的取值范围是0-255 delay (300); } if (down==HIGH) //减少亮度 { n=n-5; if (n&amp;lt;=0) { n=0; } analogWrite(6,n); delay (300); } }  需要选择#号标识的数字口是因为这些端口需要支持PWM功能。而后在loop()函数中，将修改后的n值输出到6号端口。</description>
    </item>
    
    <item>
      <title>arduino笔记(1)</title>
      <link>http://purplepalmdash.github.io/2013/07/15/ardiunobi-ji-1/</link>
      <pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/15/ardiunobi-ji-1/</guid>
      <description>1. 稳压IC的作用：
稳压器IC就是使输出电压稳定的设备中的电子元器件。所有的稳压器，都利用了相同的技术实现输出电压的稳定输出电压通过连接到误差放大器（Error Amplifier）反相输入端（Inverting Input）的分压电阻（Resistive Divider）采样（Sampled），误差放大器的同相输入端（Non-inverting Input）连接到一个参考电压Vref。 参考电压由IC内部的带隙参考源(Bandgap Reference)产生。误差放大器总是试图迫使其两端输入相等。为此，它提供负载电流以保证输出电压稳定。
2. ICSP(In-circuit serial programming)
3. FT232: USB-&amp;gt;UART
The FT232BM is the 2nd generation of FTDI&amp;rsquo;s popular USB UART device and the FT232BL is a lead free version of it. The FT232BQ provides the same functionality as the FT232BM and FT232BL in a QFN-32 lead free package.
4. ATmega328P Parameters:
Parameter Value Flash (Kbytes):	32 Kbytes Pin Count:	32 Max. Operating Frequency: 20 MHz CPU:	8-bit AVR # of Touch Channels:	16 Hardware QTouch Acquisition: No Max I/O Pins:	23 Ext Interrupts:	24 USB Speed:	No USB Interface:	No SPI:	2 TWI (I2C):	1 UART:	1 Graphic LCD:	No Video Decoder:	No Camera Interface:	No ADC channels:	8 ADC Resolution (bits):	10 ADC Speed (ksps):	15 Analog Comparators:	1 Resistive Touch Screen:	No DAC Resolution (bits):	0 Temp.</description>
    </item>
    
    <item>
      <title>Qemu快速保存和恢复状态</title>
      <link>http://purplepalmdash.github.io/2013/07/12/qemukuai-su-bao-cun-he-hui-fu-zhuang-tai/</link>
      <pubDate>Fri, 12 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/12/qemukuai-su-bao-cun-he-hui-fu-zhuang-tai/</guid>
      <description>1. 启动镜像：
	$ qemu-system-i386 -hda hd.qcow2  2. 保存当前运行状态：
同时按下ctrl+alt+2切换到Qemu内建命令行，输入:
	(qemu) savevm booted  如果需要即时回复到保存时状态
	(qemu) loadvm booted  关闭Qemu运行窗口
3. 快速恢复到保存状态:
	$ qemu-system-i386 -hda hd.qcow2 -loadvm booted  </description>
    </item>
    
    <item>
      <title>用Qemu和GNU编译链研究ARM汇编(4)</title>
      <link>http://purplepalmdash.github.io/2013/07/11/yong-qemuhe-gnubian-yi-lian-yan-jiu-armhui-bian-4/</link>
      <pubDate>Thu, 11 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/11/yong-qemuhe-gnubian-yi-lian-yan-jiu-armhui-bian-4/</guid>
      <description>1. 有关异常向量
前面的例子中存在一个大BUG，内存布局中的前8个全字是为异常向量而保留的。当异常发生时控制逻辑将转到这些位置以执行对应的异常处理代码。异常向量和它们的地址如下：
 Exception Address Reset 0x00 Undefined Instruction 0x04 Software Interrupt (SWI) 0x08 Prefetch Abort 0x0C Data Abort 0x10 Reserved, not used 0x14 IRQ 0x18 FIQ 0x1C  按理说，这些个异常向量应该对应到异常处理程序中，既然我们代码中不会有异常发生，索性就用死循环来代替，如下：
 .section &amp;quot;vectors&amp;quot; reset: b start undef: b undef swi: b swi pabt: b pabt dabt: b dabt nop irq: b irq fiq: b fiq  对应的，为了确保这些指令被放置在异常向量地址中，链接脚本也需要做相应的改动：
SECTIONS { . = 0x00000000; .text : { * (vectors); * (.text); .</description>
    </item>
    
    <item>
      <title>用Qemu和GNU编译链研究ARM汇编(2)</title>
      <link>http://purplepalmdash.github.io/2013/07/10/yong-qemuhe-gnubian-yi-lian-yan-jiu-armhui-bian-2/</link>
      <pubDate>Wed, 10 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/10/yong-qemuhe-gnubian-yi-lian-yan-jiu-armhui-bian-2/</guid>
      <description>研究两个汇编程序, 通过研究这两个程序，初步了解ARM汇编的知识：
 用于求数组和的程序 用于计算字符串长度的程序  1. 数组求和
 .text entry: b start @ Skip over the data arr: .byte 10, 20, 25 @ Read-only array of bytes eoa: @ Address of end of array + 1 .align start: ldr r0, =eoa @ r0 = &amp;amp;eoa ldr r1, =arr @ r1 = &amp;amp;arr mov r3, #0 @ r3 = 0 loop: ldrb r2, [r1], #1 @ r2 = *r1++ add r3, r2, r3 @ r3 += r2 cmp r1, r0 @ if (r1 !</description>
    </item>
    
    <item>
      <title>用Qemu和GNU编译链研究ARM汇编(3)</title>
      <link>http://purplepalmdash.github.io/2013/07/10/yong-qemuhe-gnubian-yi-lian-yan-jiu-armhui-bian-3/</link>
      <pubDate>Wed, 10 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/10/yong-qemuhe-gnubian-yi-lian-yan-jiu-armhui-bian-3/</guid>
      <description>在多个文件构成的程序中，源文件首先被编译成多个对象(object)文件(.o文件), 然后交由链接器生成最终的可执行文件，如下图所示：
{% img img /images/linker.png %}
在组建可执行文件时，链接器主要完成下列操作:
 解析符号 重定位  1. 符号解析
在编译单个文件组成的程序时，所有标号的解析都可以由汇编器替代为对应的地址。而在多文件组成的程序中，如果有储存在其他文件中的符号引用，汇编器会将其标识为&amp;rdquo;unresolved&amp;rdquo;(未解析).当对象文件被传递给链接器时，链接器从这些文件中决定对应的值，并把code中的unresolved的值替代为正确的值。
我们用上一节的求和函数来演示链接器是如何进行符号解析的。 这两个文件汇编后，会在链接时被检查未被解析的引用。
main.s .text b start @ Skip over the data arr: .byte 10, 20, 25 @ Read-only array of bytes eoa: @ Address of end of array + 1 .align start: ldr r0, =arr @ r0 = &amp;amp;arr ldr r1, =eoa @ r1 = &amp;amp;eoa bl sum @ Invoke the sum subroutine stop: b stop  sum-sub.</description>
    </item>
    
    <item>
      <title>用Qemu和GNU编译链研究ARM汇编(1)</title>
      <link>http://purplepalmdash.github.io/2013/07/09/yong-qemuhe-gnubian-yi-lian-yan-jiu-armhui-bian-1/</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/09/yong-qemuhe-gnubian-yi-lian-yan-jiu-armhui-bian-1/</guid>
      <description>1. 汇编程序代码格式
汇编代码由一系列的声明所组成，每行一个。每条声明由下列格式组成：
	label(标签):	instruction	@comment(注释)  说明：
 label: 标签的引入使得在内存中查询指令地址变得很方便，标签可以在任意一个内存地址使用， 例如分支指令中就可以用到标签, 标签可以包括字母、数字_和$符号。 注释： 注释内容必须在@符号之后 指令: 指令可以是ARM指令集或是汇编器指令，汇编器指令是需要传递给汇编器的命令，总是以.开头。  2. 一个简单的汇编语言文件:
 .text start: @ Label, not really required mov r0, #5 @ Load register r0 with the value 5 mov r1, #4 @ Load register r1 with the value 4 add r2, r1, r0 @ Add r0 and r1 and store in r2 stop: b stop @ Infinite loop to stop execution  上面代码的意思是，把立即数5载入到寄存器r0, 4载入到r1, 以r1和r0相加的结果填充r2.</description>
    </item>
    
    <item>
      <title>在Qemu上运行Raspberry PI镜像</title>
      <link>http://purplepalmdash.github.io/2013/07/08/zai-qemushang-yun-xing-raspberry-pijing-xiang/</link>
      <pubDate>Mon, 08 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/08/zai-qemushang-yun-xing-raspberry-pijing-xiang/</guid>
      <description>1. 下载和准备镜像文件
	$ wget http://downloads.raspberrypi.org/images/raspbian/2013-05-25-wheezy-raspbian/2013-05-25-wheezy-raspbian.zip $ unzip 2013-05-25-wheezy-raspbian.zip  2. 查看镜像文件分区信息
	$ fdisk -l 2013-05-25-wheezy-raspbian.img Disk 2013-05-25-wheezy-raspbian.img: 1939 MB, 1939865600 bytes, 3788800 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x000c7b31 Device Boot Start End Blocks Id System 2013-05-25-wheezy-raspbian.img1 8192 122879 57344 c W95 FAT32 (LBA) 2013-05-25-wheezy-raspbian.</description>
    </item>
    
    <item>
      <title>用Qemu模拟ARM(1)</title>
      <link>http://purplepalmdash.github.io/2013/07/08/yong-qemumo-ni-arm-1/</link>
      <pubDate>Mon, 08 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/08/yong-qemumo-ni-arm-1/</guid>
      <description>前面已经安装并配置了编译链和qemu，现在可以用qemu来模拟arm平台了。
1. Hello, Qemu!
输入下面的代码:
#include&amp;lt;stdio.h&amp;gt; int main() { printf(&amp;quot;Hello, Qemu!\n&amp;quot;); return 0; }  编译并运行:
	$ arm-none-linux-gnueabi-gcc -o hello hello.c -static $ qemu-arm ./hello $ file hello hello: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), \ statically linked, for GNU/Linux 2.6.16, not stripped  不加-static变量的话，运行时则需要使用-L选项链接到相应的运行库
	$ qemu-arm -L /home/Trusty/CodeSourcery/\ Sourcery_CodeBench_Lite_for_ARM_GNU_Linux/\ arm-none-linux-gnueabi/libc/ ./hello_1 Hello, Qemu! $ file hello_1 hello_1: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV),\ dynamically linked (uses shared libs), for GNU/Linux 2.</description>
    </item>
    
    <item>
      <title>用Qemu模拟ARM(2)</title>
      <link>http://purplepalmdash.github.io/2013/07/08/yong-qemumo-ni-arm-2/</link>
      <pubDate>Mon, 08 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/08/yong-qemumo-ni-arm-2/</guid>
      <description>1. 关于Bootloader:
(引导程序)位于电脑或其他计算机应用上，是指引导操作系统启动的程序。引导程序启动方式和程序视应用机型种类而不同。例如在普通的个人电脑上，引导程序通常分为两部分：第一阶段引导程序位于主引导记录（MBR），用以引导位于某个分区上的第二阶段引导程序，如NTLDR、GNU GRUB等。
嵌入式系统中常见的Bootloader主要有以下几种:
 Das U-Boot 是一个主要用于嵌入式系统的开机载入程序，可以支持多种不同的计算机系统结构，包括PPC、ARM、AVR32、MIPS、x86、68k、Nios与MicroBlaze。 vivi是由mizi公司设计为ARM处理器系列设计的一个bootloader. Redboot (Red Hat Embedded Debug and Bootstrap)是Red Hat公司开发的一个独立运行在嵌入式系统上的BootLoader程序，是目前比较流行的一个功能、可移植性好的BootLoader。  2. 关于“裸机编程(Bare-Metal)”:
微控制器开发人员很熟悉这个概念， Bare-Metal是指的你的程序和处理器之间没有任何东西&amp;mdash;-你写的程序将直接运行在处理器上, 换言之，开发人员是在直接操控硬件。在裸机编程的场景中，需要由开发人员检查并排除任何一个可以导致系统崩溃的风险。
&amp;ldquo;Bare-Metal&amp;rdquo;要求开发人员了解关于硬件的细节，所以接下来我们将对编译链和qemu本身进行分析。
3. 下载qemu源码包并查询相关硬件信息：
ArchLinux采用ABS(Arch Build System)来管理源码包，下面的步骤将qemu源码包下载到本地，更详细的关于ABS的操作可以在ArchLinux的Wiki中找到
	$ pacman -S abs $ pacman -Ss qemu extra/qemu 1.4.2-2 [installed] $ abs extra/qemu $ cp -r /var/abs/extra/qemu/ ~/abs $ cd ~/abs &amp;amp;&amp;amp; makepkg -s --asroot -o  得到versatilepb开发板的CPU型号, 可以看到&amp;rdquo;arm926&amp;rdquo;是我们要的结果。
	$ grep &amp;quot;arm&amp;quot; src/qemu-1.4.2/hw/versatilepb.c #include &amp;quot;arm-misc.h&amp;quot; static struct arm_boot_info versatile_binfo; args-&amp;gt;cpu_model = &amp;quot;arm926&amp;quot;; cpu = cpu_arm_init(args-&amp;gt;cpu_model); cpu_pic = arm_pic_init_cpu(cpu); arm_load_kernel(cpu, &amp;amp;versatile_binfo);  得到versatilepb开发板的串口寄存器硬件信息：</description>
    </item>
    
    <item>
      <title>用Qemu模拟ARM(3)</title>
      <link>http://purplepalmdash.github.io/2013/07/08/yong-qemumo-ni-arm-3/</link>
      <pubDate>Mon, 08 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/08/yong-qemumo-ni-arm-3/</guid>
      <description>1. 下载并交叉编译u-boot。
新版本的u-boot我加载后总有问题，2009.11版则可以顺利通过编译和测试。
	$ wget ftp://ftp.denx.de/pub/u-boot/u-boot-2009.11.tar.bz2 $ tar xjvf u-boot-2009.11.tar.bz2 $ cd u-boot-2009.11 $ make versatilepb_config arch=ARM CROSS_COMPILE=arm-none-eabi- $ make all arch=ARM CROSS_COMPILE=arm-none-eabi-  编译完成后会在目录下生成u-boot.bin和u-boot文件。
2. 运行u-boot.bin:
	$ qemu-system-arm -M versatilepb -kernel u-boot.bin -nographic  如果采用-nographic来运行qemu-system-arm，终端将无法再响应任何系统输入譬如Ctrl+c/ctrl+d_，要终止qemu-system-arm就只能查到进程号再kill。所以我一般不带-nographic选项，启动后ctrl+alt+2去看serial0输出,保留在终端窗口直接ctrl+c杀死qemu-sytem-arm进程的权力。
3. 用u-boot引导镜像文件:
改动上一篇文章里用于构建启动镜像的linker.ld文件，因为u-boot.bin文件大小的缘故，我们需要把启动镜像的起始地址整体上移.
	$ ls -l -h u-boot.bin -rwxr-xr-x 1 Trusty root 85K Jul 8 15:57 u-boot.bin  linker.ld文件里， 0x100000，这个大小相比于85K显然已经足够。
	ENTRY(_Start) SECTIONS { . = 0x100000; startup : { startup.o(.text)} .</description>
    </item>
    
    <item>
      <title>ArchLinux DHCP配置问题</title>
      <link>http://purplepalmdash.github.io/2013/07/07/archlinuxwang-luo-pei-zhi-wen-ti/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/07/archlinuxwang-luo-pei-zhi-wen-ti/</guid>
      <description>安装完ArchLinux后，发现网卡无法从路由器通过dhcp得到地址，ArchLinux的dhcp客户端是dhcpcd,默认配置文件。路由器型号是TP-link WR340G v5, 2010年入手的。
手动调用dhcpcd时候发现LOG里有NAK消息爆出。
翻了下Arch的论坛，这个问题是由于dhcpcd的参数配置引发的，某些dhcpcd向路由器请求的参数无法得到而导致，个人觉得大约是WR340G版本够老，无法提供这些个参数。
##解决方案一：
编辑/etc/dhcpcd.conf， 注释掉classless_static_routes 和 interface_mtu即可:
	# option classless_static_routes # Respect the network MTU. # option interface_mtu  而后我们可以用systemd在每次启动的时候自动调用dhcpcd绑定地址:
	$ systemctl enable dhcpcd@enp0s25 $ systemctl start dhcpcd@enp0s25  ##解决方案二:
安装dhclient:
	$ pacman -S dhclient $ dhclient enp0s25  这种方法需要每次手动输入，不过我们可以使用netctl包来自动管理网络接口信息：
	$ cp /etc/netctl/examples/ethernet-dhcp /etc/netctl/ethernet-dhcp  由netctl.profile查到指定dhcp客户端的字段，而后在/etc/netctl/ethernet-dhcp文件中添加：
	DHCPClient=dhclient # !!! 别忘了修改dhcp侦听的设备地址： # Interface=eth0 Interface=enp0s25  把ethernet-dhcp作为netctl的默认启动配置文件：
	$ netctl enable ethernet-dhcp  立即开启netctl:</description>
    </item>
    
    <item>
      <title>Qemu快速上手</title>
      <link>http://purplepalmdash.github.io/2013/07/07/qemukuai-su-shang-shou/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/07/qemukuai-su-shang-shou/</guid>
      <description>1. 安装Qemu
ArchLinux的仓库里包含有qemu已编译好的包:
	$ pacman -Ss qemu extra/qemu 1.4.2-2 [installed] A generic and open source processor emulator which achieves a good \ emulation speed by using dynamic translation. $ pacman -S qemu  会根据默认配置安装好几乎所有平台支持的Qemu.
或者你可以手动下载源码包进行编译:官方下载地址在http://wiki.qemu.org/Download
安装完qemu后运行qemu-system-i386, 如果弹出窗口，则说明qemu安装正确。
2. 创建新虚拟机磁盘镜像
创建虚拟机的第一步是创建一个新的磁盘镜像，qemu提供了对多种磁盘镜像格式的支持，如raw、qcow2、qed、vdi等，qemu-img的帮助里介绍qcow2是最多才多艺(Versatile)的格式，支持压缩、加密等功能，还能最大程度节省磁盘空间。我们选择它来做磁盘镜像(Virtualbox可以直接读取qcow2格式的虚拟机镜像)。
	$ qemu-img create -f qcow2 ubuntu.qcow2 16G Formatting &#39;ubuntu.qcow2&#39;, fmt=qcow2 size=17179869184 encryption=off \ cluster_size=65536 lazy_refcounts=off  3. 启动并安装虚拟机:
	$ qemu-system-i386 -hda ubuntu.qcow2 -boot d -cdrom \ ./ubuntu-13.04-desktop-i386.iso -m 1024 -enable-kvm  -boot d代表优先从光驱启动，对应的选项有a, b (软驱 1 和 2), c (硬盘优先), d (光盘优先), n-p(支持Etherboot的网卡1-4).</description>
    </item>
    
    <item>
      <title>ArchLinux上安装arm编译链</title>
      <link>http://purplepalmdash.github.io/2013/07/06/archlinuxshang-an-zhuang-armbian-yi-lian/</link>
      <pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/06/archlinuxshang-an-zhuang-armbian-yi-lian/</guid>
      <description>在X86_64的ArchLinux上安装Mentor Graphics提供的arm交叉编译链时出现下列问题：
	$ ./arm-2013.05-23-arm-none-eabi.bin Checking for required programs: awk grep sed bzip2 gunzip =============================================================== Error: Missing 32-bit libraries on 64-bit Linux host =============================================================== Your 64-bit Linux host is missing the 32-bit libraries required to install and use Sourcery CodeBench.  解决方法：
编辑/etc/pacman.conf，去掉下列两行的注释
	[multilib] Include = /etc/pacman.d/mirrorlist  而后安装必要的ia32相关的包：
	$ pacman -Sy $ pacman -S lib32-glibc $ pacman -S lib32-gtk lib32-gtk2  安装好以后执行前面被中断的安装进程，这时候可以顺利安装了。
安装完毕后记得把交叉编译链的路径加入到系统路径中，最好在~/.bashrc里加上一笔:
	export PATH=$HOME/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin:$PATH export PATH=$HOME/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_GNU_Linux/bin:$PATH  ArchLinux的yaourt仓库里也有arm-none-eabi和arm-none-linux-eabi等交叉编译链，但是每次编译都会出现莫名其妙的错误，使用现成的编译链能大大节省开发时间。</description>
    </item>
    
    <item>
      <title>ArchLinux初步配置网络</title>
      <link>http://purplepalmdash.github.io/2013/07/05/archlinuxchu-bu-pei-zhi-wang-luo/</link>
      <pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/05/archlinuxchu-bu-pei-zhi-wang-luo/</guid>
      <description>刚安装好的ArchLinux上只有基本的系统组件，启动以后连ifconfig都没有（其实ifconfig早在N年前就被干掉，以ip命令代替了)。在这种一穷二白的情况下，如何配置好网络参数？下面的步骤可以让人一劳永逸。
1. 查看网络接口信息:
	$ ip link show 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: enp0s3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT qlen 1000 link/ether 08:00:27:09:fd:b7 brd ff:ff:ff:ff:ff:ff 可以看到enp0s3为有线端口，未启动，无地址无网关无路由。  2. 启动网口：
	$ ip link enp0s3 up  3. 配置网卡地址:
	$ ip addr add 192.168.1.133/24 broadcast 192.168.1.255 dev enp0s3  参数解释：IP地址: 192.168.1.133, 广播地址:192.168.1.255
4. 配置默认路由为192.168.1.1:
	$ ip default-gateway 192.</description>
    </item>
    
    <item>
      <title>Linux忘记密码后使用grub重置密码</title>
      <link>http://purplepalmdash.github.io/2013/07/05/linuxwang-ji-mi-ma-hou-shi-yong-grubzhong-zhi-mi-ma/</link>
      <pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/05/linuxwang-ji-mi-ma-hou-shi-yong-grubzhong-zhi-mi-ma/</guid>
      <description>Linux忘记密码后，可以通过修改Grub启动参数来进行修复, 举Ubuntu13.04为例：
出现Grub菜单时，按&amp;rdquo;e&amp;rdquo;键或是其他键进入Grub的编辑方式。
menuentry &#39;Ubuntu&#39; --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option &#39;gnulinux-simple-baec278e-2b9f-4513-a6f1-e148ac6295d7&#39; { recordfail load_video gfxmode $linux_gfx_mode insmod gzio insmod part_msdos insmod ext2 set root=&#39;hd0,msdos2&#39; if [ x$feature_platform_search_hint = xy ]; then search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos2 --hint-efi=hd0,msdos2 --hint-baremetal=ahci0,msdos2 baec278e-2b9f-4513-a6f1-e148ac6295d7 else search --no-floppy --fs-uuid --set=root baec278e-2b9f-4513-a6f1-e148ac6295d7 fi linux	/boot/vmlinuz-3.8.0-19-generic root=UUID=baec278e-2b9f-4513-a6f1-e148ac6295d7 ro initrd	/boot/initrd.img-3.8.0-19-generic }  改动下面这行
linux	/boot/vmlinuz-3.8.0-19-generic root=UUID=baec278e-2b9f-4513-a6f1-e148ac6295d7 ro  为
linux	/boot/vmlinuz-3.8.0-19-generic root=UUID=baec278e-2b9f-4513-a6f1-e148ac6295d7 rw init=/bin/bash  init=/bin/bash将把系统启动到一个没有root密码的shell, rw则允许修改密码，否则ro的情况下无法更新密码。</description>
    </item>
    
    <item>
      <title>在CentOS上安装基于qemu的虚拟机(2)</title>
      <link>http://purplepalmdash.github.io/2013/07/05/zai-centosshang-an-zhuang-ji-yu-qemude-xu-ni-ji-2/</link>
      <pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/05/zai-centosshang-an-zhuang-ji-yu-qemude-xu-ni-ji-2/</guid>
      <description>1. 启动完毕后客户机无法得到网络地址：
故事的小插曲：由于虚拟机是“偷”跑在某台服务器上，不便在系统路径里留下痕迹，只能使用CPU/内存资源，采取了挂载NFS文件系统的方法，Qemu和vde均自行编译，先于vde编译的Qemu在配置的时候未能激活vde选项，造成客户机中无法找到vde配置的网络。
现象:重新编译qemu,使用下列命令时报错：
./configure --prefix=Your_place_here --target-list=&amp;quot;i386-softmmu \ x86_64-softmmu i386-linux-user x86_64-linux-user&amp;quot; --enable-kvm \ --enable-user --enable-vde  安装vde2到系统路径后重编译qemu成功。而后
$ export LD_LIBRARY_PATH=/usr/lib:$LD_LIBRARY_PATH  则可正常启动vde/qemu
2. 开启Linux内核的forwarding, 这样客户机可以接入Internet.
echo 1&amp;gt;/proc/sys/net/ipv4/ip_forward  3. 增加更多的核:
在启动参数中添加:
-cpu host -smp cores=2,threads=1  To be continued.</description>
    </item>
    
    <item>
      <title>在CentOS上安装基于qemu的虚拟机</title>
      <link>http://purplepalmdash.github.io/2013/07/04/zai-centosshang-an-zhuang-ji-yu-qemude-xu-ni-ji/</link>
      <pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/04/zai-centosshang-an-zhuang-ji-yu-qemude-xu-ni-ji/</guid>
      <description>1. 从源码安装qemu和vde(Virtual Distributed Ethernet) Qemu的安装过程比较标准，编译vde时则需要有些小改动:
$ svn co https://vde.svn.sourceforge.net/svnroot/vde/trunk/vde-2 vde_svn $ cd vde_svn $ autoreconf -fi $ ./configure --enable-experimental --prefix=./Your_Destination $ make $ sudo make install  在编译vde时，需要安装python-devel包并创建一个空的&amp;rdquo;stropts.h&amp;rdquo;文件才能通过编译:
$ yum install python-devel $ touch /usr/include/stropts.h  2. 创建虚拟网络, 并使用slirpvde建立默认的dhcpd服务器:
$ vde_switch -s /tmp/switch $ slirpvde -s /tmp/switch --dhcp Starting slirpvde: virtual_host=10.0.2.2/24 DNS =10.0.2.3 dhcp_start =10.0.2.15 vde switch =/tmp/switch  3. 创建qemu镜像并开始使用cdrom镜像安装系统:
$ qemu-img create -f qcow2 Windows.qcow2 16G Formatting &#39;Windows.qcow2&#39;, fmt=qcow2 size=17179869184 encryption=off cluster_size=65536 lazy_refcounts=off # 使用创建的镜像安装系统 $ qemu-system-i386 -net nic,macaddr=52:54:00:00:EE:17 -net \ vde,vlan=0,sock=/tmp/switch -m 765 -enable-kvm -cdrom \ /path_to_your_iso.</description>
    </item>
    
    <item>
      <title>MarkdownSyntax</title>
      <link>http://purplepalmdash.github.io/2013/07/03/markdownsyntax/</link>
      <pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/03/markdownsyntax/</guid>
      <description>1. 自动编号的问题:
Markdown里的自动编号只适用于块(block)中的自动编号，也就是说，在使用了例如Solarized格式化代码块以后，全局中的自动编号不再起作用。 正常的自动编号, 不会有问题, 前标号分别为1/2/3:
1. item 1 2. item 2 3. item 3  加入代码块后的情形: item 1/item 2/item 3都将以1. item开头, 前标号变成1/1/1:
1. item 1 // code blocks 2. item 2 // code blocks 3. item 3  解决方法：使用Markdown转义字符, 在.前加\
1\. item 1 2\. item 2 3\. item 3  2. Solarized高亮代码的两种用法:
把代码放在如下块中: {% raw %}
	//Your code here!  或者 ``` //Your code here! ```  {% endraw %}</description>
    </item>
    
    <item>
      <title>用github管理octopress源码</title>
      <link>http://purplepalmdash.github.io/2013/07/03/yong-githubguan-li-octopressyuan-ma/</link>
      <pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://purplepalmdash.github.io/2013/07/03/yong-githubguan-li-octopressyuan-ma/</guid>
      <description>1. 新建或改变某个已存在的源码仓库名为&amp;rdquo;debian_octopress&amp;rdquo;，以后可以用&amp;ldquo;https://github.com/kkkttt/debian_octopress.git&amp;rdquo;来访问此仓库。
2. 配置Git:
$ git init $ git add README.md	# 这个文件中可以添些项目的描述文字 $ git commit -m &amp;quot;First Commit&amp;quot; # 配置git的本地用户名和email $ git config --global user.email &amp;quot;kkkttt@gmail.com&amp;quot; $ git config --global user.name &amp;quot;Trusty&amp;quot; # 将文件夹里所有内容加入到git中并提交 $ git add . $ git commit -m &amp;quot;First Sourcecode Commit&amp;quot; # 同步到github $ git remote add origin https://github.com/kkkttt/debian_octopress.git $ git push -u origin master --force  3. 删除本地文件夹并同步到Github的方法:
$ git rm -rf public.back $ git commit -m &amp;quot;remove backup directory&amp;quot; $ git push origin master  4.</description>
    </item>
    
  </channel>
</rss>