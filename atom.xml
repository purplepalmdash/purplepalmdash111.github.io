<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dash]]></title>
  <link href="http://purplepalmdash.github.io/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-12-17T20:18:14+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NetScaler VPX初始化配置]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/17/netscaler-vpxchu-shi-hua-pei-zhi/"/>
    <updated>2015-12-17T14:08:35+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/17/netscaler-vpxchu-shi-hua-pei-zhi</id>
    <content type="html"><![CDATA[<h3>初始化配置</h3>

<p>启动虚拟机以后，通过nsroot/nsroot登录入VPX.</p>

<p>清除所有配置:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_17_14_20_54_580x93.jpg" alt="/images/2015_12_17_14_20_54_580x93.jpg" /></p>

<p>如下，做IP配置:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_17_14_23_29_728x153.jpg" alt="/images/2015_12_17_14_23_29_728x153.jpg" /></p>

<p>初始化配置完毕以后，即可在web后台进行配置。</p>

<h3>License</h3>

<p>申请license的时候注意，选择的MAC地址不能有任何的<code>:</code>符号， 例如52:54:00:这种就不能通过成
功。 在Netscaler上可以通过以下命令查看host id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@ns# lmutil lmhostid 
</span><span class='line'>lmutil - Copyright (c) 1989-2013 Flexera Software LLC. All Rights Reserved. 
</span><span class='line'>The FlexNet host ID of this machine is "xxxxxxx"</span></code></pre></td></tr></table></div></figure>


<p>查看激活后的license情形:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; sh license
</span><span class='line'>        License status:
</span><span class='line'>                           Web Logging: YES
</span><span class='line'>                      Surge Protection: YES
</span><span class='line'>                        Load Balancing: YES
</span><span class='line'>                     Content Switching: YES
</span><span class='line'>....</span></code></pre></td></tr></table></div></figure>


<p>参考:   <br/>
<a href="http://sam.yeung.blog.163.com/blog/static/222663482013811102013782/">http://sam.yeung.blog.163.com/blog/static/222663482013811102013782/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Graphite呈现广州空气质量(4)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-4/"/>
    <updated>2015-12-16T16:29:43+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-4</id>
    <content type="html"><![CDATA[<h3>Tessera</h3>

<p>直接导入Graphite中定义好的dashboard即可，值得注意的是，如何创建模板，或者说，如何创建一
个template用于渲染我们导入的各个数据？</p>

<p>导入的时候出现了如下的问题:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_16_18_34_44_701x483.jpg" alt="/images/2015_12_16_18_34_44_701x483.jpg" /></p>

<p>可见tessera中对数据的定制化是必须的。</p>

<h3>Grafana</h3>

<p>安装及配置为自动启动:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://grafanarel.s3.amazonaws.com/builds/grafana_2.6.0_amd64.deb
</span><span class='line'>$ sudo dpkg -i grafana_2.6.0_amd64.deb
</span><span class='line'>$ sudo service grafana-server start
</span><span class='line'>$ sudo update-rc.d grafana-server defaults 95 10</span></code></pre></td></tr></table></div></figure>


<p>默认用户名/密码为 admin/admin.</p>

<p>现在添加graphite数据源，例如：</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_16_19_20_33_703x484.jpg" alt="/images/2015_12_16_19_20_33_703x484.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Graphite呈现广州空气质量(3)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-3/"/>
    <updated>2015-12-16T14:18:25+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-3</id>
    <content type="html"><![CDATA[<h3>当前节点无数据</h3>

<p>我们的脚本加入crontab运行后，最开始是可以得到数据的，后面两小时它挂了，查原因，有以下的
报错信息:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># /home/adminubuntu/GuangzhouPM25.py 
</span><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "/home/adminubuntu/GuangzhouPM25.py", line 112, in &lt;module&gt;
</span><span class='line'>    airdata = get_air_data(positionsets)
</span><span class='line'>  File "/home/adminubuntu/GuangzhouPM25.py", line 80, in get_air_data
</span><span class='line'>    PM25 = int(pattern.match(soup.find('td',{'id': 'pmtow'}).contents[0]).group())
</span><span class='line'>ValueError: invalid literal for int() with base 10: ''</span></code></pre></td></tr></table></div></figure>


<p>此时selenium控制的浏览器停在以下图例:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_16_14_21_03_497x301.jpg" alt="/images/2015_12_16_14_21_03_497x301.jpg" /></p>

<p>可以看到，如果当前节点的数据为<code>--</code>， 则我们的python脚本运行会出现问题。因而我们在代码中
要加入少量修改。</p>

<h3>错误处理</h3>

<p>以下的代码更改添加了错误处理，如果该监测点的数值为空，则不提交任何数据:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@@ -66,9 +66,9 @@ def get_air_data(positionsets):
</span><span class='line'>   hourdata = {}
</span><span class='line'>   # Calling selenium, need linux X
</span><span class='line'>   browser = Firefox()
</span><span class='line'>-  # Added 10 seconds for waiting page for loading.
</span><span class='line'>-  time.delay(10)
</span><span class='line'>   browser.get(URL)
</span><span class='line'>+  # Added 10 seconds for waiting page for loading.
</span><span class='line'>+  time.sleep(10)
</span><span class='line'>   # Click button one-by-one
</span><span class='line'>   for position in positionsets:
</span><span class='line'>     # After clicking, should re-get the page_source.
</span><span class='line'>@@ -78,33 +78,37 @@ def get_air_data(positionsets):
</span><span class='line'>     soup = BeautifulSoup(page_source, 'html.parser')
</span><span class='line'>     # pm2.5 value would be something like xx 微克/立方米, so we need an regex for
</span><span class='line'>     # matching, example: print int(pattern.match(input).group())
</span><span class='line'>-    PM25 = int(pattern.match(soup.find('td',{'id': 'pmtow'}).contents[0]).group())
</span><span class='line'>-    PM25_iaqi = int(pattern.match(soup.find('td',{'id': 'pmtow_iaqi'}).contents[0]).group())
</span><span class='line'>-    PM10 = int(pattern.match(soup.find('td',{'id': 'pmten'}).contents[0]).group())
</span><span class='line'>-    PM10_iaqi = int(pattern.match(soup.find('td',{'id': 'pmten_iaqi'}).contents[0]).group())
</span><span class='line'>-    SO2 = int(pattern.match(soup.find('td',{'id': 'sotwo'}).contents[0]).group())
</span><span class='line'>-    SO2_iaqi = int(pattern.match(soup.find('td',{'id': 'sotwo_iaqi'}).contents[0]).group())
</span><span class='line'>-    NO2 = int(pattern.match(soup.find('td',{'id': 'notwo'}).contents[0]).group())
</span><span class='line'>-    NO2_iaqi = int(pattern.match(soup.find('td',{'id': 'notwo_iaqi'}).contents[0]).group())
</span><span class='line'>-    # Special notice the CO would be float value
</span><span class='line'>-    CO = float(floatpattern.match(soup.find('td',{'id': 'co'}).contents[0]).group())
</span><span class='line'>-    CO_iaqi = int(pattern.match(soup.find('td',{'id': 'co_iaqi'}).contents[0]).group())
</span><span class='line'>-    O3 = int(pattern.match(soup.find('td',{'id': 'othree'}).contents[0]).group())
</span><span class='line'>-    O3_iaqi = int(pattern.match(soup.find('td',{'id': 'othree_iaqi'}).contents[0]).group())
</span><span class='line'>-    hourdata_key = pinyin.get(position)
</span><span class='line'>-    hourdata[hourdata_key] = []
</span><span class='line'>-    hourdata[hourdata_key].append(PM25)
</span><span class='line'>-    hourdata[hourdata_key].append(PM25_iaqi)
</span><span class='line'>-    hourdata[hourdata_key].append(PM10)
</span><span class='line'>-    hourdata[hourdata_key].append(PM10_iaqi)
</span><span class='line'>-    hourdata[hourdata_key].append(SO2)
</span><span class='line'>-    hourdata[hourdata_key].append(SO2_iaqi)
</span><span class='line'>-    hourdata[hourdata_key].append(NO2)
</span><span class='line'>-    hourdata[hourdata_key].append(NO2_iaqi)
</span><span class='line'>-    hourdata[hourdata_key].append(CO)
</span><span class='line'>-    hourdata[hourdata_key].append(CO_iaqi)
</span><span class='line'>-    hourdata[hourdata_key].append(O3)
</span><span class='line'>-    hourdata[hourdata_key].append(O3_iaqi)
</span><span class='line'>+    try:
</span><span class='line'>+      PM25 = int(pattern.match(soup.find('td',{'id': 'pmtow'}).contents[0]).group())
</span><span class='line'>+      PM25_iaqi = int(pattern.match(soup.find('td',{'id': 'pmtow_iaqi'}).contents[0]).group())
</span><span class='line'>+      PM10 = int(pattern.match(soup.find('td',{'id': 'pmten'}).contents[0]).group())
</span><span class='line'>+      PM10_iaqi = int(pattern.match(soup.find('td',{'id': 'pmten_iaqi'}).contents[0]).group())
</span><span class='line'>+      SO2 = int(pattern.match(soup.find('td',{'id': 'sotwo'}).contents[0]).group())
</span><span class='line'>+      SO2_iaqi = int(pattern.match(soup.find('td',{'id': 'sotwo_iaqi'}).contents[0]).group())
</span><span class='line'>+      NO2 = int(pattern.match(soup.find('td',{'id': 'notwo'}).contents[0]).group())
</span><span class='line'>+      NO2_iaqi = int(pattern.match(soup.find('td',{'id': 'notwo_iaqi'}).contents[0]).group())
</span><span class='line'>+      # Special notice the CO would be float value
</span><span class='line'>+      CO = float(floatpattern.match(soup.find('td',{'id': 'co'}).contents[0]).group())
</span><span class='line'>+      CO_iaqi = int(pattern.match(soup.find('td',{'id': 'co_iaqi'}).contents[0]).group())
</span><span class='line'>+      O3 = int(pattern.match(soup.find('td',{'id': 'othree'}).contents[0]).group())
</span><span class='line'>+      O3_iaqi = int(pattern.match(soup.find('td',{'id': 'othree_iaqi'}).contents[0]).group())
</span><span class='line'>+      hourdata_key = pinyin.get(position)
</span><span class='line'>+      hourdata[hourdata_key] = []
</span><span class='line'>+      hourdata[hourdata_key].append(PM25)
</span><span class='line'>+      hourdata[hourdata_key].append(PM25_iaqi)
</span><span class='line'>+      hourdata[hourdata_key].append(PM10)
</span><span class='line'>+      hourdata[hourdata_key].append(PM10_iaqi)
</span><span class='line'>+      hourdata[hourdata_key].append(SO2)
</span><span class='line'>+      hourdata[hourdata_key].append(SO2_iaqi)
</span><span class='line'>+      hourdata[hourdata_key].append(NO2)
</span><span class='line'>+      hourdata[hourdata_key].append(NO2_iaqi)
</span><span class='line'>+      hourdata[hourdata_key].append(CO)
</span><span class='line'>+      hourdata[hourdata_key].append(CO_iaqi)
</span><span class='line'>+      hourdata[hourdata_key].append(O3)
</span><span class='line'>+      hourdata[hourdata_key].append(O3_iaqi)
</span><span class='line'>+    except ValueError, Argument:
</span><span class='line'>+      # won't add the data, simply ignore this position
</span><span class='line'>+      print "The argument does not contain numbers\n", Argument
</span><span class='line'>   # After clicking all of the button, quit the firefox and return the dictionary
</span><span class='line'>   browser.close()
</span><span class='line'>   return hourdata</span></code></pre></td></tr></table></div></figure>


<p>
到现在为止，数据可以顺利的写入到Graphite中。</p>

<h3>Graphite Dashboard</h3>

<p>组建Graphite Dashboard可以通过图形界面来进行，举例如下:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_16_15_22_04_579x386.jpg" alt="/images/2015_12_16_15_22_04_579x386.jpg" /></p>

<p>具体的添加过程就不说了，值得注意的是，设置几个属性，时间范围为过去24小时，
双击某图片后，<code>Render Options</code>里的<code>Line Mode</code>选择<code>Connected Line</code>，
这样可以构建出连接线，比较适合我们所需要展示的数据类型。Y-Axis，即Y轴的起点(Minimal)设置为0.</p>

<p>点击DashBoard-> Edit Dashboard, 可以看到以下定义:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_16_15_25_54_789x499.jpg" alt="/images/2015_12_16_15_25_54_789x499.jpg" /></p>

<p>这个定义文件可以修改，我们将使用这个定义文件来批量制作其他十多个监测点的Dashboard.</p>

<h3>创建更多的Dashboard</h3>

<p>参考:   <br/>
<a href="http://graphite.readthedocs.org/en/latest/dashboard.html#editing-importing-and-exporting-via-json">http://graphite.readthedocs.org/en/latest/dashboard.html#editing-importing-and-exporting-via-json</a></p>

<p>将上述的dashboard定义文件存储在某个文本文件中，
用下列命令批量生成新的dashboard定义文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/aotizhongxin/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/aotizhongxin/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/baiyunshan/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/dafushan/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/gongyuanqian/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/haizhubaogang/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/haizhuchisha/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/haizhuhu/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/haizhushayuan/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/huangpudashadi/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/huangpuwenchong/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/huangshalubianzhan/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/liwanfangcun/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/liwanxicun/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/luhu/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/luogangxiqu/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/tianhelongdong/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/tiyuxi/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/yayuncheng/g'|myclip
</span><span class='line'>$ cat dashboard.txt | sed 's/haizhuhu/yangjilubianzhan/g'|myclip</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>myclip</code>是一个自定义的命令，可以将管道输出直接到系统剪贴板，
而后将内容新添加到dashboard定义文件中，点击update后，另存为新的dashboard即可.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Graphite呈现广州空气质量(2)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-2/"/>
    <updated>2015-12-16T12:11:21+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/16/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang-2</id>
    <content type="html"><![CDATA[<h3>更改后的脚本</h3>

<p>以下脚本可以用于取回网页上的数据，并将其写入到Graphite远程服务器。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env python
</span><span class='line'>#-*-coding:utf-8 -*-
</span><span class='line'>
</span><span class='line'>##################################################################################
</span><span class='line'># For fetching back the Air Quality Data and write it into Graphite on local server
</span><span class='line'># Graphite Data Definition, this is the general definition among every city
</span><span class='line'># air.city.citypoint.so2
</span><span class='line'># air.city.citypoint.no2
</span><span class='line'># air.city.citypoint.pm10
</span><span class='line'># air.city.citypoint.co
</span><span class='line'># air.city.citypoint.o38h
</span><span class='line'># air.city.citypoint.pm25
</span><span class='line'># air.city.citypoint.aqi
</span><span class='line'># air.city.citypoint.firstp
</span><span class='line'># air.city.citypoint.overp
</span><span class='line'># When running this script in crontab, be sure to give it a display
</span><span class='line'># Example, execute this script every hour at xx:05
</span><span class='line'># 5 */1 * * * export DISPLAY=:0;/home/adminubuntu/GuangzhouPM25.py
</span><span class='line'>##################################################################################
</span><span class='line'>
</span><span class='line'># BeautifulSoup
</span><span class='line'>from bs4 import BeautifulSoup
</span><span class='line'>
</span><span class='line'># Selenium
</span><span class='line'>from contextlib import closing
</span><span class='line'>from selenium.webdriver import Firefox
</span><span class='line'>from selenium.webdriver.support.ui import WebDriverWait
</span><span class='line'>
</span><span class='line'># For writing into Graphite
</span><span class='line'>import platform
</span><span class='line'>import socket
</span><span class='line'>import time
</span><span class='line'>
</span><span class='line'># Regex
</span><span class='line'>import re
</span><span class='line'>
</span><span class='line'># pinyin
</span><span class='line'>import pinyin
</span><span class='line'>
</span><span class='line'># Parameters comes here 
</span><span class='line'>CARBON_SERVER = '0.0.0.0'
</span><span class='line'>CARBON_PORT = 2003
</span><span class='line'>DELAY = 5  # secs
</span><span class='line'>URL = 'http://210.72.1.216:8080/gzaqi_new/RealTimeDate.html'
</span><span class='line'>CITY = 'guangzhou'
</span><span class='line'>
</span><span class='line'># All Points In Guangzhou City
</span><span class='line'>positionsets = ["天河龙洞", "白云山", "麓湖", "公园前", "荔湾西村", "黄沙路边站", "杨箕
</span><span class='line'>路边站", "荔湾芳村", "海珠宝岗", "海珠沙园", "海珠湖", "大夫山", "奥体中心", "萝岗西区
</span><span class='line'>", "黄埔文冲", "黄埔大沙地", "亚运城", "体育西", "海珠赤沙"]
</span><span class='line'>
</span><span class='line'># regex for matching the digits.
</span><span class='line'>pattern = re.compile(r'\d*')
</span><span class='line'>floatpattern=re.compile(r'[\d|\.]*')
</span><span class='line'>
</span><span class='line'># Sending message to graphite server. 
</span><span class='line'>def send_msg(message):
</span><span class='line'>  print 'sending message:\n%s' % message
</span><span class='line'>  sock = socket.socket()
</span><span class='line'>  sock.connect((CARBON_SERVER, CARBON_PORT))
</span><span class='line'>  sock.sendall(message)
</span><span class='line'>  sock.close()
</span><span class='line'>
</span><span class='line'># Fetching data, runs each hour. In one-time access should fetch all of the data. 
</span><span class='line'>def get_air_data(positionsets):
</span><span class='line'>  # Dictionary hourdata is for holding data, DataStructure like: 
</span><span class='line'>  # {'baiyunshan': [44, 5], 'haizhubaogang': [55, 6]}
</span><span class='line'>  hourdata = {}
</span><span class='line'>  # Calling selenium, need linux X
</span><span class='line'>  browser = Firefox()
</span><span class='line'>  browser.get(URL)
</span><span class='line'>  # Click button one-by-one
</span><span class='line'>  for position in positionsets:
</span><span class='line'>    # After clicking, should re-get the page_source.
</span><span class='line'>    browser.find_element_by_id(position).click()
</span><span class='line'>    page_source = browser.page_source
</span><span class='line'>    # Cooking Soup
</span><span class='line'>    soup = BeautifulSoup(page_source, 'html.parser')
</span><span class='line'>    # pm2.5 value would be something like xx 微克/立方米, so we need an regex for
</span><span class='line'>    # matching, example: print int(pattern.match(input).group())
</span><span class='line'>    PM25 = int(pattern.match(soup.find('td',{'id': 'pmtow'}).contents[0]).group())
</span><span class='line'>    PM25_iaqi = int(pattern.match(soup.find('td',{'id':
</span><span class='line'>'pmtow_iaqi'}).contents[0]).group())
</span><span class='line'>    PM10 = int(pattern.match(soup.find('td',{'id': 'pmten'}).contents[0]).group())
</span><span class='line'>    PM10_iaqi = int(pattern.match(soup.find('td',{'id':
</span><span class='line'>'pmten_iaqi'}).contents[0]).group())
</span><span class='line'>    SO2 = int(pattern.match(soup.find('td',{'id': 'sotwo'}).contents[0]).group())
</span><span class='line'>    SO2_iaqi = int(pattern.match(soup.find('td',{'id':
</span><span class='line'>'sotwo_iaqi'}).contents[0]).group())
</span><span class='line'>    NO2 = int(pattern.match(soup.find('td',{'id': 'notwo'}).contents[0]).group())
</span><span class='line'>    NO2_iaqi = int(pattern.match(soup.find('td',{'id':
</span><span class='line'>'notwo_iaqi'}).contents[0]).group())
</span><span class='line'>    # Special notice the CO would be float value
</span><span class='line'>    CO = float(floatpattern.match(soup.find('td',{'id': 'co'}).contents[0]).group())
</span><span class='line'>    CO_iaqi = int(pattern.match(soup.find('td',{'id': 'co_iaqi'}).contents[0]).group())
</span><span class='line'>    O3 = int(pattern.match(soup.find('td',{'id': 'othree'}).contents[0]).group())
</span><span class='line'>    O3_iaqi = int(pattern.match(soup.find('td',{'id':
</span><span class='line'>'othree_iaqi'}).contents[0]).group())
</span><span class='line'>    hourdata_key = pinyin.get(position)
</span><span class='line'>    hourdata[hourdata_key] = []
</span><span class='line'>    hourdata[hourdata_key].append(PM25)
</span><span class='line'>    hourdata[hourdata_key].append(PM25_iaqi)
</span><span class='line'>    hourdata[hourdata_key].append(PM10)
</span><span class='line'>    hourdata[hourdata_key].append(PM10_iaqi)
</span><span class='line'>    hourdata[hourdata_key].append(SO2)
</span><span class='line'>    hourdata[hourdata_key].append(SO2_iaqi)
</span><span class='line'>    hourdata[hourdata_key].append(NO2)
</span><span class='line'>    hourdata[hourdata_key].append(NO2_iaqi)
</span><span class='line'>    hourdata[hourdata_key].append(CO)
</span><span class='line'>    hourdata[hourdata_key].append(CO_iaqi)
</span><span class='line'>    hourdata[hourdata_key].append(O3)
</span><span class='line'>    hourdata[hourdata_key].append(O3_iaqi)
</span><span class='line'>  # After clicking all of the button, quit the firefox and return the dictionary
</span><span class='line'>  browser.close()
</span><span class='line'>  return hourdata
</span><span class='line'>
</span><span class='line'>if __name__ == '__main__':
</span><span class='line'>  airdata = get_air_data(positionsets)
</span><span class='line'>  timestamp = int(time.time())
</span><span class='line'>  for i in airdata.keys():
</span><span class='line'>    # each key should contains the corresponding hourdata
</span><span class='line'>    lines = [
</span><span class='line'>      'air.guangzhou.%s.pm25 %s %d' % (i, airdata[i][0], timestamp),
</span><span class='line'>      'air.guangzhou.%s.pm25_iaqi %s %d' % (i, airdata[i][1], timestamp),
</span><span class='line'>      'air.guangzhou.%s.pm10 %s %d' % (i, airdata[i][2], timestamp),
</span><span class='line'>      'air.guangzhou.%s.pm10_iaqi %s %d' % (i, airdata[i][3], timestamp),
</span><span class='line'>      'air.guangzhou.%s.so2 %s %d' % (i, airdata[i][4], timestamp),
</span><span class='line'>      'air.guangzhou.%s.so2_iaqi %s %d' % (i, airdata[i][5], timestamp),
</span><span class='line'>      'air.guangzhou.%s.no2 %s %d' % (i, airdata[i][6], timestamp),
</span><span class='line'>      'air.guangzhou.%s.no2_iaqi %s %d' % (i, airdata[i][7], timestamp),
</span><span class='line'>      'air.guangzhou.%s.co %s %d' % (i, airdata[i][8], timestamp),
</span><span class='line'>      'air.guangzhou.%s.co_iaqi %s %d' % (i, airdata[i][9], timestamp),
</span><span class='line'>      'air.guangzhou.%s.o3 %s %d' % (i, airdata[i][10], timestamp),
</span><span class='line'>      'air.guangzhou.%s.o3_iaqi %s %d' % (i, airdata[i][11], timestamp)
</span><span class='line'>    ]
</span><span class='line'>    message = '\n'.join(lines) + '\n'
</span><span class='line'>    send_msg(message)
</span><span class='line'>    # delay for graphite server will use a DELAY time for inserting data
</span><span class='line'>    time.sleep(DELAY)</span></code></pre></td></tr></table></div></figure>


<h3>使用方法</h3>

<p>将上面的文件保存为可执行文件，然后使用crontab添加一个定时任务，譬如以下的crontab条目会
在每个小时的xx:05分时自动运行该脚本文件，将取回的数据写入到Graphite远端。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ crontab -l
</span><span class='line'># hourly execute pm25 updating task, xx:05 will be the execute time
</span><span class='line'>5 */1 * * * export DISPLAY=:0;/home/adminubuntu/GuangzhouPM25.py</span></code></pre></td></tr></table></div></figure>


<p>写入graphite后的效果如下:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_12_16_12_20_04_284x453.jpg" alt="/images/2015_12_16_12_20_04_284x453.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Graphite呈现广州空气质量]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/15/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang/"/>
    <updated>2015-12-15T10:05:39+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/15/yong-graphitecheng-xian-yan-zhou-kong-qi-zhi-liang</id>
    <content type="html"><![CDATA[<h3>数据源准备</h3>

<p>数据源地址在:   <br/>
<a href="http://210.72.1.216:8080/gzaqi_new/RealTimeDate.html">http://210.72.1.216:8080/gzaqi_new/RealTimeDate.html</a></p>

<p>但是这个地址取回数据比较困难。而在<a href="http://www.gzepb.gov.cn/">http://www.gzepb.gov.cn/</a>
右侧的栏里可以通过点击，打开某个监测点当前的空气质量指数,例如海珠湖的数据位于:</p>

<p><a href="http://210.72.1.216:8080/gzaqi_new/DataList2.html?EPNAME=%E6%B5%B7%E7%8F%A0%E6%B9%96">http://210.72.1.216:8080/gzaqi_new/DataList2.html?EPNAME=%E6%B5%B7%E7%8F%A0%E6%B9%96</a></p>

<h3>Beautiful Soup</h3>

<p>Beautiful Soup可以被理解为网页爬虫，用于爬取某个页面并取回所需信息。在Ubuntu/Debian系统
中，安装命令如下。同时为了使用对XML解析速度更快的lxml解析器，我们安装python-lxml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install -y python-bs4
</span><span class='line'>$ sudo apt-get install -y python-lxml </span></code></pre></td></tr></table></div></figure>


<p></p>

<p>现在我们打开某个终端，开始用命令行交互的方式，取回海珠湖监测点的数据:</p>

<p>首先，引入所需的库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># python
</span><span class='line'>Python 2.7.6 (default, Jun 22 2015, 17:58:13) 
</span><span class='line'>[GCC 4.8.2] on linux2
</span><span class='line'>Type "help", "copyright", "credits" or "license" for more information.
</span><span class='line'>&gt;&gt;&gt; from bs4 import BeautifulSoup
</span><span class='line'>&gt;&gt;&gt; import urllib2
</span><span class='line'>&gt;&gt;&gt; response = urllib2.urlopen('http://210.72.1.216:8080/gzaqi_new/DataList2.html?EPNAME=%E6%B5%B7%E7%8F%A0%E6%B9%96')
</span><span class='line'>&gt;&gt;&gt; print response.info()
</span><span class='line'>Content-Length: 10216
</span><span class='line'>Content-Type: text/html
</span><span class='line'>Last-Modified: Wed, 13 May 2015 08:12:28 GMT
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>ETag: "b680828d548dd01:da2"
</span><span class='line'>Server: Microsoft-IIS/6.0
</span><span class='line'>X-Powered-By: ASP.NET
</span><span class='line'>Date: Tue, 15 Dec 2015 02:25:17 GMT
</span><span class='line'>Connection: close
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; html = response.read()
</span><span class='line'>&gt;&gt;&gt; print "Get the length :", len(html)
</span><span class='line'>Get the length : 10216
</span><span class='line'>&gt;&gt;&gt; response.close()  # best practice to close the file</span></code></pre></td></tr></table></div></figure>


<p>上述的操作里调用urllib2取回了页面， html变量里包含了该网页的内容。接下来我们使用
BeautifulSoup来美化并从中取回我们想要的元素。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; soup = BeautifulSoup(html, 'html.parser')    
</span><span class='line'>&gt;&gt;&gt; print soup.prettify()</span></code></pre></td></tr></table></div></figure>


<p>仔细检查后发现，用urllib2取回的网页中，html变量里未包含当前的数据值。通过阅读代码得知，
当前页面的值是浏览器在载入网页时执行javascript函数得到的。因而我们使用一个真实的浏览器
来实现页面的抓取。</p>

<p>Selenium是一套用于进行浏览器自动化测试的开源工具集，可进行Web应用的端到端测试
。Selenium主要包括两个工具：一是Selenium IDE，二是Selenium WebDriver（简称
WebDriver）. 安装命令如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install selenium</span></code></pre></td></tr></table></div></figure>


<p>使用selenium抓取该网页的代码如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; from contextlib import closing
</span><span class='line'>&gt;&gt;&gt; from selenium.webdriver import Firefox
</span><span class='line'>&gt;&gt;&gt; from selenium.webdriver.support.ui import WebDriverWait
</span><span class='line'>&gt;&gt;&gt; url='http://210.72.1.216:8080/gzaqi_new/DataList2.html?EPNAME=%E6%B5%B7%E7%8F%A0%E6%B9%96'
</span><span class='line'>&gt;&gt;&gt; with closing(Firefox()) as browser:
</span><span class='line'>...   browser.get(url)
</span><span class='line'>...   page_source = browser.page_source
</span><span class='line'>... 
</span><span class='line'>&gt;&gt;&gt; print page_source
</span><span class='line'>&gt;&gt;&gt; soup = BeautifulSoup(page_source, 'html.parser')
</span><span class='line'>&gt;&gt;&gt; print soup</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以看到，取回的<code>page_source</code>变量中已经包含有该时段的数据。接下来就是如何把数据
从其中提取出来的过程。</p>

<p>定位到含有数据的表格, 根据其层叠结构，获得tr的值:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; table = soup.find('table', {'class': 'headTable'})
</span><span class='line'>&gt;&gt;&gt; for td in table.tbody.tr:
</span><span class='line'>...     print td
</span><span class='line'>... 
</span><span class='line'>&lt;td class="SO2_24H"&gt;7&lt;/td&gt;
</span><span class='line'>&lt;td class="NO2_24H"&gt;50&lt;/td&gt;
</span><span class='line'>&lt;td class="PM10_24H"&gt;29&lt;/td&gt;
</span><span class='line'>&lt;td class="CO_24H"&gt;31&lt;/td&gt;
</span><span class='line'>&lt;td class="O3_8H_24H"&gt;18&lt;/td&gt;
</span><span class='line'>&lt;td class="PM25_24H"&gt;25&lt;/td&gt;
</span><span class='line'>&lt;td class="AQI"&gt;50&lt;/td&gt;
</span><span class='line'>&lt;td class="Pollutants"&gt;—&lt;/td&gt;
</span><span class='line'>&lt;td class="jibie2"&gt;--&lt;/td&gt;
</span><span class='line'>&lt;td class="jibie2"&gt;一级&lt;/td&gt;
</span><span class='line'>&lt;td class="leibie"&gt;优                  &lt;/td&gt;
</span><span class='line'>&lt;td class="yanse"&gt;&lt;img alt="" src="Images/you.jpg"/&gt;&lt;/td&gt;</span></code></pre></td></tr></table></div></figure>


<p>更进一步得到值:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; for td in table.tbody.tr:
</span><span class='line'>...     print td.contents[0]
</span><span class='line'>... 
</span><span class='line'>7
</span><span class='line'>50
</span><span class='line'>29
</span><span class='line'>31
</span><span class='line'>18
</span><span class='line'>25
</span><span class='line'>50
</span><span class='line'>—
</span><span class='line'>--
</span><span class='line'>一级
</span><span class='line'>优                  
</span><span class='line'>&lt;img alt="" src="Images/you.jpg"/&gt;</span></code></pre></td></tr></table></div></figure>


<p>对应的图片如下:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_15_12_06_23_943x201.jpg" alt="/images/2015_12_15_12_06_23_943x201.jpg" /></p>

<p>提取出来了数据，就可以做后续处理了。</p>

<h3>Graphite</h3>

<p>Graphite的搭建过程不提及。基于我们前面提取出的数据，只需要将其写入Graphite，就可以看
到数据的显示了。</p>

<p>具体的写入代码参考(需翻墙):</p>

<p><a href="http://coreygoldberg.blogspot.com/2012/04/python-getting-data-into-graphite-code.html">http://coreygoldberg.blogspot.com/2012/04/python-getting-data-into-graphite-code.html</a></p>

<p>按照博客中提供的例子，写入到Graphite后的数据在Graphite看起来是这样的:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_15_14_48_48_318x115.jpg" alt="/images/2015_12_15_14_48_48_318x115.jpg" /></p>

<p>而对应的数据格式则如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> sending message:
</span><span class='line'>     system.monitorserver.loadavg_1min 0.18 1450161396
</span><span class='line'>     system.monitorserver.loadavg_5min 0.25 1450161396
</span><span class='line'>     system.monitorserver.loadavg_15min 0.23 1450161396</span></code></pre></td></tr></table></div></figure>


<p>我们可以仿照这样的数据来组织自己的空气质量数据。</p>

<h3>数据来源再加工</h3>

<p>前面取回地址失败， 因为它只是返回空气日报的地址，我们需要的是实时情况，所以还是回到  <br/>
<a href="http://210.72.1.216:8080/gzaqi_new/RealTimeDate.html">http://210.72.1.216:8080/gzaqi_new/RealTimeDate.html</a></p>

<p>这里需要在selenium里模拟出鼠标快速点击所有链接的效果。</p>

<p>下面是一次完整的点击白云山按钮并获得PM2.5页面的过程:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@monitorserver:~/Code# python
</span><span class='line'>Python 2.7.6 (default, Jun 22 2015, 17:58:13) 
</span><span class='line'>[GCC 4.8.2] on linux2
</span><span class='line'>Type "help", "copyright", "credits" or "license" for more information.
</span><span class='line'>&gt;&gt;&gt; from contextlib import closing
</span><span class='line'>&gt;&gt;&gt; from selenium.webdriver import Firefox
</span><span class='line'>&gt;&gt;&gt; from selenium.webdriver.support.ui import WebDriverWait
</span><span class='line'>&gt;&gt;&gt; driver = Firefox()                                                 
</span><span class='line'>&gt;&gt;&gt; driver.get('http://210.72.1.216:8080/gzaqi_new/RealTimeDate.html')
</span><span class='line'>&gt;&gt;&gt; driver.refresh()
</span><span class='line'>&gt;&gt;&gt; baiyunmountain=driver.find_element_by_id("白云山")
</span><span class='line'>&gt;&gt;&gt; baiyunmountain.click()
</span><span class='line'>&gt;&gt;&gt; PM25=driver.find_element_by_id("PM25")
</span><span class='line'>&gt;&gt;&gt; type(PM25)
</span><span class='line'>&lt;class 'selenium.webdriver.remote.webelement.WebElement'&gt;
</span><span class='line'>&gt;&gt;&gt; PM25.click()</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把玩TL-SG108E]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/12/ba-wan-tl-sg108e/"/>
    <updated>2015-12-12T11:02:34+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/12/ba-wan-tl-sg108e</id>
    <content type="html"><![CDATA[<p>前段时间黑色星期五在美国亚马逊败了个TP-LINK TL-SG108E, 直邮到手人民币200不到.
本意是拿来以后在家里跑虚拟机时,虚拟机可以在不同的VLAN里作用,譬如单独的存储/管
理网络等.</p>

<h3>配置</h3>

<p>更改IP地址, 随意指定原有局域网内的某IP地址给交换机即可. 随后所有的节点均可添加
在交换机上.</p>

<h3>VLAN</h3>

<p>VLAN可以实现的功能, 位于不同交换机上的机器可以位于同一局域网内.</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_12_14_25_15_724x626.jpg" alt="/images/2015_12_12_14_25_15_724x626.jpg" /></p>

<p>默认在交换机上打开的VLAN是基于端口的VLAN(Port Based VLAN), 我们这里配置的是
802.1Q VLAN, 打开以后,基于端口的VLAN将自动被禁止.</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_12_15_16_33_541x300.jpg" alt="/images/2015_12_12_15_16_33_541x300.jpg" /></p>

<p>默认的配置页面如下:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_12_15_17_52_927x570.jpg" alt="/images/2015_12_12_15_17_52_927x570.jpg" /></p>

<p>Tag 与 Untagged方式的差别:</p>

<p>端口接收数据时：  <br/>
  如果端口是tagged方式，当数据包本身不包含VLAN的话，输入的数据包就加上该缺省
vlan；如果数据包本身已经包含了VLAN，那么就不再添加。  <br/>
  如果是untagged方式，输入的数据包全部都要加上该缺省vlan。不管输入的数据包是否
已经有VLAN标记。</p>

<p>端口发送数据时：  <br/>
  如果端口是tagged方式，如果端口缺省VLAN等于发送的数据包所含的VLAN，那么就会将
VLAN标记从发送的数据包中去掉；如果不相等，则数据包将带着VLAN发送出去，实现VLAN
的透传。   <br/>
  如果是untagged方式，则不管端口缺省VLAN为多少，是否等于要输出的数据包的VLAN，
都会将VLAN ID从数据包中去掉。</p>

<p>配置了vlan 22和33, 分别在7口和8口上.</p>

<h3>OVS 后的VLAN TAG</h3>

<p>在7口上接入一台Ubuntu服务器,配置为open-vswitch桥接, 虚拟机通过以下配置, 制定
VLAN ID为22.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># virsh edit Gentoo
</span><span class='line'>    &lt;interface type='bridge'&gt;
</span><span class='line'>      &lt;mac address='52:54:00:fd:03:e9'/&gt;
</span><span class='line'>      &lt;source bridge='ovsbr0'/&gt;
</span><span class='line'>      &lt;vlan trunk='yes'&gt;
</span><span class='line'>        &lt;tag id='22' nativeMode='untagged'/&gt;
</span><span class='line'>      &lt;/vlan&gt;
</span><span class='line'>      &lt;virtualport type='openvswitch'&gt;
</span><span class='line'>        &lt;parameters interfaceid='fb3e7f34-6fcd-41dc-8fed-c3ffe0d54b18'/&gt;
</span><span class='line'>      &lt;/virtualport&gt;
</span><span class='line'>      &lt;model type='virtio'/&gt;
</span><span class='line'>      &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/&gt;
</span><span class='line'>    &lt;/interface&gt;
</span><span class='line'># virsh start Gentoo</span></code></pre></td></tr></table></div></figure>


<p>这样启动后的虚拟机<code>Gentoo</code>就处于VLAN ID 22隔离的网络里. 手动配置其IP地址为
<code>10.48.58.2</code>.</p>

<h3>物理机上的VLAN</h3>

<p>这里附带了Ubuntu On Jogger的过程, Joggler XUbuntu下载地址在:  <br/>
<a href="http://jwills.co.uk/projects/joggler-xubuntu/download/">http://jwills.co.uk/projects/joggler-xubuntu/download/</a></p>

<p>操作指令在:  <br/>
<a href="http://jwills.co.uk/projects/joggler-xubuntu/instructions/">http://jwills.co.uk/projects/joggler-xubuntu/instructions/</a></p>

<p>默认用户名/密码都是joggler.</p>

<p>我们需要在joggler上配置一个vlan, 和另一台机器上vlan后的虚拟机通信.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install -y vlan
</span><span class='line'>$ sudo modprobe 8021q
</span><span class='line'>$ sudo vconfig add eth0 22
</span><span class='line'>$ sudo ifconfig eth0.22 10.47.58.3/24 up
</span><span class='line'>$ sudo su -c 'echo "8021q"&gt;&gt;/etc/modules'
</span><span class='line'>$ cat /etc/module
</span><span class='line'>8021q
</span><span class='line'>$ sudo vim /etc/network/interface
</span><span class='line'>....
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet dhcp
</span><span class='line'>
</span><span class='line'>auto eth0.22
</span><span class='line'>iface eth0.22 inet static
</span><span class='line'>    address 10.47.58.3
</span><span class='line'>    netmask 255.255.255.0
</span><span class='line'>    vlan-raw-device eth0</span></code></pre></td></tr></table></div></figure>


<p>这样,重启以后, eth0.22会启动, 就可以通过VLAN 22 ping <code>10.47.58.2</code>了.</p>

<h3>换口</h3>

<p>把joggler从7口换到6口, 可以看到eth0还是可以通的,但是eth0.22则无法通信. 这是因
为我们只在7口和8口上添加了VLAN 22标记的缘故.换回7口,一切正常.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenVswitch on Ubuntu14.04]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/10/openvswitch-on-ubuntu14-dot-04/"/>
    <updated>2015-12-10T15:33:24+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/10/openvswitch-on-ubuntu14-dot-04</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Install openvswitch via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get update
</span><span class='line'># apt-get install -y openvswitch-common openvswitch-switch</span></code></pre></td></tr></table></div></figure>


<p>List the installed module via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># lsmod | grep open
</span><span class='line'>openvswitch            66901  0 
</span><span class='line'>gre                    13808  1 openvswitch
</span><span class='line'>vxlan                  37619  1 openvswitch
</span><span class='line'>libcrc32c              12644  1 openvswitch
</span><span class='line'># ovs-vsctl --version
</span><span class='line'>ovs-vsctl (Open vSwitch) 2.0.2
</span><span class='line'>Compiled May 13 2015 18:49:53</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>Edit the configuration of the networking:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /etc/network/interfaces
</span><span class='line'>###########################################
</span><span class='line'>## By using openVswitch, we enabled the following
</span><span class='line'>###########################################
</span><span class='line'>auto ovsbr0
</span><span class='line'>iface ovsbr0 inet static
</span><span class='line'>address 192.168.1.xx
</span><span class='line'>netmask 255.255.0.0
</span><span class='line'>gateway 192.168.1.xx
</span><span class='line'>dns-nameservers 223.5.5.5 180.76.76.76</span></code></pre></td></tr></table></div></figure>


<p>Now configure the ovs-switched bridge:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ovs-vsctl add-br ovsbr0
</span><span class='line'># ovs-vsctl list-br
</span><span class='line'>ovsbr0
</span><span class='line'># ovs-vsctl add-port ovsbr0 eth0 && reboot</span></code></pre></td></tr></table></div></figure>


<p>Now restart the computer you will get the ovs-bridged network running.</p>

<h3>Bridged With VLAN</h3>

<p>Add/Remove port of the ovs-bridged:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ovs-vsctl add-port ovsbr0 tap0 tag=22
</span><span class='line'># ovs-vsctl show
</span><span class='line'>901c2b29-0764-4370-8d06-168b18339236
</span><span class='line'>    Bridge "ovsbr0"
</span><span class='line'>        Port "eth0"
</span><span class='line'>            Interface "eth0"
</span><span class='line'>        Port "tap0"
</span><span class='line'>            tag: 22
</span><span class='line'>            Interface "tap0"
</span><span class='line'>        Port "ovsbr0"
</span><span class='line'>            Interface "ovsbr0"
</span><span class='line'>                type: internal
</span><span class='line'>    ovs_version: "2.0.2"
</span><span class='line'># ovs-vsctl del-port ovsbr0 tap0</span></code></pre></td></tr></table></div></figure>


<p>If you want to remove the tag, then:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ovs-vsctl set port vnet0 tag=100
</span><span class='line'>ovs-vsctl remove port vnet0 tag 100</span></code></pre></td></tr></table></div></figure>


<h3>VLAN / OpenVswitch/ virt-manager</h3>

<p>Dumpxml will displayed as following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;interface type='bridge'&gt;
</span><span class='line'>  &lt;mac address='52:54:00:0e:6b:d1'/&gt;
</span><span class='line'>  &lt;source bridge='ovsbr0'/&gt;
</span><span class='line'>  &lt;vlan trunk='yes'&gt;
</span><span class='line'>    &lt;tag id='22' nativeMode='untagged'/&gt;
</span><span class='line'>  &lt;/vlan&gt;
</span><span class='line'>  &lt;virtualport type='openvswitch'&gt;
</span><span class='line'>    &lt;parameters interfaceid='d5b7b981-8998-44c0-9344-0ade6b69ec1f'/&gt;
</span><span class='line'>  &lt;/virtualport&gt;
</span><span class='line'>  &lt;target dev='vnet0'/&gt;
</span><span class='line'>  &lt;model type='virtio'/&gt;
</span><span class='line'>  &lt;alias name='net0'/&gt;
</span><span class='line'>  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/&gt;
</span><span class='line'>&lt;/interface&gt;
</span><span class='line'>&lt;interface type='bridge'&gt;
</span><span class='line'>  &lt;mac address='52:54:00:3c:c9:24'/&gt;
</span><span class='line'>  &lt;source bridge='ovsbr0'/&gt;
</span><span class='line'>  &lt;vlan trunk='yes'&gt;
</span><span class='line'>    &lt;tag id='100' nativeMode='untagged'/&gt;
</span><span class='line'>  &lt;/vlan&gt;
</span><span class='line'>  &lt;virtualport type='openvswitch'&gt;
</span><span class='line'>    &lt;parameters interfaceid='06898d54-c0da-48c6-8b01-3307e70b995a'/&gt;
</span><span class='line'>  &lt;/virtualport&gt;
</span><span class='line'>  &lt;target dev='vnet1'/&gt;
</span><span class='line'>  &lt;model type='virtio'/&gt;
</span><span class='line'>  &lt;alias name='net1'/&gt;
</span><span class='line'>  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/&gt;
</span><span class='line'>&lt;/interface&gt;
</span><span class='line'>&lt;interface type='bridge'&gt;
</span><span class='line'>  &lt;mac address='52:54:00:7b:e7:b0'/&gt;
</span><span class='line'>  &lt;source bridge='ovsbr0'/&gt;
</span><span class='line'>  &lt;virtualport type='openvswitch'&gt;
</span><span class='line'>    &lt;parameters interfaceid='303c1f65-23ff-4017-93ba-f196ca1d05fb'/&gt;
</span><span class='line'>  &lt;/virtualport&gt;
</span><span class='line'>  &lt;target dev='vnet2'/&gt;
</span><span class='line'>  &lt;model type='virtio'/&gt;
</span><span class='line'>  &lt;alias name='net2'/&gt;
</span><span class='line'>  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/&gt;
</span><span class='line'>&lt;/interface&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tessera How-to]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/08/tessera-how-to/"/>
    <updated>2015-12-08T10:26:48+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/08/tessera-how-to</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Installation steps are listed as following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get install -y python-virtualenv
</span><span class='line'># git clone git@github.com:urbanairship/tessera.git
</span><span class='line'># cd tessera
</span><span class='line'># virtualenv .
</span><span class='line'># . bin/activate
</span><span class='line'># cd tessera-server/
</span><span class='line'># pip install -r requirements.txt
</span><span class='line'># pip install -r dev-requirements.txt
</span><span class='line'># cd ../tessera-frontend
</span><span class='line'># apt-get install -y npm
</span><span class='line'># npm install -g grunt-cli
</span><span class='line'># npm install
</span><span class='line'># ln -s /usr/bin/nodejs /usr/bin/node
</span><span class='line'># grunt
</span><span class='line'># which inv
</span><span class='line'>/root/Code/second/tessera/bin/inv</span></code></pre></td></tr></table></div></figure>


<h3>Start</h3>

<p>Start the service via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd /root/Code/second/tessera/tessera-server/
</span><span class='line'># inv db.init
</span><span class='line'># inv run &
</span><span class='line'># inv json.import 'demo/*'</span></code></pre></td></tr></table></div></figure>


<p>Open the browser and visit <code>http://localhost:5000</code>, you could see the tessera&rsquo;s web
front.</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_08_11_42_52_998x527.jpg" alt="/images/2015_12_08_11_42_52_998x527.jpg" /></p>

<h3>Import Graphite Data</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(tessera)root@monitorserver:~/Code/second/tessera/tessera-server# vim tessera/config.py 
</span><span class='line'>root@monitorserver:~/Code/second/tessera# cat tessera-server/tessera/config.py
</span><span class='line'>GRAPHITE_URL               = 'http://192.168.10.192'
</span><span class='line'># inv graphite.import</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now you could see the imported graphite data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rundeck Tips]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/07/rundeck-tips/"/>
    <updated>2015-12-07T11:58:55+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/07/rundeck-tips</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Install the rundeck under CentOS 7:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># rpm -Uvh http://repo.rundeck.org/latest.rpm
</span><span class='line'># yum install rundeck</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>Configure some properties:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/rundeck/framework.properties
</span><span class='line'>framework.server.name = 192.168.0.79
</span><span class='line'>framework.server.hostname = 192.168.0.79
</span><span class='line'>framework.server.port = 4440
</span><span class='line'>framework.server.url = http://192.168.0.79:4440
</span><span class='line'># vim /etc/rundeck/rundeck-config.properties
</span><span class='line'>grails.serverURL=http://192.168.0.79:4440 </span></code></pre></td></tr></table></div></figure>


<p>Start the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service rundeckd start
</span><span class='line'>Starting rundeckd (via systemctl):                         [  OK  ]</span></code></pre></td></tr></table></div></figure>


<p>You could check the status via <code># systemctl status rundeckd</code>.</p>

<p>Now visit the server via <a href="http://192.168.0.79:4440,">http://192.168.0.79:4440,</a> username/password are all <code>admin</code>, you should see following image:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_07_12_11_49_956x398.jpg" alt="/images/2015_12_07_12_11_49_956x398.jpg" /></p>

<p>Hint for creating project:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_12_07_12_13_56_694x389.jpg" alt="/images/2015_12_07_12_13_56_694x389.jpg" /></p>

<h3>Run</h3>

<p>Run command locally for creating an command based job.</p>

<p>In case of sudo requires a tty for executing the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># visudo
</span><span class='line'>+ # Defaults    requiretty
</span><span class='line'>+ rundeck ALL=(ALL)   NOPASSWD: ALL </span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Reference</h3>

<p><a href="http://www.tuicool.com/articles/zuI3ua">http://www.tuicool.com/articles/zuI3ua</a></p>

<p><a href="http://www.oschina.net/p/rundeck">http://www.oschina.net/p/rundeck</a></p>

<p><a href="http://gunner.me/archives/488">http://gunner.me/archives/488</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bluetooth NAP How-To]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/05/bluetooth-nap-how-to/"/>
    <updated>2015-12-05T20:03:41+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/05/bluetooth-nap-how-to</id>
    <content type="html"><![CDATA[<h3>Notice</h3>

<p>Notice, this way is only for Bluez-5!!!!</p>

<p>Refers to:  <br/>
<a href="https://wiki.gentoo.org/wiki/Bluetooth_Network_Aggregation_Point">https://wiki.gentoo.org/wiki/Bluetooth_Network_Aggregation_Point</a> <br/>
<a href="https://wiki.gentoo.org/wiki/Bluetooth">https://wiki.gentoo.org/wiki/Bluetooth</a>   <br/>
<a href="http://blog.fraggod.net/2015/03/28/bluetooth-pan-network-setup-with-bluez-5x.html">http://blog.fraggod.net/2015/03/28/bluetooth-pan-network-setup-with-bluez-5x.html</a></p>

<p>Bluez-4 could be much more easier via <code>pand</code>. For example, in ubuntu you could
setup the bluetooth PAN via:</p>

<p><a href="http://blog.sumostyle.net/2009/11/ubuntu-tethering-via-bluetooth-pan/">http://blog.sumostyle.net/2009/11/ubuntu-tethering-via-bluetooth-pan/</a></p>

<h3>RF-KILL</h3>

<p>Use rfkill for unblock the soft-blocked bluetooth adapter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@xxxx dash]# rfkill list bluetooth
</span><span class='line'>2: hp-bluetooth: Bluetooth
</span><span class='line'>        Soft blocked: yes
</span><span class='line'>        Hard blocked: no
</span><span class='line'>5: hci1: Bluetooth
</span><span class='line'>        Soft blocked: yes
</span><span class='line'>        Hard blocked: no
</span><span class='line'>[root@xxxx dash]# rfkill unblock bluetooth
</span><span class='line'>
</span><span class='line'># rfkill list bluetooth
</span><span class='line'>2: hp-bluetooth: Bluetooth
</span><span class='line'>        Soft blocked: no
</span><span class='line'>        Hard blocked: no
</span><span class='line'>5: hci1: Bluetooth
</span><span class='line'>        Soft blocked: no
</span><span class='line'>        Hard blocked: no</span></code></pre></td></tr></table></div></figure>


<h3>bluetoothctl</h3>

<p>Use bluetoothctl for configurating the bluetooth adapter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@xxxx ]# bluetoothctl 
</span><span class='line'>[NEW] Controller 40:2C:xx:xx:xx:xx xxxx #2 [default]
</span><span class='line'>[bluetooth]# power on
</span><span class='line'>Changing power on succeeded
</span><span class='line'>[bluetooth]# discoverable on
</span><span class='line'>Changing discoverable on succeeded
</span><span class='line'>[bluetooth]# agent on
</span><span class='line'>Agent registered
</span><span class='line'>[bluetooth]# scan on</span></code></pre></td></tr></table></div></figure>


<h3>PAN</h3>

<p>Refers to:  <br/>
<a href="http://blog.fraggod.net/2015/03/28/bluetooth-pan-network-setup-with-bluez-5x.html">http://blog.fraggod.net/2015/03/28/bluetooth-pan-network-setup-with-bluez-5x.html</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- machine-1
</span><span class='line'>% bluetoothctl
</span><span class='line'>[NEW] Controller 00:02:72:XX:XX:XX malediction [default]
</span><span class='line'>[bluetooth]# power on
</span><span class='line'>Changing power on succeeded
</span><span class='line'>[CHG] Controller 00:02:72:XX:XX:XX Powered: yes
</span><span class='line'>[bluetooth]# discoverable on
</span><span class='line'>Changing discoverable on succeeded
</span><span class='line'>[CHG] Controller 00:02:72:XX:XX:XX Discoverable: yes
</span><span class='line'>[bluetooth]# agent on
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>--- machine-2 (snipped)
</span><span class='line'>% bluetoothctl
</span><span class='line'>[NEW] Controller 00:02:72:YY:YY:YY rpbox [default]
</span><span class='line'>[bluetooth]# power on
</span><span class='line'>[bluetooth]# scan on
</span><span class='line'>[bluetooth]# agent on
</span><span class='line'>[bluetooth]# pair 00:02:72:XX:XX:XX
</span><span class='line'>[bluetooth]# trust 00:02:72:XX:XX:XX</span></code></pre></td></tr></table></div></figure>


<p>Then Download the script from:</p>

<p><a href="https://github.com/mk-fg/fgtk/blob/master/bt-pan">https://github.com/mk-fg/fgtk/blob/master/bt-pan</a></p>

<p>This <code>bt-pan</code> will setup both the server and the client.</p>

<p>In Server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bt-pan --debug server $br</span></code></pre></td></tr></table></div></figure>


<p>While the <code>$br</code> could be setup via following command(Take Gentoo for example):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/conf.d/net
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'># Comment out this line, and add the following lines:
</span><span class='line'>#config_eth0="dhcp"
</span><span class='line'>config_eth0="null"
</span><span class='line'>bridge_br1="eth0"
</span><span class='line'>config_br1="dhcp"
</span><span class='line'># Next two lines, to make two values work (keep setfd before stp):
</span><span class='line'>brctl_br1="setfd 1
</span><span class='line'>stp on"
</span><span class='line'>...
</span><span class='line'># ln -s net.lo /etc/init.d/net.br1
</span><span class='line'># rc-service net.eth0 stop && rc-service net.br1 start
</span><span class='line'># rc-update add net.br1 default </span></code></pre></td></tr></table></div></figure>


<p>In the Client side, do following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bt-pan client 00:02:72:XX:XX:XX</span></code></pre></td></tr></table></div></figure>


<p>Now check the both client and server, you will find <code>bnep0</code> interface has been
created, you could see it via <code>ifconfig bnep0</code>.</p>

<p>Assign the same IP network range address to the client side, as in the br1
side in server. After that you could ping each other via bluetooth!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Bluetooth PAN]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/04/on-bluetooth-pan/"/>
    <updated>2015-12-04T10:51:10+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/04/on-bluetooth-pan</id>
    <content type="html"><![CDATA[<h3>AIM</h3>

<p>For sharing the internet connection from working PC to Surface Pro.</p>

<h3>Setup And Configuration</h3>

<h4>SurfacePro</h4>

<p>Install bluez/bluez-libs/bluez-utils:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pacman -S bluez bluez-utils bluez-libs</span></code></pre></td></tr></table></div></figure>


<p>Modprobe the bnep kernel module:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@surfacepro ~]# modprobe bnep
</span><span class='line'>[root@surfacepro ~]# lsmod | grep bnep
</span><span class='line'>bnep                   20480  0
</span><span class='line'>bluetooth             450560  6 bnep,btbcm,btrtl,btusb,btintel
</span><span class='line'>[root@surfacepro ~]# modprobe btusb</span></code></pre></td></tr></table></div></figure>


<p>Start the bluetooth.service via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo systemctl start bluetooth.service</span></code></pre></td></tr></table></div></figure>


<p><code>bluetoothctl</code> will give access for configurating bluetooth equipment, following steps
shows how to connect to a bluetooth keyboard:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@surfacepro ~]# bluetoothctl 
</span><span class='line'>[NEW] Controller xx:xx:xx:xx:xx:xx surfacepro [default]
</span><span class='line'>[bluetooth]#
</span><span class='line'>[bluetooth]# agent KeyboardOnly 
</span><span class='line'>Agent registered
</span><span class='line'>[bluetooth]# default-agent      
</span><span class='line'>Default agent request successful
</span><span class='line'>[bluetooth]# power on
</span><span class='line'>[CHG] Controller xx:xx:xx:xx:xx:xx Class: 0x00011c
</span><span class='line'>Changing power on succeeded
</span><span class='line'>[CHG] Controller xx:XX:XX:XX:XX:XX Powered: yes
</span><span class='line'>[bluetooth]# scan on
</span><span class='line'>Discovery started
</span><span class='line'>[bluetooth]# pair D0:13:1E:11:F5:45
</span><span class='line'>Attempting to pair with D0:13:1E:11:F5:45
</span><span class='line'>[bluetooth]# connect D0:13:1E:11:F5:45</span></code></pre></td></tr></table></div></figure>


<p>Now try to connect to the keyboard, yes you could use keyboard for typing.</p>

<h4>PAN</h4>

<p>Network Aggregation Point - NAP</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize SurfacePro Kernel]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/12/03/customize-surfacepro-kernel/"/>
    <updated>2015-12-03T17:44:32+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/12/03/customize-surfacepro-kernel</id>
    <content type="html"><![CDATA[<h3>Preparation</h3>

<p>Get the kernel and patch file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>To be Written</span></code></pre></td></tr></table></div></figure>


<h3>Build</h3>

<p>Prepare for compiliation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make mrproper</span></code></pre></td></tr></table></div></figure>


<p>Get the current running configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ zcat /proc/config.gz &gt; .config
</span><span class='line'>$ make menuconfig
</span><span class='line'>$ make -j3
</span><span class='line'>$ make modules_install</span></code></pre></td></tr></table></div></figure>


<p>Install Kernel, you newly generated kernel will be named as
<code>vmlinuz-4.1.13-surfacepro3</code>(Though surfacepro, surfacepro3 will remains its name) :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo cp -v arch/x86/boot/bzImage /boot/vmlinuz-4.1.13-surfacepro3</span></code></pre></td></tr></table></div></figure>


<p>Generate the initial RAM disk:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mkinitcpio -k 4.1.13-surfacepro3 -c /etc/mkinitcpio.conf -g  \ 
</span><span class='line'>/boot/initramfs-4.1.13-surfacepro3.img</span></code></pre></td></tr></table></div></figure>


<p>Copy System.map, it contains a list of kernel symbols.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo cp System.map /boot/System.map-4.1.13-surfacepro3
</span><span class='line'>$ sudo ln -sf /boot/System.map-4.1.13-surfacepro3 /boot/System.map</span></code></pre></td></tr></table></div></figure>


<p>Install the grub&rsquo;s configuration into grub.cfg:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /etc/default/grub
</span><span class='line'>Edit with the name specified
</span><span class='line'>$ sudo grub-mkconfig -o /boot/grub/grub.cfg</span></code></pre></td></tr></table></div></figure>


<p>But still this modification didn&rsquo;t solve surfacepro&rsquo;s wireless problem. finally I have
to fall back to using yaourt&rsquo;s surfac pro kernel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome's Battery Indicator]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/25/awesomes-battery-indicator/"/>
    <updated>2015-11-25T12:18:29+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/25/awesomes-battery-indicator</id>
    <content type="html"><![CDATA[<h3>Background</h3>

<p>I installed ArchLinux+Awesome On my SurfacePro, while the charger of Surface Pro is not
so tight to the pad. Thus I have to use a battery indicator in Awesome.</p>

<h3>Software</h3>

<p>Refers to:</p>

<p><a href="http://www.everythingisvoid.com/uncategorized/simple-battery-status-indicator-awesome-window-manager">http://www.everythingisvoid.com/uncategorized/simple-battery-status-indicator-awesome-window-manager</a></p>

<p>Install steps on ArchLinux:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pacman -S luarocks5.1 gobject-introspection acpi
</span><span class='line'>$ sudo luarocks-5.1 install battery_status</span></code></pre></td></tr></table></div></figure>


<p>You could manually run <code>show_battery_status</code> or add it into your own rc.lua file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim ~/.config/awesome/rc.lua
</span><span class='line'>----.....................
</span><span class='line'>autorunApps =
</span><span class='line'>{
</span><span class='line'>--.........
</span><span class='line'>"synergyc 192.168.0.119",
</span><span class='line'>"sudo echo 1240&gt;/sys/class/backlight/intel_backlight/brightness", 
</span><span class='line'>"fcitx",
</span><span class='line'>"show_battery_status", 
</span><span class='line'>----.....................</span></code></pre></td></tr></table></div></figure>


<p>Now restart the awesome you could see the battery indicator.</p>

<h3>Add Charging Indicator</h3>

<p>First download the source code from github:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/svarogg/battery_status</span></code></pre></td></tr></table></div></figure>


<p>Debug with luarocks loader:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rocks-5.1   lua5.1 -lluarocks.loader
</span><span class='line'>Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio
</span><span class='line'>&gt; require("rex_posix")
</span><span class='line'>&gt; rex = require("rex_posix")
</span><span class='line'>&gt; battery_rex = rex.new([[([^,]{1,3})%]])
</span><span class='line'>&gt; rex=require("rex_posix")
</span><span class='line'>&gt; battery_rex=rex.new([[([^,]{1,3})%]])
</span><span class='line'>&gt; acpi=io.popen('acpi 2&gt;&1')
</span><span class='line'>&gt; acpi_res = acpi:read("*line")
</span><span class='line'>&gt; acpi:close()
</span><span class='line'>&gt; print (acpi_res)
</span><span class='line'>Battery 0: Full, 100%
</span><span class='line'>&gt; percentage=battery_rex:match(acpi_res)
</span><span class='line'>&gt; print (percentage)
</span><span class='line'>100
</span><span class='line'>&gt; print(type(percentage))
</span><span class='line'>string
</span><span class='line'>&gt; print(type(tonumber(percentage)))
</span><span class='line'>number
</span><span class='line'>&gt; adapter = io.popen('acpi -a 2&gt;&1')
</span><span class='line'>&gt; adapter_res = adapter:read("*line")
</span><span class='line'>&gt; adapter:close()
</span><span class='line'>&gt; print(adapter_res)
</span><span class='line'>Adapter 0: on-line
</span><span class='line'>&gt; charge_rex = rex.new([[(on|off)]])
</span><span class='line'>&gt; print(charge_rex:match(adapter_res))
</span><span class='line'>on</span></code></pre></td></tr></table></div></figure>


<p>We get the status of the charge, then update the corresponding icon to the systray.</p>

<p>The modified repository could be fetched from:</p>

<p><a href="https://github.com/purplepalmdash/Awesome-Battery-Indicator">https://github.com/purplepalmdash/Awesome-Battery-Indicator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on ArchLinux on SSD for SurfacePro]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/18/tips-on-archlinux-on-ssd-for-surfacepro/"/>
    <updated>2015-11-18T16:59:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/18/tips-on-archlinux-on-ssd-for-surfacepro</id>
    <content type="html"><![CDATA[<h3>Hardware</h3>

<p>Surface Pro, KingShare 128G SSD(USB).</p>

<p>Picture will be updated after successfully installed.</p>

<h3>Virtualbox Way</h3>

<p>Make a vmdk file which actually points to the USB Disk:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo VBoxManage internalcommands createrawvmdk -filename ./rawusb1.vmdk -rawdisk \ 
</span><span class='line'>/dev/disk/by-id/usb-KINGSHAR_KS-CUTS25W_123456789010-0:0
</span><span class='line'>$ sudo chown -R YourName rawusb1.vmdk</span></code></pre></td></tr></table></div></figure>


<p>Now using this rawdisk for starting the VirtualBox based machine.</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_18_17_10_46_645x529.jpg" alt="/images/2015_11_18_17_10_46_645x529.jpg" /></p>

<h3>Installation</h3>

<p>The system installation is refers to following links:</p>

<p><a href="https://wiki.archlinux.org/index.php/Microsoft_Surface_Pro_3">https://wiki.archlinux.org/index.php/Microsoft_Surface_Pro_3</a></p>

<p><a href="https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_a_USB_key">https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_a_USB_key</a></p>

<h3>Updated Configuration</h3>

<p>Finally I installed the surface pro by using a usb dongle which burned the archlinux
installation iso, put it into the surface pro and startup the machine pressing power
key and volume down key, it will goes into the installtion steps.</p>

<p>Install the system on the SSD, the main steps are available at:</p>

<p><a href="http://purplepalmdash.github.io/blog/2014/06/16/archlinux-on-surface-pro/">http://purplepalmdash.github.io/blog/2014/06/16/archlinux-on-surface-pro/</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@archiso ~ # mount /dev/sdb2 /mnt
</span><span class='line'>root@archiso ~ # mount /dev/sdb1 /mnt/boot/EFI 
</span><span class='line'>root@archiso ~ # arch-chroot /mnt /bin/bash
</span><span class='line'>[root@archiso /]# grub-install --target=x86_64-efi --efi-directory=/boot/EFI \ 
</span><span class='line'>--bootloader-id=arch_grub --recheck
</span><span class='line'>[root@archiso /]# grub-mkconfig -o /boot/grub/grub.cfg</span></code></pre></td></tr></table></div></figure>


<p>Because I frequently change the installtion media(I have SSD and Harddisk), so
everytime I change the installtion media, I have to run above steps again.</p>

<h3>Kernel Configuration</h3>

<p>Install the kernel from yaourt, you could get the surfacepro3 compatiable linux kernel,
install it on surface pro will also be OK:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ yaourt surfacepro
</span><span class='line'>1 aur/linux-surfacepro3 4.3-1 [installed] (5)
</span><span class='line'>    The Linux-surfacepro3 kernel and modules
</span><span class='line'>2 aur/linux-surfacepro3-docs 4.3-1 (5)
</span><span class='line'>    Kernel hackers manual - HTML documentation that comes with the Linux-surfacepro3
</span><span class='line'>kernel
</span><span class='line'>3 aur/linux-surfacepro3-headers 4.3-1 (5)
</span><span class='line'>    Header files and scripts for building modules for Linux-surfacepro3 kernel</span></code></pre></td></tr></table></div></figure>


<p>After installation, you have to manually generate the grub items:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo grub-mkconfig -o /boot/grub/grub.cfg</span></code></pre></td></tr></table></div></figure>


<p>Now reboot the surface pro, you could view the kernel has been upgraded to our newly
installed version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  ~  uname -a
</span><span class='line'>Linux surfacepro 4.3.0-1-surfacepro3 #1 SMP PREEMPT Fri Nov 20 05:47:41 CST 2015 x86_64
</span><span class='line'>GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>With the new version of kernel, you won&rsquo;t face too much problems, my problem is when
using the official kernel, my wifi will get stucked, sometimes the machine will be
dead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spice Client]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/16/spice-client/"/>
    <updated>2015-11-16T21:20:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/16/spice-client</id>
    <content type="html"><![CDATA[<h3>Image Conversion</h3>

<p>Convert the vdi files into qcow2 file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ qemu-img convert -f vdi -O qcow2 Windows81.vdi Windows81.qcow2</span></code></pre></td></tr></table></div></figure>


<p>Then continue to create the virtual machine via importing the img.</p>

<h3>Spice Client</h3>

<p>Using virtviewer for view the remote machine.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pacman -S virtviewer
</span><span class='line'>$ remote-viewer spice://localhost:5900</span></code></pre></td></tr></table></div></figure>


<p>Or you could view the desktop via <code>spicec</code>.</p>

<p>The listening port could be view via <code>netstat -anp | grep 5900</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win10 Tips for Using Xshell]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/13/win10-tips-for-using-xshell/"/>
    <updated>2015-11-13T15:59:16+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/13/win10-tips-for-using-xshell</id>
    <content type="html"><![CDATA[<p>Won&rsquo;t change the size of the window when you disable the window size:</p>

<p><img src="http://purplepalmdash.github.io/images/Xshell_1.jpg" alt="/images/Xshell_1.jpg" /></p>

<p>When using vim, the wrappered module should be disable, thus won&rsquo;t cause you
mis-editing the content of the file:</p>

<p><img src="http://purplepalmdash.github.io/images/Xshell_2.jpg" alt="/images/Xshell_2.jpg" /></p>

<p>The configuration should be applied to each session.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variety]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/13/variety/"/>
    <updated>2015-11-13T11:05:05+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/13/variety</id>
    <content type="html"><![CDATA[<h3>参考</h3>

<p><a href="http://peterlevi.com/variety/how-to-install/">http://peterlevi.com/variety/how-to-install/</a></p>

<h3>安装</h3>

<p>Ubuntu上，从ppa安装:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:peterlevi/ppa
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install variety</span></code></pre></td></tr></table></div></figure>


<h3>配置</h3>

<p>安装完毕后，在终端下键入<code>variety</code>即可开始配置该软件，第一次会询问是否创建一个用于多终端
主机之间同步桌面壁纸的账户:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_13_11_10_35_755x507.jpg" alt="/images/2015_11_13_11_10_35_755x507.jpg" /></p>

<p>这一步是可选的，我们在这里先注册上. 需要注意的是，用翻墙后的浏览器完成注册.</p>

<p>一般情况下这里就能使用了，但是awesome桌面环境下需要增加一下这行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /home/XXXXXXX/.config/variety/scripts/set_wallpaper
</span><span class='line'>### Finally we comes to awesome!  
</span><span class='line'>awsetbg "$WP" 2&gt; /dev/null</span></code></pre></td></tr></table></div></figure>


<h3>进一步美化</h3>

<p>Awesome下就只能换换壁纸，本身终端也不支持透明度的配置，如果是gnome之类的桌面环境，可以
把terminal emulator的透明度打开，能获得很好的视觉效果。</p>

<p>默认的更新频率是5分钟更新一次，当然在配置界面下可以更改为更短/更长的时限。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Material]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/05/good-material/"/>
    <updated>2015-11-05T10:41:22+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/05/good-material</id>
    <content type="html"><![CDATA[<h3>Movie</h3>

<p>Sorted by director:  <br/>
<a href="http://pan.baidu.com/share/home?uk=72456331&amp;view=share#category/type=0">http://pan.baidu.com/share/home?uk=72456331&amp;view=share#category/type=0</a></p>

<h3>Good BookMark Of Zhihu</h3>

<p><a href="http://www.zhihu.com/collection/38938285?page=2">http://www.zhihu.com/collection/38938285?page=2</a></p>

<h3>Linux Wondering</h3>

<p><a href="http://i.linuxtoy.org/docs/guide/index.html">http://i.linuxtoy.org/docs/guide/index.html</a></p>

<h3>Oh My Zsh</h3>

<p><a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a></p>

<p><a href="http://www.kafeitu.me/shell/2012/03/25/oh-my-zsh.html">http://www.kafeitu.me/shell/2012/03/25/oh-my-zsh.html</a></p>

<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>

<p><a href="http://segmentfault.com/a/1190000002658335">http://segmentfault.com/a/1190000002658335</a></p>

<h3>Wondering In Guangzhou</h3>

<p><a href="http://www.zhihu.com/question/36159147">http://www.zhihu.com/question/36159147</a></p>

<h3>Impress.js</h3>

<p>Use this javascript for writing the PPT. <br/>
<a href="https://github.com/impress/impress.js">https://github.com/impress/impress.js</a></p>

<h3>Programming On Dialog</h3>

<p><a href="http://www.cyberciti.biz/tips/spice-up-your-unix-linux-shell-scripts.html">http://www.cyberciti.biz/tips/spice-up-your-unix-linux-shell-scripts.html</a></p>

<p><a href="https://techbase.kde.org/Development/Tutorials/Shell_Scripting_with_KDE_Dialogs">https://techbase.kde.org/Development/Tutorials/Shell_Scripting_with_KDE_Dialogs</a></p>

<h3>Remote Control Of Arduino</h3>

<p><a href="http://www.geek-workshop.com/thread-25230-1-1.html">http://www.geek-workshop.com/thread-25230-1-1.html</a></p>

<h3>Processing</h3>

<p><a href="http://open.sina.com.cn/course/id_300/lesson_4094/">http://open.sina.com.cn/course/id_300/lesson_4094/</a></p>

<h3>KVM Hardware</h3>

<p><a href="http://www.cnblogs.com/sammyliu/p/4548194.html">http://www.cnblogs.com/sammyliu/p/4548194.html</a></p>

<h3>OVS Howto</h3>

<p><a href="http://roan.logdown.com/posts/191801-set-openvswitch">http://roan.logdown.com/posts/191801-set-openvswitch</a> <br/>
<a href="http://openvswitch.org/support/config-cookbooks/vlan-configuration-cookbook/">http://openvswitch.org/support/config-cookbooks/vlan-configuration-cookbook/</a> <br/>
<a href="http://notes.yuwh.net/%E5%9C%A8centos7%E4%B8%8A%E9%85%8D%E7%BD%AEopen-vswitch%E5%92%8Cvxlan/">http://notes.yuwh.net/%E5%9C%A8centos7%E4%B8%8A%E9%85%8D%E7%BD%AEopen-vswitch%E5%92%8Cvxlan/</a></p>

<h3>Good Books</h3>

<p><a href="http://pan.baidu.com/share/home?uk=2704770694&amp;view=share#category/type=0">http://pan.baidu.com/share/home?uk=2704770694&amp;view=share#category/type=0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FRDM-KL02Z Tips(1)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/05/frdm-kl02z-tips-1/"/>
    <updated>2015-11-05T09:53:38+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/05/frdm-kl02z-tips-1</id>
    <content type="html"><![CDATA[<p>Reference Material: <br/>
<a href="http://www.freescale.com/zh-Hans/products/arm-processors/kinetis-cortex-m/l-series/freedom-development-platform-for-the-kinetis-kl02-family:FRDM-KL02Z?tab=In-Depth_Tab">http://www.freescale.com/zh-Hans/products/arm-processors/kinetis-cortex-m/l-series/freedom-development-platform-for-the-kinetis-kl02-family:FRDM-KL02Z?tab=In-Depth_Tab</a></p>

<h3>Minicom</h3>

<p>115200/data-bit: 8/ no parity/stop bit 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CloudStack VR连接数]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/04/cloudstack-vrlian-jie-shu/"/>
    <updated>2015-11-04T10:56:12+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/04/cloudstack-vrlian-jie-shu</id>
    <content type="html"><![CDATA[<h2>All-In-One VR性能测试</h2>

<h3>测试环境</h3>

<h4>硬件</h4>

<p><strong>CPU</strong>: Intel&reg; Core&trade; i7-3770 CPU @ 3.40GHz, 四核八线程。 <br/>
<strong>内存</strong>: 24 G。</p>

<h4>虚拟机网络</h4>

<p><strong>虚拟机网络</strong>: 新建网段为10.82.89.0/24, DHCP范围设置如下，NAT转发外网: <br/>
<img src="http://purplepalmdash.github.io/images/2015_11_04_09_24_37_479x293.jpg" alt="/images/2015_11_04_09_24_37_479x293.jpg" /></p>

<h4>All-In-One 虚拟机</h4>

<p><strong>CPU</strong>: 6 Core, Copy Host CPU Configuration。     <br/>
<strong>内存</strong>: 8 G。
<strong>硬盘</strong>: 200 G。
<strong>系统</strong>: Ubuntu 14.04 x86_64。  <br/>
<strong>CloudStack版本</strong>: 4.5.2。</p>

<h4>CloudStack环境</h4>

<p><strong>Zone</strong>: Advance Zone(PerfZone)。 <br/>
<strong>IP</strong>: 取10.82.89.0/24中DHCP尚未使用的IP地址。    <br/>
<strong>测试机模板</strong>: ubuntu64perftest.qcow2(<a href="http://192.168.0.79/ubuntu64perftest.qcow2">http://192.168.0.79/ubuntu64perftest.qcow2</a>) <br/>
<strong>测试机套餐</strong>: 2 Core, 内存3G。</p>

<h4>拓扑图及说明</h4>

<p><img src="http://purplepalmdash.github.io/images/allinone.jpeg" alt="/images/allinone.jpeg" /></p>

<p>IP地址说明:</p>

<p><strong>All-In-One</strong>:  10.82.89.89   <br/>
<strong>Test Server</strong>: CloudStack实例，NAT后的10.82.89.0/24地址  <br/>
<strong>VR</strong>: CloudStack自动分配的10.82.89.0/24地址  <br/>
<strong>KVM</strong>: All-In-One上运行的虚拟机，绑定8个IP地址, 10.82.89.11/10.82.89.254~10.82.89.247</p>

<h3>测试方法</h3>

<p>Test Server上运行一个可支持多用户长时间在线的服务端程序，并可统计同时在线人数，接受外部
客户端发来的服务请求。</p>

<p>Test Client上运行一个快速发起并保持连接的客户端程序，服务端地址指向Test Server, 服务端
口即Test Server上服务端程序监听的端口。</p>

<p>单个IP最多支持6万多个活动连接，为了提升单台机器能支持的同时在线人数，需要在Test Client
上同时绑定多个网卡，kvm最多支持8个网卡，60000*8=500000, 单台机可以发起并保持的连接数超
过50万。</p>

<p>Server端代码下载地址:  <br/>
<a href="https://gist.github.com/yongboy/5318930/raw/ccf8dc236da30fcf4f89567d567eaf295b363d47/server.c">https://gist.github.com/yongboy/5318930/raw/ccf8dc236da30fcf4f89567d567eaf295b363d47/server.c</a></p>

<p>Client端代码下载地址:</p>

<p><a href="https://gist.github.com/yongboy/5324779/raw/f29c964fcd67fefc3ce66e487a44298ced611cdc/client2.c">https://gist.github.com/yongboy/5324779/raw/f29c964fcd67fefc3ce66e487a44298ced611cdc/client2.c</a></p>

<h3>打开各节点限制</h3>

<p>在All-In-One机器/Test Server/Test Client上，均需要打开以下限制:</p>

<h4>最大文件句柄数</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/security/limits.conf
</span><span class='line'>
</span><span class='line'>* soft nofile 104857
</span><span class='line'>* hard nofile 104857</span></code></pre></td></tr></table></div></figure>


<h4>最大文件数限制</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/sysctl.conf
</span><span class='line'>fs.file-max=1048576
</span><span class='line'># sudo sysctl -p /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>conntrack最大连接数</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/sysctl.conf
</span><span class='line'>net.netfilter.nf_conntrack_max = 6553500
</span><span class='line'># sysctl -p /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure>


<h4>可用端口数</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/sysctl.conf
</span><span class='line'>    net.ipv4.ip_local_port_range= 1024 65535
</span><span class='line'># sysctl -p /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure>


<p>更改完毕后，需要重新启动机器生效，为了使sysctl的配置每次都生效，可以考虑将命令加到启动
项中。</p>

<h3>测试过程</h3>

<h4>启动Server端：</h4>

<p>Server端启动后将监听服务器端的8000端口：</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_04_10_25_54_816x191.jpg" alt="/images/2015_11_04_10_25_54_816x191.jpg" /></p>

<h4>启动Client端：</h4>

<p>单机多网卡</p>

<p>在All-In-One机器上，由下面的命令启动qemu实例,则可以得到8块网卡的虚拟机, 内存大小<code>-m
5120</code>可以调小，一般1024～2048就够:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo qemu-system-x86_64 -net nic,model=virtio,macaddr=52:54:00:12:34:56,vlan=1
</span><span class='line'>-net tap,vlan=1 -net nic,model=virtio,macaddr=52:54:00:12:34:57,vlan=2 -net
</span><span class='line'>tap,vlan=2 -net nic,model=virtio,macaddr=52:54:00:12:34:58,vlan=3 -net
</span><span class='line'>tap,vlan=3 -net nic,model=virtio,macaddr=52:54:00:12:34:59,vlan=4 -net
</span><span class='line'>tap,vlan=4 -net nic,model=virtio,macaddr=52:54:00:12:34:60,vlan=5 -net
</span><span class='line'>tap,vlan=5 -net nic,model=virtio,macaddr=52:54:00:12:34:61,vlan=6 -net
</span><span class='line'>tap,vlan=6 -net nic,model=virtio,macaddr=52:54:00:12:34:62,vlan=7 -net
</span><span class='line'>tap,vlan=7 -net nic,model=virtio,macaddr=52:54:00:12:34:63,vlan=8 -net
</span><span class='line'>tap,vlan=8 -hda ./ubuntu64perftest.qcow2 -m 5120 --enable-kvm</span></code></pre></td></tr></table></div></figure>


<p>启动虚拟机后, 在虚拟机里设置地址(默认只从eth0得到dhcp地址):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat ./ethernet.sh
</span><span class='line'>ifconfig eth1 up
</span><span class='line'>ifconfig eth1 192.168.1.254
</span><span class='line'>ifconfig eth2 up
</span><span class='line'>ifconfig eth2 192.168.1.253
</span><span class='line'>ifconfig eth3 up
</span><span class='line'>ifconfig eth3 192.168.1.252
</span><span class='line'>ifconfig eth4 up
</span><span class='line'>ifconfig eth4 192.168.1.251
</span><span class='line'>ifconfig eth5 up
</span><span class='line'>ifconfig eth5 192.168.1.250
</span><span class='line'>ifconfig eth6 up
</span><span class='line'>ifconfig eth6 192.168.1.249
</span><span class='line'>ifconfig eth7 up
</span><span class='line'>ifconfig eth7 192.168.1.248</span></code></pre></td></tr></table></div></figure>


<p>客户端中，发起海量连接的脚本:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> cat startbomb.sh 
</span><span class='line'>#!/bin/sh
</span><span class='line'>./client2 -h 192.168.1.109 -p 8000 -m 64000 -o
</span><span class='line'>192.168.1.16,192.168.1.254,192.168.1.253,192.168.1.252, 
</span><span class='line'>192.168.1.251,192.168.1.250,192.168.1.249,192.168.1.248</span></code></pre></td></tr></table></div></figure>


<p>调用<code>./startbomb.sh</code>即可开始对Server端发起大量在线连接</p>

<h3>测试截图</h3>

<p>这里记录一次完整的VR因为过多连接数造成内存耗尽自动重启的过程。</p>

<p>在CloudStack的实例上运行server端程序, 此时的输出如下:</p>

<p>VR的<code>top</code>输出:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_11_06_810x293.jpg" alt="/images/2015_11_02_21_11_06_810x293.jpg" /></p>

<p>Server输出:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_13_37_788x205.jpg" alt="/images/2015_11_02_21_13_37_788x205.jpg" /></p>

<p>客户端开始发包连接的过程中:</p>

<p>10W:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_15_11_794x589.jpg" alt="/images/2015_11_02_21_15_11_794x589.jpg" /></p>

<p>20W:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_15_53_841x563.jpg" alt="/images/2015_11_02_21_15_53_841x563.jpg" /></p>

<p>30W:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_16_35_902x622.jpg" alt="/images/2015_11_02_21_16_35_902x622.jpg" /></p>

<p>40W:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_17_19_869x654.jpg" alt="/images/2015_11_02_21_17_19_869x654.jpg" /></p>

<p>44W, VR轰挂:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_18_06_813x689.jpg" alt="/images/2015_11_02_21_18_06_813x689.jpg" /></p>

<p>此时查看VR的重启时间:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_18_56_665x149.jpg" alt="/images/2015_11_02_21_18_56_665x149.jpg" /></p>

<p>可以看到VR启动时间很短，这证明VR由于内存耗尽已经自动重启了。</p>

<h3>应对策略</h3>

<h4>暂时应对</h4>

<p>在VR上对每个进/出 虚拟路由器的IP作连接数限制，TCP/UDP都需要设置。ICMP暂时未作限定:</p>

<p>Iptables规则如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-A PREROUTING -i eth0 -p tcp  -m connlimit --connlimit-above 1000 --connlimit-mask 32 
</span><span class='line'>--connlimit-saddr -j DROP
</span><span class='line'>-A PREROUTING -i eth2 -p tcp  -m connlimit --connlimit-above 1000 --connlimit-mask 32
</span><span class='line'>--connlimit-saddr -j DROP
</span><span class='line'>-A PREROUTING -i eth0 -p udp  -m connlimit --connlimit-above 1000 --connlimit-mask 32
</span><span class='line'>--connlimit-saddr -j DROP
</span><span class='line'>-A PREROUTING -i eth2 -p udp  -m connlimit --connlimit-above 1000 --connlimit-mask 32
</span><span class='line'>--connlimit-saddr -j DROP</span></code></pre></td></tr></table></div></figure>


<p>添加完此规则后，Test Server最多可接受1000个同时在线连接。这时在Client端发起大量连接超过
1000的都会被VR的iptables规则链丢弃。</p>

<h4>潜在问题</h4>

<p>对于过多过快的攻击性连接，VR匹配iptables会造成VR CPU占用率过高。建议采用硬件防火墙来阻
挡这类
攻击。</p>
]]></content>
  </entry>
  
</feed>
