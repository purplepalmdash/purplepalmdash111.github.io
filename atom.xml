<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dash]]></title>
  <link href="http://purplepalmdash.github.io/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-05-18T19:31:52+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Re-Orgnize Blog]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/16/re-orgnize-blog/"/>
    <updated>2015-05-16T10:53:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/16/re-orgnize-blog</id>
    <content type="html"><![CDATA[<p>Since my last blog touched something special, I have to delete the whole repository and re-orgnize the structure again. This time I also use Octopress, but the version has been upgraded to the 3.0, this article records the steps.</p>

<h3>Github Account</h3>

<p>Register a new account, and verrify the email, add your own ssh key, test it via ssh -T <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#98;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#x74;&#64;&#103;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#111;&#109;</a></p>

<h3>Repository</h3>

<p>Get the latest repository via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/imathis/octopress.git
</span></code></pre></td></tr></table></div></figure>


<p>Configuration of the konsole, enable the <code>zsh -l</code> at the login shell.   Settings-> Edit Current Profile-> General -> Command(/bin/zsh -l)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm use 1.9.3
</span><span class='line'>$ ruby --version
</span><span class='line'>ruby 1.9.3p547 (2014-05-14 revision 45962) [x86_64-linux]
</span><span class='line'>$ gem install bundler
</span><span class='line'>$ vim Gemfile
</span><span class='line'>#source "https://rubygems.org"
</span><span class='line'>source "http://mirrors.aliyun.com/rubygems/"
</span><span class='line'>$ bundle install
</span><span class='line'>$ rake install
</span></code></pre></td></tr></table></div></figure>


<p>Now the basic configuration of the repository has been added.</p>

<h3>Plugins</h3>

<p>For adding videos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/manojlds/octopress-plugins.git
</span><span class='line'>$ cd octopress
</span><span class='line'>$ cd plugins
</span><span class='line'>$ cp ../../octopress-plugins/youtube.rb ./
</span></code></pre></td></tr></table></div></figure>


<h3>Encryption</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a More Intelligent OpenWRT Router]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/14/setup-a-more-intelligent-openwrt-router/"/>
    <updated>2015-05-14T21:01:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/14/setup-a-more-intelligent-openwrt-router</id>
    <content type="html"><![CDATA[<h3>Openssh-Server</h3>

<p>The default sshd is provided by dropbear, the functionality is not good, so I have to replace it with openssh-server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@OpenWrt:~# uci set dropbear.@dropbear[0].Port=2222
</span><span class='line'>root@OpenWrt:~# uci commit dropbear
</span><span class='line'>root@OpenWrt:~# /etc/init.d/dropbear restart
</span><span class='line'>root@OpenWrt:~# opkg install openssh-server
</span><span class='line'>root@OpenWrt:~# opkg install openssh-client
</span></code></pre></td></tr></table></div></figure>


<p>Configure the OpenSSH:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># /etc/init.d/sshd enable
</span><span class='line'># /etc/init.d/sshd start
</span><span class='line'># /etc/init.d/dropbear disable
</span><span class='line'># /etc/init.d/dropbear stop
</span></code></pre></td></tr></table></div></figure>


<p>The next time you login will ask you for changing your password, do it and continue for using ssh.</p>

<h3>ShadowSocks and DNS</h3>

<p>For ShadowSocks you could refer to my previous blogs. <br/>
DNS Server is for automatically analyze the dns in server, install it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo yum install dnsmasq
</span></code></pre></td></tr></table></div></figure>


<p>Configure it to another port rather than the default 53.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redsocks 翻墙
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup the Cobbler Server]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/14/setup-the-cobbler-server/"/>
    <updated>2015-05-14T09:38:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/14/setup-the-cobbler-server</id>
    <content type="html"><![CDATA[<p>The reference material is mainly from:  <br/>
<a href="http://www.cobblerd.org/manuals/quickstart/">http://www.cobblerd.org/manuals/quickstart/</a></p>

<h3>Prepartion</h3>

<p>First install the CentOS6.6, choose the basic server. <br/>
After installation, update to the latest system via <code>yum -y update</code>. <br/>
Disable the SELinux via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/selinux/config
</span><span class='line'>#SELINUX=enforcing                                                                                                                       │
</span><span class='line'>SELINUX=disabled 
</span></code></pre></td></tr></table></div></figure>


<p>Then restart the compute.  <br/>
Add epel repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo
</span><span class='line'># yum update
</span><span class='line'># yum install -y cobbler cobbler-web
</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>Change the default password:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># openssl passwd -1                                                                                                     │
</span><span class='line'>Password:                                                                                                                                 │
</span><span class='line'>Verifying - Password:                                                                                                                     │
</span><span class='line'>igaowugoauwgoueougo
</span><span class='line'>[root@CobblerServer ~]# vim /etc/cobbler/settings          
</span><span class='line'>default_password_crypted: "agowuoguwoawoguwoe"
</span></code></pre></td></tr></table></div></figure>


<p>Set the Server and Next_Server to the specified IP Address, DO NOT use 0.0.0.0:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># default, localhost
</span><span class='line'>server: 10.3.3.3.
</span><span class='line'>
</span><span class='line'># default, localhost
</span><span class='line'>next_server: 10.3.3.3
</span></code></pre></td></tr></table></div></figure>


<p>Enable the dhcp managed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>manage_dhcp: 0
</span></code></pre></td></tr></table></div></figure>


<p>Edit the dhcp template via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi /etc/cobbler/dhcp.template
</span><span class='line'>subnet 10.3.3.0 netmask 255.255.255.0 {
</span><span class='line'>     option routers             10.3.3.1;                                                                                                  
</span><span class='line'>     range dynamic-bootp        10.3.3.4 10.3.3.254;
</span><span class='line'>     option domain-name-servers 114.114.114.114, 8.8.8.8;     
</span><span class='line'>     option subnet-mask         255.255.255.0;         
</span><span class='line'>     filename                   "/pxelinux.0";       
</span><span class='line'>     default-lease-time         21600;           
</span><span class='line'>     max-lease-time             43200;      
</span><span class='line'>     next-server                $next_server; 
</span><span class='line'>}          
</span></code></pre></td></tr></table></div></figure>


<p>Start and check the service status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@CobblerServer ~]# service cobblerd start                                                                                           
</span><span class='line'>Starting cobbler daemon:                                   [  OK  ]
</span><span class='line'>[root@CobblerServer ~]# chkconfig cobblerd on                     
</span><span class='line'>[root@CobblerServer ~]# chkconfig httpd on                     
</span><span class='line'>[root@CobblerServer ~]# service cobblerd status                  
</span><span class='line'>cobblerd (pid 1564) is running...     
</span></code></pre></td></tr></table></div></figure>


<p>Better you restart the machine and verify your installation via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@CobblerServer ~]# cobbler check
</span><span class='line'>The following are potential configuration items that you may want to fix:
</span><span class='line'>
</span><span class='line'>1 : dhcpd is not installed
</span><span class='line'>2 : some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run 'cobbler get-loaders' to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The 'cobbler get-loaders' command is the easiest way to resolve these requirements.
</span><span class='line'>3 : change 'disable' to 'no' in /etc/xinetd.d/rsync
</span><span class='line'>4 : since iptables may be running, ensure 69, 80/443, and 25151 are unblocked
</span><span class='line'>5 : debmirror package is not installed, it will be required to manage debian deployments and repositories
</span><span class='line'>6 : ksvalidator was not found, install pykickstart
</span><span class='line'>7 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them
</span></code></pre></td></tr></table></div></figure>


<p>OOOOPs, so many errors, so first install dhcpd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum install -y dhcpd
</span><span class='line'># chkconfig dhcpd on
</span><span class='line'># chkconfig xinetd on
</span></code></pre></td></tr></table></div></figure>


<p>Manullly edit the dhcpd configuration file as in following files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@CobblerServer ~]# cat /etc/dhcp/dhcpd.conf 
</span><span class='line'>#
</span><span class='line'># DHCP Server Configuration file.
</span><span class='line'>#   see /usr/share/doc/dhcp*/dhcpd.conf.sample
</span><span class='line'>#   see 'man 5 dhcpd.conf'
</span><span class='line'>#
</span><span class='line'># create new
</span><span class='line'># specify domain name
</span><span class='line'>option domain-name "server.world";
</span><span class='line'># specify name server's hostname or IP address
</span><span class='line'>option domain-name-servers 114.114.114.114;
</span><span class='line'># default lease time
</span><span class='line'>default-lease-time 600;
</span><span class='line'># max lease time
</span><span class='line'>max-lease-time 7200;
</span><span class='line'># this DHCP server to be declared valid
</span><span class='line'>authoritative;
</span><span class='line'># specify network address and subnet mask
</span><span class='line'>subnet 10.3.3.0 netmask 255.255.255.0 {
</span><span class='line'>    # specify the range of lease IP address
</span><span class='line'>    range dynamic-bootp 10.3.3.4 10.3.3.254;
</span><span class='line'>    # specify broadcast address
</span><span class='line'>    option broadcast-address 10.3.3.255;
</span><span class='line'>    # specify default gateway
</span><span class='line'>    option routers 10.3.3.1;
</span><span class='line'>}
</span><span class='line'># service dhcpd restart
</span></code></pre></td></tr></table></div></figure>


<p>One trouble after another, solve them:  <br/>
Get Loaders:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@CobblerServer ~]# cobbler get-loaders
</span></code></pre></td></tr></table></div></figure>


<p>Enable the rsync configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  # vim /etc/xinetd.d/rsync 
</span><span class='line'>        disable = no
</span></code></pre></td></tr></table></div></figure>


<p>Add the following lines into the /etc/sysconfig/iptables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:OUTPUT ACCEPT [0:0]
</span><span class='line'>-A INPUT -p udp -m multiport --dports 69,80,443,25151 -j ACCEPT 
</span><span class='line'>-A INPUT -p tcp -m multiport --dports 69,80,443,25151 -j ACCEPT 
</span><span class='line'>-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
</span></code></pre></td></tr></table></div></figure>


<p>Or:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -I INPUT -p udp -m multiport --dports 69,80,443,25151 -j ACCEPT
</span><span class='line'># iptables -I INPUT -p tcp -m multiport --dports 69,80,443,25151 -j ACCEPT
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The difference is the latter won&rsquo;t last for long once the machine got restarted.</p>

<p>Install following packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@CobblerServer ~]# yum install -y debmirror pykickstart cman
</span></code></pre></td></tr></table></div></figure>


<p>Now check again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cobbler check
</span><span class='line'>$ cobbler sync
</span></code></pre></td></tr></table></div></figure>


<h3>Import ISO</h3>

<p>I use the CentOS7 iso(CentOS-7-x86_64-Everything-1503-01.iso).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@CobblerServer ~]# mount -o loop -t iso9660 ./CentOS-7-x86_64-Everything-1503-01.iso  /mnt
</span><span class='line'>[root@CobblerServer ~]# cobbler import --name=CentOS-7 --arch=x86_64 --path=/mnt
</span><span class='line'>path=/mnt
</span><span class='line'>task started: 2015-05-14_035209_import
</span><span class='line'>task started (id=Media import, time=Thu May 14 03:52:09 2015)
</span><span class='line'>Found a candidate signature: breed=redhat, version=rhel6
</span><span class='line'>Found a candidate signature: breed=redhat, version=rhel7
</span><span class='line'>Found a matching signature: breed=redhat, version=rhel7
</span><span class='line'>Adding distros from path /var/www/cobbler/ks_mirror/CentOS-7-x86_64:
</span><span class='line'>creating new distro: CentOS-7-x86_64
</span><span class='line'>trying symlink: /var/www/cobbler/ks_mirror/CentOS-7-x86_64 -&gt; /var/www/cobbler/links/CentOS-7-x86_64
</span><span class='line'>creating new profile: CentOS-7-x86_64
</span><span class='line'>associating repos
</span><span class='line'>checking for rsync repo(s)
</span><span class='line'>checking for rhn repo(s)
</span><span class='line'>checking for yum repo(s)
</span><span class='line'>starting descent into /var/www/cobbler/ks_mirror/CentOS-7-x86_64 for CentOS-7-x86_64
</span><span class='line'>processing repo at : /var/www/cobbler/ks_mirror/CentOS-7-x86_64
</span><span class='line'>need to process repo/comps: /var/www/cobbler/ks_mirror/CentOS-7-x86_64
</span><span class='line'>looking for /var/www/cobbler/ks_mirror/CentOS-7-x86_64/repodata/*comps*.xml
</span><span class='line'>Keeping repodata as-is :/var/www/cobbler/ks_mirror/CentOS-7-x86_64/repodata
</span><span class='line'>*** TASK COMPLETE ***
</span></code></pre></td></tr></table></div></figure>


<p>Check it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@CobblerServer ~]# cobbler distro list
</span><span class='line'>   CentOS-7-x86_64
</span><span class='line'>[root@CobblerServer ~]# cobbler profile list
</span><span class='line'>   CentOS-7-x86_64
</span><span class='line'>[root@CobblerServer ~]# cobbler distro report --name=CentOS-7-x86_64
</span><span class='line'>Name                           : CentOS-7-x86_64
</span><span class='line'>Architecture                   : x86_64
</span><span class='line'>TFTP Boot Files                : {}
</span><span class='line'>Breed                          : redhat
</span><span class='line'>Comment                        : 
</span><span class='line'>Fetchable Files                : {}
</span><span class='line'>Initrd                         : /var/www/cobbler/ks_mirror/CentOS-7-x86_64/images/pxeboot/initrd.img
</span><span class='line'>Kernel                         : /var/www/cobbler/ks_mirror/CentOS-7-x86_64/images/pxeboot/vmlinuz
</span><span class='line'>Kernel Options                 : {}
</span><span class='line'>Kernel Options (Post Install)  : {}
</span><span class='line'>Kickstart Metadata             : {'tree': 'http://@@http_server@@/cblr/links/CentOS-7-x86_64'}
</span><span class='line'>Management Classes             : []
</span><span class='line'>OS Version                     : rhel7
</span><span class='line'>Owners                         : ['admin']
</span><span class='line'>Red Hat Management Key         : &lt;&lt;inherit&gt;&gt;
</span><span class='line'>Red Hat Management Server      : &lt;&lt;inherit&gt;&gt;
</span><span class='line'>Template Files                 : {}
</span></code></pre></td></tr></table></div></figure>


<h3>Installation</h3>

<p>Install the system, via setup a machine which boot from PXE in the same subnet, then this machine will hint you with installing the corresponding system. <br/>
The new system&rsquo;s username/password is the same as we set in the cobbler configuration file.</p>

<h3>Enable Web Interface</h3>

<p>Change the default password via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp /etc/cobbler/users.digest /etc/cobbler/users.digest.back
</span><span class='line'>$ htdigest /etc/cobbler/users.digest "Cobbler" cobbler
</span></code></pre></td></tr></table></div></figure>


<p>Now restart the cobblerd, you could visit following URL for visiting the Web Inteface:  <br/>
<a href="http://10.3.3.3/cobbler_web">http://10.3.3.3/cobbler_web</a></p>

<h3>Import Multiple ISOs</h3>

<p>Import the first iso as usual.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mount -o loop -t iso9660 ./CentOS-6.6-x86_64-bin-DVD1.iso  /mnt
</span><span class='line'># cobbler import --name=CentOS-6.6 --arch=x86_64 --path=/mnt
</span></code></pre></td></tr></table></div></figure>


<p>The Second iso first mount to /mnt1/ directory, then import with following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#  rsync -a '/mnt1/' /var/www/cobbler/ks_mirror/CentOS-6.6-x86_64/ --exclude-from=/etc/cobbler/rsync.exclude --progress
</span><span class='line'>#  COMPSXML=$(ls /var/www/cobbler/ks_mirror/CentOS-6.6-x86_64/repodata/*comps*.xml)
</span><span class='line'>#  createrepo -c cache -s sha --update --groupfile ${COMPSXML} /var/www/cobbler/ks_mirror/CentOS-6.6-x86_64
</span></code></pre></td></tr></table></div></figure>


<p>Verify it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cobbler distro list
</span><span class='line'># cobbler profile list
</span><span class='line'># cobbler distro report --name=CentOS-6.6-x86_64
</span></code></pre></td></tr></table></div></figure>


<p>Verify it via installing a new machine running CentOS6.6.</p>

<h3>Trouble-Shooting on fence</h3>

<p>Lacking of fence equipment.</p>

<p>Trouble shooting for controlling the Systems(which is the node information which added into cobbler system).   <br/>
For Power Management:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@CobblerServer ~]# cobbler system poweroff --name Node1
</span><span class='line'>task started: 2015-05-14_064600_power
</span><span class='line'>task started (id=Power management (off), time=Thu May 14 06:46:00 2015)
</span><span class='line'>cobbler power configuration is:
</span><span class='line'>      type   : virsh
</span><span class='line'>      address: qemu+ssh://root@10.3.3.1/system
</span><span class='line'>      user   : root
</span><span class='line'>      id     : CobblerTest
</span><span class='line'>running: /usr/sbin/fence_virsh
</span><span class='line'>received on stdout: 
</span><span class='line'>received on stderr: Unable to connect/login to fencing device
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for Setting Up CentOS Local Repository]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/11/tips-for-setting-up-centos-local-repository/"/>
    <updated>2015-05-11T20:48:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/11/tips-for-setting-up-centos-local-repository</id>
    <content type="html"><![CDATA[<p>The material is learned from:   <br/>
<a href="http://paulcodr.co/blog/2015/yumrepo-server-local/">http://paulcodr.co/blog/2015/yumrepo-server-local/</a></p>

<h3>Steps</h3>

<p>Local ISO Preparation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# mkdir isos bin
</span><span class='line'>[root@localhost ~]# ls isos
</span><span class='line'>CentOS-6.6-x86_64-bin-DVD1.iso  CentOS-6.6-x86_64-bin-DVD2.iso
</span></code></pre></td></tr></table></div></figure>


<p>Download the scripts:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd bin
</span><span class='line'># wget http://paulcodr.co/download/yum-scripts.zip
</span><span class='line'># unzip yum-scripts.zip 
</span><span class='line'>Archive:  yum-scripts.zip
</span><span class='line'>   creating: yum-scripts/
</span><span class='line'>  inflating: yum-scripts/yum-create-server-centos6.6.sh  
</span><span class='line'>  inflating: yum-scripts/yum-rsync-minimal-centos6.6.sh  
</span></code></pre></td></tr></table></div></figure>


<p>Change the priviledges:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost bin]# chown -R root:root /root/isos
</span><span class='line'>[root@localhost bin]# chmod 750 -R /root/bin
</span></code></pre></td></tr></table></div></figure>


<p>Execute the script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost bin]# mv yum-scripts/* ./
</span><span class='line'>[root@localhost bin]# ls
</span><span class='line'>yum-create-server-centos6.6.sh  yum-rsync-minimal-centos6.6.sh  yum-scripts  yum-scripts.zip
</span><span class='line'>[root@localhost bin]# ./yum-create-server-centos6.6.sh 2&gt;&1 | tee createserver.log
</span></code></pre></td></tr></table></div></figure>


<p>Verify it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost bin]#  du -hs /data/www/yumrpms/centos6.6/6.6/os/x86_64
</span><span class='line'>5.6G    /data/www/yumrpms/centos6.6/6.6/os/x86_64
</span><span class='line'>[root@localhost bin]#  ls -lh /data/www/yumrpms/centos6.6/
</span><span class='line'>total 4.0K
</span><span class='line'>lrwxrwxrwx 1 apache apache    3 May 11 12:49 6 -&gt; 6.6
</span><span class='line'>drwxr-xr-x 3 apache apache 4.0K May 11 12:47 6.6
</span></code></pre></td></tr></table></div></figure>


<p>Verify it on another PC:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root:/home/juju/iso]# curl http://10.7.7.124/yumrpms/centos6.6/6/os/x86_64/
</span><span class='line'>.....
</span><span class='line'>&lt;/table&gt;
</span><span class='line'>&lt;address&gt;Apache/2.2.15 (CentOS) Server at 10.7.7.124 Port 80&lt;/address&gt;
</span><span class='line'>&lt;/body&gt;&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Change the rsync repository in yum-rsync-minimal-cent6.6.sh:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rsync://mirrors.yun-idc.com/centos/
</span></code></pre></td></tr></table></div></figure>


<p>Then:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost bin]# ./yum-rsync-minimal-centos6.6.sh 2&gt;&1 | tee syncserver.log
</span></code></pre></td></tr></table></div></figure>


<p>Wait for rsync&hellip;&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically Recover SSH Connection]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/11/automatically-recover-ssh-connection/"/>
    <updated>2015-05-11T19:53:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/11/automatically-recover-ssh-connection</id>
    <content type="html"><![CDATA[<p>Thanks for the Great File Wall, my ssh connection to my vps is not stable, so I use following scripts for automatically maintain the ssh conneciton, once the connection down, it will restart immediately.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim autokeepssh.sh 
</span><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>while [ '' == '' ]
</span><span class='line'>do
</span><span class='line'>        # Use ssh -R for reverse ssh
</span><span class='line'>        ssh_d_process_num=`ps aux|grep -E 'ssh -NfR' |grep -v grep |wc -l`
</span><span class='line'>        if [ "$ssh_d_process_num" == "0" ]; then
</span><span class='line'>                # Automatically start the ssh proxy 
</span><span class='line'>                echo "Autostart!"
</span><span class='line'>                ssh -NfR 4389:localhost:22 Trusty@xxx.xxx.xxx.xxx -p xxxx &
</span><span class='line'>        #else
</span><span class='line'>        #       echo 'ssh -d running'
</span><span class='line'>        fi
</span><span class='line'>
</span><span class='line'>        sleep 5
</span><span class='line'>done
</span></code></pre></td></tr></table></div></figure>


<p>-R means I started a reverse connection.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup PXE Server]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/11/setup-pxe-server/"/>
    <updated>2015-05-11T14:12:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/11/setup-pxe-server</id>
    <content type="html"><![CDATA[<p>This article record how to setup the pxe server and setup the CentOS quick installation repository, using it we could quickly setup the CentOS on new machine.</p>

<h3>Installation</h3>

<p>To install following packages for preparing the environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install dnsmasq tftpd-hpa apache2 system-config-kickstart
</span></code></pre></td></tr></table></div></figure>


<p>Configure the apache2&rsquo;s default configuration file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /etc/apache2/sites-enabled/000-default.conf
</span><span class='line'>        DocumentRoot /var/www/
</span></code></pre></td></tr></table></div></figure>


<p>Configure the dnsmasq via following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /etc/dnsmasq.conf
</span><span class='line'>bogus-priv
</span><span class='line'>filterwin2k
</span><span class='line'>interface=eth0
</span><span class='line'>domain=nova.com
</span><span class='line'>dhcp-range=10.7.7.100,10.7.7.150,12h
</span><span class='line'>dhcp-option=3,10.7.7.1
</span><span class='line'>dhcp-option=6,114.114.114.114
</span><span class='line'>dhcp-option=121,10.7.7.0/24
</span><span class='line'>dhcp-boot=/var/tftproot/pxelinux.0
</span><span class='line'>enable-tftp
</span><span class='line'>tftp-root=/var/tftproot
</span><span class='line'>dhcp-authoritative
</span></code></pre></td></tr></table></div></figure>


<p>Copy the pxelinux.0 from an installed CentOS, and copy it to /var/tftproot/</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root:~]# scp /usr/share/syslinux/pxelinux.0 Trusty@10.7.7.2:/home/Trusty
</span><span class='line'>Trusty@WolfHunterPXE:~$ sudo cp /home/Trusty/pxelinux.0 /var/tftproot/
</span></code></pre></td></tr></table></div></figure>


<h3>Prepare the Repository</h3>

<p>We need to copy the installation media into the corresponding directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mkdir -p /var/www/CentOS
</span><span class='line'>$ sudo mount CentOS-6.3-x86_64-bin-DVD1.iso /mnt
</span><span class='line'>$ sudo cp -rf /mnt/* /var/www/CentOS
</span><span class='line'>$ sudo mkdir -p /mnt1
</span><span class='line'>$ sudo mount CentOS-6.3-x86_64-bin-DVD2.iso /mnt1
</span><span class='line'>$ sudo cp -rf /mnt1/Packages/* /var/www/CentOS/Packages/
</span></code></pre></td></tr></table></div></figure>


<p>Copy the CentOS&rsquo;s kernel and kernel-startup file into the /var/tftproot/CentOS directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mkdir -p /var/tftproot/CentOS
</span><span class='line'>$ sudo cp /mnt/images/pxeboot/initrd.img /var/tftproot/CentOS
</span><span class='line'>$ sudo cp /mnt/images/pxeboot/vmlinuz /var/tftproot/CentOS
</span></code></pre></td></tr></table></div></figure>


<p>Now your repository for installation is ready.</p>

<h3>Configuration</h3>

<p>Edit the boot.msg file for user choosen:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /var/tftproot/boot.msg
</span><span class='line'>### START INSTALLING ######
</span><span class='line'>Choose installation type(0/1/2),the DEFAULT is 100:
</span><span class='line'>0 CentOS-6.3-64-No-RAID-Basic
</span><span class='line'>1 CentOS-6.3-64-No-RAID-minidesktop-virtualization-for testing
</span></code></pre></td></tr></table></div></figure>


<p>When user choose the corresponding items, then /var/tftproot/pxelinux.cfg/default file will choose the correspoiding files.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Trusty@WolfHunterPXE:~$ sudo mkdir -p /var/tftproot/pxelinux.cfg
</span><span class='line'>Trusty@WolfHunterPXE:~$ sudo vim /var/tftproot/pxelinux.cfg/default
</span><span class='line'>default 100
</span><span class='line'>display boot.msg
</span><span class='line'>
</span><span class='line'># Label 100 , boot from hddisk
</span><span class='line'>LABEL 100
</span><span class='line'>localboot 0x80
</span><span class='line'>
</span><span class='line'>### Label 0, minimal CentOS
</span><span class='line'>label 0
</span><span class='line'>kernel CentOS/vmlinuz
</span><span class='line'>append ks=http://10.7.7.2/cfg/Centos-minibasic.cfg vga=normal initrd=CentOS/initrd.img devfs=nomount ramdisk_size=9216 nofb
</span><span class='line'>
</span><span class='line'>### Label 1, minimal-Desktop CentOS 
</span><span class='line'>label 1
</span><span class='line'>kernel CentOS/vmlinuz
</span><span class='line'>append ks=http://10.7.7.2/cfg/Centos-minidesktop.cfg vga=normal initrd=CentOS/initrd.img devfs=nomount ramdisk_size=9216 nofb
</span><span class='line'>
</span><span class='line'>prompt 1 
</span><span class='line'>timeout 900
</span></code></pre></td></tr></table></div></figure>


<h3>Get kickstart file</h3>

<p>In a installed CentOS Server, install system-config-kickstart via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo yum install system-config-kickstart
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>sudo system-config-kickstart</code> for getting the graphical configuration window, like following:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_05_11_14_50_05_931x572.jpg" alt="/images/2015_05_11_14_50_05_931x572.jpg" />   <br/>
Customize the partition:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_05_11_14_52_09_842x576.jpg" alt="/images/2015_05_11_14_52_09_842x576.jpg" />   <br/>
Do other configurations, after everything is OK, save it.</p>

<p>An example cfg file is listed as following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat minidesktop.cfg 
</span><span class='line'>#platform=x86, AMD64, or Intel EM64T
</span><span class='line'>#version=DEVEL
</span><span class='line'># Firewall configuration
</span><span class='line'>firewall --disabled
</span><span class='line'># Install OS instead of upgrade
</span><span class='line'>install
</span><span class='line'># Use network installation
</span><span class='line'>url --url="http://10.7.7.2/CentOS"
</span><span class='line'># Root password
</span><span class='line'>rootpw --iscrypted $1$aRvLvJNH$ElcmZ2Msl4MbD.fHdnos9.
</span><span class='line'># System authorization information
</span><span class='line'>auth  --useshadow  --passalgo=sha512
</span><span class='line'># Use graphical install
</span><span class='line'>graphical
</span><span class='line'>firstboot --disable
</span><span class='line'># System keyboard
</span><span class='line'>keyboard us
</span><span class='line'># System language
</span><span class='line'>lang en_US
</span><span class='line'># SELinux configuration
</span><span class='line'>selinux --disabled
</span><span class='line'># Installation logging level
</span><span class='line'>logging --level=info
</span><span class='line'>
</span><span class='line'># System timezone
</span><span class='line'>timezone  Asia/Hong_Kong
</span><span class='line'># System bootloader configuration
</span><span class='line'>bootloader --location=mbr
</span><span class='line'># Clear the Master Boot Record
</span><span class='line'>zerombr
</span><span class='line'># Partition clearing information
</span><span class='line'>clearpart --all  
</span><span class='line'># Disk partitioning information
</span><span class='line'>part swap --fstype="swap" --size=1024
</span><span class='line'>part / --asprimary --fstype="ext4" --grow --size=1
</span><span class='line'>
</span><span class='line'>%packages
</span><span class='line'>@basic-desktop
</span><span class='line'>@chinese-support
</span><span class='line'>@internet-browser
</span><span class='line'>@x11
</span><span class='line'>-ibus-table-cangjie
</span><span class='line'>-ibus-table-erbi
</span><span class='line'>-ibus-table-wubi
</span><span class='line'>
</span><span class='line'>%end
</span></code></pre></td></tr></table></div></figure>


<p>Copy it under the /var/www/cfg/CentOS-minidesktop.cfg.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Trusty@WolfHunterPXE:~$ sudo mkdir -p /var/www/cfg
</span><span class='line'>Trusty@WolfHunterPXE:~$ sudo cp minidesktop.cfg /var/www/cfg/CentOS-minidesktop.cfg
</span></code></pre></td></tr></table></div></figure>


<h3>Testing</h3>

<p>Now create a new machine , set its bootup to pxe-network.  <br/>
Trouble Shooting, only need for CentOS:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_05_11_16_18_47_609x332.jpg" alt="/images/2015_05_11_16_18_47_609x332.jpg" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- Ctrl+B
</span><span class='line'>- dhcp net0
</span><span class='line'>- config
</span><span class='line'>
</span><span class='line'>- Ctrl+X
</span><span class='line'>- autoboot
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Fuel部署OpenContrail(6)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/06/shi-yong-fuelbu-shu-opencontrail-6/"/>
    <updated>2015-05-06T15:27:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/06/shi-yong-fuelbu-shu-opencontrail-6</id>
    <content type="html"><![CDATA[<p>前面在HA类型的Fuel OpenStack基础上集成了OpenContrail，然而在实际的开发和测试中，用HA类型比较浪费硬件资源，因此这次我把部署节点从7个压缩到3个，做多节点上非HA类型的OpenStack集成OpenContrail.</p>

<h3>先决条件</h3>

<p>这次只用三台机器来做部署，分别为:  <br/>
2-Core, 3G内存, 100G硬盘, 用于安装OpenStack Controller.      <br/>
2-Core, 2G内存, 100G硬盘, 用于安装OpenStack Compute. 注意这台机器需要Copy Host CPU configuration, 以激活KVM。      <br/>
2-Core, 3G内存, 100G硬盘, 用于安装Contrail.  <br/>
创建出来的两个用于部署的OpenStack环境如下:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_05_06_15_36_20_383x194.jpg" alt="/images/2015_05_06_15_36_20_383x194.jpg" /> <br/>
值得注意的是，在OpenStack的配置中，我们激活了Ceilometer，用于统计，所以需要额外增加一台2G内存大小的虚拟机。  <br/>
<img src="http://purplepalmdash.github.io/images/2015_05_06_09_40_34_608x385.jpg" alt="/images/2015_05_06_09_40_34_608x385.jpg" /></p>

<h3>安装</h3>

<p>安装过程和HA的过程大同小异，配置好网络以后，现在I3OpenStack中部署好OpenStack，而后用provision的方式将I3Contrail中的Contrail部署节点机器安装为Ubuntu的格式。    <br/>
这里的具体配置过程可以参考《使用Fuel部署OpenContrail(1)》到《使用Fuel部署OpenContrail(3)》.  <br/>
一切就绪后，我们进入到配置过程.</p>

<h3>配置</h3>

<p>详细配置如下:</p>

<h4>(Contrail) 配置Contrail部署节点</h4>

<p>删除不用的网络端口, 并配置ifccfg-eth4后重启:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd /etc/network/interfaces.d/
</span><span class='line'># rm -f ifcfg-eth1 
</span><span class='line'># rm -f ifcfg-eth2 
</span><span class='line'># rm -f ifcfg-eth3
</span><span class='line'># vim ifcfg-eth4
</span><span class='line'>    auto eth4
</span><span class='line'>    iface eth4 inet static
</span><span class='line'>    
</span><span class='line'>    address 10.77.77.100
</span><span class='line'>    netmask 255.255.255.0
</span><span class='line'>    gateway 10.77.77.1
</span><span class='line'>    
</span><span class='line'>    post-up  ethtool  -K  eth4  gso off  gro off || true
</span><span class='line'># reboot
</span></code></pre></td></tr></table></div></figure>


<p>确保在Contrail部署节点上，可以ping通OpenStack Controller的10.55.55.0/24网络。   <br/>
配置本地安装源:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># echo 'deb http://10.20.0.2:8080/contrail/ /' &gt; /etc/apt/sources.list.d/contrail.list
</span><span class='line'># echo -e "Package: *\nPin: release l=Ubuntu\nPin-Priority: 100" &gt; /etc/apt/preferences
</span><span class='line'># &gt;/etc/apt/sources.list
</span><span class='line'># apt-get update
</span><span class='line'># apt-get install -y python-paramiko contrail-fabric-utils contrail-setup
</span><span class='line'># pip install --upgrade --no-deps --index-url=”” /opt/contrail/python_packages/Fabric-1.7.0.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>开始配置用于部署的testbed.py文件，可以看到，比起HA部署方式来看，我们减少了一些节点定义，去掉了HA有关的配置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim  /opt/contrail/utils/fabfile/testbeds/testbed.py
</span><span class='line'>    from fabric.api import env
</span><span class='line'>    #Management ip addresses of hosts in the cluster
</span><span class='line'>    #os_ctrl01 = 'root@10.55.55.6'
</span><span class='line'>    #os_ctrl02 = 'root@10.55.55.7'
</span><span class='line'>    #os_ctrl03 = 'root@10.55.55.8'
</span><span class='line'>    os_ctrl01 = 'root@10.55.55.7'
</span><span class='line'>    
</span><span class='line'>    c_ctrl01 = 'root@10.77.77.100'
</span><span class='line'>    #c_ctrl02 = 'root@10.77.77.11'
</span><span class='line'>    #c_ctrl03 = 'root@10.77.77.12'
</span><span class='line'>    c_db01 = 'root@10.77.77.100'
</span><span class='line'>    #c_db02 = 'root@10.77.77.11'
</span><span class='line'>    #c_db03 = 'root@10.77.77.12'
</span><span class='line'>    #External routers
</span><span class='line'>    # ext_routers = [('gateway01', '&lt;Gateway_node1_LOOPBACK_ip&gt;'), ('gateway02', '&lt;Gateway_node2_LOOPBACK_ip&gt;')]
</span><span class='line'>    #Autonomous system number
</span><span class='line'>    router_asn = 64512
</span><span class='line'>    #Host from which the fab commands are triggered to install and provision
</span><span class='line'>    deploy_node = 'root@10.77.77.100'
</span><span class='line'>    #Role definition of the hosts.
</span><span class='line'>    env.roledefs = {
</span><span class='line'>    'all': [c_ctrl01, c_db01],
</span><span class='line'>    'cfgm': [c_ctrl01],
</span><span class='line'>    'openstack': [os_ctrl01],
</span><span class='line'>    'control': [c_ctrl01],
</span><span class='line'>    'compute': [],
</span><span class='line'>    'collector': [c_ctrl01],
</span><span class='line'>    'webui': [c_ctrl01],
</span><span class='line'>    'database': [c_db01],
</span><span class='line'>    'build': [deploy_node],
</span><span class='line'>    'storage-master': [],
</span><span class='line'>    'storage-compute': [],
</span><span class='line'>    }
</span><span class='line'>    #Openstack admin password
</span><span class='line'>    env.openstack_admin_password = 'admin'
</span><span class='line'>    env.password = 'r00tme'
</span><span class='line'>    #Passwords of each host
</span><span class='line'>    env.passwords = {
</span><span class='line'>    os_ctrl01: 'r00tme',
</span><span class='line'>    # os_ctrl02: 'r00tme',
</span><span class='line'>    # os_ctrl03: 'r00tme',
</span><span class='line'>    c_ctrl01: 'r00tme',
</span><span class='line'>    #c_ctrl02: 'r00tme',
</span><span class='line'>    #c_ctrl03: 'r00tme',
</span><span class='line'>    c_db01: 'r00tme',
</span><span class='line'>    # c_db02: 'r00tme',
</span><span class='line'>    # c_db03: 'r00tme',
</span><span class='line'>    deploy_node: 'r00tme',
</span><span class='line'>    }
</span><span class='line'>    #For reimage purpose
</span><span class='line'>    env.ostypes = {
</span><span class='line'>    os_ctrl01: 'ubuntu',
</span><span class='line'>    # os_ctrl02: 'ubuntu',
</span><span class='line'>    # os_ctrl03: 'ubuntu',
</span><span class='line'>    c_ctrl01: 'ubuntu',
</span><span class='line'>    # c_ctrl02: 'ubuntu',
</span><span class='line'>    # c_ctrl03: 'ubuntu',
</span><span class='line'>    c_db01: 'ubuntu',
</span><span class='line'>    # c_db02: 'ubuntu',
</span><span class='line'>    # c_db03: 'ubuntu',
</span><span class='line'>    deploy_node: 'ubuntu',
</span><span class='line'>    }
</span><span class='line'>    env.openstack = {
</span><span class='line'>    'service_token' : 'xqnCCCs2'
</span><span class='line'>    }
</span><span class='line'>    # env.ha = {
</span><span class='line'>    # 'internal_vip': '10.55.55.4',
</span><span class='line'>    # 'external_vip': '172.16.0.4',
</span><span class='line'>    # 'contrail_internal_vip': '10.77.77.9',
</span><span class='line'>    # 'contrail_external_vip': '10.77.77.9',
</span><span class='line'>    # }
</span><span class='line'>    env.keystone = {
</span><span class='line'>    'service_tenant': 'services',
</span><span class='line'>    'admin_token': 'xqnCCCs2',
</span><span class='line'>    }
</span><span class='line'>    multi_tenancy = True
</span></code></pre></td></tr></table></div></figure>


<p>从Fuel节点控制机上拷贝公钥文件，用于快速部署</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># scp 10.20.0.2:/root/.ssh/id_rsa /root/.ssh/id_rsa
</span><span class='line'># chmod 0600 /root/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<p>在节点上部署仓库，安装必要包，同意SUN协议:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'ls /etc/apt/preferences || echo -e "Package: *\nPin: release \
</span><span class='line'>l=Ubuntu\nPin-Priority: 100" &gt; /etc/apt/preferences'
</span><span class='line'># fab -P -R control -w -- 'DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes \
</span><span class='line'>--allow-unauthenticated install python-crypto python-netaddr python-paramiko \
</span><span class='line'>contrail-fabric-utils contrail-setup'
</span><span class='line'># fab -P -R control -w -- 'pip install --upgrade --no-deps --index-url="" \
</span><span class='line'>/opt/contrail/python_packages/ecdsa-0.10.tar.gz'
</span><span class='line'># fab -P -R control -w -- 'pip install --upgrade --no-deps --index-url="" \
</span><span class='line'>/opt/contrail/python_packages/Fabric-1.7.0.tar.gz'
</span><span class='line'># fab -P -R control -w -- 'echo "sun-java6-plugin shared/accepted-sun-dlj-v1-1 boolean \
</span><span class='line'>true" | /usr/bin/debconf-set-selections' && fab -P -R control -w -- 'echo "sun-java6-bin shared/accepted-sun-dlj-v1-1 boolean \
</span><span class='line'> true" | /usr/bin/debconf-set-selections' && fab -P -R control -w -- 'echo "debconf shared/accepted-oracle-license-v1-1 select \
</span><span class='line'>true" | sudo debconf-set-selections' && fab -P -R control -w -- 'echo "debconf shared/accepted-oracle-license-v1-1 seen \
</span><span class='line'> true" | sudo debconf-set-selections'
</span></code></pre></td></tr></table></div></figure>


<p>安装特定版本的tzdata， 安装和配置数据库，并检查状态：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes \
</span><span class='line'> --allow-unauthenticated install tzdata=2014e-0ubuntu0.12.04' && fab install_database && fab setup_database && fab -R database -w -- "contrail-status"
</span><span class='line'># nodetool status
</span></code></pre></td></tr></table></div></figure>


<p>安装和配置cfgm, control, collector, webui，keepalived等, 并配置tenant服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab install_cfgm && fab install_control && fab install_collector && fab install_webui && fab setup_contrail_keepalived
</span><span class='line'># fab -P -R control -w -- 'service keepalived restart'
</span><span class='line'># fab -P -R control -w -- "sed -i '49s/service/services/g' \
</span><span class='line'>/usr/local/lib/python2.7/dist-packages/contrail_provisioning/config/quantum_in_keystone_setup.py"
</span><span class='line'># fab setup_cfgm
</span><span class='line'># fab setup_control && fab setup_collector && fab setup_webui
</span></code></pre></td></tr></table></div></figure>


<p>(OpenStack Controller节点)检查neutron endpoint的方法，看是否有10.77.77.100的字段出现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># keystone service-list
</span><span class='line'># keystone endpoint-list
</span></code></pre></td></tr></table></div></figure>


<p>(OpenStack Controller节点)顺便，我们要拿到rabbit_hosts的密码，供下面使用:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat /etc/rabbitmq/rabbitmq.config | grep default_pass
</span><span class='line'>    {default_pass,        &lt;&lt;"nFyBhsrP"&gt;&gt;},
</span></code></pre></td></tr></table></div></figure>


<p>配置rabbit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'openstack-config --del /etc/neutron/neutron.conf DEFAULT rabbit_host'
</span><span class='line'># fab -P -R control -w -- 'openstack-config --set /etc/neutron/neutron.conf DEFAULT rabbit_hosts 10.55.55.7:5672'
</span><span class='line'># fab -P -R control -w -- 'openstack-config --set /etc/neutron/neutron.conf DEFAULT rabbit_userid \
</span><span class='line'>   nova'
</span><span class='line'># fab -P -R control -w -- 'openstack-config --set /etc/neutron/neutron.conf DEFAULT \
</span><span class='line'>  rabbit_password nFyBhsrP'
</span><span class='line'># fab -P -R control -w -- 'service neutron-server restart'
</span></code></pre></td></tr></table></div></figure>


<p>配置contrail-api使用OpenStack Controller上的rabbit服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'perl -pi -e \
</span><span class='line'> "s/rabbit_server.*$/rabbit_server=10.55.55.7/" /etc/contrail/contrail-api.conf'
</span><span class='line'># fab -P -R control -w -- 'perl -pi -e "s/rabbit_port.*$/rabbit_port=5672/" \
</span><span class='line'> /etc/contrail/contrail-api.conf'
</span><span class='line'># fab -R control -w -- "perl -pi -e 'print \"rabbit_password=nFyBhsrP\n\" \
</span><span class='line'> if \$_ =~ rabbit_port' /etc/contrail/contrail-api.conf"
</span><span class='line'># fab -P -R control -w -- "perl -pi -e 'print \"rabbit_user=nova\n\" if \$_ =~ rabbit_port' \
</span><span class='line'> /etc/contrail/contrail-api.conf"
</span><span class='line'># fab -P -R control -w -- "service contrail-api restart"
</span></code></pre></td></tr></table></div></figure>


<p>替换neutron的插件为OpenContrail：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cp -r contrail-repo/neutron_plugin_contrail/plugins/opencontrail /usr/share/pyshared/neutron_plugin_contrail/plugins/
</span><span class='line'># cd /opt/contrail/utils
</span><span class='line'># fab -P -R cfgm -w -- 'service neutron-server restart'
</span></code></pre></td></tr></table></div></figure>


<p>重启BGP,METADATA,ENCAPSULATION:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab prov_control_bgp && fab prov_metadata_services && fab prov_encap_type
</span></code></pre></td></tr></table></div></figure>


<p>验证:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab verify_cfgm
</span><span class='line'># fab verify_control
</span><span class='line'># fab verify_collector
</span><span class='line'># fab verify_webui
</span><span class='line'># fab -R control -w -- "contrail-status"
</span><span class='line'># fab -P -R control -w -- 'update-rc.d supervisor-support-service disable'
</span></code></pre></td></tr></table></div></figure>


<p>现在访问:     <br/>
<a href="https://10.77.77.100:8143">https://10.77.77.100:8143</a>    <br/>
Contrail的组件已经被配置完毕，接下来配置Compute节点，以引入Vrouter等。</p>

<h4>(OpenStack Controller节点)</h4>

<p>删除ifcfg-eth4的配置后重启OpenStack Controller节点, 修改nova.conf文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/nova/nova.conf
</span><span class='line'>[DEFAULT]
</span><span class='line'>network_api_class = nova.network.neutronv2.api.API
</span><span class='line'>neutron_url = http://10.77.77.100:9696
</span><span class='line'>neutron_admin_tenant_name = services
</span><span class='line'>neutron_admin_username = neutron
</span><span class='line'>neutron_admin_password = xqnCCCs2
</span><span class='line'>neutron_url_timeout = 300
</span><span class='line'>neutron_admin_auth_url = http://10.55.55.7:35357/v2.0/
</span><span class='line'>firewall_driver = nova.virt.firewall.NoopFirewallDriver
</span><span class='line'>enabled_apis = ec2,osapi_compute,metadata
</span><span class='line'>security_group_api = neutron
</span><span class='line'>service_neutron_metadata_proxy = True
</span></code></pre></td></tr></table></div></figure>


<p>重启服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service nova-api restart
</span><span class='line'># service nova-scheduler restart
</span><span class='line'># service nova-conductor restart
</span></code></pre></td></tr></table></div></figure>


<p>删除已注册的nova-network组件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># source ~/openrc
</span><span class='line'># for i in $(nova service-list|grep nova-network|awk '{print $2}'); \
</span><span class='line'>do nova service-delete $i;done
</span></code></pre></td></tr></table></div></figure>


<p>接下来配置Compute节点.</p>

<h4>(Compute节点)</h4>

<p>引入本地安装仓库:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#  echo 'deb http://10.20.0.2:8080/contrail/ /' &gt;/etc/apt/sources.list.d/contrail.list
</span><span class='line'># echo -e "Package: *\nPin: release l=Ubuntu\nPin-Priority: 100" &gt; /etc/apt/preferences
</span><span class='line'># &gt;/etc/apt/sources.list
</span><span class='line'># apt-get update
</span></code></pre></td></tr></table></div></figure>


<p>删除已有的vswitch模块，并验证:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get purge -y openvswitch-switch nova-network nova-api
</span><span class='line'># apt-get purge -y  nova-network nova-api
</span><span class='line'># aptitude search -F '%p' '~i' | grep openvswitch
</span></code></pre></td></tr></table></div></figure>


<p>删除OVS内核模块:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># lsmod | grep openvswitch && rmmod openvswitch
</span></code></pre></td></tr></table></div></figure>


<p>删除virtual网络,即virbr0端口:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># virsh net-destroy default
</span><span class='line'># virsh net-undefine default
</span></code></pre></td></tr></table></div></figure>


<p>删除除ifcfg-eth4和ifcfg-eth0的其他端口，并重启，重启后用下列命令检查是否有iptables NAT规则存在，理论上应该是空的:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -L -t nat
</span></code></pre></td></tr></table></div></figure>


<p>安装vrouter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get install -y contrail-openstack-vrouter
</span></code></pre></td></tr></table></div></figure>


<p>配置vhosts,vrouter需要使用这个端口,指定IP地址为10.77.77.101:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/network/interfaces.d/ifcfg-vhost0 
</span><span class='line'>auto vhost0
</span><span class='line'>iface vhost0 inet static
</span><span class='line'>    netmask 255.255.255.0
</span><span class='line'>    network_name application
</span><span class='line'>    address 10.77.77.101
</span><span class='line'>    gateway 10.77.77.1
</span><span class='line'>    mtu 1300
</span><span class='line'># vim /etc/network/interfaces.d/ifcfg-eth4 
</span><span class='line'>auto eth4
</span><span class='line'>iface eth4 inet manual
</span><span class='line'>
</span><span class='line'>up ip l set eth4 up
</span><span class='line'>down ip l set eth4 down
</span><span class='line'>
</span><span class='line'>post-up  ethtool  -K  eth4  gso off  gro off || true
</span></code></pre></td></tr></table></div></figure>


<p>创建agent-param文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mv /etc/contrail/agent_param.tmpl /etc/contrail/agent_param
</span><span class='line'># vim /etc/contrail/agent_param
</span><span class='line'>dev=eth4
</span></code></pre></td></tr></table></div></figure>


<p>设置vroute-agent配置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/contrail/contrail-vrouter-agent.conf
</span><span class='line'>[DEFAULT]
</span><span class='line'>headless_mode=true
</span><span class='line'>[DISCOVERY]
</span><span class='line'>server=10.77.77.100
</span><span class='line'>max_control_nodes=1
</span><span class='line'>[HYPERVISOR]
</span><span class='line'>type=kvm
</span><span class='line'>[NETWORKS]
</span><span class='line'>control_network_ip=10.77.77.101
</span><span class='line'>[VIRTUAL-HOST-INTERFACE]
</span><span class='line'>name=vhost0
</span><span class='line'>ip=10.77.77.101/24
</span><span class='line'>gateway=10.77.77.1
</span><span class='line'>physical_interface=eth4
</span></code></pre></td></tr></table></div></figure>


<p>配置节点管理参数,地址指向Contrail控制器的IP:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/contrail/vrouter_nodemgr_param
</span><span class='line'>DISCOVERY=10.77.77.100
</span></code></pre></td></tr></table></div></figure>


<p>配置nova-compute:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_url http://10.77.77.100:9696
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_admin_auth_url http://10.55.55.7:35357/v2.0/
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT network_api_class nova_contrail_vif.contrailvif.ContrailNetworkAPI
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_admin_tenant_name services
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_admin_username neutron
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_admin_password xqnCCCs2
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_url_timeout 300
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT security_group_api neutron
</span><span class='line'> # service supervisor-vrouter restart
</span></code></pre></td></tr></table></div></figure>


<p>验证所有的vrouter服务都是active状态的:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># contrail-status 
</span><span class='line'>== Contrail vRouter ==
</span><span class='line'>supervisor-vrouter:           active
</span><span class='line'>contrail-vrouter-agent        active              
</span><span class='line'>contrail-vrouter-nodemgr      active              
</span></code></pre></td></tr></table></div></figure>


<p>更改/etc/libvirt/qemu.confg中的cgroup_device_acl部分:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cgroup_device_acl = [
</span><span class='line'>"/dev/null", "/dev/full", "/dev/zero",
</span><span class='line'>"/dev/random", "/dev/urandom",
</span><span class='line'>"/dev/ptmx", "/dev/kvm", "/dev/kqemu",
</span><span class='line'>"/dev/rtc", "/dev/hpet","/dev/net/tun",
</span><span class='line'>]
</span></code></pre></td></tr></table></div></figure>


<p>在每个OpenStack Compute节点上，添加iptables规则如下并保存:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -I INPUT 1 -s 169.254.0.0/16 -i vhost0 -j ACCEPT -m comment --comment "metadata service"
</span><span class='line'># iptables -I INPUT 1 -p tcp -m multiport --destination-ports 2049,8085,9090,8102,33617,39704,44177,55970,60663 -j ACCEPT -m comment --comment "juniper contrail rules"
</span><span class='line'># iptables-save &gt; /etc/iptables/rules.v4
</span></code></pre></td></tr></table></div></figure>


<p>重启libvirt-bin和nova-compute服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service libvirt-bin restart
</span><span class='line'># service nova-compute restart
</span></code></pre></td></tr></table></div></figure>


<p>(Contrail Controller节点)更改vrouter的配置, ！！！注意，这是在Contrail Deploy的那个节点运行的！！！！, host_name的结果可以在compute节点上通过hostname命令来获得 ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># python /opt/contrail/utils/provision_vrouter.py --host_name node-18 --host_ip 10.77.77.101 --api_server_ip 10.77.77.100 --admin_user neutron --admin_password xqnCCCs2 --admin_tenant_name services --oper add
</span></code></pre></td></tr></table></div></figure>


<h4>VGW配置</h4>

<p>OpenContrail支持多种配置，例如Juniper vSRX, Juniper MX, Cisco ASR等，但这些都需要专有硬件的支持（路由器），我们仅仅采用软件路由器Vrouter, 这里我们配置VGW:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># export PYTHONPATH=/usr/lib/python2.7/dist-packages/contrail_vrouter_api/gen_py/instance_service
</span><span class='line'># python /opt/contrail/utils/provision_vgw_interface.py --oper create --interface vgw --subnets 10.88.88.0/24 --routes 0.0.0.0/0 --vrf default-domain:admin:ext:ext
</span></code></pre></td></tr></table></div></figure>


<p>更新/etc/contrail/contrail-vrouter-agent.con中的[GATEWAY-0]部分:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[GATEWAY-0]
</span><span class='line'>routing_instance=default-domain:admin:ext:ext
</span><span class='line'>interface=vgw
</span><span class='line'>ip_blocks=10.88.88.0/24
</span><span class='line'>routes=0.0.0.0/0
</span></code></pre></td></tr></table></div></figure>


<p>重新启动supervisor-vrouter进程:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service supervisor-vrouter restart
</span></code></pre></td></tr></table></div></figure>


<p>重启其他所有的encapsulation方法，除了MPLS On UDP:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_22_45_01_799x306.jpg" alt="/images/2015_04_27_22_45_01_799x306.jpg" /></p>

<p>最后结果如下:   <br/>
<img src="http://purplepalmdash.github.io/images/2015_05_06_16_24_52_891x430.jpg" alt="/images/2015_05_06_16_24_52_891x430.jpg" /></p>

<h3>总结</h3>

<p>非HA方式部署，需要花费内存为:   <br/>
3+3+2+2=10G, 再加上Fuel Controller本身的3G,在16G的台式机上可以做到。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building ChromeOS Steps]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/05/05/building-chromeos-steps/"/>
    <updated>2015-05-05T11:43:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/05/05/building-chromeos-steps</id>
    <content type="html"><![CDATA[<p>My aim is for enable the bluetooth Networking in my Chromebook, AKA BNEP, so first I have to build out some experimentation platforms for investigation, following is the steps for building out the ChromeOS Images and let it run under kvm based virtual machine.</p>

<h3>Prerequistites</h3>

<p>I use a 6-Giga-Byte memory machine for building, first install following packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install git-core gitk git-gui subversion curl
</span></code></pre></td></tr></table></div></figure>


<p>Since I am in china mainland, the connection to googlesourcecode is blocked by Great Fire Wall(Fuck you!), I have to use proxychains for automatically convert my TCP/UDP flow to sock flow. That&rsquo;s why in some steps I use proxychains4 in front of the commands. If you are free to reach Internet, you should remove the proxychains4 in front of each command. <br/>
Then install <code>depot_tools</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dasdh@BuildMaasImage:~/Code$ pwd
</span><span class='line'>/home/dasdh/Code
</span><span class='line'>dasdh@BuildMaasImage:~/Code$ mkdir depot_tools
</span><span class='line'>dasdh@BuildMaasImage:~/Code$ proxychains4  git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
</span><span class='line'>$ export PATH=`pwd`/depot_tools:"$PATH"
</span><span class='line'>$ echo $PATH
</span><span class='line'>/home/dasdh/Code/depot_tools:/home/dasdh/Code/depot_tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
</span></code></pre></td></tr></table></div></figure>


<p>
Config git:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dasdh@BuildMaasImage:~/Code$ git config --global user.email "kkkttt@gmail.com"
</span><span class='line'>dasdh@BuildMaasImage:~/Code$ git config --global user.name "Dash"
</span></code></pre></td></tr></table></div></figure>


<p>Maybe in the future you will use github repository, better you use <code>ssh-keygen</code> to generate the public ssh key and upload it to github.    Make sure your architecture is x86_64, and add following into your ~/.bashrc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dasdh@BuildMaasImage:~/Code$ uname -m
</span><span class='line'>x86_64
</span><span class='line'>dasdh@BuildMaasImage:~/Code$ cat ~/.bashrc | grep umask
</span><span class='line'>umask 022
</span></code></pre></td></tr></table></div></figure>


<h3>Get Source Code</h3>

<p>Get the code via following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dasdh@BuildMaasImage:~$ mkdir chromiumos
</span><span class='line'>dasdh@BuildMaasImage:~$ pwd
</span><span class='line'>/home/dasdh
</span></code></pre></td></tr></table></div></figure>


<p>Then get the credential for chromiumOS( go to <a href="https://chromium-review.googlesource.com/new-password">https://chromium-review.googlesource.com/new-password</a> for getting the commands):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$  touch ~/.gitcookies
</span><span class='line'>$  chmod 0600 ~/.gitcookies
</span><span class='line'>$  git config --global http.cookiefile ~/.gitcookies
</span><span class='line'>$  tr , \\t &lt;&lt;\__END__ &gt;&gt;~/.gitcookies
</span><span class='line'> .googlesource.com,TRUE,/,TRUE,2147483647,o,git-kkkttt.gmail.com=1/goeugoueogewoguoweugoawohouaohuowauhoaeuo
</span><span class='line'> __END__
</span><span class='line'>$  git config --global "url.https://chromium.googlesource.com/a/.insteadOf" "https://chromium.googlesource.com/"
</span><span class='line'>$  git config --global --add "url.https://chromium.googlesource.com/a/.insteadOf" "https://chromium.googlesource.com/a/"
</span><span class='line'>$  proxychains4 git ls-remote https://chromium.googlesource.com/a/chromiumos/manifest.git
</span></code></pre></td></tr></table></div></figure>


<p>The final output result should be a list of file. <br/>
Because the google source code use https connection, so we need to define the .netrc like following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch ~/.netrc
</span><span class='line'>$ chmod 0600 ~/.netrc
</span><span class='line'>$ vim ~/.netrc
</span><span class='line'>machine chromium.googlesource.com
</span><span class='line'>login git-kkkttt.gmail.com
</span><span class='line'>password agowugoweugowugouwoguoweugoeugo
</span><span class='line'>
</span><span class='line'>machine chromium-review.googlesource.com
</span><span class='line'>login git-kkkttt.gmail.com
</span><span class='line'>password agowugoweugowugouwoguoweugoeugo
</span></code></pre></td></tr></table></div></figure>


<p>Now your configuration is ready, initialize the repository via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ proxychains4 repo init -u https://chromium.googlesource.com/chromiumos/manifest.git --repo-url https://chromium.googlesource.com/external/repo.git
</span><span class='line'>$ proxychains4 repo sync 
</span></code></pre></td></tr></table></div></figure>


<p>repo sync will take a very long time for getting all of the source code down, and it will takes arount 8G disk size.</p>

<h3>Build Source Code</h3>

<p>After source code is avaiable, start building it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ proxychains cros_sdk
</span></code></pre></td></tr></table></div></figure>


<p>Since the proxychains failed, I&rsquo;ve enable the redsocks for crossing the GFW, in the last part of this article shows its installation and configuration.  <br/>
Using redsocks we could continue the building:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cros_sdk
</span><span class='line'>dasdh@BuildMaasImage ~/trunk/src/scripts $ 
</span></code></pre></td></tr></table></div></figure>


<p>Now start building via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#  export BOARD=amd64-generic
</span><span class='line'># ./setup_board --board=${BOARD}
</span><span class='line'># ./set_shared_user_password.sh
</span><span class='line'># ./build_packages --board=${BOARD}
</span><span class='line'># ./build_image --board=${BOARD} --noenable_rootfs_verification dev
</span></code></pre></td></tr></table></div></figure>


<p>If you met hostname error, make sure your hostname is added in <code>/etc/hosts</code>.</p>

<p>The building result is listed as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(cr) dasdh@BuildMaasImage ~/trunk/src/build/images/amd64-generic/R44-7040.0.2015_05_06_0543-a1 $ pwd
</span><span class='line'>/home/dasdh/trunk/src/build/images/amd64-generic/R44-7040.0.2015_05_06_0543-a1
</span><span class='line'>(cr) dasdh@BuildMaasImage ~/trunk/src/build/images/amd64-generic/R44-7040.0.2015_05_06_0543-a1 $ ls -l -h
</span><span class='line'>total 1.2G
</span><span class='line'>-rw-r--r-- 1 dasdh eng  399 May  6 05:52 boot.config
</span><span class='line'>-rw-r--r-- 1 dasdh eng  214 May  6 05:49 boot.desc
</span><span class='line'>-rw-r--r-- 1 dasdh eng 2.5G May  6 05:52 chromiumos_image.bin
</span><span class='line'>-rw-r--r-- 1 dasdh eng  586 May  6 05:52 config.txt
</span><span class='line'>drwxr-xr-x 2 dasdh eng 4.0K May  6 05:52 esp
</span><span class='line'>-rwxr-xr-x 1 dasdh eng 5.6K May  6 05:43 mount_image.sh
</span><span class='line'>-rwxr-xr-x 1 dasdh eng 4.8K May  6 05:43 pack_partitions.sh
</span><span class='line'>-rw-r--r-- 1 dasdh eng  12K May  6 05:43 partition_script.sh
</span><span class='line'>-rwxr-xr-x 1 dasdh eng 4.7K May  6 05:43 umount_image.sh
</span><span class='line'>-rwxr-xr-x 1 dasdh eng 5.0K May  6 05:43 unpack_partitions.sh
</span></code></pre></td></tr></table></div></figure>


<p>I think the chromiumos_image.bin is what we want.</p>

<h3>RedSocks</h3>

<p>Download the redsocks source code and compile it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd /opt/src
</span><span class='line'># git clone https://github.com/darkk/redsocks.git
</span><span class='line'># cd redsocks
</span><span class='line'># apt-get install libevent-dev 
</span><span class='line'># make 
</span></code></pre></td></tr></table></div></figure>


<p>Write configuration files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat redsocks.sh
</span><span class='line'>#! /bin/sh
</span><span class='line'>
</span><span class='line'>case "$1" in
</span><span class='line'>  start|"")
</span><span class='line'>    cd /opt/src/redsocks
</span><span class='line'>    if [ -e redsocks.log ] ; then
</span><span class='line'>      rm redsocks.log
</span><span class='line'>    fi
</span><span class='line'>    ./redsocks -p /opt/src/redsocks/redsocks.pid #set daemon = on in config file
</span><span class='line'>    # start redirection
</span><span class='line'>    iptables -t nat -A OUTPUT -p tcp --dport 80 -j REDIRECT --to 12345
</span><span class='line'>    iptables -t nat -A OUTPUT -p tcp --dport 443 -j REDIRECT --to 12345
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>  stop)
</span><span class='line'>    cd /opt/src/redsocks
</span><span class='line'>    if [ -e redsocks.pid ]; then
</span><span class='line'>      kill `cat redsocks.pid`
</span><span class='line'>      rm redsocks.pid
</span><span class='line'>    else
</span><span class='line'>      echo already killed, anyway, I will try killall
</span><span class='line'>      killall -9 redsocks
</span><span class='line'>    fi
</span><span class='line'>    # stop redirection
</span><span class='line'>    iptables -t nat -F OUTPUT
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>  start_ssh)
</span><span class='line'>    #ssh -NfD 1234 user@example.cc #TODO: change it!!!
</span><span class='line'>    ssh -NfD 1234 544644af4382ec37bc0009da@weatherapp-kkkttt.rhcloud.com
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>  stop_ssh)
</span><span class='line'>    ps aux|grep "ssh -NfD 1234"|awk '{print $2}'|xargs kill
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>  clean_dns)
</span><span class='line'>    iptables -A INPUT -p udp --sport 53 -m state --state ESTABLISHED -m gfw -j DROP -m comment --comment "drop gfw dns hijacks"
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>  *)
</span><span class='line'>    echo "Usage: redsocks start|stop|start_ssh|stop_ssh|clean_dns" &gt;&2
</span><span class='line'>    exit 3
</span><span class='line'>    ;;
</span><span class='line'>esac
</span><span class='line'># cat redsocks.conf
</span><span class='line'>base {
</span><span class='line'>        // debug: connection progress & client list on SIGUSR1
</span><span class='line'>        log_debug = on;
</span><span class='line'>
</span><span class='line'>        // info: start and end of client session
</span><span class='line'>        log_info = on;
</span><span class='line'>
</span><span class='line'>        /* possible `log' values are:
</span><span class='line'>         *   stderr
</span><span class='line'>         *   file:/path/to/file
</span><span class='line'>         *   syslog:FACILITY  facility is any of "daemon", "local0"..."local7"
</span><span class='line'>         */
</span><span class='line'>        log = stderr;
</span><span class='line'>
</span><span class='line'>        // detach from console
</span><span class='line'>        daemon = on;
</span><span class='line'>
</span><span class='line'>        /* Change uid, gid and root directory, these options require root
</span><span class='line'>         * privilegies on startup.
</span><span class='line'>         * Note, your chroot may requre /etc/localtime if you write log to syslog.
</span><span class='line'>         * Log is opened before chroot & uid changing.
</span><span class='line'>         */
</span><span class='line'>        // user = nobody;
</span><span class='line'>        // group = nobody;
</span><span class='line'>        // chroot = "/var/chroot";
</span><span class='line'>
</span><span class='line'>        /* possible `redirector' values are:
</span><span class='line'>         *   iptables   - for Linux
</span><span class='line'>         *   ipf        - for FreeBSD
</span><span class='line'>         *   pf         - for OpenBSD
</span><span class='line'>         *   generic    - some generic redirector that MAY work
</span><span class='line'>         */
</span><span class='line'>        redirector = iptables;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>redsocks {
</span><span class='line'>        /* `local_ip' defaults to 127.0.0.1 for security reasons,
</span><span class='line'>         * use 0.0.0.0 if you want to listen on every interface.
</span><span class='line'>         * `local_*' are used as port to redirect to.
</span><span class='line'>         */
</span><span class='line'>        local_ip = 127.0.0.1;
</span><span class='line'>        local_port = 12345;
</span><span class='line'>
</span><span class='line'>        // `ip' and `port' are IP and tcp-port of proxy-server
</span><span class='line'>        ip = 127.0.0.1;
</span><span class='line'>        port = 1234;
</span><span class='line'>
</span><span class='line'>        // known types: socks4, socks5, http-connect, http-relay
</span><span class='line'>        type = socks5;
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Everytime you use the redsocks, enable it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ./redsocks.sh start_ssh
</span><span class='line'># ./redsocks.sh start
</span></code></pre></td></tr></table></div></figure>


<p>Disable it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ./redsocks.sh stop
</span><span class='line'># ./redsocks.sh stop_ssh
</span></code></pre></td></tr></table></div></figure>


<h3>Run ChromeOS in kvm</h3>

<p>Now Transfer the image to image for vm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export BOARD=amd64-generic
</span><span class='line'>(cr) dasdh@BuildMaasImage ~/trunk/src/build/images/amd64-generic/latest $ cd ~/trunk/src/scripts/
</span><span class='line'>(cr) ((df83602...)) dasdh@BuildMaasImage ~/trunk/src/scripts $ ./image_to_vm.sh --board=${BOARD}
</span><span class='line'>Resizing stateful partition to 3072MB
</span></code></pre></td></tr></table></div></figure>


<p>Verify if kvm is supported on your system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dasdh@BuildMaasImage:~/src/scripts$ kvm-ok
</span><span class='line'>INFO: /dev/kvm exists                                                                                                                          
</span><span class='line'>KVM acceleration can be used      
</span></code></pre></td></tr></table></div></figure>


<p>Now run via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/chromiumos/src/scripts
</span><span class='line'>$ ./bin/cros_start_vm --image_path=../build/images/${BOARD}/latest/chromiumos_qemu_image.bin
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modification SWAP on RPI Installation]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/30/modification-on-rpi-installation/"/>
    <updated>2015-04-30T21:49:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/30/modification-on-rpi-installation</id>
    <content type="html"><![CDATA[<p>First disable the swap partition, for it will save your sd card:  <br/>
Know where is your swap file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /proc/swap*
</span></code></pre></td></tr></table></div></figure>


<p>Disable it via change the S to K under <code>/etc/rcx.d</code>, and reboot the services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mv S02dphys-swapfile K02dphys-swapfile
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build CentOS Image for MAAS]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/29/build-centos-image-for-maas/"/>
    <updated>2015-04-29T17:31:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/29/build-centos-image-for-maas</id>
    <content type="html"><![CDATA[<p>MAAS could only deploy Ubuntu in its official support, this artcle will introduce how to Build CentOS based images.</p>

<h3>Preparation</h3>

<p>First you need a Ubuntu14.04 machine with kvm enabled.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get -y dist-upgrade
</span><span class='line'>$ sudo apt-get install build-essential
</span></code></pre></td></tr></table></div></figure>


<h3>Get Build Scripts</h3>

<p>Get the source code from the launchpad, and run following command for preparing the building environment.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$  bzr branch lp:maas-image-builder
</span><span class='line'>$ cd maas-images-builder
</span><span class='line'>$ make install-dependencies
</span></code></pre></td></tr></table></div></figure>


<p>For speed-up building, I use china mainland&rsquo;s repository,  <br/>
Replace the <code>http://mirror.centos.org/centos/6/os/x86_64</code> like following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim ./src/mib/builders/centos.py
</span><span class='line'>      #"http://mirror.centos.org/centos/6/os/i386")
</span><span class='line'>      "http://mirrors.aliyun.com/centos/6/os/i386")
</span><span class='line'>      #"http://mirror.centos.org/centos/6/os/x86_64")
</span><span class='line'>      "http://mirrors.aliyun.com/centos/6/os/x86_64")
</span><span class='line'>  #"http://mirror.centos.org/centos/7/os/x86_64")
</span><span class='line'>  "http://mirrors.aliyun.com/centos/7/os/x86_64/")
</span><span class='line'>
</span><span class='line'>$ vim ./contrib/centos/centos6/centos6-amd64.ks
</span><span class='line'>repo --name="repo0" --baseurl=http://mirrors.aliyun.com/centos/6/os/x86_64/
</span><span class='line'>repo --name="repo1" --baseurl=http://mirrors.aliyun.com/centos/6/updates/x86_64/
</span><span class='line'>repo --name="repo2" --baseurl=http://mirrors.aliyun.com/epel/6/x86_64/
</span></code></pre></td></tr></table></div></figure>


<h3>Build Images</h3>

<p>Install python-dev and begin to make:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get install python-dev
</span><span class='line'># make
</span></code></pre></td></tr></table></div></figure>


<p>Now begin to generate the image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#./bin/maas-image-builder -o centos6-amd64-root-tgz centos --edition 6
</span></code></pre></td></tr></table></div></figure>


<p>On-Building:   <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_29_18_00_43_674x328.jpg" alt="/images/2015_04_29_18_00_43_674x328.jpg" /></p>

<p>After building the image is listed as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ls -l centos6-amd64-root-tgz 
</span><span class='line'>-rw-r--r-- 1 root root 353086181 Apr 29 13:16 centos6-amd64-root-tgz
</span></code></pre></td></tr></table></div></figure>


<h3>Import Images</h3>

<p>First login into your own profile with following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ maas login my-maas http://10.17.17.202/MAAS/api/1.0 ntQBr8QTPgeTyfYuMq:xxxxxxxxxxxxxxxxxxxxxxxxx7HNspYLch4kc6RLs
</span><span class='line'>$ maas my-maas boot-sources read
</span></code></pre></td></tr></table></div></figure>


<p>Above command will readout the boot-sources, now we need to import our newly-built images, import it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ maas my-maas boot-resources create name=centos/centos6 architecture=amd64/generic content@=/home/Trusty/centos6-amd64-root-tgz
</span></code></pre></td></tr></table></div></figure>


<h3>Login</h3>

<p>Use following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>maas@MassTestOnUbuntu1404:~$ ssh cloud-user@10.17.17.172
</span><span class='line'>The authenticity of host '10.17.17.172 (10.17.17.172)' can't be established.
</span><span class='line'>ECDSA key fingerprint is a5:57:5b:d1:ac:c0:8f:67:32:43:d8:6f:17:67:65:cb.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added '10.17.17.172' (ECDSA) to the list of known hosts.
</span><span class='line'>[cloud-user@CentOS ~]$ ls
</span><span class='line'>[cloud-user@CentOS ~]$ cat /etc/issue
</span><span class='line'>\S
</span><span class='line'>Kernel \r on an \m
</span><span class='line'>
</span><span class='line'>[cloud-user@CentOS ~]$ uname -a
</span><span class='line'>Linux CentOS 3.10.0-229.1.2.el7.x86_64 #1 SMP Fri Mar 27 03:04:26 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
</span></code></pre></td></tr></table></div></figure>


<p>From Now on,you could use CentOS 6 for deploying!!!!!!!!!!!!!!1</p>

<p>ENJOY IT!!!!!!!</p>

<h3>Trouble Shooting</h3>

<p>The version could not be speicified via &ndash;edition, everytime we got CentOS 7 based image , so we need to manually change the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@BuildMaasImage:~/Code/once# vim src/mib/builders/centos.py
</span><span class='line'>    def populate_parser(self, parser):
</span><span class='line'>        """Add parser options."""
</span><span class='line'>        parser.add_argument(
</span><span class='line'>            #'--edition', default='7',
</span><span class='line'>            #help="CentOS edition to generate. (Default: 7)")
</span><span class='line'>            '--edition', default='6',
</span><span class='line'>            help="CentOS edition to generate. (Default: 6)")
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Now re-generate the image again, we got CentOS 6.5 based images. <br/>
To-Be-Done:  <br/>
How to generate the CentOS 6.5/6.4/6.3 version? we always get the newest CentOS 6 images.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Reave for Testing Wireless Security]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/28/use-reave-for-testing-wireless-security/"/>
    <updated>2015-04-28T19:37:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/28/use-reave-for-testing-wireless-security</id>
    <content type="html"><![CDATA[<p>For those who want to test the wireless security(Wireless Router), following is a serial of tools for automatically scan the WIFI and try to find the entrance to inner network.</p>

<h3>Preparation</h3>

<p>Install following packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install macchanger  aircrack-ng reaver
</span></code></pre></td></tr></table></div></figure>


<h3>Testing</h3>

<p>Suppose the wireless port in our equipment is mlan0, following are the detailed steps:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># macchanger -m 00:11:22:33:44:55 mlan0
</span><span class='line'># airmon-ng start mlan0
</span><span class='line'># ifconfig mlan0mon down
</span><span class='line'># macchanger -m 00:11:22:33:44:55 mlan0mon
</span><span class='line'># ifconfig mlan0mon up
</span><span class='line'># airodump-ng mlan0mon
</span><span class='line'># reaver -i mlan0mon -b xx:xx:xx:xx:xx -vv -dh-small
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trouble Shooting on Juju's Local Deployment]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/28/trouble-shooting-on-jujus-local-deployment/"/>
    <updated>2015-04-28T12:11:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/28/trouble-shooting-on-jujus-local-deployment</id>
    <content type="html"><![CDATA[<p>When deploying juju, after <code>juju bootstrap</code>, use juju ssh for login, it will hint me:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ juju ssh 1
</span><span class='line'>......
</span><span class='line'>Permission denied (publickey).
</span></code></pre></td></tr></table></div></figure>


<p>That could be solved by specify the id_rsa.pub key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -t rsa -b 2048
</span><span class='line'>$ juju bootstrap
</span><span class='line'>$ juju bootstrap
</span><span class='line'>$ juju deploy wordpress
</span><span class='line'>$ juju deploy mysql
</span><span class='line'>$ juju add-relation wordpress mysql
</span><span class='line'>$ juju status
</span><span class='line'>$ juju expose wordpress
</span></code></pre></td></tr></table></div></figure>


<p>By doing this you could make your juju deployment on local successfully.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Fuel部署OpenContrail(5)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/27/shi-yong-fuelbu-shu-opencontrail-5/"/>
    <updated>2015-04-27T21:55:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/27/shi-yong-fuelbu-shu-opencontrail-5</id>
    <content type="html"><![CDATA[<p>本节主要用于配置OpenStack使用OpenContrail作为其网络配置器，主要涉及到OpenStack Controller和OpenStack Compute上的配置.</p>

<h3>OpenStack Controller配置</h3>

<p>!!! 以下的所有操作，需要在每个OpenStack Controller节点上进行！！！
OpenStack Controller不需要使用Private 网络，所以我们可以删除ifcfg-eth0文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># rm -f /etc/network/interface.d/ifcfg-eth4
</span><span class='line'># service networking restart
</span></code></pre></td></tr></table></div></figure>


<p>为了保险，最好重启更改完网络后的节点。  <br/>
配置/etc/nova/nova.conf文件中的以下字段:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/nova/nova.conf
</span><span class='line'>[DEFAULT]
</span><span class='line'>network_api_class = nova.network.neutronv2.api.API
</span><span class='line'>neutron_url = http://10.77.77.9:9696
</span><span class='line'>neutron_admin_tenant_name = services
</span><span class='line'>neutron_admin_username = neutron
</span><span class='line'>neutron_admin_password = rVlaAKUs
</span><span class='line'>neutron_url_timeout = 300
</span><span class='line'>neutron_admin_auth_url = http://10.55.55.4:35357/v2.0/
</span><span class='line'>firewall_driver = nova.virt.firewall.NoopFirewallDriver
</span><span class='line'>enabled_apis = ec2,osapi_compute,metadata
</span><span class='line'>security_group_api = neutron
</span><span class='line'>service_neutron_metadata_proxy = True
</span></code></pre></td></tr></table></div></figure>


<p>neutron_admin_password的值还是我们以前取得的admin token. <br/>
更改完上述配置后，重启以下服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service nova-api restart
</span><span class='line'># service nova-scheduler restart
</span><span class='line'># service nova-conductor restart
</span></code></pre></td></tr></table></div></figure>


<p>
在任一OpenStack Controller节点上，使用以下命令，在数据库中删除nova-network服务的定义。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># source ~/openrc
</span><span class='line'># for i in $(nova service-list|grep nova-network|awk '{print $2}'); \
</span><span class='line'>do nova service-delete $i;done
</span></code></pre></td></tr></table></div></figure>


<h3>Compute(计算)节点配置</h3>

<p>!!! 以下操作，都应该在每个计算节点上运行 !!!!
在每个计算节点上，配置仓库:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#  echo 'deb http://10.20.0.2:8080/contrail/ /' &gt;/etc/apt/sources.list.d/contrail.list
</span><span class='line'># echo -e "Package: *\nPin: release l=Ubuntu\nPin-Priority: 100" &gt; /etc/apt/preferences
</span><span class='line'># &gt;/etc/apt/sources.list
</span><span class='line'># apt-get update
</span></code></pre></td></tr></table></div></figure>


<p>Contrail是不需要OpenVSwitch(OVS)的，所以我们要把它删除:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get purge -y openvswitch-common openvswitch-datapath-lts-saucy-dkms \
</span><span class='line'>openvswitch-switch nova-network nova-api
</span></code></pre></td></tr></table></div></figure>


<p>验证openvswitch是否被彻底删除(应该输出空行才对):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># aptitude search -F '%p' '~i' | grep openvswitch
</span></code></pre></td></tr></table></div></figure>


<p>删除OVS的内核模块:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># lsmod | grep openvswitch && rmmod openvswitch
</span></code></pre></td></tr></table></div></figure>


<p>移除virbr0端口:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># virsh net-destroy default
</span><span class='line'># virsh net-undefine default
</span></code></pre></td></tr></table></div></figure>


<p>确保在所有节点的/etc/network/interface.d/下，只包括了ifcfg-eth0, ifcfg-eth4, 其他都需要被删除。   <br/>
重启所有OpenStack Compute节点，以删除所有openvswitch和nova-network相关的iptables规则、接口等。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># reboot 
</span></code></pre></td></tr></table></div></figure>


<p>重启以后，以下面的命令确保没有NAT规则存在:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -L -t nat
</span></code></pre></td></tr></table></div></figure>


<p>在所有的Compute节点上，安装Contrail vrouter 组件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get install -y contrail-openstack-vrouter
</span></code></pre></td></tr></table></div></figure>


<p>所有节点上，配置vhost0和ifcfg-eth4:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@node-18:~# vim /etc/network/interfaces.d/ifcfg-vhost0 
</span><span class='line'>auto vhost0
</span><span class='line'>iface vhost0 inet static
</span><span class='line'>    netmask 255.255.255.0
</span><span class='line'>    network_name application
</span><span class='line'>    address 10.77.77.15
</span><span class='line'>    gateway 10.77.77.1
</span><span class='line'>    mtu 1300
</span><span class='line'>root@node-18:~# vim /etc/network/interfaces.d/ifcfg-eth4 
</span><span class='line'>auto eth4
</span><span class='line'>iface eth4 inet manual
</span><span class='line'>
</span><span class='line'>up ip l set eth4 up
</span><span class='line'>down ip l set eth4 down
</span><span class='line'>
</span><span class='line'>post-up  ethtool  -K  eth4  gso off  gro off || true
</span></code></pre></td></tr></table></div></figure>


<p>创建agent_param文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mv /etc/contrail/agent_param.tmpl /etc/contrail/agent_param
</span><span class='line'># vim /etc/contrail/agent_param
</span><span class='line'>dev=eth4
</span></code></pre></td></tr></table></div></figure>


<p>设置vroute-agent配置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/contrail/contrail-vrouter-agent.conf
</span><span class='line'>[DEFAULT]
</span><span class='line'>headless_mode=true
</span><span class='line'>[DISCOVERY]
</span><span class='line'>server=10.77.77.9
</span><span class='line'>max_control_nodes=2
</span><span class='line'>[HYPERVISOR]
</span><span class='line'>type=kvm
</span><span class='line'>[NETWORKS]
</span><span class='line'>control_network_ip=10.77.77.15
</span><span class='line'>[VIRTUAL-HOST-INTERFACE]
</span><span class='line'>name=vhost0
</span><span class='line'>ip=10.77.77.15/24
</span><span class='line'>gateway=10.77.77.1
</span><span class='line'>physical_interface=eth4
</span></code></pre></td></tr></table></div></figure>


<p>在每个OpenStack Compute节点上，配置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/contrail/vrouter_nodemgr_param
</span><span class='line'>DISCOVERY=10.77.77.9
</span></code></pre></td></tr></table></div></figure>


<p>配置nova-compute:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_url http://10.77.77.9:9696
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_admin_auth_url http://10.55.55.4:35357/v2.0/
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT network_api_class nova_contrail_vif.contrailvif.ContrailNetworkAPI
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_admin_tenant_name services
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_admin_username neutron
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_admin_password rVlaAKUs
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT neutron_url_timeout 300
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
</span><span class='line'> # openstack-config --set /etc/nova/nova.conf DEFAULT security_group_api neutron
</span><span class='line'> # service supervisor-vrouter restart
</span></code></pre></td></tr></table></div></figure>


<p>验证所有的vrouter服务都是active状态的:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@node-18:~# contrail-status 
</span><span class='line'>== Contrail vRouter ==
</span><span class='line'>supervisor-vrouter:           active
</span><span class='line'>contrail-vrouter-agent        active              
</span><span class='line'>contrail-vrouter-nodemgr      active              
</span></code></pre></td></tr></table></div></figure>


<p>更改/etc/libvirt/qemu.confg中的cgroup_device_acl部分:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cgroup_device_acl = [
</span><span class='line'>"/dev/null", "/dev/full", "/dev/zero",
</span><span class='line'>"/dev/random", "/dev/urandom",
</span><span class='line'>"/dev/ptmx", "/dev/kvm", "/dev/kqemu",
</span><span class='line'>"/dev/rtc", "/dev/hpet","/dev/net/tun",
</span><span class='line'>]
</span></code></pre></td></tr></table></div></figure>


<p>在每个OpenStack Compute节点上，添加iptables规则如下并保存:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -I INPUT 1 -s 169.254.0.0/16 -i vhost0 -j ACCEPT -m comment --comment "metadata service"
</span><span class='line'># iptables -I INPUT 1 -p tcp -m multiport --destination-ports 2049,8085,9090,8102,33617,39704,44177,55970,60663 -j ACCEPT -m comment --comment "juniper contrail rules"
</span><span class='line'># iptables-save &gt; /etc/iptables/rules.v4
</span></code></pre></td></tr></table></div></figure>


<p>重启libvirt-bin和nova-compute服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service libvirt-bin restart
</span><span class='line'># service nova-compute restart
</span></code></pre></td></tr></table></div></figure>


<p>更改vrouter的配置, ！！！注意，这是在Contrail Deploy的那个节点运行的！！！！ ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># python /opt/contrail/utils/provision_vrouter.py --host_name node-18 --host_ip 10.77.77.15 --api_server_ip 10.77.77.9 --admin_user neutron --admin_password rVlaAKUs --admin_tenant_name services --oper add
</span></code></pre></td></tr></table></div></figure>


<h3>VGW配置</h3>

<p>OpenContrail支持多种配置，例如Juniper vSRX, Juniper MX, Cisco ASR等，但这些都需要专有硬件的支持（路由器），我们仅仅采用软件路由器Vrouter, 这里我们配置VGW:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># export PYTHONPATH=/usr/lib/python2.7/dist-packages/contrail_vrouter_api/gen_py/instance_service
</span><span class='line'># python /opt/contrail/utils/provision_vgw_interface.py --oper create --interface vgw --subnets 10.88.88.0/24 --routes 0.0.0.0/0 --vrf default-domain:admin:ext:ext
</span></code></pre></td></tr></table></div></figure>


<p>更新/etc/contrail/contrail-vrouter-agent.con中的[GATEWAY-0]部分:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[GATEWAY-0]
</span><span class='line'>routing_instance=default-domain:admin:ext:ext
</span><span class='line'>interface=vgw
</span><span class='line'>ip_blocks=10.88.88.0/24
</span><span class='line'>routes=0.0.0.0/0
</span></code></pre></td></tr></table></div></figure>


<p>重新启动supervisor-vrouter进程:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service supervisor-vrouter restart
</span></code></pre></td></tr></table></div></figure>


<p>重启其他所有的encapsulation方法，除了MPLS On UPD:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_22_45_01_799x306.jpg" alt="/images/2015_04_27_22_45_01_799x306.jpg" /></p>

<p>```</p>

<p>好了，这时候，Contrail已经集成到OpenStack环境里，你可以在Contrail的界面里，添加上网络，而后在OpenStack里使用它。Enjoy it !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Fuel部署OpenContrail(4)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/27/shi-yong-fuelbu-shu-opencontrail-4/"/>
    <updated>2015-04-27T19:44:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/27/shi-yong-fuelbu-shu-opencontrail-4</id>
    <content type="html"><![CDATA[<p>前面已经准备好了集成OpenContrail的所有事宜，接下来就是真正部署OpenContrail的过程了。部署OpenContrail需要修改所有的Contrail Controller节点，OpenStack Controller节点， OpenStack Compute节点，为了避免混淆，本节主要完成在Contrail Controller上的部署工作。</p>

<h3>OpenStack Controller节点部署后配置</h3>

<p>在所有的OpenStack Controller节点(OS1,OS2,OS3)上，打开/usr/lib/ocf/resource.d/mirantis/ns_haproxy文件，编辑以下字段: <br/>
OCF_Parameters部分:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OCF_RESKEY_private_network_default="10.55.55.0/24"
</span><span class='line'>OCF_RESKEY_private_network_gateway_default="10.55.55.1"
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
在meta_data()函数中，添加以下内容:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;parameter name="private_network"&gt;
</span><span class='line'>&lt;longdesc lang="en"&gt;
</span><span class='line'>Private L3 network that should be configured inside the namespace
</span><span class='line'>&lt;/longdesc&gt;
</span><span class='line'>&lt;shortdesc lang="en"&gt;Namespace private network&lt;/shortdesc&gt;
</span><span class='line'>&lt;content type="string" default="${OCF_RESKEY_private_network_default}" /&gt;
</span><span class='line'>&lt;/parameter&gt;
</span><span class='line'>
</span><span class='line'>&lt;parameter name="private_network_gateway"&gt;
</span><span class='line'>&lt;longdesc lang="en"&gt;
</span><span class='line'>Private L3 network gateway that should be configured inside the namespace.
</span><span class='line'>&lt;/longdesc&gt;
</span><span class='line'>&lt;shortdesc lang="en"&gt;Namespace private gateway network&lt;/shortdesc&gt;
</span><span class='line'>&lt;content type="string" default="${OCF_RESKEY_private_network_gateway_default}" /&gt;
</span><span class='line'>&lt;/parameter&gt;
</span></code></pre></td></tr></table></div></figure>


<p>set_ns_routing()函数中，添加一下内容:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nsip route list | grep -q "${OCF_RESKEY_private_network}"
</span><span class='line'>if [ $? -gt 0 ]; then
</span><span class='line'>ocf_log debug "Creating ${OCF_RESKEY_private_network} route inside the namespace"
</span><span class='line'>ocf_run nsip route add "${OCF_RESKEY_private_network}" via "${OCF_RESKEY_private_network_gateway}"
</span><span class='line'>fi
</span></code></pre></td></tr></table></div></figure>


<p>以上的修改是为了引入haproxy的namespace的。</p>

<h3>配置Contrail部署节点</h3>

<p>我们引入了三个Contrail Controller节点，从中挑选一个，作为部署的管理节点，OpenContrail通过fabric下发安装指令给各节点机，因此我们首先要准备的是部署节点。这里的例子中，我们选择Contrail1(10.20.0.10)作为部署节点。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># echo 'deb http://10.20.0.2:8080/contrail/ /' &gt; /etc/apt/sources.list.d/contrail.list
</span><span class='line'># echo -e "Package: *\nPin: release l=Ubuntu\nPin-Priority: 100" &gt; /etc/apt/preferences
</span><span class='line'># &gt;/etc/apt/sources.list
</span><span class='line'># apt-get update
</span><span class='line'># apt-get install -y python-paramiko contrail-fabric-utils contrail-setup
</span><span class='line'># pip install --upgrade --no-deps --index-url=”” /opt/contrail/python_packages/Fabric-1.7.0.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>apt-get udpate前我们需要清空本机上的sources.list文件，因为经过前两步后，本机的sources.list中会加上10.20.0.2的默认源，这会引发update失败，因此我们清空此文件。  <br/>
安装完一些准备包后，部署节点进入就绪状态。</p>

<h3>编写testbed.py</h3>

<p>testbed.py文件定义了整个OpenContrail的组建部署节点信息，在编写此文件前，我们需要得到以下信息:  <br/>
A. OpenStack的Service_Token, 在任何一台OpenStack Controller机器上，运行以下命令以得到系统当前的service_token值:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@node-20:~# cat /etc/keystone/keystone.conf  | grep -i "admin_token=" | more
</span><span class='line'>#admin_token=ADMIN
</span><span class='line'>admin_token=rVlaAKUs
</span></code></pre></td></tr></table></div></figure>


<p>记下rVlaAKUs这个值，在testbed.py文件中我们会用到。</p>

<ol type="a">
<li>OpenStack Controller的Public vip和Management vip, 如下所示，结合我们的网络规划，Public vip是172网段，而Management vip则是10.55.55网段的IP:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@node-20:~# source /root/openrc 
</span><span class='line'>root@node-20:~# keystone endpoint-list | grep 5000
</span><span class='line'>| 0e3c0684e8ae4c9fa4e080c9e1c66513 | RegionOne |         http://172.16.0.4:5000/v2.0          |         http://10.55.55.4:5000/v2.0          |       http://10.55.55.4:35357/v2.0      | f822df80ee1042d9b10d57118bb410aa |
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ol type="a">
<li><p>Contrail Controller的内部vip和外部vip, 因为我们把Contrail Controller的Private IP分配在10.77.77.0/24网段，所以我们暂时选用10.77.77.9作为两个vip的地址。</p></li>
<li><p>如果有外部路由器，则需要配置外部路由器的IP地址。这次的部署中我们不采用外部路由器，因而对比于官方的推荐配置文件，我们的testbed.py中删除了这一部分。</p></li>
</ol>


<p>综合考虑到上述因素后，我们的testbed.py文件定义如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@node-24:~# vim /opt/contrail/utils/fabfile/testbeds/testbed.py|more
</span><span class='line'>from fabric.api import env
</span><span class='line'>#Management ip addresses of hosts in the cluster
</span><span class='line'>os_ctrl01 = 'root@10.55.55.6'
</span><span class='line'>os_ctrl02 = 'root@10.55.55.7'
</span><span class='line'>os_ctrl03 = 'root@10.55.55.8'
</span><span class='line'>c_ctrl01 = 'root@10.77.77.10'
</span><span class='line'>c_ctrl02 = 'root@10.77.77.11'
</span><span class='line'>c_ctrl03 = 'root@10.77.77.12'
</span><span class='line'>c_db01 = 'root@10.77.77.10'
</span><span class='line'>c_db02 = 'root@10.77.77.11'
</span><span class='line'>c_db03 = 'root@10.77.77.12'
</span><span class='line'>#External routers
</span><span class='line'># ext_routers = [('gateway01', '&lt;Gateway_node1_LOOPBACK_ip&gt;'), ('gateway02', '&lt;Gateway_node2_LOOPBACK_ip&gt;')]
</span><span class='line'>#Autonomous system number
</span><span class='line'>router_asn = 64512
</span><span class='line'>#Host from which the fab commands are triggered to install and provision
</span><span class='line'>deploy_node = 'root@10.77.77.10'
</span><span class='line'>#Role definition of the hosts.
</span><span class='line'>env.roledefs = {
</span><span class='line'>'all': [c_ctrl01, c_ctrl02, c_ctrl03, c_db01, c_db02, c_db03],
</span><span class='line'>'cfgm': [c_ctrl01, c_ctrl02, c_ctrl03],
</span><span class='line'>'openstack': [os_ctrl01, os_ctrl02, os_ctrl03],
</span><span class='line'>'control': [c_ctrl01, c_ctrl02, c_ctrl03],
</span><span class='line'>'compute': [],
</span><span class='line'>'collector': [c_ctrl01, c_ctrl02, c_ctrl03],
</span><span class='line'>'webui': [c_ctrl01, c_ctrl02, c_ctrl03],
</span><span class='line'>'database': [c_db01, c_db02, c_db03],
</span><span class='line'>'build': [deploy_node],
</span><span class='line'>'storage-master': [],
</span><span class='line'>'storage-compute': [],
</span><span class='line'>}
</span><span class='line'>#Openstack admin password
</span><span class='line'>env.openstack_admin_password = 'admin'
</span><span class='line'>env.password = 'r00tme'
</span><span class='line'>#Passwords of each host
</span><span class='line'>env.passwords = {
</span><span class='line'>os_ctrl01: 'r00tme',
</span><span class='line'>os_ctrl02: 'r00tme',
</span><span class='line'>os_ctrl03: 'r00tme',
</span><span class='line'>c_ctrl01: 'r00tme',
</span><span class='line'>c_ctrl02: 'r00tme',
</span><span class='line'>c_ctrl03: 'r00tme',
</span><span class='line'>c_db01: 'r00tme',
</span><span class='line'>c_db02: 'r00tme',
</span><span class='line'>c_db03: 'r00tme',
</span><span class='line'>deploy_node: 'r00tme',
</span><span class='line'>}
</span><span class='line'>#For reimage purpose
</span><span class='line'>env.ostypes = {
</span><span class='line'>os_ctrl01: 'ubuntu',
</span><span class='line'>os_ctrl02: 'ubuntu',
</span><span class='line'>os_ctrl03: 'ubuntu',
</span><span class='line'>c_ctrl01: 'ubuntu',
</span><span class='line'>c_ctrl02: 'ubuntu',
</span><span class='line'>c_ctrl03: 'ubuntu',
</span><span class='line'>c_db01: 'ubuntu',
</span><span class='line'>c_db02: 'ubuntu',
</span><span class='line'>c_db03: 'ubuntu',
</span><span class='line'>deploy_node: 'ubuntu',
</span><span class='line'>}
</span><span class='line'>env.openstack = {
</span><span class='line'>'service_token' : 'rVlaAKUs'
</span><span class='line'>}
</span><span class='line'>env.ha = {
</span><span class='line'>'internal_vip': '10.55.55.4',
</span><span class='line'>'external_vip': '172.16.0.4',
</span><span class='line'>'contrail_internal_vip': '10.77.77.9',
</span><span class='line'>'contrail_external_vip': '10.77.77.9',
</span><span class='line'>}
</span><span class='line'>env.keystone = {
</span><span class='line'>'service_tenant': 'services',
</span><span class='line'>'admin_token': 'rVlaAKUs',
</span><span class='line'>}
</span><span class='line'>multi_tenancy = True
</span></code></pre></td></tr></table></div></figure>


<p>编写完testbed.py文件后，就可以根据文件中的定义，部署OpenContrail的组件到多台节点主机了。  <br/>
Fuel Controller节点上的id_rsa文件可以实现对各个节点的无密码登录，拷贝它到我们的Contrail部署节点上:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># scp 10.20.0.2:/root/.ssh/id_rsa /root/.ssh/id_rsa
</span><span class='line'># chmod 0600 /root/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<h3>部署多节点</h3>

<p>首先切换到/opt/contrail/utils目录下，所有用fab执行的部署都需要在这个目录下执行。执行以下操作, 以初始化各部署子节点:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd /opt/contrail/utils
</span><span class='line'># fab -P -R control -w -- "ls /etc/apt/sources.list.d/contrail.list || echo 'deb \
</span><span class='line'>http://10.20.0.2:8080/contrail/ /' &gt; \
</span><span class='line'>/etc/apt/sources.list.d/contrail.list"
</span><span class='line'># fab -P -R control -w -- 'ls /etc/apt/preferences || echo -e "Package: *\nPin: release \
</span><span class='line'>l=Ubuntu\nPin-Priority: 100" &gt; /etc/apt/preferences'
</span><span class='line'># fab -P -R control -w -- 'DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes \
</span><span class='line'>--allow-unauthenticated install python-crypto python-netaddr python-paramiko \
</span><span class='line'>contrail-fabric-utils contrail-setup'
</span><span class='line'># fab -P -R control -w -- 'pip install --upgrade --no-deps --index-url="" \
</span><span class='line'>/opt/contrail/python_packages/ecdsa-0.10.tar.gz'
</span><span class='line'># fab -P -R control -w -- 'pip install --upgrade --no-deps --index-url="" \
</span><span class='line'>/opt/contrail/python_packages/Fabric-1.7.0.tar.gz'
</span></code></pre></td></tr></table></div></figure>


<p>如果出现apt-get update的问题，可以如上面提到的，手动登录到各个节点上去清空/etc/apt/sources.list文件，当然一般情况下不会出现这个问题。  <br/>
运行以下命令，接受sun的协议:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'echo "sun-java6-plugin shared/accepted-sun-dlj-v1-1 boolean \
</span><span class='line'>true" | /usr/bin/debconf-set-selections' && fab -P -R control -w -- 'echo "sun-java6-bin shared/accepted-sun-dlj-v1-1 boolean \
</span><span class='line'> true" | /usr/bin/debconf-set-selections' && fab -P -R control -w -- 'echo "debconf shared/accepted-oracle-license-v1-1 select \
</span><span class='line'>true" | sudo debconf-set-selections' && fab -P -R control -w -- 'echo "debconf shared/accepted-oracle-license-v1-1 seen \
</span><span class='line'> true" | sudo debconf-set-selections'
</span></code></pre></td></tr></table></div></figure>


<p>OpenContrail组件依赖于特定版本的tzdata， 用以下命令安装：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes \
</span><span class='line'> --allow-unauthenticated install tzdata=2014e-0ubuntu0.12.04'
</span></code></pre></td></tr></table></div></figure>


<p>安装和设置database, 并检查节点的状态:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # fab install_database && fab setup_database
</span><span class='line'> # fab -R database -w -- "contrail-status"
</span><span class='line'> # nodetool status
</span><span class='line'>--  Address      Load       Tokens  Owns   Host ID                               Rack
</span><span class='line'>UN  10.77.77.12  141.84 MB  256     33.3%  4ea3abec-16ee-417a-b78c-69e8dca292be  rack1
</span><span class='line'>UN  10.77.77.11  141.33 MB  256     35.8%  d7677bf2-1447-48af-b1d4-356b4a8d6cff  rack1
</span><span class='line'>UN  10.77.77.10  134.28 MB  256     30.9%  e418e4ef-af22-4874-ad94-777d6b4c511c  rack1
</span></code></pre></td></tr></table></div></figure>


<p>当看到上面有三个条目时，代表安装成功，可以进行下一步。</p>

<p>安装cfgm, control, collector, webui 组件以及keepalived集群。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab install_cfgm && fab install_control && fab install_collector && fab install_webui && fab setup_contrail_keepalived && fab fixup_restart_haproxy_in_collector 2&gt;&1 | tee all.txt
</span></code></pre></td></tr></table></div></figure>


<p>删除掉/etc/keepalived/keepalived.conf里的EXTERNAL部分, 值得注意的是，在三个Contrail Controller上，都需要执行此操作:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/keepalived/keepalived.conf
</span><span class='line'>......remove something......
</span></code></pre></td></tr></table></div></figure>


<p>删除以后，重新启动keepalived服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'service keepalived restart'
</span></code></pre></td></tr></table></div></figure>


<p>更新haproxy的配置文件，添加WebUI的虚拟IP地址(vip). 值得注意的是，在三个Contrail Controller上，都需要执行此操作:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/haproxy/haproxy.cfg
</span><span class='line'>#contrail-webui-marker-start
</span><span class='line'>frontend contrail-webui-api *:443
</span><span class='line'>    mode tcp
</span><span class='line'>    default_backend contrail-webui-api
</span><span class='line'>backend contrail-webui-api
</span><span class='line'>    mode tcp
</span><span class='line'>    balance roundrobin
</span><span class='line'>    option nolinger
</span><span class='line'>    stick on src
</span><span class='line'>    stick-table type ip size 200k expire 300m
</span><span class='line'>    option tcp-check
</span><span class='line'>    tcp-check connect port 8143
</span><span class='line'>    default-server error-limit 1 on-error mark-down
</span><span class='line'>    server 10.77.77.10 10.77.77.10:8143 check inter 2000 rise 2 fall 3
</span><span class='line'>    server 10.77.77.11 10.77.77.11:8143 check inter 2000 rise 2 fall 3
</span><span class='line'>    server 10.77.77.12 10.77.77.12:8143 check inter 2000 rise 2 fall 3
</span><span class='line'>#contrail-webui-marker-end
</span></code></pre></td></tr></table></div></figure>


<p>更改完以后，重启haproxy服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'service haproxy restart'
</span></code></pre></td></tr></table></div></figure>


<p>更改每个节点上的tenant服务名称，从'service'改成'services':</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- "sed -i '49s/service/services/g' \
</span><span class='line'>/usr/local/lib/python2.7/dist-packages/contrail_provisioning/config/quantum_in_keystone_setup.py"
</span></code></pre></td></tr></table></div></figure>


<p>配置cfgm服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab setup_cfgm
</span></code></pre></td></tr></table></div></figure>


<p>这时我们可以验证neutron endpoint是否被正确安装，在任何一个OpenStack Controller节点上，运行以下命令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># keystone service-list
</span><span class='line'># keystone endpoint-list
</span></code></pre></td></tr></table></div></figure>


<p>例如:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@node-20:~# keystone service-list | grep neutron
</span><span class='line'>| 2f4c887f68a9428aa448cbd688d7061f | neutron  |    network     |             network              |
</span><span class='line'>root@node-20:~# keystone endpoint-list | grep 2f4c887f68a9428aa448cbd688d7061f
</span><span class='line'>| 7dd2c25e69ad4a3296f272aa253001c8 | RegionOne |            http://10.77.77.9:9696            |            http://10.77.77.9:9696            |          http://10.77.77.9:9696         | 2f4c887f68a9428aa448cbd688d7061f |
</span></code></pre></td></tr></table></div></figure>


<p>成功的话，接着下一步设置，删除所有的Contrail Controller节点上文件/etc/haproxy/haproxy.cfg里的rabbit字段：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/haproxy/haproxy.cfg
</span><span class='line'>......remove something......
</span></code></pre></td></tr></table></div></figure>


<p>重新启动haproxy服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'service haproxy restart'
</span></code></pre></td></tr></table></div></figure>


<p>设置control,collector,webui组件服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab setup_control
</span><span class='line'># fab setup_collector && fab setup_webui
</span></code></pre></td></tr></table></div></figure>


<p>在任一OpenStack Controller节点上，运行以下命令，得到rabbit的密码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@node-22:~# cat /etc/rabbitmq/rabbitmq.config | grep default_pass
</span><span class='line'>    {default_pass,        &lt;&lt;"gYFQP10P"&gt;&gt;},
</span></code></pre></td></tr></table></div></figure>


<p>配置neutron插件，使用运行在OpenStack Controller上的rabbit 集群, 这里的rabbit_password使用上面得到的值:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#  fab -P -R control -w -- 'openstack-config --del /etc/neutron/neutron.conf DEFAULT rabbit_host'
</span><span class='line'>#  fab -P -R control -w -- 'openstack-config --set /etc/neutron/neutron.conf DEFAULT rabbit_hosts \
</span><span class='line'>  10.55.55.6:5673,10.55.55.7:5673,10.55.55.8:5673'
</span><span class='line'>#  fab -P -R control -w -- 'openstack-config --set /etc/neutron/neutron.conf DEFAULT rabbit_userid \
</span><span class='line'>   nova'
</span><span class='line'>#  fab -P -R control -w -- 'openstack-config --set /etc/neutron/neutron.conf DEFAULT \
</span><span class='line'>  rabbit_password gYFQP10P'
</span><span class='line'># fab -P -R control -w -- 'service neutron-server restart'
</span></code></pre></td></tr></table></div></figure>


<p>配置contrail-api以使用运行在OpenStack Controller上的rabbit集群:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'perl -pi -e \
</span><span class='line'> "s/rabbit_server.*$/rabbit_server=10.55.55.4/" /etc/contrail/contrail-api.conf'
</span><span class='line'># fab -P -R control -w -- 'perl -pi -e "s/rabbit_port.*$/rabbit_port=5672/" \
</span><span class='line'> /etc/contrail/contrail-api.conf'
</span><span class='line'># fab -R control -w -- "perl -pi -e 'print \"rabbit_password=gYFQP10P\n\" \
</span><span class='line'> if \$_ =~ rabbit_port' /etc/contrail/contrail-api.conf"
</span><span class='line'># fab -P -R control -w -- "perl -pi -e 'print \"rabbit_user=nova\n\" if \$_ =~ rabbit_port' \
</span><span class='line'> /etc/contrail/contrail-api.conf"
</span><span class='line'># fab -P -R control -w -- "service contrail-api restart"
</span></code></pre></td></tr></table></div></figure>


<p>使用前面下载的OpenContrail 插件，作为neutron挂载的插件, 或者你可以直接从github克隆下来:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mkdir -p /tmp/contrail-repo
</span><span class='line'># apt-get install -y git
</span><span class='line'># git clone https://github.com/Juniper/contrail-neutron-plugin.git /tmp/contrail-repo
</span><span class='line'># cd /tmp/contrail-repo
</span><span class='line'># git checkout 3189155
</span><span class='line'># cp -r /tmp/contrail-repo/neutron_plugin_contrail/plugins/opencontrail \
</span><span class='line'>/usr/share/pyshared/neutron_plugin_contrail/plugins/
</span></code></pre></td></tr></table></div></figure>


<p>重新启动neutron-service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd /opt/contrail/utils
</span><span class='line'># fab -P -R cfgm -w -- 'service neutron-server restart'
</span></code></pre></td></tr></table></div></figure>


<p>设置Contrail Controller之间的BGP节点发现，metadata服务及encapsulation类型:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab prov_control_bgp && fab prov_metadata_services && fab prov_encap_type
</span></code></pre></td></tr></table></div></figure>


<p>用以下命令验证安装是否成功:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab verify_cfgm
</span><span class='line'># fab verify_control
</span><span class='line'># fab verify_collector
</span><span class='line'># fab verify_webui
</span><span class='line'># fab -R control -w -- "contrail-status"
</span></code></pre></td></tr></table></div></figure>


<p>更新rc.d，这样在启动的时候，不会启动supervisor-support进程：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fab -P -R control -w -- 'update-rc.d supervisor-support-service disable'
</span></code></pre></td></tr></table></div></figure>


<p>用浏览器访问以下页面，以确认Contrail已经被正确安装:    <br/>
<a href="https://10.77.77.9">https://10.77.77.9</a>   <br/>
此时你看到的页面应该如下：   <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_21_49_07_1006x746.jpg" alt="/images/2015_04_27_21_49_07_1006x746.jpg" /></p>

<p>本章过完以后，我们的OpenContrail部署已经完成了大半，接下来就是在Compute和OpenStack Controller节点上的配置，达到最后的集成过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Fuel部署OpenContrail(3)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/27/shi-yong-fuelbu-shu-opencontrail-3/"/>
    <updated>2015-04-27T18:56:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/27/shi-yong-fuelbu-shu-opencontrail-3</id>
    <content type="html"><![CDATA[<p>在OpenStack HA部署好的基础上集成OpenContrail是一个比较繁琐的过程，所以这一节里我们主要做集成前的准备工作，准备网络拓扑和创建好OpenContrail本地部署仓库。</p>

<h3>网络规划</h3>

<p>在Miranti提供的集成参考里，有如下的图，定义了整个环境的网络拓扑。  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_19_06_11_1147x804.jpg" alt="images/2015_04_27_19_06_11_1147x804.jpg" /> <br/>
从图中可以看到各个节点所接入到的物理网络。我们根据这些节点接入网络的不同，来定义对应系统上的网络配置。  <br/>
在安装完毕后的虚拟机里，可以看到该节点的DNS名称，例如node-19, node-20之类，在Fuel Controller上可以通过<code>ssh root@node-19</code>来登入相应角色的机器上。  <br/>
以下是三个OpenStack节点的网络部署, N/A代表不需要配置，可以直接把对应的接口文件删除:  <br/>
对应的接口分别是从eth0 ~ eth4.</p>

<p>OS1: node-19, PXE:10.20.0.14, Public: 172.16.0.6, Management: 10.55.55.6, Storage: 10.66.66.5, Private: N/A.   <br/>
OS2: node-20, PXE:10.20.0.15, Public: 172.16.0.7, Management: 10.55.55.7, Storage: 10.66.66.6, Private: N/A.   <br/>
OS3: node-22, PXE:10.20.0.16, Public: 172.16.0.8, Management: 10.55.55.8, Storage: 10.66.66.7, Private: N/A.</p>

<p>Compute: node-18, PXE: 10.20.0.13, Public: 172.16.0.5, Management: 10.55.55.5, Storage: 10.66.66.4, Private: N/A.</p>

<p>Contrail1: node-24, PXE: 10.20.0.10, Public: N/A, Management: N/A, Storage: N/A, Private: 10.77.77.10
Contrail2: node-21, PXE: 10.20.0.11, Public: N/A, Management: N/A, Storage: N/A, Private: 10.77.77.11
Contrail3: node-23, PXE: 10.20.0.12, Public: N/A, Management: N/A, Storage: N/A, Private: 10.77.77.12</p>

<p>OpenStack和Compute各个节点的配置是自动配置好的，Contrail节点上的Private节点则需要手动配置，具体步骤如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@node-24:~# vim /etc/network/interfaces.d/ifcfg-eth4 
</span><span class='line'>auto eth4
</span><span class='line'>iface eth4 inet static
</span><span class='line'>
</span><span class='line'>address 10.77.77.10
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 10.77.77.1
</span><span class='line'>
</span><span class='line'>post-up  ethtool  -K  eth4  gso off  gro off || true
</span></code></pre></td></tr></table></div></figure>


<p>删除三个Contrail Controller节点上的未用端口, 并重启后得到我们要的配置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@node-24:~# rm -f /etc/network/interfaces.d/ifcfg-eth3 
</span><span class='line'>root@node-24:~# rm -f /etc/network/interfaces.d/ifcfg-eth2
</span><span class='line'>root@node-24:~# rm -f /etc/network/interfaces.d/ifcfg-eth1 
</span></code></pre></td></tr></table></div></figure>


<p>到这里，我们节点机的网络单机就配置完毕了。</p>

<h3>网间互通</h3>

<p>我们需要让Management网络和Private网络可以通过某种途径互相连通，这里为了部署的方便，直接在主机(Host机器)上用iptables加上以下规则：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -D FORWARD -i virbr5 -j REJECT --reject-with icmp-port-unreachable
</span><span class='line'># iptables -D FORWARD -o virbr5 -j REJECT --reject-with icmp-port-unreachable
</span><span class='line'># iptables -D FORWARD -o virbr3 -j REJECT --reject-with icmp-port-unreachable
</span><span class='line'># iptables -D FORWARD -i virbr3 -j REJECT --reject-with icmp-port-unreachable
</span><span class='line'># iptables -t nat -A POSTROUTING -s 10.55.55.0/24 -d 10.77.77.0/24 -j MASQUERADE
</span><span class='line'># iptables -t nat -A POSTROUTING -s 10.77.77.0/24 -d 10.55.55.0/24 -j MASQUERADE
</span></code></pre></td></tr></table></div></figure>


<p>值得注意的是，virbr5和virbr3就是10.55.55.0/24和10.77.77.0/24所附属的网口，具体可以在Virt-Manager的配置菜单里看到。   <br/>
添加完毕后，在OpenStack的节点(OS1,OS2,OS3)ping Private网络里的地址，如<code>ping 10.77.77.10</code>, 确保可以ping通；在Contrail Controller的节点(Contrail1, Contrail2, Contrail3)上ping Management网络里的地址，如10.55.55.6，确保可以ping通。 <br/>
集成OpenContrail的一个先决条件是Private网络和Management网络可以互通。</p>

<h3>OpenContrail安装仓库准备</h3>

<p>我们在Fuel Controller上建立OpenContrail的安装仓库，这样有利于快速部署， 具体的操作是从Juniper官方提供的deb包里释出OpenContrail安装所需要的包，形成一个本地仓库。具体步骤如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum -y install dpkg-devel
</span><span class='line'># cd ~/Deb
</span><span class='line'># mkdir -p /var/www/nailgun/contrail
</span><span class='line'># mv /root/contrail-install-packages_2.0-22~icehouse_all.deb  ./
</span><span class='line'># ar vx contrail-install-packages_2.0-22~icehouse_all.deb
</span><span class='line'># rm -f contrail-install-packages_2.0-22~icehouse_all.deb 
</span><span class='line'># tar xf data.tar.gz
</span><span class='line'># tar xf opt/contrail/contrail_packages/contrail_debs.tgz -C /var/www/nailgun/contrail
</span><span class='line'># cd /var/www/nailgun/contrail
</span><span class='line'># dpkg-scanpackages . /dev/null | gzip -9c &gt; Packages.gz
</span><span class='line'># rm -rf ~/Deb
</span></code></pre></td></tr></table></div></figure>


<p>
这时候如果在本机上访问  <br/>
<a href="http://10.20.0.2:8080/contrail/">http://10.20.0.2:8080/contrail/</a>  <br/>
就可以看到整个仓库的包列表及详情。这个仓库将在后面部署Contrail时被用到。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Fuel部署OpenContrail(2)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/27/shi-yong-fuelbu-shu-opencontrail-2/"/>
    <updated>2015-04-27T17:04:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/27/shi-yong-fuelbu-shu-opencontrail-2</id>
    <content type="html"><![CDATA[<p>本节在前面部署完Fuel 控制节点的基础上，接着部署一个OpenStack HA环境，并准备好OpenContrail的三个部署节点。</p>

<h3>节点初始化准备</h3>

<p>所有加入到Fuel控制节点里的机器，在加入前都需要进行初始化配置，而后才可以被Fuel所识别.  <br/>
在所有配置好的机器里，点击Details-> Boot Options, 设置如下：  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_14_26_532x372.jpg" alt="/images/2015_04_27_17_14_26_532x372.jpg" />  <br/>
因为第一次启动的时候，磁盘里是没有内容的，机器会自动从第二选项启动(PXE). 机器将自动侦测5个网段上的PXE Server， 因为Fuel Controller接管了10.20.0.0/24 网段上的PXE请求，它将会把机器从PXE变成可部署的状态。</p>

<h3>OpenStack HA环境创建</h3>

<p>创建一个OpenStack HA环境，如下步骤，因为是HA，所以需要至少三个OpenStack Controller节点和一个OpenStack Compute节点。  <br/>
点击界面里的New OpenStack Environment, 在弹出的窗口中，命名需要部署的HA环境名，并选择部署所需要的镜像，这里我们选择Ubuntu作为部署OpenStack的基础镜像。  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_18_22_680x435.jpg" alt="/images/2015_04_27_17_18_22_680x435.jpg" />  <br/>
点击下一步，选择HA模式：  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_20_13_681x427.jpg" alt="/images/2015_04_27_17_20_13_681x427.jpg" /> <br/>
点击下一步，选择计算节点模式，这里选择qemu或者kvm问题都不大，不要选vcenter就是了:   <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_21_48_683x435.jpg" alt="/images/2015_04_27_17_21_48_683x435.jpg" />   <br/>
点击下一步，进入到网络模式选择，选择Legacy Network(nova-network), 先部署成这种形式，接下来我们会使用neutron和contrail的组合重新规划网络:   <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_23_03_682x428.jpg" alt="/images/2015_04_27_17_23_03_682x428.jpg" /> <br/>
点击下一步，Storage Backend，因为我们不打算引入任何存储节点，这里选择Default，直接进入下一步， Additional Service里我们也不打算启任何额外的服务，一路Next直到最后Create出整个OpenStack环境。</p>

<p>依次创建另一个OpenStack HA环境，用来部署三台Contrail Controller的节点机.</p>

<h3>OpenStack环境网络</h3>

<p>Fuel默认的网络配置会激活三个物理端口，第一个端口接入PXE网络，第二个接入Public网络，第三个上启三个VLAN，分别接入到Management/Storage/Private网络。我认为VLAN的配置增加了配置和部署的复杂度，更改为五个物理网络，分别使用我们在Virt-Manager中创建出的五个物理网卡接入。更改方法如下:   <br/>
点击Network, 更改Management下的CIDR，手动填入10.55.55.0/24，然后去掉前面的Use VLAN Tag:      <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_32_09_465x466.jpg" alt="/images/2015_04_27_17_32_09_465x466.jpg" /></p>

<p>依次修改Storage网络和Private网络，更改完毕后，你的配置应该看起来是这样的:    <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_34_33_387x388.jpg" alt="/images/2015_04_27_17_34_33_387x388.jpg" /></p>

<p>对于Public网络我们不需要有任何修改，保持172.16网段的配置即可。</p>

<p>确认Network的配置为FlatDHCP Manager:   <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_35_37_391x149.jpg" alt="/images/2015_04_27_17_35_37_391x149.jpg" /></p>

<h3>建立OpenStack HA环境</h3>

<p>经PXE启动的虚拟机会把自己加入到"Unallocated Nodes"的队列里，在创建好的环境里，点击Node后，可以看到Fuel对角色的分配，添加一个OpenStack Controller的步骤如下：  <br/>
在Assign Roles里选择"Controller", 下面的备选节点里选择一台机器后，Apply Changes按钮会变绿，点击进入下一步.   <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_42_34_800x530.jpg" alt="/images/2015_04_27_17_42_34_800x530.jpg" />  <br/>
在切换到的页面中，点击节点最右边的齿轮，配置该节点机器的网络、存储等，这里只配置网络：  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_44_05_797x203.jpg" alt="/images/2015_04_27_17_44_05_797x203.jpg" />  <br/>
点击Configure Network配置网络:   <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_45_19_448x349.jpg" alt="/images/2015_04_27_17_45_19_448x349.jpg" />  <br/>
可以看到前4个节点已经配置好了，我们只需要把VM(Fix)这个框从eth0拖动到eth4即可:    <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_46_34_524x342.jpg" alt="/images/2015_04_27_17_46_34_524x342.jpg" />  <br/>
添加完毕后，网络配置应该如下图:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_48_22_489x436.jpg" alt="/images/2015_04_27_17_48_22_489x436.jpg" /> <br/>
点击Apply后，保存当前配置，然后点击Back to node list可以顺次添加其他节点。</p>

<p>下面是一个添加好的OpenStack HA环境示例(3 Controller + 2 Compute):   <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_57_01_948x432.jpg" alt="/images/2015_04_27_17_57_01_948x432.jpg" /></p>

<p>这里要注意，因为我们要启用嵌套虚拟化，所以确保Compute节点是把Host CPU Configuration下发了的那台。 <br/>
添加完三个OpenStack Controller节点和一个OpenStack Compute节点后，就可以点击Deploy Changes开始部署了。整个部署的过程至少需要1个小时，取决于机器配置和磁盘读写快慢。</p>

<p>部署完毕后，Fuel会弹出提示信息，并给出可访问OpenStack HA Horizon界面的URL。</p>

<h3>准备Contrail部署节点</h3>

<p>在OpenStack HA节点部署的同时，我们可以准备好Contrail部署节点。  <br/>
同样创建出一个新的OpenStack HA部署环境，记住我们不能在已有的OpenStack HA环境里添加节点机，因为那样部署出来的节点机都会带上OpenStack的一些包，我们需要一个纯净的Ubuntu环境进行Contrail组件的配置。 <br/>
同样添加3个Compute节点，进行同样的网络配置，添加完节点后，Deploy Changes按钮是不能被点下的，因为我们的环境里没有OpenStack Controller. 一个环境示例如下:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_17_59_13_837x489.jpg" alt="/images/2015_04_27_17_59_13_837x489.jpg" /></p>

<p>我们需要登录到Fuel Controller的终端，就是10.20.0.2那台机器(用户名root,密码r00tme)，手动对添加的三个Contrail节点进行provision:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># fuel --env &lt;ENVIRONMENT_ID&gt; node --list
</span><span class='line'># fuel node --node-id &lt;NODE1_ID&gt;,&lt;NODE2_ID&gt;,&lt;NODE3_ID&gt; --env-id &lt;ENVIRONMENT_ID&gt; --provision
</span></code></pre></td></tr></table></div></figure>


<p>如何得到当前的ENVIRONMENT_ID, 下面提供了一个例子:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@fuel ~]# fuel --env environment
</span><span class='line'>id | status      | name                              | mode       | release_id | changes                                                                                                                                                               | pending_release_id
</span><span class='line'>---|-------------|-----------------------------------|------------|------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------
</span><span class='line'>36 | operational | JunoOpenStack                     | multinode  | 2          | []                                       
</span><span class='line'>[root@fuel ~]# fuel --env 36 node --list
</span><span class='line'>id | status | name             | cluster | ip        | mac               | roles      | pending_roles | online | group_id
</span><span class='line'>---|--------|------------------|---------|-----------|-------------------|------------|---------------|--------|---------
</span><span class='line'>3  | ready  | Untitled (e5:f2) | 36      | 10.20.0.3 | da:98:96:c5:c3:4b | compute    |               | False  | 36      
</span><span class='line'>4  | ready  | Untitled (71:15) | 36      | 10.20.0.4 | 1a:ff:37:1f:26:44 | controller |               | False  | 36  
</span><span class='line'>[root@fuel ~]# fuel node --node-id 3 --env-id 36 --provision2
</span></code></pre></td></tr></table></div></figure>


<p>同样需要大约30分钟时间用来在三台Contrail Controller的节点机上部署完可用的Ubuntu系统，部署完毕后，node界面上可以看到绿色的小字"ubuntu installed".</p>

<p>这一节我们通过Fuel部署完毕OpenStack HA, 并准备了用于后续部署OpenContrail的三台Contrail Controller节点。接下来我们可以进入到OpenStack和OpenContrail的集成了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Fuel部署OpenContrail(1)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/22/shi-yong-fuelbu-shu-opencontrail-1/"/>
    <updated>2015-04-22T20:01:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/22/shi-yong-fuelbu-shu-opencontrail-1</id>
    <content type="html"><![CDATA[<p>最近在做OpenContrail的解耦合操作，因为官方提供的OpenContrail一键安装包里诸多组件都是用的默认的推荐，通过解耦合可以做到更灵活的安装和配置，有利于更方便的部署和后续的维护。所以这一系列文章是关于如何用Fuel在部署完OpenStack的基础上完成OpenContrail的部署。</p>

<h3>先决条件</h3>

<p>先决条件主要是用于准备用于部署的硬件环境和软件包。 <br/>
硬件环境:   <br/>
i5-4460(3.2GHz/4核/6M三级缓存), 32G 内存。  <br/>
系统:  <br/>
Ubuntu 14.04 LTS  <br/>
软件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install libvirtd virt-manager
</span></code></pre></td></tr></table></div></figure>


<p>
从Miranti网站下载： MirantisOpenStack-6.0.iso  <br/>
从Contrail网站下载: contrail-install-packages_2.0-22~icehouse_all.deb  <br/>
contrail-neutron-plugin仓库:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/Juniper/contrail-neutron-plugin.git
</span></code></pre></td></tr></table></div></figure>


<h3>CPU/内存/磁盘规划</h3>

<p>需要构建一共8台虚拟机用于在部署好的Mirantis OpenStack上集成OpenContrail. CPU/内存/磁盘规划如下:  <br/>
1台Mirantis Fuel控制节点机,2核,划分3G内存, 100G磁盘。
3个OpenStack Controller节点, 2核,各划分3G内存, 100G磁盘。   <br/>
1个OpenStack Compute节点，2核(嵌套虚拟化),划分3G内存, 100G磁盘。   <br/>
3个OpenContrail节点，2核,各划分4G内存, 100G磁盘。  <br/>
一共需要27G内存。磁盘格式为qcow2，实际占用远小于这个数，各个节点最大也就是在5G左右大小。 <br/>
其中，关于嵌套虚拟化的CPU设置，如下图, 记得选择Copy host CPU Configuration:   <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_12_20_40_598x372.jpg" alt="/images/2015_04_27_12_20_40_598x372.jpg" />   <br/>
启用嵌套虚拟化需要在BIOS设置，并添加相应的内核模块。</p>

<h3>网络规划</h3>

<p>Fuel OpenStack规划了5个网络，分别是:   <br/>
Admin(PXE)  <br/>
Public   <br/>
Management   <br/>
Storage   <br/>
Private</p>

<p>我们在Virt-Manager里也同样创建出这样的五个子网:  <br/>
Admin(PXE) &ndash; FuelNAT  &ndash; 10.20.0.0/24   <br/>
Public &ndash; FuelPublic  &ndash; 172.16.0.0/24  <br/>
Management &ndash; FuelMgmt &ndash; 10.55.55.0/24  <br/>
Storage  &ndash; FuelStorage &ndash; 10.66.66.0/24  <br/>
Private  &ndash; FuelPrivate &ndash; 10.77.77.0/24</p>

<p>创建网络的步骤如下，双击Virtual Machine Manager里的localhost(QEMU), 弹出下面的窗口:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_14_57_37_499x379.jpg" alt="/images/2015_04_27_14_57_37_499x379.jpg" />  <br/>
点击网络列表最下面的+号,弹出创建网络的窗口:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_14_58_52_543x374.jpg" alt="/images/2015_04_27_14_58_52_543x374.jpg" />  <br/>
命名该网络，点击下一步:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_15_00_34_549x371.jpg" alt="/images/2015_04_27_15_00_34_549x371.jpg" />  <br/>
禁用DHCP:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_16_37_32_544x374.jpg" alt="/images/2015_04_27_16_37_32_544x374.jpg" />  <br/>
选择isolated网络模式:  <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_16_38_34_551x375.jpg" alt="/images/2015_04_27_16_38_34_551x375.jpg" />  <br/>
接着点击下一步直到完成，这样我们的网络就创建好了。  <br/>
用上面的方法创建出以上5个子网。</p>

<h3>各个节点网络配置</h3>

<p>Miranti Fuel Node: 仅FuelNAT, 安装完毕后，自动指定地址为10.20.0.2.    <br/>
其他所有节点机，在创建时，把五个网络都添加上，添加方法如下:  <br/>
Details -> Add Hardware -> Network, 而后选择:      <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_16_45_34_765x444.jpg" alt="/images/2015_04_27_16_45_34_765x444.jpg" /></p>

<h3>Miranti Fuel Node安装</h3>

<p>安装很简单，直接用下载的MirantisOpenStack-6.0.iso作为安装光盘，在创建出来的虚拟机里安装系统。安装完毕后，在Host机器的浏览器里访问   <br/>
<a href="http://10.20.0.2:8000">http://10.20.0.2:8000</a>    <br/>
输入用户名密码都为admin后，登录，可以看到以下界面:    <br/>
<img src="http://purplepalmdash.github.io/images/2015_04_27_16_55_29_717x477.jpg" alt="/images/2015_04_27_16_55_29_717x477.jpg" />  <br/>
在这个界面里我们可以进行OpenStack环境的准备、部署、配置、销毁等操作。</p>

<p>到这一步，我们已经完成了Miranti Fuel Node的安装，基本的部署准备工作已经完成，接下来我们将使用Fuel来部署一个可用的OpenStack环境, 以及三台用于部署Contrail的节点机.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Glusterfs Howto]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/17/glusterfs-howto/"/>
    <updated>2015-04-17T14:18:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/17/glusterfs-howto</id>
    <content type="html"><![CDATA[<p>I want to expand my storage size on DigitalOcean, the droplet I have on DO one have 11G, and the other have 15G size, so if I could combine them together, I could do much more development on it. Following is how-to.</p>

<h3>Glusterfs Setup</h3>

<p>Install it under Ubuntu via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get install glusterfs-server
</span></code></pre></td></tr></table></div></figure>


<p>In both node, install the same software, and then add following lines into your /etc/hosts:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10.17.17.195    Gluster2
</span><span class='line'>10.17.17.194    Gluster1
</span></code></pre></td></tr></table></div></figure>


<p>In Gluster1, probe Gluster2:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:~# gluster peer probe Gluster2
</span><span class='line'>peer probe: success
</span></code></pre></td></tr></table></div></figure>


<p>Then view the gluster peer status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:~# gluster peer status
</span><span class='line'>Number of Peers: 1
</span><span class='line'>
</span><span class='line'>Hostname: Gluster2
</span><span class='line'>Port: 24007
</span><span class='line'>Uuid: 881dedb8-6cd4-4127-8c96-223daef081f5
</span><span class='line'>State: Peer in Cluster (Connected)
</span></code></pre></td></tr></table></div></figure>


<p>Create the volumn via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:~# gluster volume create vol_replica transport tcp Gluster2:/home/glustervms Gluster1:/home/glustervms force
</span><span class='line'>volume create: vol_replica: success: please start the volume to access data
</span></code></pre></td></tr></table></div></figure>


<p>Start the created vol:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:~# gluster volume start vol_replica
</span><span class='line'>volume start: vol_replica: success
</span></code></pre></td></tr></table></div></figure>


<p>View volumn info:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:~# gluster volume info 
</span><span class='line'> 
</span><span class='line'>Volume Name: vol_replica
</span><span class='line'>Type: Distribute
</span><span class='line'>Volume ID: 953456f3-0c46-4d07-ac41-591d1e398be6
</span><span class='line'>Status: Started
</span><span class='line'>Number of Bricks: 2
</span><span class='line'>Transport-type: tcp
</span><span class='line'>Bricks:
</span><span class='line'>Brick1: Gluster2:/home/glustervms
</span><span class='line'>Brick2: Gluster1:/home/glustervms
</span></code></pre></td></tr></table></div></figure>


<p>Now create the folder and mount the glusterfs via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:/home# mkdir glustervmsmnt
</span><span class='line'>root@Gluster1:/home# mount -t glusterfs Gluster1:/vol_replica /home/glustervmsmnt/
</span></code></pre></td></tr></table></div></figure>


<p>View the disk filesystem info:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Gluster1:/vol_replica   39G  4.7G   32G  13% /home/glustervmsmnt
</span></code></pre></td></tr></table></div></figure>


<h3>Glusterfs Volumn deletion</h3>

<p>The replica is not the one we want, for combine two partitions, I need the Distributed stripped mode, which is the one described in:   <br/>
<a href="http://www.gluster.org/community/documentation/index.php/Gluster_3.2:_Creating_Distributed_Striped_Volumes">http://www.gluster.org/community/documentation/index.php/Gluster_3.2:_Creating_Distributed_Striped_Volumes</a>    <br/>
So first I have to delete the one I&rsquo;ve created in the above part. <br/>
First umount the one I&rsquo;ve created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:/home/glustervms# umount /home/glustervmsmnt 
</span></code></pre></td></tr></table></div></figure>


<p>checked via <code>mount</code> or <code>df -h</code> we could see the one we have mounted has been umounted.</p>

<p>Second, stop the volumes we&rsquo;ve created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:/home/glustervms# gluster volume stop vol_replica
</span><span class='line'>Stopping volume will make its data inaccessible. Do you want to continue? (y/n) y
</span><span class='line'>volume stop: vol_replica: success
</span></code></pre></td></tr></table></div></figure>


<p>Third, delete volumn:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:/home/glustervms# gluster volume delete vol_replica
</span><span class='line'>Deleting volume will erase all information about the volume. Do you want to continue? (y/n) y
</span><span class='line'>volume delete: vol_replica: success
</span></code></pre></td></tr></table></div></figure>


<p>Check the volume status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:/home/glustervms# gluster volume info
</span><span class='line'>No volumes present
</span></code></pre></td></tr></table></div></figure>


<h3>Create the distributed stripped volume</h3>

<p>Create the bigvolume:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:/home/glustervms# gluster volume create bigvolume transport tcp Gluster2:/home/glustervms Gluster1:/home/glustervms force
</span></code></pre></td></tr></table></div></figure>


<p>Start the volume:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:/home/glustervms# gluster volume start bigvolume
</span><span class='line'>volume start: bigvolume: success
</span></code></pre></td></tr></table></div></figure>


<p>View the status of the volume:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:/home/glustervmsmnt# gluster volume info 
</span><span class='line'> 
</span><span class='line'>Volume Name: bigvolume
</span><span class='line'>Type: Distribute
</span><span class='line'>Volume ID: 3e09f074-4675-46d3-873f-f00ef13fb509
</span><span class='line'>Status: Started
</span><span class='line'>Number of Bricks: 2
</span><span class='line'>Transport-type: tcp
</span><span class='line'>Bricks:
</span><span class='line'>Brick1: Gluster2:/home/glustervms
</span><span class='line'>Brick2: Gluster1:/home/glustervms
</span></code></pre></td></tr></table></div></figure>


<p>Mount it via following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mount -t glusterfs Gluster1:/bigvolume /home/glustervmsmnt/
</span></code></pre></td></tr></table></div></figure>


<h3>Trouble-Shooting</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Gluster1:/home/glustervms# gluster volume create bigvolume transport tcp Gluster2:/home/glustervms Gluster1:/home/glustervms force
</span><span class='line'>volume create: bigvolume: failed: /home/glustervms or a prefix of it is already part of a volume
</span></code></pre></td></tr></table></div></figure>


<p>Resolve it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#  apt-get install attr
</span><span class='line'>#  setfattr -x trusted.glusterfs.volume-id /home/glustervms
</span><span class='line'>#  setfattr -x trusted.gfid /home/glustervms
</span><span class='line'>#  rm -rf /home/glustervms/.glusterfs/
</span></code></pre></td></tr></table></div></figure>


<p>Re-run the gluster volome create command it will create the volume which combines two folders.</p>

<h3>Digital Ocean Scenario</h3>

<p>My DO droplet runs Ubuntu and CentOS, their version is Trusty(14.04) and CentOS7, so do following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CentOS # wget -P /etc/yum.repos.d http://download.gluster.org/pub/gluster/glusterfs/LATEST/CentOS/glusterfs-epel.repo
</span><span class='line'>CentOS # yum -y install glusterfs glusterfs-fuse glusterfs-server
</span><span class='line'>CentOS # systemctl start glusterd
</span><span class='line'>CentOS # systemctl enable glusterd
</span><span class='line'>Trusty # apt-get install glusterfs-server
</span></code></pre></td></tr></table></div></figure>


<p>Add each other&rsquo;s name and ip address into /etc/hosts, make sure they could ping each other and get responsible:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1xx.xx.xxx.xxx   CentOS
</span><span class='line'>1xx.xx.xxx.xx Trusty
</span></code></pre></td></tr></table></div></figure>


<p>Use Trusty as the server, so on the Trusty machine, detect the CentOS&rsquo;s glusterd configuration as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Trusty # gluster peer probe CentOS
</span><span class='line'>peer probe: success
</span></code></pre></td></tr></table></div></figure>


<p>Check the status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Trusty # gluster peer status
</span><span class='line'>Number of Peers: 1
</span><span class='line'>
</span><span class='line'>Hostname: CentOS
</span><span class='line'>Port: 24007
</span><span class='line'>Uuid: xxxxxxxx
</span><span class='line'>State: Peer in Cluster (Connected)
</span></code></pre></td></tr></table></div></figure>


<p>Create the bigvolume, and mount it into your own directory via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Trusty # gluster volume create bigvolume transport tcp CentOS:/home/glustervms Trusty:/home/glustervms force
</span><span class='line'>volume create: bigvolume: success: please start the volume to access data
</span><span class='line'>Trusty # gluster volume start bigvolume
</span><span class='line'>volume start: bigvolume: success
</span><span class='line'>Trusty # gluster volume info
</span><span class='line'> 
</span><span class='line'>Volume Name: bigvolume
</span><span class='line'>Type: Distribute
</span><span class='line'>Volume ID: xxxxxxxxxxxxxxxxxxxxx
</span><span class='line'>Status: Started
</span><span class='line'>Number of Bricks: 2
</span><span class='line'>Transport-type: tcp
</span><span class='line'>Bricks:
</span><span class='line'>Brick1: CentOS:/home/glustervms
</span><span class='line'>Brick2: Trusty:/home/glustervms
</span><span class='line'>Trusty # mkdir /home/glustervmsmnt/
</span><span class='line'>Trusty # mount -t glusterfs Trusty:/bigvolume /home/glustervmsmnt/
</span><span class='line'>Trusty # df -h
</span><span class='line'>Filesystem              Size  Used Avail Use% Mounted on
</span><span class='line'>/dev/vda1                20G  9.4G  9.2G  51% /
</span><span class='line'>none                    4.0K     0  4.0K   0% /sys/fs/cgroup
</span><span class='line'>udev                    235M  8.0K  235M   1% /dev
</span><span class='line'>tmpfs                    50M  396K   49M   1% /run
</span><span class='line'>none                    5.0M     0  5.0M   0% /run/lock
</span><span class='line'>none                    246M  1.1M  244M   1% /run/shm
</span><span class='line'>none                    100M     0  100M   0% /run/user
</span><span class='line'>Trusty:/bigvolume       40G   14G   24G  37% /home/glustervmsmnt
</span></code></pre></td></tr></table></div></figure>


<p>Now you could operate under the /home/glustervmsmnt and you have 24G size partion of the disk. Enjoy them!!!</p>

<h3>Trouble-Shooting 1</h3>

<p>If you met <code>File change as we read it</code> in tar something, do following things:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Trusty # gluster volume set bigvolume performance.stat-prefetch off
</span><span class='line'>volume set: success
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly Play Puppet]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/16/quickly-play-puppet/"/>
    <updated>2015-04-16T16:09:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/16/quickly-play-puppet</id>
    <content type="html"><![CDATA[<h3>Server and Client</h3>

<p>In server, install following packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install puppet puppetmaster
</span></code></pre></td></tr></table></div></figure>


<p>In client, only install puppet is enough.   <br/>
After installation, added the each other&rsquo;s name into <code>/etc/hosts</code>, let them ping each other via name rather than via ip address.</p>

<h3>Sign</h3>

<p>In client, do following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ clouder@pc121:/etc/puppet$ puppet agent --test --server=pc119
</span><span class='line'>Exiting; no certificate found and waitforcert is disabled
</span></code></pre></td></tr></table></div></figure>


<p>Then in server, listed all of the certification request:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pc119:~/Code/herokublog# sudo puppet cert list
</span><span class='line'>  "pc121" (SHA256) 28:23:36:3C:E4:8B:3A:15:D2:B0:8C:A2:BC:E9:A1:E5:6A:6F:76:0E:40:73:29:1F:8F:8C:D4:83:1F:92:4F:C7
</span></code></pre></td></tr></table></div></figure>


<p>sign the cert:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@pc119:~/Code/herokublog# sudo puppet cert sign pc121
</span><span class='line'>Notice: Signed certificate request for pc121
</span><span class='line'>Notice: Removing file Puppet::SSL::CertificateRequest pc121 at '/var/lib/puppet/ssl/ca/requests/pc121.pem'
</span></code></pre></td></tr></table></div></figure>


<p>Verify it in the client:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clouder@pc121:/etc/puppet$ puppet agent --test
</span><span class='line'>Warning: Unable to fetch my node definition, but the agent run will continue:
</span><span class='line'>Warning: getaddrinfo: Name or service not known
</span><span class='line'>Info: Retrieving plugin
</span><span class='line'>Error: /File[/home/clouder/.puppet/var/lib]: Failed to generate additional resources using 'eval_generate': getaddrinfo: Name or service not known
</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>TBD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Fuel Icehouse Iso]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/04/16/build-fuel-icehouse-iso/"/>
    <updated>2015-04-16T15:26:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/04/16/build-fuel-icehouse-iso</id>
    <content type="html"><![CDATA[<p>Fuel6.0 didn&rsquo;t support icdhouse by default, so we have to build it manually, the steps are listed as following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install git
</span><span class='line'>mkdir ~/fuel
</span><span class='line'>cd ~/fuel
</span><span class='line'>git clone https://github.com/stackforge/fuel-main.git
</span><span class='line'>cd fuel-main
</span><span class='line'> ./prepare-build-env.sh
</span><span class='line'>export MIRROR_BASE=http://mirror.fuel-infra.org/fwm/6.0-icehouse
</span><span class='line'>make iso
</span></code></pre></td></tr></table></div></figure>


<p>After making the iso which have icehouse will be available.</p>

<h3>TroubleShooting</h3>

<p>Some modifications should be made before we make them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Trusty@ubuntu1204:~/code/fuel6.0/fuel-main$ git checkout stable/6.0
</span><span class='line'>Branch stable/6.0 set up to track remote branch stable/6.0 from origin.
</span><span class='line'>Switched to a new branch 'stable/6.0'
</span><span class='line'>Trusty@ubuntu1204:~/code/fuel6.0/fuel-main$ git branch
</span><span class='line'>  master
</span><span class='line'>* stable/6.0
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
