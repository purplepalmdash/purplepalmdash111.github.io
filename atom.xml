<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dash]]></title>
  <link href="http://purplepalmdash.github.io/atom.xml" rel="self"/>
  <link href="http://purplepalmdash.github.io/"/>
  <updated>2015-12-01T19:34:00+08:00</updated>
  <id>http://purplepalmdash.github.io/</id>
  <author>
    <name><![CDATA[Dash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Awesome's Battery Indicator]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/25/awesomes-battery-indicator/"/>
    <updated>2015-11-25T12:18:29+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/25/awesomes-battery-indicator</id>
    <content type="html"><![CDATA[<h3>Background</h3>

<p>I installed ArchLinux+Awesome On my SurfacePro, while the charger of Surface Pro is not
so tight to the pad. Thus I have to use a battery indicator in Awesome.</p>

<h3>Software</h3>

<p>Refers to:</p>

<p><a href="http://www.everythingisvoid.com/uncategorized/simple-battery-status-indicator-awesome-window-manager">http://www.everythingisvoid.com/uncategorized/simple-battery-status-indicator-awesome-window-manager</a></p>

<p>Install steps on ArchLinux:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pacman -S luarocks5.1 gobject-introspection acpi
</span><span class='line'>$ sudo luarocks-5.1 install battery_status</span></code></pre></td></tr></table></div></figure>


<p>You could manually run <code>show_battery_status</code> or add it into your own rc.lua file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim ~/.config/awesome/rc.lua
</span><span class='line'>----.....................
</span><span class='line'>autorunApps =
</span><span class='line'>{
</span><span class='line'>--.........
</span><span class='line'>"synergyc 192.168.0.119",
</span><span class='line'>"sudo echo 1240&gt;/sys/class/backlight/intel_backlight/brightness", 
</span><span class='line'>"fcitx",
</span><span class='line'>"show_battery_status", 
</span><span class='line'>----.....................</span></code></pre></td></tr></table></div></figure>


<p>Now restart the awesome you could see the battery indicator.</p>

<h3>Add Charging Indicator</h3>

<p>First download the source code from github:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/svarogg/battery_status</span></code></pre></td></tr></table></div></figure>


<p>Debug with luarocks loader:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rocks-5.1   lua5.1 -lluarocks.loader
</span><span class='line'>Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio
</span><span class='line'>&gt; require("rex_posix")
</span><span class='line'>&gt; rex = require("rex_posix")
</span><span class='line'>&gt; battery_rex = rex.new([[([^,]{1,3})%]])
</span><span class='line'>&gt; rex=require("rex_posix")
</span><span class='line'>&gt; battery_rex=rex.new([[([^,]{1,3})%]])
</span><span class='line'>&gt; acpi=io.popen('acpi 2&gt;&1')
</span><span class='line'>&gt; acpi_res = acpi:read("*line")
</span><span class='line'>&gt; acpi:close()
</span><span class='line'>&gt; print (acpi_res)
</span><span class='line'>Battery 0: Full, 100%
</span><span class='line'>&gt; percentage=battery_rex:match(acpi_res)
</span><span class='line'>&gt; print (percentage)
</span><span class='line'>100
</span><span class='line'>&gt; print(type(percentage))
</span><span class='line'>string
</span><span class='line'>&gt; print(type(tonumber(percentage)))
</span><span class='line'>number
</span><span class='line'>&gt; adapter = io.popen('acpi -a 2&gt;&1')
</span><span class='line'>&gt; adapter_res = adapter:read("*line")
</span><span class='line'>&gt; adapter:close()
</span><span class='line'>&gt; print(adapter_res)
</span><span class='line'>Adapter 0: on-line
</span><span class='line'>&gt; charge_rex = rex.new([[(on|off)]])
</span><span class='line'>&gt; print(charge_rex:match(adapter_res))
</span><span class='line'>on</span></code></pre></td></tr></table></div></figure>


<p>We get the status of the charge, then update the corresponding icon to the systray.</p>

<p>The modified repository could be fetched from:</p>

<p><a href="https://github.com/purplepalmdash/Awesome-Battery-Indicator">https://github.com/purplepalmdash/Awesome-Battery-Indicator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on ArchLinux on SSD for SurfacePro]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/18/tips-on-archlinux-on-ssd-for-surfacepro/"/>
    <updated>2015-11-18T16:59:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/18/tips-on-archlinux-on-ssd-for-surfacepro</id>
    <content type="html"><![CDATA[<h3>Hardware</h3>

<p>Surface Pro, KingShare 128G SSD(USB).</p>

<p>Picture will be updated after successfully installed.</p>

<h3>Virtualbox Way</h3>

<p>Make a vmdk file which actually points to the USB Disk:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo VBoxManage internalcommands createrawvmdk -filename ./rawusb1.vmdk -rawdisk \ 
</span><span class='line'>/dev/disk/by-id/usb-KINGSHAR_KS-CUTS25W_123456789010-0:0
</span><span class='line'>$ sudo chown -R YourName rawusb1.vmdk</span></code></pre></td></tr></table></div></figure>


<p>Now using this rawdisk for starting the VirtualBox based machine.</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_18_17_10_46_645x529.jpg" alt="/images/2015_11_18_17_10_46_645x529.jpg" /></p>

<h3>Installation</h3>

<p>The system installation is refers to following links:</p>

<p><a href="https://wiki.archlinux.org/index.php/Microsoft_Surface_Pro_3">https://wiki.archlinux.org/index.php/Microsoft_Surface_Pro_3</a></p>

<p><a href="https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_a_USB_key">https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_a_USB_key</a></p>

<h3>Updated Configuration</h3>

<p>Finally I installed the surface pro by using a usb dongle which burned the archlinux
installation iso, put it into the surface pro and startup the machine pressing power
key and volume down key, it will goes into the installtion steps.</p>

<p>Install the system on the SSD, the main steps are available at:</p>

<p><a href="http://purplepalmdash.github.io/blog/2014/06/16/archlinux-on-surface-pro/">http://purplepalmdash.github.io/blog/2014/06/16/archlinux-on-surface-pro/</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@archiso ~ # mount /dev/sdb2 /mnt
</span><span class='line'>root@archiso ~ # mount /dev/sdb1 /mnt/boot/EFI 
</span><span class='line'>root@archiso ~ # arch-chroot /mnt /bin/bash
</span><span class='line'>[root@archiso /]# grub-install --target=x86_64-efi --efi-directory=/boot/EFI \ 
</span><span class='line'>--bootloader-id=arch_grub --recheck
</span><span class='line'>[root@archiso /]# grub-mkconfig -o /boot/grub/grub.cfg</span></code></pre></td></tr></table></div></figure>


<p>Because I frequently change the installtion media(I have SSD and Harddisk), so
everytime I change the installtion media, I have to run above steps again.</p>

<h3>Kernel Configuration</h3>

<p>Install the kernel from yaourt, you could get the surfacepro3 compatiable linux kernel,
install it on surface pro will also be OK:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ yaourt surfacepro
</span><span class='line'>1 aur/linux-surfacepro3 4.3-1 [installed] (5)
</span><span class='line'>    The Linux-surfacepro3 kernel and modules
</span><span class='line'>2 aur/linux-surfacepro3-docs 4.3-1 (5)
</span><span class='line'>    Kernel hackers manual - HTML documentation that comes with the Linux-surfacepro3
</span><span class='line'>kernel
</span><span class='line'>3 aur/linux-surfacepro3-headers 4.3-1 (5)
</span><span class='line'>    Header files and scripts for building modules for Linux-surfacepro3 kernel</span></code></pre></td></tr></table></div></figure>


<p>After installation, you have to manually generate the grub items:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo grub-mkconfig -o /boot/grub/grub.cfg</span></code></pre></td></tr></table></div></figure>


<p>Now reboot the surface pro, you could view the kernel has been upgraded to our newly
installed version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  ~  uname -a
</span><span class='line'>Linux surfacepro 4.3.0-1-surfacepro3 #1 SMP PREEMPT Fri Nov 20 05:47:41 CST 2015 x86_64
</span><span class='line'>GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>With the new version of kernel, you won&rsquo;t face too much problems, my problem is when
using the official kernel, my wifi will get stucked, sometimes the machine will be
dead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spice Client]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/16/spice-client/"/>
    <updated>2015-11-16T21:20:00+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/16/spice-client</id>
    <content type="html"><![CDATA[<h3>Image Conversion</h3>

<p>Convert the vdi files into qcow2 file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ qemu-img convert -f vdi -O qcow2 Windows81.vdi Windows81.qcow2</span></code></pre></td></tr></table></div></figure>


<p>Then continue to create the virtual machine via importing the img.</p>

<h3>Spice Client</h3>

<p>Using virtviewer for view the remote machine.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pacman -S virtviewer
</span><span class='line'>$ remote-viewer spice://localhost:5900</span></code></pre></td></tr></table></div></figure>


<p>Or you could view the desktop via <code>spicec</code>.</p>

<p>The listening port could be view via <code>netstat -anp | grep 5900</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win10 Tips for Using Xshell]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/13/win10-tips-for-using-xshell/"/>
    <updated>2015-11-13T15:59:16+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/13/win10-tips-for-using-xshell</id>
    <content type="html"><![CDATA[<p>Won&rsquo;t change the size of the window when you disable the window size:</p>

<p><img src="http://purplepalmdash.github.io/images/Xshell_1.jpg" alt="/images/Xshell_1.jpg" /></p>

<p>When using vim, the wrappered module should be disable, thus won&rsquo;t cause you
mis-editing the content of the file:</p>

<p><img src="http://purplepalmdash.github.io/images/Xshell_2.jpg" alt="/images/Xshell_2.jpg" /></p>

<p>The configuration should be applied to each session.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variety]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/13/variety/"/>
    <updated>2015-11-13T11:05:05+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/13/variety</id>
    <content type="html"><![CDATA[<h3>参考</h3>

<p><a href="http://peterlevi.com/variety/how-to-install/">http://peterlevi.com/variety/how-to-install/</a></p>

<h3>安装</h3>

<p>Ubuntu上，从ppa安装:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:peterlevi/ppa
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install variety</span></code></pre></td></tr></table></div></figure>


<h3>配置</h3>

<p>安装完毕后，在终端下键入<code>variety</code>即可开始配置该软件，第一次会询问是否创建一个用于多终端
主机之间同步桌面壁纸的账户:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_13_11_10_35_755x507.jpg" alt="/images/2015_11_13_11_10_35_755x507.jpg" /></p>

<p>这一步是可选的，我们在这里先注册上. 需要注意的是，用翻墙后的浏览器完成注册.</p>

<p>一般情况下这里就能使用了，但是awesome桌面环境下需要增加一下这行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /home/XXXXXXX/.config/variety/scripts/set_wallpaper
</span><span class='line'>### Finally we comes to awesome!  
</span><span class='line'>awsetbg "$WP" 2&gt; /dev/null</span></code></pre></td></tr></table></div></figure>


<h3>进一步美化</h3>

<p>Awesome下就只能换换壁纸，本身终端也不支持透明度的配置，如果是gnome之类的桌面环境，可以
把terminal emulator的透明度打开，能获得很好的视觉效果。</p>

<p>默认的更新频率是5分钟更新一次，当然在配置界面下可以更改为更短/更长的时限。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Material]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/05/good-material/"/>
    <updated>2015-11-05T10:41:22+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/05/good-material</id>
    <content type="html"><![CDATA[<h3>Movie</h3>

<p>Sorted by director:  <br/>
<a href="http://pan.baidu.com/share/home?uk=72456331&amp;view=share#category/type=0">http://pan.baidu.com/share/home?uk=72456331&amp;view=share#category/type=0</a></p>

<h3>Good BookMark Of Zhihu</h3>

<p><a href="http://www.zhihu.com/collection/38938285?page=2">http://www.zhihu.com/collection/38938285?page=2</a></p>

<h3>Linux Wondering</h3>

<p><a href="http://i.linuxtoy.org/docs/guide/index.html">http://i.linuxtoy.org/docs/guide/index.html</a></p>

<h3>Oh My Zsh</h3>

<p><a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a></p>

<p><a href="http://www.kafeitu.me/shell/2012/03/25/oh-my-zsh.html">http://www.kafeitu.me/shell/2012/03/25/oh-my-zsh.html</a></p>

<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>

<p><a href="http://segmentfault.com/a/1190000002658335">http://segmentfault.com/a/1190000002658335</a></p>

<h3>Wondering In Guangzhou</h3>

<p><a href="http://www.zhihu.com/question/36159147">http://www.zhihu.com/question/36159147</a></p>

<h3>Impress.js</h3>

<p>Use this javascript for writing the PPT. <br/>
<a href="https://github.com/impress/impress.js">https://github.com/impress/impress.js</a></p>

<h3>Programming On Dialog</h3>

<p><a href="http://www.cyberciti.biz/tips/spice-up-your-unix-linux-shell-scripts.html">http://www.cyberciti.biz/tips/spice-up-your-unix-linux-shell-scripts.html</a></p>

<p><a href="https://techbase.kde.org/Development/Tutorials/Shell_Scripting_with_KDE_Dialogs">https://techbase.kde.org/Development/Tutorials/Shell_Scripting_with_KDE_Dialogs</a></p>

<h3>Remote Control Of Arduino</h3>

<p><a href="http://www.geek-workshop.com/thread-25230-1-1.html">http://www.geek-workshop.com/thread-25230-1-1.html</a></p>

<h3>Processing</h3>

<p><a href="http://open.sina.com.cn/course/id_300/lesson_4094/">http://open.sina.com.cn/course/id_300/lesson_4094/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FRDM-KL02Z Tips(1)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/05/frdm-kl02z-tips-1/"/>
    <updated>2015-11-05T09:53:38+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/05/frdm-kl02z-tips-1</id>
    <content type="html"><![CDATA[<p>Reference Material: <br/>
<a href="http://www.freescale.com/zh-Hans/products/arm-processors/kinetis-cortex-m/l-series/freedom-development-platform-for-the-kinetis-kl02-family:FRDM-KL02Z?tab=In-Depth_Tab">http://www.freescale.com/zh-Hans/products/arm-processors/kinetis-cortex-m/l-series/freedom-development-platform-for-the-kinetis-kl02-family:FRDM-KL02Z?tab=In-Depth_Tab</a></p>

<h3>Minicom</h3>

<p>115200/data-bit: 8/ no parity/stop bit 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CloudStack VR连接数]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/04/cloudstack-vrlian-jie-shu/"/>
    <updated>2015-11-04T10:56:12+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/04/cloudstack-vrlian-jie-shu</id>
    <content type="html"><![CDATA[<h2>All-In-One VR性能测试</h2>

<h3>测试环境</h3>

<h4>硬件</h4>

<p><strong>CPU</strong>: Intel&reg; Core&trade; i7-3770 CPU @ 3.40GHz, 四核八线程。 <br/>
<strong>内存</strong>: 24 G。</p>

<h4>虚拟机网络</h4>

<p><strong>虚拟机网络</strong>: 新建网段为10.82.89.0/24, DHCP范围设置如下，NAT转发外网: <br/>
<img src="http://purplepalmdash.github.io/images/2015_11_04_09_24_37_479x293.jpg" alt="/images/2015_11_04_09_24_37_479x293.jpg" /></p>

<h4>All-In-One 虚拟机</h4>

<p><strong>CPU</strong>: 6 Core, Copy Host CPU Configuration。     <br/>
<strong>内存</strong>: 8 G。
<strong>硬盘</strong>: 200 G。
<strong>系统</strong>: Ubuntu 14.04 x86_64。  <br/>
<strong>CloudStack版本</strong>: 4.5.2。</p>

<h4>CloudStack环境</h4>

<p><strong>Zone</strong>: Advance Zone(PerfZone)。 <br/>
<strong>IP</strong>: 取10.82.89.0/24中DHCP尚未使用的IP地址。    <br/>
<strong>测试机模板</strong>: ubuntu64perftest.qcow2(<a href="http://192.168.0.79/ubuntu64perftest.qcow2">http://192.168.0.79/ubuntu64perftest.qcow2</a>) <br/>
<strong>测试机套餐</strong>: 2 Core, 内存3G。</p>

<h4>拓扑图及说明</h4>

<p><img src="http://purplepalmdash.github.io/images/allinone.jpeg" alt="/images/allinone.jpeg" /></p>

<p>IP地址说明:</p>

<p><strong>All-In-One</strong>:  10.82.89.89   <br/>
<strong>Test Server</strong>: CloudStack实例，NAT后的10.82.89.0/24地址  <br/>
<strong>VR</strong>: CloudStack自动分配的10.82.89.0/24地址  <br/>
<strong>KVM</strong>: All-In-One上运行的虚拟机，绑定8个IP地址, 10.82.89.11/10.82.89.254~10.82.89.247</p>

<h3>测试方法</h3>

<p>Test Server上运行一个可支持多用户长时间在线的服务端程序，并可统计同时在线人数，接受外部
客户端发来的服务请求。</p>

<p>Test Client上运行一个快速发起并保持连接的客户端程序，服务端地址指向Test Server, 服务端
口即Test Server上服务端程序监听的端口。</p>

<p>单个IP最多支持6万多个活动连接，为了提升单台机器能支持的同时在线人数，需要在Test Client
上同时绑定多个网卡，kvm最多支持8个网卡，60000*8=500000, 单台机可以发起并保持的连接数超
过50万。</p>

<p>Server端代码下载地址:  <br/>
<a href="https://gist.github.com/yongboy/5318930/raw/ccf8dc236da30fcf4f89567d567eaf295b363d47/server.c">https://gist.github.com/yongboy/5318930/raw/ccf8dc236da30fcf4f89567d567eaf295b363d47/server.c</a></p>

<p>Client端代码下载地址:</p>

<p><a href="https://gist.github.com/yongboy/5324779/raw/f29c964fcd67fefc3ce66e487a44298ced611cdc/client2.c">https://gist.github.com/yongboy/5324779/raw/f29c964fcd67fefc3ce66e487a44298ced611cdc/client2.c</a></p>

<h3>打开各节点限制</h3>

<p>在All-In-One机器/Test Server/Test Client上，均需要打开以下限制:</p>

<h4>最大文件句柄数</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/security/limits.conf
</span><span class='line'>
</span><span class='line'>* soft nofile 104857
</span><span class='line'>* hard nofile 104857</span></code></pre></td></tr></table></div></figure>


<h4>最大文件数限制</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/sysctl.conf
</span><span class='line'>fs.file-max=1048576
</span><span class='line'># sudo sysctl -p /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>conntrack最大连接数</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/sysctl.conf
</span><span class='line'>net.netfilter.nf_conntrack_max = 6553500
</span><span class='line'># sysctl -p /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure>


<h4>可用端口数</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/sysctl.conf
</span><span class='line'>    net.ipv4.ip_local_port_range= 1024 65535
</span><span class='line'># sysctl -p /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure>


<p>更改完毕后，需要重新启动机器生效，为了使sysctl的配置每次都生效，可以考虑将命令加到启动
项中。</p>

<h3>测试过程</h3>

<h4>启动Server端：</h4>

<p>Server端启动后将监听服务器端的8000端口：</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_04_10_25_54_816x191.jpg" alt="/images/2015_11_04_10_25_54_816x191.jpg" /></p>

<h4>启动Client端：</h4>

<p>单机多网卡</p>

<p>在All-In-One机器上，由下面的命令启动qemu实例,则可以得到8块网卡的虚拟机, 内存大小<code>-m
5120</code>可以调小，一般1024～2048就够:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo qemu-system-x86_64 -net nic,model=virtio,macaddr=52:54:00:12:34:56,vlan=1
</span><span class='line'>-net tap,vlan=1 -net nic,model=virtio,macaddr=52:54:00:12:34:57,vlan=2 -net
</span><span class='line'>tap,vlan=2 -net nic,model=virtio,macaddr=52:54:00:12:34:58,vlan=3 -net
</span><span class='line'>tap,vlan=3 -net nic,model=virtio,macaddr=52:54:00:12:34:59,vlan=4 -net
</span><span class='line'>tap,vlan=4 -net nic,model=virtio,macaddr=52:54:00:12:34:60,vlan=5 -net
</span><span class='line'>tap,vlan=5 -net nic,model=virtio,macaddr=52:54:00:12:34:61,vlan=6 -net
</span><span class='line'>tap,vlan=6 -net nic,model=virtio,macaddr=52:54:00:12:34:62,vlan=7 -net
</span><span class='line'>tap,vlan=7 -net nic,model=virtio,macaddr=52:54:00:12:34:63,vlan=8 -net
</span><span class='line'>tap,vlan=8 -hda ./ubuntu64perftest.qcow2 -m 5120 --enable-kvm</span></code></pre></td></tr></table></div></figure>


<p>启动虚拟机后, 在虚拟机里设置地址(默认只从eth0得到dhcp地址):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat ./ethernet.sh
</span><span class='line'>ifconfig eth1 up
</span><span class='line'>ifconfig eth1 192.168.1.254
</span><span class='line'>ifconfig eth2 up
</span><span class='line'>ifconfig eth2 192.168.1.253
</span><span class='line'>ifconfig eth3 up
</span><span class='line'>ifconfig eth3 192.168.1.252
</span><span class='line'>ifconfig eth4 up
</span><span class='line'>ifconfig eth4 192.168.1.251
</span><span class='line'>ifconfig eth5 up
</span><span class='line'>ifconfig eth5 192.168.1.250
</span><span class='line'>ifconfig eth6 up
</span><span class='line'>ifconfig eth6 192.168.1.249
</span><span class='line'>ifconfig eth7 up
</span><span class='line'>ifconfig eth7 192.168.1.248</span></code></pre></td></tr></table></div></figure>


<p>客户端中，发起海量连接的脚本:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> cat startbomb.sh 
</span><span class='line'>#!/bin/sh
</span><span class='line'>./client2 -h 192.168.1.109 -p 8000 -m 64000 -o
</span><span class='line'>192.168.1.16,192.168.1.254,192.168.1.253,192.168.1.252, 
</span><span class='line'>192.168.1.251,192.168.1.250,192.168.1.249,192.168.1.248</span></code></pre></td></tr></table></div></figure>


<p>调用<code>./startbomb.sh</code>即可开始对Server端发起大量在线连接</p>

<h3>测试截图</h3>

<p>这里记录一次完整的VR因为过多连接数造成内存耗尽自动重启的过程。</p>

<p>在CloudStack的实例上运行server端程序, 此时的输出如下:</p>

<p>VR的<code>top</code>输出:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_11_06_810x293.jpg" alt="/images/2015_11_02_21_11_06_810x293.jpg" /></p>

<p>Server输出:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_13_37_788x205.jpg" alt="/images/2015_11_02_21_13_37_788x205.jpg" /></p>

<p>客户端开始发包连接的过程中:</p>

<p>10W:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_15_11_794x589.jpg" alt="/images/2015_11_02_21_15_11_794x589.jpg" /></p>

<p>20W:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_15_53_841x563.jpg" alt="/images/2015_11_02_21_15_53_841x563.jpg" /></p>

<p>30W:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_16_35_902x622.jpg" alt="/images/2015_11_02_21_16_35_902x622.jpg" /></p>

<p>40W:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_17_19_869x654.jpg" alt="/images/2015_11_02_21_17_19_869x654.jpg" /></p>

<p>44W, VR轰挂:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_18_06_813x689.jpg" alt="/images/2015_11_02_21_18_06_813x689.jpg" /></p>

<p>此时查看VR的重启时间:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_11_02_21_18_56_665x149.jpg" alt="/images/2015_11_02_21_18_56_665x149.jpg" /></p>

<p>可以看到VR启动时间很短，这证明VR由于内存耗尽已经自动重启了。</p>

<h3>应对策略</h3>

<h4>暂时应对</h4>

<p>在VR上对每个进/出 虚拟路由器的IP作连接数限制，TCP/UDP都需要设置。ICMP暂时未作限定:</p>

<p>Iptables规则如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-A PREROUTING -i eth0 -p tcp  -m connlimit --connlimit-above 1000 --connlimit-mask 32 
</span><span class='line'>--connlimit-saddr -j DROP
</span><span class='line'>-A PREROUTING -i eth2 -p tcp  -m connlimit --connlimit-above 1000 --connlimit-mask 32
</span><span class='line'>--connlimit-saddr -j DROP
</span><span class='line'>-A PREROUTING -i eth0 -p udp  -m connlimit --connlimit-above 1000 --connlimit-mask 32
</span><span class='line'>--connlimit-saddr -j DROP
</span><span class='line'>-A PREROUTING -i eth2 -p udp  -m connlimit --connlimit-above 1000 --connlimit-mask 32
</span><span class='line'>--connlimit-saddr -j DROP</span></code></pre></td></tr></table></div></figure>


<p>添加完此规则后，Test Server最多可接受1000个同时在线连接。这时在Client端发起大量连接超过
1000的都会被VR的iptables规则链丢弃。</p>

<h4>潜在问题</h4>

<p>对于过多过快的攻击性连接，VR匹配iptables会造成VR CPU占用率过高。建议采用硬件防火墙来阻
挡这类
攻击。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving CloudStack From VM to Physical Node]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/11/01/moving-cloudstack-from-vm-to-physical-node/"/>
    <updated>2015-11-01T08:52:08+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/11/01/moving-cloudstack-from-vm-to-physical-node</id>
    <content type="html"><![CDATA[<h3>AIM</h3>

<p>To move the All-In-One CloudStack environment from kvm VM based to physical
machine.</p>

<h3>Copy VM Disk</h3>

<h3>Based On Ubuntu15.04</h3>

<p>First get all of the deb file from
<code>http://cloudstack.apt-get.eu/ubuntu/dists/trusty/4.5/pool/</code></p>

<p>Then setup a local repository, edit its <code>/etc/apt/sources.list</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/apt/sources.list
</span><span class='line'>deb http://192.168.1.13/        cloudstackdeb/</span></code></pre></td></tr></table></div></figure>


<p>Problem, For we have setup the ovsbr0 on Ubuntu15.04, how to solve its
networking together with cloudstack?</p>

<h3>Newly installed CentOS7</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking in VR]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/29/thinking-in-vr/"/>
    <updated>2015-10-29T16:00:39+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/29/thinking-in-vr</id>
    <content type="html"><![CDATA[<p>Restriction of the connections.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://www.cnblogs.com/cmt/archive/2013/03/13/2957583.html
</span><span class='line'>http://bbs.m0n0china.org/viewthread.php?tid=16459
</span><span class='line'>http://my.oschina.net/u/1169079/blog/397705</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use AutoHotKey Together With Synergy]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/29/use-autohotkey-together-with-synergy/"/>
    <updated>2015-10-29T09:07:18+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/29/use-autohotkey-together-with-synergy</id>
    <content type="html"><![CDATA[<p>Recently I am using Surface Pro as my second screen, my main screen runs Linux, whose
Copy/Paste could be done via mouse(mouse left key for selecting and copy to clipboard,
middle key for pasting). While the Windows doesn&rsquo;t have the same configuration for
Copy/Paste(You could only use Ctrl+c/Ctrl+v), which makes me feels so low-efficiency.
That&rsquo;s why I use AutoHotKey.</p>

<h3>Installation</h3>

<p>Download the AutoHotKey from  <br/>
<a href="http://www.autohotkey.com/">http://www.autohotkey.com/</a></p>

<p>Install it on Windows 8.1.</p>

<h3>Configuration</h3>

<p>Create a directory named <code>AutoHotKey</code> on <code>C:\</code>, then create a file named
<code>CopyPaste.ahk</code>, then right-click it and select <code>Edit Script</code>, fill in following
content, which is copied from
<a href="http://autohotkey.com/board/topic/44064-copy-on-select-implementation/">http://autohotkey.com/board/topic/44064-copy-on-select-implementation/</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mousedrag_treshold := 20 ; pixels
</span><span class='line'>middleclick_available := 15 ; seconds
</span><span class='line'>
</span><span class='line'>Hotkey mbutton, paste_selection
</span><span class='line'>Hotkey mbutton, off
</span><span class='line'>Hotkey rbutton, cancel_paste
</span><span class='line'>Hotkey rbutton, off
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'>#IfWinNotActive ahk_class ConsoleWindowClass
</span><span class='line'>~lButton::
</span><span class='line'>  MouseGetPos, mousedrag_x, mousedrag_y
</span><span class='line'>  keywait lbutton
</span><span class='line'>  mousegetpos, mousedrag_x2, mousedrag_y2
</span><span class='line'>  if (abs(mousedrag_x2 - mousedrag_x) &gt; mousedrag_treshold
</span><span class='line'>    or abs(mousedrag_y2 - mousedrag_y) &gt; mousedrag_treshold)
</span><span class='line'>  {
</span><span class='line'>    wingetclass class, A
</span><span class='line'>    if (class == "Emacs")
</span><span class='line'>      sendinput !w
</span><span class='line'>    else
</span><span class='line'>      sendinput ^c
</span><span class='line'>    settimer follow_mouse, 100
</span><span class='line'>    settimer cleanup, % middleclick_available * 1000
</span><span class='line'>    hotkey mbutton, on
</span><span class='line'>    hotkey rbutton, on
</span><span class='line'>  }
</span><span class='line'>  return
</span><span class='line'>#IfWinNotActive
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>follow_mouse:
</span><span class='line'>  tooltip copy
</span><span class='line'>  return
</span><span class='line'>  
</span><span class='line'>paste_selection:
</span><span class='line'>  sendinput {lbutton}
</span><span class='line'>  WinGetClass class, A
</span><span class='line'>  if (class == "Emacs")
</span><span class='line'>    SendInput ^y
</span><span class='line'>  else
</span><span class='line'>    SendInput ^v
</span><span class='line'>  gosub cleanup
</span><span class='line'>  return
</span><span class='line'>  
</span><span class='line'>cancel_paste:
</span><span class='line'>  sendinput {rbutton}
</span><span class='line'>  gosub cleanup
</span><span class='line'>  return  
</span><span class='line'>  
</span><span class='line'>cleanup:
</span><span class='line'>  Hotkey mbutton, off
</span><span class='line'>  Hotkey rbutton, off
</span><span class='line'>  SetTimer cleanup, off
</span><span class='line'>  settimer follow_mouse, off
</span><span class='line'>  tooltip
</span><span class='line'>  Return
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>;; clipx
</span><span class='line'>^mbutton::
</span><span class='line'>  sendinput ^+{insert}
</span><span class='line'>  return</span></code></pre></td></tr></table></div></figure>


<p>Now double click it, test its functionality. On Windows, using the real mouse, you will
find the activity are the same as in Linux/Unix X.</p>

<p>But failed integration with Synergy!</p>

<h3>True X-Mouse Gizmo</h3>

<p>Since the AutoHotKey failed with synergy, I have to swith to another method.</p>

<p>Download it from:</p>

<p><a href="http://fy.chalmers.se/~appro/nt/TXMouse/">http://fy.chalmers.se/~appro/nt/TXMouse/</a></p>

<p>Add it into the startup file in Windows 8.</p>

<p>Add the shortlink into <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code>
,then restart the computer, verify the modification.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenStack Liberty安装(1)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/25/openstack-libertyan-zhuang-1/"/>
    <updated>2015-10-25T12:05:58+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/25/openstack-libertyan-zhuang-1</id>
    <content type="html"><![CDATA[<h3>初始化准备</h3>

<p>用Packer.io制作Ubuntu14.04的qcow2文件镜像, 设定磁盘大小为100G, lvm分区.  <br/>
网络: 在virt-manager中制作一个网段为10.0.0.0/24的网段. 所有创建虚拟机的eth0均
加入到此网络中.   <br/>
<img src="http://purplepalmdash.github.io/images/2015_10_25_12_22_24_504x487.jpg" alt="/images/2015_10_25_12_22_24_504x487.jpg" /></p>

<p>To be Continued.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Ceph on Docker]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/23/tips-on-ceph-on-docker/"/>
    <updated>2015-10-23T22:32:17+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/23/tips-on-ceph-on-docker</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>Pull the docker image via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker pull ceph/demo</span></code></pre></td></tr></table></div></figure>


<h3>Run Ceph</h3>

<p>Run the container via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sudo docker run -d --net=host -e MON_IP=192.168.10.190 -e CEPH_NETWORK=192.168.10.0/24
</span><span class='line'>ceph/demo</span></code></pre></td></tr></table></div></figure>


<p>View the docker instance via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'>cbe567594adb        ceph/demo           "/entrypoint.sh"    About an hour ago   Up About an hour                        furious_hopper 
</span><span class='line'># docker exec -it cbe567594adb</span></code></pre></td></tr></table></div></figure>


<h3>Ceph Operation</h3>

<p>View the ceph processes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@monitor:/# ps -ef | grep "ceph"                                                                                                                                 
</span><span class='line'>root         1     0  0 13:16 ?        00:00:00 /usr/bin/python /usr/bin/ceph -w
</span><span class='line'>root        32     1  0 13:16 ?        00:00:01 ceph-mon -i monitor --public-addr 192.168.10.190:6789
</span><span class='line'>root       201     1  0 13:16 ?        00:00:06 ceph-osd -i 0 -k /var/lib/ceph/osd/ceph-0/keyring
</span><span class='line'>root       412     1  0 13:16 ?        00:00:01 ceph-mds --cluster=ceph -i 0
</span><span class='line'>root       470     1  0 13:16 ?        00:00:03 radosgw -c /etc/ceph/ceph.conf -n client.radosgw.gateway -k /var/lib/ceph/radosgw/monitor/keyring --rgw-socket-path= --rgw-frontends=civetweb port=80
</span><span class='line'>root       473     1  0 13:16 ?        00:00:01 /usr/bin/python /usr/bin/ceph-rest-api -n client.admin
</span><span class='line'>root      1703  1557  0 14:37 ?        00:00:00 grep --color=auto ceph</span></code></pre></td></tr></table></div></figure>


<p>View Ceph Status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@monitor:/# ceph -s
</span><span class='line'>    cluster c3470b36-8d03-4dbb-8af4-d4353ea54973
</span><span class='line'>     health HEALTH_OK
</span><span class='line'>     monmap e1: 1 mons at {monitor=192.168.10.190:6789/0}
</span><span class='line'>            election epoch 2, quorum 0 monitor
</span><span class='line'>     mdsmap e5: 1/1/1 up {0=0=up:active}
</span><span class='line'>     osdmap e22: 1 osds: 1 up, 1 in
</span><span class='line'>      pgmap v75: 144 pgs, 11 pools, 6796 bytes data, 70 objects
</span><span class='line'>            3789 MB used, 287 GB / 291 GB avail
</span><span class='line'>                 144 active+clean</span></code></pre></td></tr></table></div></figure>


<p>Create a new user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># radosgw-admin user create --uid="xxxx" --display-name="XXXX YYYY" --email=xxxyyy@gmail.com</span></code></pre></td></tr></table></div></figure>


<p>Remember the output of the <code>access_key</code> and <code>secret_key</code>.</p>

<h3>Configure Ceph</h3>

<p>Install softwares:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get update -y
</span><span class='line'># apt-get install -y python
</span><span class='line'># apt-get install -y python-pip
</span><span class='line'># pip install boto
</span><span class='line'># pip install ipython
</span><span class='line'># pip install s3cmd
</span><span class='line'># apt-get install -y vim</span></code></pre></td></tr></table></div></figure>


<p>Use the <code>list_buckets.py</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat list_buckets.py
</span><span class='line'>import boto
</span><span class='line'>import boto.s3.connection
</span><span class='line'>
</span><span class='line'>access_key =  '5S5YPYC46EVYG9MF0RSR'
</span><span class='line'>secret_key = 'hEcgOMoNOp6jmYnt3G6qqJiT7mV5A8zBR9g6o38Z'
</span><span class='line'>
</span><span class='line'>conn = boto.connect_s3(
</span><span class='line'>        aws_access_key_id = access_key,
</span><span class='line'>        aws_secret_access_key = secret_key,
</span><span class='line'>        host = 'localhost',
</span><span class='line'>        is_secure=False,
</span><span class='line'>        calling_format = boto.s3.connection.OrdinaryCallingFormat(),
</span><span class='line'>        )</span></code></pre></td></tr></table></div></figure>


<p>In ipython, use following commands for create a new bucket:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In [8]: conn.create_bucket("fuck")                                        
</span><span class='line'>Out[8]: &lt;Bucket: fuck&gt;
</span><span class='line'>
</span><span class='line'>In [9]: conn.get_all_buckets()                                                 
</span><span class='line'>Out[9]: [&lt;Bucket: fuck&gt;]</span></code></pre></td></tr></table></div></figure>


<p>Download the s3cfg file from :</p>

<p><a href="https://github.com/tobegit3hub/.s3cfg/blob/master/.s3cfg">https://github.com/tobegit3hub/.s3cfg/blob/master/.s3cfg</a></p>

<p>Also configure its <code>access_key</code> and <code>secret_key</code>, save it in your root
directory, run following commands, you will see the buckets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># s3cmd ls                                                                                                                                             
</span><span class='line'>2015-10-23 13:25  s3://fuck</span></code></pre></td></tr></table></div></figure>


<h3>Mount Ceph In Linux</h3>

<p>In Ubuntu machine, install ceph:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install ceph</span></code></pre></td></tr></table></div></figure>


<p>Get the admin&rsquo;s password(In Ceph Container):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ceph-authtool --print-key /etc/ceph/ceph.client.admin.keyring 
</span><span class='line'>AQAmMypWs06BGxAAQ1rQyFqFJ25xaDye4c9kyQ==</span></code></pre></td></tr></table></div></figure>


<p>Now mount it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mount -t ceph 192.168.10.190:/ /mnt -o name=admin,secret=AQAmMypWs06BGxAAQ1rQyFqFJ25xaDye4c9kyQ==
</span><span class='line'>$ sudo touch /mnt/abc</span></code></pre></td></tr></table></div></figure>


<p>Via <code>ceph -s</code> we could see the <code>pgmap v86</code> changes, which indicates the data
has been written into the ceph.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ToDoThings(1)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/19/todothings-1/"/>
    <updated>2015-10-19T20:40:03+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/19/todothings-1</id>
    <content type="html"><![CDATA[<h3>1. Logsnash/Zabbix</h3>

<p>Use Zabbix for monitoring the CloudStack Agents/Management Node?</p>

<h3>2. OpenStack Liberty</h3>

<p><a href="http://docs.openstack.org/liberty/install-guide-ubuntu/">http://docs.openstack.org/liberty/install-guide-ubuntu/</a></p>

<h3>3. Newly added todoes</h3>

<p>Added todoes issue in .zshrc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias vitodos='cdheroku && vim source/_posts/2015-10-19-todothings-1.markdown'
</span><span class='line'>alias cattodos='cdheroku && cat source/_posts/2015-10-19-todothings-1.markdown'</span></code></pre></td></tr></table></div></figure>


<h3>4. Improve Your Efficiency</h3>

<p><a href="http://embeddedlinux.org.cn/html/xingyexinwen/201510/19-3991.html?bsh_bid=768829175">Improve Linux efficiency</a></p>

<h3>5. BenchMarking</h3>

<p><a href="https://wiki.archlinux.org/index.php/Benchmarking">ArchLinux Tools For Benchmarking</a></p>

<h3>6. Performance Monitoring</h3>

<p>nagios and weixin.</p>

<h3>7. Data Visualization</h3>

<p>Draw air pollution in Graphite?   <br/>
Powermap?</p>

<h3>8. Autossh</h3>

<p>Auto ssh connection for some computer acrossing the internet.</p>

<h3>9. Quickly stack.sh</h3>

<p>I want to write some scripts for quickly setup the O..Stack env.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On VM Performance Test]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/19/on-vm-performance-test/"/>
    <updated>2015-10-19T09:54:45+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/19/on-vm-performance-test</id>
    <content type="html"><![CDATA[<h3>AIM</h3>

<p>To build the testing Framework.</p>

<h3>Reference Material</h3>

<p><a href="http://thesai.org/Downloads/Volume5No5/Paper_16-Performance_Evaluation_of_Private_Clouds.pdf">Paper_16-Performance_Evaluation_of_Private_Clouds.pdf</a></p>

<p><a href="http://www.junauza.com/2012/05/best-system-benchmarking-tools-for.html">http://www.junauza.com/2012/05/best-system-benchmarking-tools-for.html</a></p>

<h3>Software</h3>

<p>Install following software:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># apt-get install -y  libx11-dev libgl1-mesa-dev libxext-dev perl perl-modules make gcc nfs-common
</span><span class='line'>postgresql-9.1 postgresql-contrib-9.1 mbw iperf</span></code></pre></td></tr></table></div></figure>


<h3>CPU</h3>

<p>The following software are introduced for testing CPU Performance:
* Linpack
* Lookbusy</p>

<h4>Linpack</h4>

<p>Note: Only works on INTEL CPU.</p>

<p><a href="http://registrationcenter-download.intel.com/akdlm/irc_nas/2169/l_lpk_p_10.3.4.007.tgz">Linux</a></p>

<p><a href="http://registrationcenter-download.intel.com/akdlm/irc_nas/2169/w_lpk_p_10.3.4.007.zip">Windows</a></p>

<p><a href="http://registrationcenter-download.intel.com/akdlm/irc_nas/2169/m_lpk_p_10.3.4.007.tgz">Mac</a></p>

<p>Linux Steps:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar xvf l_lpk_p_10.3.4.007.tgz
</span><span class='line'>$ cd linpack_10.3.4/benchmarks/linpack
</span><span class='line'>$ ./runme_xeon64</span></code></pre></td></tr></table></div></figure>


<p>You can see the testing result via <code>tail -f lin_xeon64.txt</code>.</p>

<p>Note your CPU&rsquo;s temperature and your system load are changing.</p>

<h4>Lookbusy</h4>

<p><a href="https://www.devin.com/lookbusy/">https://www.devin.com/lookbusy/</a>  <br/>
Download and install it via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wget https://www.devin.com/lookbusy/download/lookbusy-1.4.tar.gz
</span><span class='line'># tar xzvf lookbusy-1.4.tar.gz
</span><span class='line'># cd lookbusy-1.4/
</span><span class='line'># ./configure --prefix=/usr
</span><span class='line'># make && make install
</span><span class='line'># lookbusy</span></code></pre></td></tr></table></div></figure>


<p>Default will add 50% load to each CPU.</p>

<h4></h4>

<h3>Memory</h3>

<h4>Stream</h4>

<p><a href="https://www.cs.virginia.edu/stream/ref.html">https://www.cs.virginia.edu/stream/ref.html</a></p>

<p>Get the source code from:
<a href="https://www.cs.virginia.edu/stream/FTP/Code/">https://www.cs.virginia.edu/stream/FTP/Code/</a></p>

<p>Then compile it and run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># make stream_c.exe
</span><span class='line'># ./stream_c.exe</span></code></pre></td></tr></table></div></figure>


<h3>Disk IO</h3>

<h4>Bonnie++</h4>

<p><a href="http://blog.csdn.net/choice_jj/article/details/8026130">测试工具Bonnie++的使用</a></p>

<h3>Network IO</h3>

<h4>Iperf</h4>

<p>To be added.</p>

<h3>OverAll</h3>

<p>System Level Testing Framework.</p>

<h4>UnixBench</h4>

<p>Download the source file, then run it, and see the result.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wget http://byte-unixbench.googlecode.com/files/UnixBench5.1.3.tgz
</span><span class='line'># tar xvf UnixBench5.1.3.tgz
</span><span class='line'># cd UnixBench
</span><span class='line'># make
</span><span class='line'># ./Run 2&gt;&1 | tee RunResult.txt</span></code></pre></td></tr></table></div></figure>


<h4>LMBench</h4>

<p><a href="http://www.bitmover.com/lmbench/">http://www.bitmover.com/lmbench/</a></p>

<p><a href="http://blog.csdn.net/dianhuiren/article/details/7331777">LM Usage</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CloudStackOnUbuntuIssue]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/18/cloudstackonubuntuissue/"/>
    <updated>2015-10-18T07:34:13+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/18/cloudstackonubuntuissue</id>
    <content type="html"><![CDATA[<h3>前提</h3>

<p>可能我们会碰到这样一种情形，自己的工作机位于某一很复杂的网络环境中，需要在工作
机上搭建出一个网络资源隔离的CloudStack实验环境。而同时我们又希望能最大限度的利
用工作机的性能，尽量让虚拟化中的性能损耗达到最小。那么以下的解决方案可能就是我
们所需要的：物理机上启动一个CloudStack Management的虚拟机，而后在虚拟机的控制
台里将配置好CloudStack Agent的主机加入到CloudStack环境中。而物理机和虚拟机之间
的管理网络为物理机上的一个虚拟网络。这样既做到了硬件资源的最大利用，也有效的杜
绝了本地环境对整个复杂网络环境的影响。</p>

<h3>硬件及网络规划</h3>

<p>物理机: 4核，支持虚拟化， 内存8G，IP地址为192.168.88.0/24网段里的某台机器。   <br/>
虚拟机: 分配2核CPU，内存3G。    <br/>
物理机与虚拟机之间，通过虚拟的网络桥接。地址段被规划为172.16.16.0/24，当然你可
以更改为其他网段。</p>

<h3>物理机准备</h3>

<p>物理机运行Ubuntu 14.04.03 64位版本。</p>

<h4>Root登录权限</h4>

<p>首先打开root的ssh登录权限:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install -y openssh-server
</span><span class='line'>$ sudo vi /etc/ssh/sshd_config
</span><span class='line'>PermitRootLogin yes
</span><span class='line'>$ sudo bash
</span><span class='line'># passwd
</span><span class='line'>Enter new UNIX password: 
</span><span class='line'>Retype new UNIX password: 
</span><span class='line'>passwd: password updated successfully
</span><span class='line'># service ssh restart</span></code></pre></td></tr></table></div></figure>


<p>现在重新登录，即可以使用root直接登录进系统。</p>

<h4>安装软件</h4>

<p>安装所需要的软件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get update
</span><span class='line'># apt-get install virt-manager qemu vim wget git nfs-kernel-server</span></code></pre></td></tr></table></div></figure>


<h4>创建两个网桥</h4>

<p>更改Ubuntu的网络配置文件后，重新启动物理机。这里我们创建了br0和cloudbr0两个网
桥, 注意我们设置cloudbr0的IP地址为172.16.16.1/24。这个网络将作为CloudStack
Management虚拟机与物理机之间的管理网络。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat /etc/network/interfaces
</span><span class='line'>    # This file describes the network interfaces available on your system
</span><span class='line'>    # and how to activate them. For more information, see interfaces(5).
</span><span class='line'>    
</span><span class='line'>    # The loopback network interface
</span><span class='line'>    auto lo
</span><span class='line'>    iface lo inet loopback
</span><span class='line'>    
</span><span class='line'>    # The primary network interface
</span><span class='line'>    auto eth0
</span><span class='line'>    iface eth0 inet manual
</span><span class='line'>    
</span><span class='line'>    auto br0
</span><span class='line'>    iface br0 inet dhcp
</span><span class='line'>    bridge_ports eth0
</span><span class='line'>    
</span><span class='line'>    auto cloudbr0
</span><span class='line'>    iface cloudbr0 inet static
</span><span class='line'>    bridge_ports none
</span><span class='line'>    bridge_fd 5
</span><span class='line'>    bridge_stp off
</span><span class='line'>    bridge_maxwait 1
</span><span class='line'>    address 172.16.16.1
</span><span class='line'>    netmask 255.255.255.0</span></code></pre></td></tr></table></div></figure>


<p>创建完毕后，用<code>ip addr</code>命令将可以看到5个网络，分别为
lo/eth0/br0/cloudbr0/virbr0， 其中virbr0由libvirtd所创建，这里不用涉及。</p>

<h4>配置cloudbr0的NAT转发</h4>

<p>打开内核的转发功能:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/sysctl.conf
</span><span class='line'>net.ipv4.ip_forward=1</span></code></pre></td></tr></table></div></figure>


<p>由于我们的虚拟机需要访问Internet以便安装包，因而我们需要开启cloudbr0上的转发，
配置iptables规则如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -t nat -A POSTROUTING -s \ 
</span><span class='line'>172.16.16.0/24 ! -d 172.16.16.0/24 -j MASQUERADE</span></code></pre></td></tr></table></div></figure>


<p>这样主机端就开启了172.16.16.0/24网段的转发。</p>

<p>保存我们配置的iptables规则:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># iptables-save &gt;/etc/iptables-save
</span><span class='line'># echo "pre-up iptables-restore &lt; /etc/iptables-save"&gt;&gt;/etc/network/interfaces
</span></code></pre></td></tr></table></div></figure>


<h4>准备NFS存储</h4>

<p>NFS存储可以被用作一级存储或者二级存储,我们这里使用它作为二级存储,主存储即一级
存储我们将使用物理机上的本地存储.</p>

<p>首先准备存储共享目录:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mkdir -p /export/primary /export/secondary</span></code></pre></td></tr></table></div></figure>


<p>引出该目录:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat &gt;&gt;/etc/exports &lt;&lt;EOM
</span><span class='line'>/export  *(rw,async,no_root_squash,no_subtree_check)
</span><span class='line'>EOM</span></code></pre></td></tr></table></div></figure>


<p>在指定端口配置NFS的statd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cp /etc/default/nfs-common /etc/default/nfs-common.orig
</span><span class='line'># sed -i '/NEED_STATD=/ a NEED_STATD=yes' /etc/default/nfs-common
</span><span class='line'># sed -i '/STATDOPTS=/ a STATDOPTS="--port 662 \
</span><span class='line'>--outgoing-port 2020"' /etc/default/nfs-common
</span><span class='line'># diff -du /etc/default/nfs-common.orig /etc/default/nfs-common</span></code></pre></td></tr></table></div></figure>


<p>配置lockd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat &gt;&gt; /etc/modprobe.d/lockd.conf &lt;&lt;EOM
</span><span class='line'> options lockd nlm_udpport=32769 nlm_tcpport=32803
</span><span class='line'> EOM</span></code></pre></td></tr></table></div></figure>


<p>重启nfs server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service nfs-kernel-server restart</span></code></pre></td></tr></table></div></figure>


<h4>网络名配置</h4>

<p>配置物理机的网络名如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/hostname
</span><span class='line'>physicalnode
</span><span class='line'># vim /etc/hosts
</span><span class='line'>127.0.0.1       localhost
</span><span class='line'>172.16.16.1     physicalnode
</span><span class='line'>172.16.16.2     cloudstackmgmt
</span><span class='line'>
</span><span class='line'># The following lines are desirable for IPv6 capable hosts
</span><span class='line'>::1     localhost ip6-localhost ip6-loopback
</span><span class='line'>ff02::1 ip6-allnodes
</span><span class='line'>ff02::2 ip6-allrouters
</span></code></pre></td></tr></table></div></figure>


<h4>创建CloudStack Management虚拟机</h4>

<p>创建一台Ubuntu 14.04 64位虚拟机，特别注意的是其网络设置， 在virt-manager中，手
动选择如下：</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_08_16_55_654x246.jpg" alt="/images/2015_10_18_08_16_55_654x246.jpg" /></p>

<p>这样虚拟机会选择将自己桥接到物理机上的cloudbr0接口。这时候如果在物理机运行
<code>brctl show</code>可以看到如下结果:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># brctl show
</span><span class='line'>bridge name     bridge id               STP enabled     interfaces
</span><span class='line'>br0             8000.52540002d56f       no              eth0
</span><span class='line'>cloudbr0                8000.fe54004d6663       no              vnet0
</span><span class='line'>virbr0          8000.000000000000       yes</span></code></pre></td></tr></table></div></figure>


<p>虚拟机启动完毕后是没有IP地址的，因为cloudbr0上没有提供dhcp服务，我们可以手动配
置IP地址如下, 这里我们把虚拟机的IP地址配置为172.16.16.2:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/network/interfaces
</span><span class='line'># This file describes the network interfaces available on your system
</span><span class='line'># and how to activate them. For more information, see interfaces(5).
</span><span class='line'>
</span><span class='line'># The loopback network interface
</span><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'># The primary network interface
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet static
</span><span class='line'>address 172.16.16.2
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 172.16.16.1
</span><span class='line'>dns-nameservers 223.5.5.5</span></code></pre></td></tr></table></div></figure>


<p>配置完IP地址后，重启后可以验证是否连接到Internet.</p>

<h3>虚拟机配置</h3>

<p>我们先配置好CloudStack Management虚拟机, 而后再将物理机加入到CloudStack虚拟机
管理网络里.</p>

<h4>开启root登录</h4>

<p>步骤和上面物理机上开启root登录一样.</p>

<h4>安装源配置</h4>

<p>预先取得用于Ubuntu 14.04 CloudStack环境的安装包, 建立本地源,而后添加为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/apt/sources.list
</span><span class='line'>.....
</span><span class='line'>deb http://192.168.1.13/iso/    cloudstackdeb/</span></code></pre></td></tr></table></div></figure>


<h4>安装包</h4>

<p>安装CloudStack Management节点所需的包如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get update
</span><span class='line'># apt-get install vim wget openntpd cloudstack-management mysql-server</span></code></pre></td></tr></table></div></figure>


<p>注意在安装mysql的时候,需要指定root用户所需的管理密码,这个密码会在后面配置
CloudStack时被用到.</p>

<h4>主机名配置</h4>

<p>配置主机名:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/hostname 
</span><span class='line'>CloudStackMgmt</span></code></pre></td></tr></table></div></figure>


<p>配置FQDN所需的主机名:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/hosts
</span><span class='line'>127.0.0.1       localhost
</span><span class='line'>172.16.16.1     physicalnode
</span><span class='line'>172.16.16.2     cloudstackmgmt
</span><span class='line'>
</span><span class='line'># The following lines are desirable for IPv6 capable hosts
</span><span class='line'>::1     localhost ip6-localhost ip6-loopback
</span><span class='line'>ff02::1 ip6-allnodes
</span><span class='line'>ff02::2 ip6-allrouters</span></code></pre></td></tr></table></div></figure>


<p>重启后验证是否被设置正确:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@cloudstackmgmt:~# hostname
</span><span class='line'>cloudstackmgmt
</span><span class='line'>root@cloudstackmgmt:~# hostname --fqdn
</span><span class='line'>cloudstackmgmt</span></code></pre></td></tr></table></div></figure>


<h4>创建数据库</h4>

<p>创建CloudStack所需的配置文件,并重启mysql服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@cloudstackmgmt:~# cat /etc/mysql/conf.d/cloudstack.cnf 
</span><span class='line'>    [mysqld]
</span><span class='line'>    innodb_rollback_on_timeout=1
</span><span class='line'>    innodb_lock_wait_timeout=600
</span><span class='line'>    max_connections=350
</span><span class='line'>    log-bin=mysql-bin
</span><span class='line'>    binlog-format = 'ROW'
</span><span class='line'>root@cloudstackmgmt:~# service mysql restart
</span><span class='line'>    mysql stop/waiting
</span><span class='line'>    mysql start/running, process 5812</span></code></pre></td></tr></table></div></figure>


<p>创建CloudStack所需的数据库:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@cloudstackmgmt:~# cloudstack-setup-databases \
</span><span class='line'>    cloud:engine@localhost \
</span><span class='line'>    --deploy-as=root:xxxxxx \
</span><span class='line'>    -e file -m mymskey44 -k mydbkey00</span></code></pre></td></tr></table></div></figure>


<p>参数说明如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mysql root 密码: xxxxxxx
</span><span class='line'># cloud user 密码: engine
</span><span class='line'># management_server_key: mymskey44
</span><span class='line'># database_key: mydbkey00</span></code></pre></td></tr></table></div></figure>


<h4>安装CloudStack系统虚拟机模板</h4>

<p>加载NFS共享目录到本地,而后用以下命令安装预先下载好的kvm系统虚拟机所需的模板文
件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mount -t nfs 172.16.16.1:/export/secondary /mnt
</span><span class='line'># /usr/share/cloudstack-common/scripts/storage/secondary/cloud-install-sys-tmplt \
</span><span class='line'>-m /mnt -u http://192.168.1.13/iso/systemvm64template-4.5-kvm.qcow2.bz2  -h \
</span><span class='line'>kvm -F
</span><span class='line'># umount /mnt</span></code></pre></td></tr></table></div></figure>


<h4>初始化配置CloudStack</h4>

<p>打开浏览器访问<a href="http://172.16.16.2:8080/client">http://172.16.16.2:8080/client</a></p>

<p>如果碰到以下错误, 则看后面的解决步骤:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_09_24_35_421x225.jpg" alt="/images/2015_10_18_09_24_35_421x225.jpg" /></p>

<p>关闭tomcat6服务后重启cloudstack-management服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service tomcat6 stop
</span><span class='line'># service cloudstack-management restart</span></code></pre></td></tr></table></div></figure>


<p>下面的Workaround可以每次重启时自动重启该服务:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># crontab -e
</span><span class='line'>@reboot /bin/RestartCloudStack.sh
</span><span class='line'># vim /bin/RestartCloudStack.sh
</span><span class='line'>service tomcat6 stop && service cloudstack-management start</span></code></pre></td></tr></table></div></figure>


<p>我们要更改CloudStack使用本地存储,并更改其镜像下载地址:  <br/>
本地存储:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_09_33_24_669x263.jpg" alt="/images/2015_10_18_09_33_24_669x263.jpg" /></p>

<p>镜像下载地址:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_09_35_09_774x233.jpg" alt="/images/2015_10_18_09_35_09_774x233.jpg" /></p>

<p>更改完毕后,<code>service cloudstack-management restart</code>重启服务</p>

<h3>添加CloudStack Agent</h3>

<h4>物理机端配置</h4>

<p>在物理机上,安装和配置CloudStack Agent以及libvirtd, 同样需要配置好本地
CloudStack安装源:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get install cloudstack-agent</span></code></pre></td></tr></table></div></figure>


<p>配置libvirtd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp /etc/libvirt/libvirtd.conf /etc/libvirt/libvirtd.conf.orig
</span><span class='line'>
</span><span class='line'>$ sed -i '/#listen_tls = 0/ a listen_tls = 0' /etc/libvirt/libvirtd.conf
</span><span class='line'>$ sed -i '/#listen_tcp = 1/ a listen_tcp = 1' /etc/libvirt/libvirtd.conf
</span><span class='line'>$ sed -i '/#tcp_port = "16509"/ a tcp_port = "16509"' /etc/libvirt/libvirtd.conf
</span><span class='line'>$ sed -i '/#auth_tcp = "sasl"/ a auth_tcp = "none"' /etc/libvirt/libvirtd.conf
</span><span class='line'>$ diff -du /etc/libvirt/libvirtd.conf.orig /etc/libvirt/libvirtd.conf</span></code></pre></td></tr></table></div></figure>


<p>Patch libvirt-bin.conf:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp /etc/default/libvirt-bin /etc/default/libvirt-bin.orig
</span><span class='line'>$ sed -i -e 's/libvirtd_opts="-d"/libvirtd_opts="-d -l"/' /etc/default/libvirt-bin
</span><span class='line'>$ diff -du /etc/default/libvirt-bin.orig /etc/default/libvirt-bin
</span><span class='line'>$ service libvirt-bin restart</span></code></pre></td></tr></table></div></figure>


<p>Patch qemu.conf以监听所有端口:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp /etc/libvirt/qemu.conf /etc/libvirt/qemu.conf.orig
</span><span class='line'>$ sed -i '/#vnc_listen = "0.0.0.0"/ a vnc_listen = "0.0.0.0"' /etc/libvirt/qemu.conf
</span><span class='line'>$ diff -du /etc/libvirt/qemu.conf.orig /etc/libvirt/qemu.conf
</span><span class='line'>$ service libvirt-bin restart</span></code></pre></td></tr></table></div></figure>


<p>关闭AppArmor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ln -s /etc/apparmor.d/usr.sbin.libvirtd /etc/apparmor.d/disable/
</span><span class='line'>$ ln -s /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper /etc/apparmor.d/disable/
</span><span class='line'>$ apparmor_parser -R /etc/apparmor.d/usr.sbin.libvirtd
</span><span class='line'>$ apparmor_parser -R /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper
</span><span class='line'>$ service libvirt-bin restart</span></code></pre></td></tr></table></div></figure>


<p>配置防火墙并打开以下端口:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ufw allow proto tcp from any to any port 22
</span><span class='line'>$ ufw allow proto tcp from any to any port 1798
</span><span class='line'>$ ufw allow proto tcp from any to any port 16509
</span><span class='line'>$ ufw allow proto tcp from any to any port 5900:6100
</span><span class='line'>$ ufw allow proto tcp from any to any port 49152:49216</span></code></pre></td></tr></table></div></figure>


<h4>配置CloudStack</h4>

<p>访问<code>http://172.16.16.2:8080/client</code>, 点击<code>I have used CloudStack before, skip
this guide</code>.</p>

<p>Infrastructure -> Zones(View All), 在点开的页面里,点击<code>Add Zone</code>.</p>

<p>选择<code>Basic</code>, Next</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_10_20_49_521x551.jpg" alt="/images/2015_10_18_10_20_49_521x551.jpg" /></p>

<p>选择本地存储,Next:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_10_21_48_484x289.jpg" alt="/images/2015_10_18_10_21_48_484x289.jpg" /></p>

<p>跳过配置网络后, 配置Pod IP:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_10_23_02_474x419.jpg" alt="/images/2015_10_18_10_23_02_474x419.jpg" /></p>

<p>Guest Traffic配置:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_10_24_04_477x337.jpg" alt="/images/2015_10_18_10_24_04_477x337.jpg" /></p>

<p>Cluster名字为:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_10_25_05_504x207.jpg" alt="/images/2015_10_18_10_25_05_504x207.jpg" /></p>

<p>添加Host:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_10_26_18_469x345.jpg" alt="/images/2015_10_18_10_26_18_469x345.jpg" /></p>

<p>添加二级存储:</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_18_10_27_50_501x341.jpg" alt="/images/2015_10_18_10_27_50_501x341.jpg" /></p>

<p>点击<code>Enable Zone</code>后可以激活该Zone.</p>

<p>等待系统虚拟机启动完毕后就可以使用了.</p>

<h3>已知问题</h3>

<p>CloudStack Agent启动时, 会添加iptables规则,这会造成我们前面加入的转发链失效.</p>

<p>解决方案: 手动运行命令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -t nat -A POSTROUTING -s 172.16.16.0/24 ! -d 172.16.16.0/24 -j \ 
</span><span class='line'>MASQUERADE && iptables -t filter -I FORWARD -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>这将使能转发.从而172.16.16.0/24网段的机器能上网.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Setting Virtual Machine Networking]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/17/tips-on-setting-virtual-machine-networking/"/>
    <updated>2015-10-17T08:11:29+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/17/tips-on-setting-virtual-machine-networking</id>
    <content type="html"><![CDATA[<h3>目的</h3>

<p>主要涉及到CloudStack的网络模型，最近在搭建一个环境时有诸多不了解，索性开始做实
验，在虚拟机里验证虚拟机的网络模型。</p>

<h3>环境准备</h3>

<p>内存 16G 的嵌套虚拟机一台，安装<code>Ubuntu 14.04 x86_64</code>版本。 安装完毕后，开启桌
面环境Xubuntu，及安装virt-manager等常用的管理虚拟机的组件。</p>

<p>网络配置如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /etc/network/interfaces
</span><span class='line'>    # The loopback network interface
</span><span class='line'>    auto lo
</span><span class='line'>    iface lo inet loopback
</span><span class='line'>    
</span><span class='line'>    # The primary network interface
</span><span class='line'>    auto eth0
</span><span class='line'>    iface eth0 inet manual
</span><span class='line'>    
</span><span class='line'>    auto br0
</span><span class='line'>    iface br0 inet dhcp
</span><span class='line'>    bridge_ports eth0
</span><span class='line'>    
</span><span class='line'>    auto isolationbr
</span><span class='line'>    iface isolationbr inet static
</span><span class='line'>    bridge_ports none
</span><span class='line'>    bridge_fd 5
</span><span class='line'>    bridge_stp off
</span><span class='line'>    bridge_maxwait 1
</span><span class='line'>    address 172.16.0.1
</span><span class='line'>    netmask 255.255.0.0</span></code></pre></td></tr></table></div></figure>


<p>这里我们将eth0桥接到br0，并建立一个物理上隔绝的网桥isolationbr, 手动配置其地址
为172.16.0.1/16。</p>

<p>开启嵌套虚拟机的内核包转发功能:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/sysctl.conf
</span><span class='line'>net.ipv4.ip_forward=1
</span><span class='line'># sysctl -w net.ipv4.ip_forward=1
</span><span class='line'># reboot</span></code></pre></td></tr></table></div></figure>


<p>重启后验证内核包转发功能:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat /proc/sys/net/ipv4/ip_forward 
</span><span class='line'>1
</span><span class='line'># sysctl -p
</span><span class='line'>net.ipv4.ip_forward = 1</span></code></pre></td></tr></table></div></figure>


<h3>验证网桥1</h3>

<p>用已经创建好的qcow2文件创建一台虚拟机，选择网络配置如下：</p>

<p><img src="http://purplepalmdash.github.io/images/2015_10_17_08_47_08_808x488.jpg" alt="/images/2015_10_17_08_47_08_808x488.jpg" /></p>

<p>注意我们将虚拟机的第一块网卡桥接到我们刚才创建的isolationbr网桥上，当然这时候
虚拟机启动时是没有IP地址的，我们手动配置如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /etc/network/interfaces
</span><span class='line'>    # The primary network interface
</span><span class='line'>    auto eth0
</span><span class='line'>    iface eth0 inet static
</span><span class='line'>    address 172.16.0.2
</span><span class='line'>    netmask 255.255.0.0
</span><span class='line'>    gateway 172.16.0.1</span></code></pre></td></tr></table></div></figure>


<p>重新启动虚拟机后，我们可以ping通嵌套虚拟机<code>172.16.0.1</code>但是无法ping通局域网内其
他机器。</p>

<h3>验证转发</h3>

<p>在嵌套虚拟机上，打开iptables的转发规则即可实现创建出的虚拟机与Internet的连接:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -t nat -A POSTROUTING -s 172.16.0.0/16 ! -d 172.16.0.0/16 -j
</span><span class='line'>MASQUERADE</span></code></pre></td></tr></table></div></figure>


<p>虚拟机上，ping外网地址:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ping 223.5.5.5
</span><span class='line'>PING 223.5.5.5 (223.5.5.5) 56(84) bytes of data.
</span><span class='line'>64 bytes from 223.5.5.5: icmp_seq=1 ttl=50 time=37.1 ms
</span><span class='line'>64 bytes from 223.5.5.5: icmp_seq=2 ttl=50 time=35.4 ms
</span><span class='line'>64 bytes from 223.5.5.5: icmp_seq=3 ttl=50 time=35.6 ms</span></code></pre></td></tr></table></div></figure>


<h3>存储转发规则</h3>

<p>Ubuntu14.04可以用下列命令将iptables设置的规则永久保存，每次开机启动:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables-save&gt;/etc/iptables.rules
</span><span class='line'># vim /etc/network/interfaces
</span><span class='line'>  pre-up iptables-restore &lt; /etc/iptables.rules</span></code></pre></td></tr></table></div></figure>


<p>这样在重启宿主机后，我们设置的转发规则依然生效。</p>

<p>如果需要动态配置IP地址，则启动嵌套虚拟机端的dhcpd或者dnsmasq服务即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use OpenWRT Router for Lan Forwarding]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/15/use-openwrt-router-for-lan-forwarding/"/>
    <updated>2015-10-15T11:50:28+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/15/use-openwrt-router-for-lan-forwarding</id>
    <content type="html"><![CDATA[<h3>USB Ethernet</h3>

<p>Insert the USB Ethernet Dongle into the Ubuntu14.04, it will be automatically
recognized and initialized.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dmesg | tail 
</span><span class='line'>    [10323.307662] asix 2-2.2:1.0 eth1: register 'asix' at usb-0000:00:1d.7-2.2, ASIX
</span><span class='line'>    AX88772B USB 2.0 Ethernet, 84:xx:xx:xx:xx
</span><span class='line'>    [10323.307704] usbcore: registered new interface driver asix
</span><span class='line'>    [10324.285425] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready
</span><span class='line'>$ ifconfig eth1
</span><span class='line'>    eth1      Link encap:Ethernet  HWaddr 84:xx:xx:xx:</span></code></pre></td></tr></table></div></figure>


<p>Be care to see the udev rules definition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/udev/rules.d/70-persistent-net.rules 
</span><span class='line'>
</span><span class='line'># USB device 0x:0x (asix)
</span><span class='line'>SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="84:xx:xx:xx:xx",
</span><span class='line'>ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"</span></code></pre></td></tr></table></div></figure>


<h3>IP Configuration</h3>

<p>Add the following items into the network configuration file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/network/interfaces 
</span><span class='line'>    # usb network eth1
</span><span class='line'>    allow-hotplug eth1
</span><span class='line'>    iface eth1 inet static
</span><span class='line'>    address 10.0.80.1
</span><span class='line'>    netmask 255.255.255.0</span></code></pre></td></tr></table></div></figure>


<p>Now restart the network, to see the ethernet has been enabled.</p>

<h3>DHCPD Configuration</h3>

<p>Add following configuration to the /etc/dhcp/dhcpd.conf:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>### this is for USB NET
</span><span class='line'>
</span><span class='line'>subnet
</span><span class='line'>10.0.80.0 netmask 255.255.255.0 {
</span><span class='line'># --- default gateway
</span><span class='line'>option routers
</span><span class='line'>10.0.80.1;
</span><span class='line'># --- Netmask
</span><span class='line'>option subnet-mask
</span><span class='line'>255.255.255.0;
</span><span class='line'># --- Broadcast Address
</span><span class='line'>option broadcast-address
</span><span class='line'>10.0.80.255;
</span><span class='line'># --- Domain name servers, tells the clients which DNS servers to use.
</span><span class='line'>option domain-name-servers
</span><span class='line'>223.5.5.5,180.76.76.76;
</span><span class='line'>option time-offset 0;
</span><span class='line'>range 10.0.80.3 10.0.80.13;
</span><span class='line'>default-lease-time 1209600;
</span><span class='line'>max-lease-time 1814400;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>IPtables and dhcpd</h3>

<p>Add following items into the ~/.config/awesome/rc.lua</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>autorunApps =
</span><span class='line'>{
</span><span class='line'>--.........
</span><span class='line'>"blueman-manager",
</span><span class='line'>"fcitx",
</span><span class='line'>"/home/dash/Downloads/what/whatpulse",
</span><span class='line'>-- "pidgin",
</span><span class='line'>"sudo iptables -t nat -A POSTROUTING -s 10.0.70.0/24 ! -d 10.0.70.0/24  -j MASQUERADE",
</span><span class='line'>"sudo iptables -t nat -A POSTROUTING -s 10.0.80.0/24 ! -d 10.0.80.0/24 -j MASQUERADE" 
</span><span class='line'>"sudo dhcpd wlan0 eth1",</span></code></pre></td></tr></table></div></figure>


<p>Now everytime we reboot the system, it will automatically start the dhcpd server and
let OpenWRT as the access Point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for 20151014]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/14/tips-for-20151014/"/>
    <updated>2015-10-14T21:20:22+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/14/tips-for-20151014</id>
    <content type="html"><![CDATA[<p>Things to be done in tomorrow:</p>

<p>1. Install CloudStack On Ubuntu:  <br/>
<a href="http://www.greenhills.co.uk/2015/02/23/cloudstack-4.4-single-server-on-ubuntu-14.04.1-with-kvm.html">http://www.greenhills.co.uk/2015/02/23/cloudstack-4.4-single-server-on-ubuntu-14.04.1-with-kvm.html</a></p>

<p>2. Create local repository for specified DEBs:  <br/>
<a href="http://askubuntu.com/questions/170348/how-to-make-my-own-local-repository">http://askubuntu.com/questions/170348/how-to-make-my-own-local-repository</a></p>

<p><a href="http://linuxconfig.org/easy-way-to-create-a-debian-package-and-local-package-repository">http://linuxconfig.org/easy-way-to-create-a-debian-package-and-local-package-repository</a></p>

<p><a href="http://unix.stackexchange.com/questions/87130/how-to-quickly-create-a-local-apt-repository-for-random-packages-using-a-debian">http://unix.stackexchange.com/questions/87130/how-to-quickly-create-a-local-apt-repository-for-random-packages-using-a-debian</a></p>

<p>3. All-In-One CloudStack Environment On Ubuntu14.04.</p>

<p>4. OpenWRT Based Wireless AP, and Synergy for Surface Pro and WorkingMachine.    <br/>
<a href="https://synergy-project.org/nightly">https://synergy-project.org/nightly</a></p>

<p>Use the nightly built synergy you could got the keyboard sharing working well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Cloud-Init and CloudStack(2)]]></title>
    <link href="http://purplepalmdash.github.io/blog/2015/10/14/tips-on-cloud-init-and-cloudstack/"/>
    <updated>2015-10-14T11:36:51+08:00</updated>
    <id>http://purplepalmdash.github.io/blog/2015/10/14/tips-on-cloud-init-and-cloudstack</id>
    <content type="html"><![CDATA[<h3>Cloudmonkey Resize</h3>

<p>First deploy the VM in <code>stopped</code> status:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(local) mycloudmonkey&gt; deploy virtualmachine startvm=false
</span><span class='line'>serviceofferingid=683f31f8-a939-468e-b4de-4512a8ccff8e
</span><span class='line'>templateid=13fb2961-533e-4a7d-80f9-21d860269aad
</span><span class='line'>zoneid=78509dc3-c828-429c-8154-9fffbc09384c
</span><span class='line'>networkids=7c6e7e6b-6aa2-4f95-a835-8d18bf930061 name=testuserdata50G userdata='...`
</span></code></pre></td></tr></table></div></figure>


<p>Now resize the root volume into 50G size:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>deploy virtualmachine serviceofferingid=ff775183-282b-48d7-b08e-eff51fef7683
</span><span class='line'>templateid=67ca66ea-b021-4f91-ac8c-ff95f2576c9d
</span><span class='line'>zoneid=1a258852-831c-4612-94f4-2551a98667bb name=testuserdata
</span><span class='line'>userdata='Q29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7IGJvdW5kYXJ5PSI9PT09PT09PT09PT09PT0xOTk5MDU5OTcyMjA5ODg1MjY2PT0iCk1JTUUtVmVyc2lvbjogMS4wCgotLT09PT09PT09PT09PT09PTE5OTkwNTk5NzIyMDk4ODUyNjY9PQpDb250ZW50LVR5cGU6IHRleHQveC1zaGVsbHNjcmlwdDsgY2hhcnNldD0idXMtYXNjaWkiCk1JTUUtVmVyc2lvbjogMS4wCkNvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmc6IDdiaXQKQ29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudDsgZmlsZW5hbWU9ImhlbGxvX3dvcmxkLnNoIgoKIyEvYmluL2Jhc2gKZWNobyAiaGVsbG8gd29ybGQhIiA+PiAvcm9vdC90ZXN0CgotLT09PT09PT09PT09PT09PTE5OTkwNTk5NzIyMDk4ODUyNjY9PQpDb250ZW50LVR5cGU6IHRleHQvY2xvdWQtY29uZmlnOyBjaGFyc2V0PSJ1cy1hc2NpaSIKTUlNRS1WZXJzaW9uOiAxLjAKQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZzogN2JpdApDb250ZW50LURpc3Bvc2l0aW9uOiBhdHRhY2htZW50OyBmaWxlbmFtZT0ibXktdXNlci1kYXRhIgoKI2Nsb3VkLWNvbmZpZwpncm93cGFydDoKICBtb2RlOiBhdXRvCmNocGFzc3dkOiB7IGV4cGlyZTogRmFsc2UgfQpzc2hfcHdhdXRoOiBUcnVlCgpzc2hfYXV0aG9yaXplZF9rZXlzOgogLSBzc2gtcnNhIEFBQUFCM056YUMxeWMyRUFBQUFEQVFBQkFBQUJBUUNzMFA4aFNCM05qN2tmd2lRT01PQ0Z2RXVqd3JLZjVuUFdmdzdzbmplVzd3TnhCYi9pTHhqbGxIK0tJdjdpS0dRaGI5WGtpZ3dXelhjdktSRk9OQTF0UU5CUHBsUE9RQXhHYUpoYzcxYlhZTVRabWsxcmZ5L0U4bUZIQmJ3U0trdm04Z3oxaFVqQWFITHdiZ21iaUE3eUNDUkVXbVR1SWpudm1FZnJXYU92WERRZFFPb2RkSzFhZThKM3BnRUNtQ21mRldrQmR3Y1JaN05jTUxBSkVkYTNpYWtJbWdaR2NqTWNCc1hjUUNOcjN1RGlKbERvc1V6Mjg4L3grTnZteTlzcHZnc2x4RXVUV0VQWFRGY1l5eVBrUHdkTnlpQm5TaWFoZTExcUdUZkk0Z2IyWllEb3JDZU5Ca1QxdkVaY0psL1JqT3NKRUFXT04rbno3Nm16MmdhZCByb290QHItOS1WTSAKCnRpbWV6b25lOiBBc2lhL0Nob25ncWluZwoKLS09PT09PT09PT09PT09PT0xOTk5MDU5OTcyMjA5ODg1MjY2PT0tLQo='</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
</feed>
